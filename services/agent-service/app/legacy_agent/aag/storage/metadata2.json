[{"path": "/schema/", "method": "GET", "details": {"operationId": "schema_retrieve", "description": "This endpoint provides access to the OpenAPI 3 schema for this API. Developers can retrieve the full API specification in either YAML or JSON format, allowing for content negotiation to select the desired output. Providing the schema enables integration with various tools and platforms, as well as facilitates understanding and consumption of the API capabilities.", "parameters": [{"in": "query", "name": "format", "schema": {"type": "string", "enum": ["json", "yaml"]}}, {"in": "query", "name": "lang", "schema": {"type": "string", "enum": ["af", "ar", "ar-dz", "ast", "az", "be", "bg", "bn", "br", "bs", "ca", "cs", "cy", "da", "de", "dsb", "el", "en", "en-au", "en-gb", "eo", "es", "es-ar", "es-co", "es-mx", "es-ni", "es-ve", "et", "eu", "fa", "fi", "fr", "fy", "ga", "gd", "gl", "he", "hi", "hr", "hsb", "hu", "hy", "ia", "id", "ig", "io", "is", "it", "ja", "ka", "kab", "kk", "km", "kn", "ko", "ky", "lb", "lt", "lv", "mk", "ml", "mn", "mr", "my", "nb", "ne", "nl", "nn", "os", "pa", "pl", "pt", "pt-br", "ro", "ru", "sk", "sl", "sq", "sr", "sr-latn", "sv", "sw", "ta", "te", "tg", "th", "tk", "tr", "tt", "udm", "uk", "ur", "uz", "vi", "zh-hans", "zh-hant"]}}], "tags": ["schema"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}, {}], "responses": {"200": {"content": {"application/vnd.oai.openapi": {"schema": {"type": "object", "additionalProperties": {}}}, "application/yaml": {"schema": {"type": "object", "additionalProperties": {}}}, "application/vnd.oai.openapi+json": {"schema": {"type": "object", "additionalProperties": {}}}, "application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "summary": "", "additional_info": "The 'format' query parameter can be used to explicitly request a specific format. The 'lang' parameter, though present, does not have a clearly defined purpose from the available context regarding schema retrieval. The API endpoint generally supports content negotiation for schema representation, with `application/vnd.oai.openapi` for YAML and `application/vnd.oai.openapi+json` for JSON. The documentation contexts primarily discuss general API configuration, authentication types, and adding parameters (header/query), which are broader aspects of API usage rather than specific details about this /schema/ endpoint itself. There are no known common use cases or potential gotchas specific to retrieving the API schema within the provided context."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Integrator", "API Consumer"], "primary_use_case": "To provide developers and integration tools with the OpenAPI 3 schema of the API in either YAML or JSON format, facilitating understanding, consumption, and integration of the API capabilities."}, "content_for_embedding": "This endpoint allows retrieval of the OpenAPI 3 schema for the API in YAML or JSON format, supporting content negotiation. It is crucial for enabling integration with various tools and platforms and for understanding the API's capabilities. The 'format' query parameter can explicitly request a specific format, while the 'lang' parameter's purpose is unclear for schema retrieval. The API supports content negotiation for schema representation, specifically `application/vnd.oai.openapi` for YAML and `application/vnd.oai.openapi+json` for JSON. This endpoint is fundamental for API configuration and consumption.", "semantic_keywords": ["API schema", "OpenAPI", "API definition"], "ontology_classification": {"features": ["knowledge_access_&_utilization", "report_export_capabilities", "api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/api-token/", "method": "POST", "details": {"operationId": "ux_api_token_create", "description": "This endpoint serves as the primary method for clients to obtain an application authentication token (APP AUTH TOKEN). Its core function is to facilitate secure access to the system by issuing a token, and crucially, it also ensures the user's last login timestamp is updated upon successful authentication. While the provided specification indicates an example usage with `username` and `password`, the broader context suggests that authentication mechanisms like API Keys or Basic Auth might be involved in the overall API ecosystem, aligning with the general process of generating and managing API tokens.", "summary": "Get the auth token.", "tags": ["Authentication"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"AuthTokenExample": {"value": {"username": "admin", "password": "YWRtaW4xMjM="}, "summary": "Auth Token Example"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "The `example_usage` shows `username` and `password` as credentials for obtaining the token, where the password should be base64 encoded. Although specific parameters are not detailed in the `parameters` field of the provided JSON, it is implied that these credentials are part of the request body. The process of managing and creating API tokens within the larger system, as hinted by context ranks 4 and 5, involves navigating to 'API Tokens' sections and potentially generating new tokens with labels. Developers should ensure the correct authentication type (e.g., Basic Auth as per context rank 7) is used when making requests to this endpoint. The 'last_login update' feature is critical for tracking user activity and security. While not directly tied to this endpoint's parameters, the contextual information around API authorization and consent screens (ranks 1, 2, 3) implies that token request and management are part of a larger security and OAuth configuration process within the application.", "parameters": [{"name": "username", "in": "body", "description": "Inferred parameter: username", "required": true, "schema": {"type": "string"}}, {"name": "password", "in": "body", "description": "Inferred parameter: password", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator"], "primary_use_case": "To provide a secure method for clients to obtain an application authentication token (APP AUTH TOKEN) for system access, and to update the user's last login timestamp upon successful authentication."}, "content_for_embedding": "This API endpoint, `POST /ux/api-token/`, is used to obtain an application authentication token (APP AUTH TOKEN) for secure access to the system. It requires a `username` and a base64-encoded `password` in the request body. Upon successful authentication, the user's last login timestamp is updated. The API supports `ApiKeyAuth` and is part of the broader API ecosystem for generating and managing API tokens, including considerations for Basic Auth and OAuth configurations. This process is crucial for user authentication, access control, and tracking user activity.", "semantic_keywords": ["Authentication Token", "API Key", "User Authentication"], "ontology_classification": {"features": ["api_registration", "user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/api-token-auth/", "method": "POST", "details": {"operationId": "ux_api_token_auth_create", "description": "This endpoint is designed to obtain the application's authentication token. It functions as the primary method for authenticating users or applications and simultaneously updates the `last_login` timestamp upon successful token issuance. This token is crucial for securing client requests and accessing data within the system. While the provided context on OAuth consent screens (Rank 1, 2) and API token generation (Rank 4, 5) describes general auth setups, this specific endpoint focuses on the programmatic retrieval of an existing APP AUTH TOKEN.", "summary": "Get the auth token.", "tags": ["Authentication"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"AuthTokenExample": {"value": {"username": "admin", "password": "admin123"}, "summary": "Auth Token Example"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "This endpoint requires a username and password in the request body for authentication (as indicated by the `example_usage`). It is fundamental for applications requiring secure access to system resources. Although the context mentions various authentication types (API Key, Basic Auth, Custom Auth - Rank 7, 9, 10), this endpoint specifically utilizes a username and password for token issuance, which falls under basic authentication principles. Users should ensure their security protocols align with this method, especially considering the option to issue refresh tokens as mentioned in context Rank 3 under 'Auth' section configuration.", "parameters": [{"name": "username", "in": "body", "description": "Inferred parameter: username", "required": true, "schema": {"type": "string"}}, {"name": "password", "in": "body", "description": "Inferred parameter: password", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Developer", "System Administrator", "Application", "Security Personnel"], "primary_use_case": "To securely authenticate users and applications, issuing an authentication token for subsequent authorized access to system resources and data."}, "content_for_embedding": "This API endpoint serves as the central mechanism for user and application authentication within the system. By accepting a username and password, it securely issues an authentication token, which is vital for authorizing subsequent client requests and ensuring secure access to system resources and data. Successful token issuance also updates the user's last login timestamp, reinforcing its role in managing secure user sessions and application access.", "ontology_classification": {"features": ["user_management", "api_registration", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Authentication Token", "User Authentication", "API Key"]}}, {"path": "/ux/common/announcement/announcements/", "method": "GET", "details": {"operationId": "ux_common_announcement_announcements_retrieve", "description": "This endpoint efficiently retrieves a paginated list of all announcements pertinent to the current organization. These announcements are critical informational updates, often displayed as notifications (floaters) across all Infraon modules, including a notification icon showing the count of new alerts. The system allows for sorting and reversal of the order of the announcements, supporting easy access to crucial organizational updates.", "summary": "Gets a list of announcement", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Announcement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "The announcements fetched via this API are akin to the 'What's New' section mentioned in the admin guide, providing users with alerts and information about recent changes or additions within the product. Developers should utilize the `items_per_page` and `page` query parameters for effective pagination. The `sort` parameter allows specifying a key for ordering the results, and `reverse` can be used to control the sorting direction (ascending/descending). These announcements contribute to the overall notification experience, allowing users to stay informed about important system-wide or organization-specific communications."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "End-user", "Administrator"], "primary_use_case": "Retrieving and managing organizational announcements and notifications to keep users informed about critical updates and system-wide communications."}, "content_for_embedding": "This API retrieves a paginated and sortable list of all organizational announcements. These announcements function as critical informational updates, often displayed as notifications or floaters across various Infraon modules, and contribute to the overall user notification experience by providing alerts about recent changes or additions within the product. It supports pagination, sorting by a specified key, and reversal of the sorting order.", "semantic_keywords": ["Announcements", "Notifications", "Alerts"], "ontology_classification": {"features": ["notification_gateway_configuration", "notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.8}}}, {"path": "/ux/common/announcement/announcements/", "method": "POST", "details": {"operationId": "ux_common_announcement_announcements_create", "description": "This endpoint facilitates the creation of new announcements for the current organization. These announcements are critical for disseminating important information to users across various Infraon modules, often appearing as notifications or alerts. Similar to how changes, problems, or releases are managed, creating an announcement via this endpoint can trigger its display within dedicated channels, allowing users to view comprehensive details upon interaction, such as double-tapping on an announcement ID. This ensures timely communication of updates and operational information, aligning with the system's ability to curate end-user functionalities and keep users informed through a centralized notification mechanism.", "summary": "Creates a new Announcement", "tags": ["Announcement"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateAnnouncementSample": {"value": {"summary": "VPN Issue", "description": "", "catalogue": "", "impact_service": "", "impact_service_name": "service1", "service_classification": "", "service_classification_name": "", "state": "Open"}, "summary": "Create announcement Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint specifically supports the POST method. While the API specification indicates no response body, successful creation implies the announcement will be reflected within the system's notification and announcement display mechanisms. The provided example usage outlines the expected structure of the request body, including fields for `summary`, `description`, `impact_service_name`, and `state`. Admins can use this to manage and control organizational communications effectively throughout the Infraon ecosystem.", "parameters": [{"name": "summary", "in": "body", "description": "Inferred parameter: summary", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "catalogue", "in": "body", "description": "Inferred parameter: catalogue", "required": true, "schema": {"type": "string"}}, {"name": "impact_service", "in": "body", "description": "Inferred parameter: impact_service", "required": true, "schema": {"type": "string"}}, {"name": "impact_service_name", "in": "body", "description": "Inferred parameter: impact_service_name", "required": true, "schema": {"type": "string"}}, {"name": "service_classification", "in": "body", "description": "Inferred parameter: service_classification", "required": true, "schema": {"type": "string"}}, {"name": "service_classification_name", "in": "body", "description": "Inferred parameter: service_classification_name", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Content Creator"], "primary_use_case": "To create and disseminate important organizational announcements and notifications to users across various Infraon modules."}, "content_for_embedding": "This API facilitates the creation of new announcements within the Infraon system. These announcements are crucial for disseminating important information, functioning as notifications or alerts to users across different Infraon modules. It enables timely communication of updates and operational information through a centralized notification mechanism, allowing administrators to manage and control organizational communications effectively.", "semantic_keywords": ["Announcements", "Notifications", "Alerts"], "ontology_classification": {"features": ["notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/announcement/announcements/{id}/", "method": "GET", "details": {"operationId": "ux_common_announcement_announcements_retrieve_2", "description": "This endpoint is used to retrieve comprehensive details for a specific announcement within the current organization. Similar to how 'ticket ID/Request ID/Change ID/Problem ID/Release ID' provides comprehensive details in the user interface, this API allows programmatic access to a specific announcement's information, identified by its unique 'id'. The returned details are intended to provide a complete overview of the announcement.", "summary": "Gets a announcement with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Announcement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The 'id' parameter in the path is a mandatory string that uniquely identifies the announcement to be fetched. Users can expect this endpoint to return details similar to the 'comprehensive details page' mentioned in the user guide contexts, which typically include creation time and date, and potentially various tabs of information (e.g., Basic Details, Workspace, Communication). While the API specification states 'No response body' for response description, it is understood that a successful call would return the announcement details in a structured format."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "Support Staff"], "primary_use_case": "To programmatically retrieve comprehensive details for a specific announcement within the organization, similar to viewing a detailed record page for tickets or problems."}, "content_for_embedding": "This API endpoint retrieves comprehensive details for a specific announcement using its unique identifier (ID). It provides programmatic access to a complete overview of the announcement, including information typically found on a comprehensive details page, such as creation date and time, and content organized into various tabs like Basic Details, Workspace, and Communication. This functionality is analogous to retrieving detailed information for a ticket, request, change, or problem by its ID.", "semantic_keywords": ["Announcements", "Notifications", "Details retrieval"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "ticket_history_view", "communication_tab_(centralized_history)", "ticket_tracking"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/announcement/announcements/{id}/", "method": "PUT", "details": {"operationId": "ux_common_announcement_announcements_update", "description": "This endpoint updates an existing announcement within the current organization. It identifies the specific announcement to be modified using its unique `id` (path parameter). The process of editing announcements is akin to managing other core entities like Tickets, Requests, Changes, Problems, or Releases, where each ID leads to a page for comprehensive detail management. While the specific fields for editing an announcement via the request body are implied by the 'Edit' action, the underlying concept of modifying detailed information associated with a unique identifier is consistent with how other system entities are managed for comprehensive detail and quick edits.", "summary": "Edits the announcement with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Announcement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the announcement to be edited. The API specification indicates 'No response body', suggesting a successful update might result in a 204 No Content status or a standard success status without additional data. Although the context does not explicitly detail the fields to be updated in the request body for an announcement, it can be inferred that similar 'Quick Edit' or 'Detailed Edit' functionalities, as seen for other entities like 'Change' (Context Rank 7), would apply here. Changes to an announcement might include its content, display status, or other relevant properties. Users should refer to the documentation for the specific structure of the announcement object required in the request body (not explicitly defined in the provided JSON snippet)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Content Manager", "System User"], "primary_use_case": "To enable administrators and content managers to update existing organizational announcements, ensuring timely and accurate communication."}, "content_for_embedding": "This API allows for the modification of existing announcements within an organization. It functions similarly to how other core system entities like tickets, requests, changes, problems, or releases are managed, providing capabilities for both comprehensive detail management and quick edits. Users can update various properties of an announcement identified by its unique ID.", "ontology_classification": {"features": ["record_creation_&_management"], "primary_module": "workspace", "confidence_score": 0.9}, "semantic_keywords": ["Announcements", "Update", "Content Management"]}}, {"path": "/ux/common/announcement/announcements/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_announcement_announcements_destroy", "description": "This endpoint allows for the permanent removal of an existing announcement within the current organization. Similar to the 'Delete' functionality described for releases and triggers in the user guide, this action will remove the announcement from the system. A confirmation prompt is typically associated with such deletion actions to prevent accidental removal, though this API directly performs the deletion.", "summary": "Delete the announcement with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Announcement"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The 'id' path parameter is mandatory and uniquely identifies the announcement to be deleted. It must be a valid string representing the announcement's identifier. While the contexts frequently mention 'Delete' operations for various system components (releases, triggers, categories, processes), the core functionality remains consistent: removing the specified item from the system. There is no request body for this operation, and a successful deletion will result in no response body."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Content Manager", "Developer"], "primary_use_case": "This API allows for the permanent deletion of an existing announcement within an organization, ensuring that outdated or incorrect information can be removed from the system."}, "content_for_embedding": "This API endpoint facilitates the permanent removal of an existing announcement from the system. It requires a unique announcement ID as a path parameter. This operation is similar to other deletion functionalities across the system, such as deleting releases or triggers, and results in the complete removal of the specified announcement without a response body upon success. This is a core system function for managing announcements.", "ontology_classification": {"features": ["content_archiving_&_deletion"], "primary_module": "knowledge_base", "confidence_score": 0.9}, "semantic_keywords": ["Announcements", "Delete", "Content Management"]}}, {"path": "/ux/common/announcement/announcements/change-ancmt/", "method": "GET", "details": {"operationId": "ux_common_announcement_announcements_change_ancmt_retrieve", "description": "This API endpoint provides functionality to view and edit announcements within the system. It is specifically designed to manage 'change' related announcements, allowing users to interact with comprehensive details of such announcements. This includes viewing created tickets/requests/changes, which when double-tapped on their ID, lead to a page with creation time/date and comprehensive details. Announcements can be quickly edited for details like status, priority, urgency, severity, and impact service. Detailed editing of the announcement is also supported through a 'Detailed Edit' function. This endpoint facilitates the management of notifications and updates related to system changes.", "tags": ["Announcement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is focused on announcements stemming from 'change' tickets/requests within the system. Users with the appropriate permissions can perform quick edit actions on an announcement summary, or access a detailed edit view. The system's 'What's New' section and notification panel also display alerts and information about recent changes, which are likely supported by this or related announcement mechanisms. While the API specification does not list explicit parameters or request body for this GET method, the context suggests that specific announcement IDs might be involved for viewing detailed information. The 'response_description' indicates 'No response body' for this GET method, which might imply the endpoint triggers a UI action or redirects rather than returning data directly via API for this specific operation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Change Manager"], "primary_use_case": "To manage and view announcements specifically related to system changes, allowing for quick and detailed editing of their attributes."}, "content_for_embedding": "This API endpoint allows users to view and edit announcements that are specifically related to system changes. It provides functionality for both quick edits of key announcement details like status, priority, and impact service, as well as a detailed editing function. The API supports the management of notifications and updates stemming from change tickets or requests within the system, enabling users to access comprehensive details of these change-related announcements.", "ontology_classification": {"features": ["detailed_change_information_display", "quick_edit_functionality", "automated_notifications", "attachment_management", "change_history_tracking"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Announcements", "Change", "Edit"]}}, {"path": "/ux/common/announcement/announcements/options/", "method": "GET", "details": {"operationId": "ux_common_announcement_announcements_options_retrieve", "description": "This API endpoint provides read and write capabilities for announcements. It allows users to view existing announcements, similar to messages displayed in a 'What's New' section or within a notification panel, and supports actions to edit these announcements. This functionality is crucial for managing product updates, alerts, and recent changes or additions to the product within the system. While the primary focus is on announcements, the broader context suggests its role in managing system-wide notifications and informational messages.", "tags": ["Announcement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint does not require any parameters or request body for its operation, implying that it either retrieves all accessible announcements or a default set, and any editing actions would likely be handled through specific UI interactions rather than direct API request bodies for this particular GET endpoint. The response does not contain a body, suggesting a status-only response or a potential redirection. For detailed editing of announcements, other API endpoints or UI interactions might be necessary beyond what this GET endpoint provides. Relevant contexts suggest that announcements are part of a broader notification system where users can view messages, and potentially approve or reject requests displayed alongside product updates."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Content Managers", "Users responsible for disseminating product updates and system-wide notifications"], "primary_use_case": "To manage system-wide announcements, product updates, and alerts, providing capabilities to view and configure these informational messages."}, "content_for_embedding": "This API endpoint provides read and write capabilities for announcements, allowing users to view and edit existing announcements. These announcements are similar to messages displayed in a 'What's New' section or within a notification panel, and are crucial for managing product updates, alerts, and recent changes or additions to the product within the system. The broader context suggests its role in managing system-wide notifications and informational messages. This GET endpoint specifically retrieves options for announcements, implying configuration or default sets, and while it doesn't require parameters or a request body, it's part of a broader system for managing notifications and informational messages.", "ontology_classification": {"features": ["notification_gateway_configuration", "notification_trigger_configuration", "messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Announcements", "Notifications", "Content Management"]}}, {"path": "/ux/common/apiregister/profile/", "method": "GET", "details": {"operationId": "ux_common_apiregister_profile_list", "description": "This `/ux/common/apiregister/profile/` endpoint retrieves a paginated list of `api_config` profiles within the current organization. An `api_config` profile, often referred to as a configuration profile, is a predefined set of configuration settings and templates that network administrators use to manage various aspects of network operations, including device details, connection protocols (like SSH and Telnet), security policies, access controls, and performance configurations. These profiles are crucial for defining and tracking configuration settings. The endpoint supports pagination and sorting to efficiently traverse the available profiles.", "summary": "Gets a list of api_config profiles", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["API Registration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ApiRegister"}}}}, "description": ""}}, "additional_info": "This endpoint is essential for managing and viewing configuration profiles. Users can specify `items_per_page` and the `page` number for pagination. Additionally, results can be sorted by a specific `sort` key in `reverse` (descending) order if desired. Configuration profiles are also used by Configuration Download Jobs to retrieve configurations, inventories, and operational data. The \"name\" of the profile helps in its identification. While the specification mentions `api_config` profiles, the context consistently refers to them as 'Configuration Profiles', which are central to managing network device configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations Staff"], "primary_use_case": "To retrieve and manage network configuration profiles, which define settings for network devices, connection protocols, security, and performance."}, "content_for_embedding": "This API endpoint allows for the retrieval of a paginated and sortable list of api_config profiles, also known as configuration profiles. These profiles are crucial for network administrators to manage and define various network operation settings, including device details, connection protocols (SSH, Telnet), security policies, access controls, and performance configurations. The endpoint supports efficient traversal of profiles through items_per_page, page, reverse, and sort parameters. These configuration profiles are integral to managing network device configurations and are utilized by Configuration Download Jobs.", "ontology_classification": {"features": ["api_registration", "network_configuration_management_(nccm)", "configuration_download_jobs"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "API Registration", "Details retrieval"]}}, {"path": "/ux/common/apiregister/profile/", "method": "POST", "details": {"operationId": "ux_common_apiregister_profile_create", "description": "This endpoint is used to save a new API configuration profile for the current organization. It facilitates the creation of API configurations by allowing users to define various authentication types, including API Key, Basic Auth (Username and Password), Custom Auth (Token details, Key, Request Type, Username, and Password), or No Auth. This process is crucial for integrating new APIs, similar to how users would create and manage new API tokens as described in the API Tokens section.", "summary": "Creates a new API configuration ", "tags": ["API Registration"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateThirdPartyAPISample": {"value": {"headerParamList": [{"keys": "sort", "values": "name"}, {"keys": "reverse", "values": "-"}], "name": "API Auth", "content_type": 1, "authentication_type": "Basic Auth", "user_name": "shilpa.v", "password": "hanTZ123$", "api_url": "http://test-api-auth.com", "description": "Test API Auth", "enc_password": "ZDk5NjMwYmNjNzA1ODYzOWU3ZTgwZGYyMzlmMzhhMzI6OlUyRnNkR1ZrWDE5ZGJ5YUp3azBHT01OZ2dwVldQUFVlaEhmOVE2SVBreWs9"}, "summary": "Create Third Party API Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body for this endpoint (as shown in the example usage) requires parameters such as `headerParamList`, `name`, `content_type`, `authentication_type`, `api_url`, and `description`. For 'Basic Auth', `user_name` and `password` are specifically required, with the password also needing an `enc_password`. After defining all necessary parameters for the chosen authentication method, users are expected to 'Submit' the configuration to add the API. This mirrors the process of entering a 'Label' and confirming creation for API tokens. This endpoint is central to defining how the system interacts with external APIs.", "parameters": [{"name": "headerParamList", "in": "body", "description": "Inferred parameter: headerParamList", "required": true, "schema": {"type": "string"}}, {"name": "name", "in": "body", "description": "Inferred parameter: name", "required": true, "schema": {"type": "string"}}, {"name": "content_type", "in": "body", "description": "Inferred parameter: content_type", "required": true, "schema": {"type": "string"}}, {"name": "authentication_type", "in": "body", "description": "Inferred parameter: authentication_type", "required": true, "schema": {"type": "string"}}, {"name": "user_name", "in": "body", "description": "Inferred parameter: user_name", "required": true, "schema": {"type": "string"}}, {"name": "password", "in": "body", "description": "Inferred parameter: password", "required": true, "schema": {"type": "string"}}, {"name": "api_url", "in": "body", "description": "Inferred parameter: api_url", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "enc_password", "in": "body", "description": "Inferred parameter: enc_password", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "Developers", "IT Operations Personnel"], "primary_use_case": "This API enables organizations to define and save new API configuration profiles, supporting various authentication types. This is crucial for integrating external APIs and streamlining connectivity with third-party services."}, "content_for_embedding": "This API endpoint facilitates the creation and saving of new API configuration profiles for an organization. It supports various authentication types including API Key, Basic Auth, Custom Auth, and No Auth, allowing users to define parameters such as name, content type, base URL, description, and header parameters. This process is essential for integrating external APIs and is part of the API Registration module within Infraon Configuration's General Settings, mirroring the management of API tokens.", "ontology_classification": {"features": ["api_registration", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["API Registration", "Configuration Profiles", "API definition"]}}, {"path": "/ux/common/apiregister/profile/{id}/", "method": "GET", "details": {"operationId": "ux_common_apiregister_profile_retrieve", "description": "This endpoint is used to retrieve the detailed configuration profile of a registered API within the current organization. It fetches an 'api_config' which represents a template or predefined set of configuration settings for an API, including its name, content type, authentication type, base URL, description, header parameters, and potentially authentication-specific fields. This aligns with the concept of a 'Configuration Profile' as described in the user guide, which allows network administrators to create and customize configuration settings.", "summary": "Gets a api_config with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["API Registration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required to identify the specific API configuration profile to be retrieved. This ID corresponds to the unique identifier assigned when the API was initially registered. The retrieved `api_config` will contain details such as the API's authentication type (e.g., API Key, Basic Auth, Custom Auth, No Auth) and associated parameters (e.g., Auth Key, Auth Value, Username, Password, Token details), content type, and base URL as mentioned in the API registration process. This endpoint is crucial for verifying and understanding the setup of registered APIs for further consumption or management within the platform."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Developers", "IT Operations personnel"], "primary_use_case": "To retrieve and verify the detailed configuration profiles of registered APIs within an organization."}, "content_for_embedding": "This API retrieves the detailed configuration profile of a registered API, referred to as an 'api_config'. It provides comprehensive settings including the API's name, content type, authentication type (e.g., API Key, Basic Auth), base URL, description, and header parameters. This endpoint is crucial for network administrators to verify and understand the setup of registered APIs within the platform.", "semantic_keywords": ["API Registration", "Configuration Profiles", "Details retrieval"], "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/apiregister/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_common_apiregister_profile_update", "description": "This endpoint is used to edit and update an existing API configuration profile for the current organization. It allows administrators to make changes to the `api_config` profile, which manages settings such as authentication methods (API Key, Basic Auth, Custom Auth, No Auth), and other associated parameters. Changes to the API configuration can be accessed via the 'APIs & Services -> OAuth Consent Screen, Configuration page' in the user interface, by clicking 'Edit App registration'. This process is analogous to editing other configuration profiles such as device details, connection protocols (SSH, Telnet), and network parameters, ensuring that the API access and behavior align with current organizational policies.", "summary": "Edits the api_config with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["API Registration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the API configuration profile to be edited. The request body for this PUT operation is a serializer for Documents, supporting a wide range of primitive field types, including StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, GeoJsonBaseField, and DateField. Compound fields like `ListField` and `DictField` are also supported, mapping to corresponding DRF fields. `ReferenceField` behaves like `ForeignKey` in DRF, allowing nested serializers for non-zero depth, while `EmbeddedDocumentField` similarly auto-generates nested serializers. Generic fields such as `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own serializer fields. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, and users should exercise caution or avoid their use."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To enable administrators to modify and update existing API configuration profiles, including authentication methods and other parameters, ensuring API access and behavior align with organizational policies."}, "content_for_embedding": "This API endpoint allows administrators to edit and update existing API configuration profiles within the current organization. It manages settings such as authentication methods (API Key, Basic Auth, Custom Auth, No Auth) and other associated parameters. Changes are reflected in the user interface under 'APIs & Services -> OAuth Consent Screen, Configuration page'. This process is similar to editing other configuration profiles like device details or connection protocols. The API uses a PUT method and requires a unique ID for the profile. The request body supports various primitive and compound field types for the API configuration.", "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["API Registration", "Configuration Profiles", "Update"]}}, {"path": "/ux/common/apiregister/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_apiregister_profile_destroy", "description": "This endpoint is used to delete an existing API configuration profile identified by its unique ID for the current organization. Deleting a configuration profile is generally irreversible. It's important to note that a profile cannot be deleted if it is currently associated with a download job. This action helps maintain configuration hygiene by removing outdated or unnecessary API profiles.", "summary": "Deletes the api_config with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["API Registration"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and represents the unique identifier of the API configuration profile to be deleted. Prior to deletion, users should be aware that if the profile is linked to an active download job, the operation will not proceed. Confirmation is typically requested (e.g., 'Click Yes to delete' or 'Click No to cancel') before the final deletion of a Configuration Profile. This API can be used to manage API settings, similar to how authentication profiles or scheduling profiles are managed and deleted from the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator"], "primary_use_case": "To manage and delete API configuration profiles for maintaining system hygiene and removing outdated or unnecessary API settings."}, "content_for_embedding": "This API endpoint facilitates the deletion of an existing API configuration profile within the system, identified by its unique ID. It's crucial to note that a profile cannot be deleted if it is currently linked to an active download job. This operation is generally irreversible and contributes to maintaining configuration hygiene by removing outdated or unnecessary API profiles. It functions similarly to how other system profiles, such as authentication or scheduling profiles, are managed and removed.", "semantic_keywords": ["Delete", "Configuration Profiles", "API Registration"], "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/apiregister/profile/allapi-list/", "method": "GET", "details": {"operationId": "ux_common_apiregister_profile_allapi_list_retrieve", "description": "This API endpoint provides functionalities to view and manage all registered APIs within the system. Users can access a comprehensive list of APIs and perform editing actions to update their details, including API name, content type, authentication type (such as API Key, Basic Auth, Custom Auth, or No Auth), base URL, and header parameters. It serves as a central hub for API registration and modification.", "tags": ["API Registration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "description": ""}}, "summary": "", "additional_info": "When editing an API, additional fields will appear based on the selected 'Authentication Type'. For instance:\n- 'API Key' requires 'Auth Key', 'Auth Value', and a specification of where to add the key (Header/Query).\n- 'Basic Auth' requires 'Username' and 'Password'.\n- 'Custom Auth' requires 'Token details', 'Key', 'Request Type' (GET, POST), 'Username', and 'Password'.\n- 'No Auth' requires no credentials.\n\nAPIs can also be added, submitted, or deleted using respective icons/actions. The process aligns with navigating to 'APIs & Services' and then 'Edit App registration' for modifications. This endpoint is crucial for maintaining the registry of internal and external APIs."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "System Integrator"], "primary_use_case": "To provide a centralized platform for viewing, registering, and managing all APIs within the system, enabling administrators and developers to update API details, authentication types, and other parameters."}, "content_for_embedding": "This API endpoint allows users to view a comprehensive list of all registered APIs and perform management actions such as adding new APIs, editing existing API details (name, content type, authentication type, base URL, header parameters), and deleting APIs. It supports various authentication types including API Key, Basic Auth, Custom Auth, and No Auth, with dynamic fields appearing based on the selected type. This serves as a central hub for API registration, modification, and lifecycle management within the system.", "semantic_keywords": ["API Registration", "Edit", "Delete"], "ontology_classification": {"features": ["api_registration", "general_settings", "record_creation_&_management", "detailed_record_view"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/apiregister/profile/api_search/", "method": "GET", "details": {"operationId": "ux_common_apiregister_profile_api_search_retrieve", "description": "This GET API endpoint allows for the viewing and editing of API registrations within the system. It facilitates the management of API details, including authentication types (API Key, Basic, Custom, or No Auth), content types, base URLs, description, and header parameters. Users can add, edit, or delete registered APIs through this interface, with specific fields appearing based on the selected authentication type.", "tags": ["API Registration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is integral to the API registration process, allowing for detailed configuration of each API. For 'API Key' authentication, 'Auth Key', 'Auth Value', and 'Add Key to (Header/Query)' are required. 'Basic Auth' requires 'Username' and 'Password'. 'Custom Auth' necessitates 'Token details', 'Key', 'Request Type' (GET, POST), 'Username', and 'Password'. After all parameters are added, interactions with the API include submission, editing, or deletion via respective icons. Other parameters such as API name, content type, and base URL are also configurable."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "This API allows users to view, add, edit, and delete API registrations within the system. It enables comprehensive management of API details, including various authentication types (API Key, Basic, Custom, No Auth), content types, base URLs, descriptions, and header parameters."}, "content_for_embedding": "This GET API endpoint is designed for the comprehensive management of API registrations. It facilitates the viewing, adding, editing, and deleting of registered APIs, handling critical details such as authentication types (API Key, Basic, Custom, No Auth), content types (application/json, application/x-www-form-urlencoded, txt/plain), base URLs, descriptions, and header parameters. It is integral to the API registration process, allowing for detailed configuration and modification of each API within the system.", "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["API Registration", "Configuration Profiles", "API Key"]}}, {"path": "/ux/common/apiregister/profile/options/", "method": "GET", "details": {"operationId": "ux_common_apiregister_profile_options_retrieve", "description": "This API endpoint allows users to view or edit API registrations. It is crucial for managing application registrations and their configurations, including options related to API naming, content type, authentication type (such as API Key, Basic Auth, Custom Auth, or without authentication), base URL, description, and header parameters. This endpoint facilitates the process of defining and modifying how external APIs are integrated and secured within the system.", "tags": ["API Registration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is accessible via the 'APIs & Services -> OAuth consent screen, configuration page' in the UI. Users can edit existing API registrations by clicking 'Edit App registration'. When editing, fields like 'Name', 'Content-Type', 'Authentication Type', 'Base URL', 'Description', and 'Header Parameters' can be modified. Additional fields for 'Auth-Type Fields' become available based on the selected authentication type (e.g., Auth Key/Value for API Key, Username/Password for Basic Auth, etc.). Changes to API registration can be submitted after all parameters are updated. The current API specification indicates no specific parameters or request body for this GET endpoint, implying it might retrieve the current options or settings available for API registration editing."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "System Integrator"], "primary_use_case": "To manage and configure external API integrations within the system, including defining and modifying API properties such as naming, content type, authentication type, base URL, description, and header parameters, as well as viewing and editing existing API registrations."}, "content_for_embedding": "This GET API endpoint retrieves the options and current settings for API registrations. It is used to manage the integration and security of external APIs within the system, allowing users to view and prepare for editing details such as API name, content type, various authentication types (API Key, Basic Auth, Custom Auth, No Auth), base URL, description, and header parameters. It facilitates the process of defining and modifying how third-party APIs are integrated and secured.", "ontology_classification": {"features": ["api_registration", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["API Registration", "Configuration Profiles", "API Integration"]}}, {"path": "/ux/common/apiregister/profile/verify_api/", "method": "POST", "details": {"operationId": "ux_common_apiregister_profile_verify_api_create", "description": "This API endpoint facilitates the viewing, editing, and verification of API registrations. It allows users to manage various aspects of an API, including its name, content type, authentication details (such as API Key, Basic Auth, Custom Auth, or no authentication), base URL, description, and header parameters. The process typically involves navigating to the API registration configuration page to make edits, and then submitting the changes. This endpoint is crucial for maintaining and updating registered APIs within the system.", "tags": ["API Registration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiRegister"}}}, "description": ""}}, "summary": "", "additional_info": "When editing an API registration, additional fields for authentication type will appear based on the selected authorization method (e.g., Auth Key/Value for API Key, Username/Password for Basic Auth, Token details for Custom Auth). Users can add and configure header parameters by specifying a Key and a Value, and optionally enable them as Query Parameters. The request body for this endpoint handles various primitive and compound field types as specified in the `request_body_description`, ensuring proper serialization of complex document structures. Specifically, this endpoint is used after making changes, and before saving them, to verify the updated API configuration. The system supports fields like `StringField`, `URLField`, `EmailField`, `IntField`, `BooleanField`, `DateTimeField`, and more for defining the API's properties. Users are advised to refer to the 'APIs & Services -> OAuth consent screen' navigation in the user guide for managing app registrations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "This API facilitates the management and verification of API registrations within the system, allowing users to configure and update details of integrated APIs for data exchange."}, "content_for_embedding": "This API endpoint is designed for managing and verifying API registrations within the Infraon system. It allows administrators and developers to view, edit, and update various aspects of registered APIs, including their name, content type, base URL, description, and authentication details (API Key, Basic Auth, Custom Auth, or No Auth). The endpoint supports adding and configuring header parameters and is specifically used to verify updated API configurations before saving. This ensures proper maintenance and updating of integrated APIs for data exchange.", "semantic_keywords": ["API Registration", "Update", "Configuration Profiles"], "ontology_classification": {"features": ["api_registration", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/async_tasks/", "method": "GET", "details": {"operationId": "ux_common_async_tasks_list", "description": "This endpoint allows users to retrieve a paginated list of asynchronous tasks within the current organization. These tasks are background processes managed by the Asynchronous Task Manager, built on the Celery framework, an asynchronous task/job queue based on distributed message passing. Each task can run independently from the main application flow and represents operations like 'Start Configmgmt Uploadjob' or scheduled events. The endpoint provides detailed information about these tasks, including their name, associated Celery worker and message queue, and current operational status. It supports pagination and sorting to efficiently navigate through the list.", "summary": "Gets a list of async tasks", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Async Tasks"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/CeleryTaskManager"}}}}, "description": ""}}, "additional_info": "The 'items_per_page' and 'page' query parameters are required for pagination. The 'reverse' boolean parameter controls the sorting order (ascending/descending), and the 'sort' string parameter specifies the key by which the tasks should be sorted, such as 'Task Name' or 'Worker Name' based on the Asynchronous Task Manager's displayed labels. This API is crucial for monitoring and managing background operations and understanding the state of system-generated or user-initiated asynchronous processes within the organization."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations Personnel", "Developers", "Support Staff"], "primary_use_case": "To monitor and manage background asynchronous tasks within an organization, allowing users to retrieve detailed information about these processes, including their status, associated workers, and message queues."}, "content_for_embedding": "This API endpoint provides a paginated and sortable list of asynchronous tasks managed by the Asynchronous Task Manager, built on the Celery framework. It allows users to retrieve detailed information about background processes, such as task name, Celery worker, message queue, and current operational status. This is crucial for monitoring and understanding the state of system-generated or user-initiated asynchronous operations.", "semantic_keywords": ["Asynchronous Tasks", "Task Monitoring", "Background Processes"], "ontology_classification": {"features": ["process_identification_&_tracking", "process_status_&_priority_management", "process_search_&_filtering"], "primary_module": "imacd_(beta)", "confidence_score": 1}}}, {"path": "/ux/common/async_tasks/", "method": "POST", "details": {"operationId": "ux_common_async_tasks_create", "description": "This API endpoint provides functionalities related to managing asynchronous tasks within the system. It allows users to submit, view, and potentially edit the status or details of background processes. This includes tasks such as access requests, catalog item submissions, or scheduled operations (like baseline schedulers where a task is automatically generated). The endpoint facilitates both viewing of existing tasks and initiating new ones, operating independently from the main application flow, and is built on a distributed message passing framework like Celery for real-time operations and scheduling.", "tags": ["Async Tasks"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to accommodate various document types, supporting a broad array of primitive fields such as StringField, URLField, EmailField, IntField, FloatField, DateTimeField, and ObjectIdField. Compound fields like ListField and DictField are also supported, mapping to corresponding DRF fields with respect to nested specifications. Special handling is implemented for ReferenceField (similar to DRF's ForeignKey) and EmbeddedDocumentField, which can autogenerate nested serializers. Developers should be aware that certain fields like FileField, ImageField, and BinaryField are not well-supported or tested, and all other fields default to DocumentField, which might lead to unexpected behavior. This API is crucial for managing background operations and providing a familiar starting point for end-users to oversee their submitted requests and other background tasks."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "End-user"], "primary_use_case": "To manage asynchronous tasks and background processes within the system, enabling users to submit new tasks, view their status and details, and modify existing task information. This API is crucial for overseeing background operations and scheduled jobs."}, "content_for_embedding": "This API endpoint facilitates comprehensive management of asynchronous tasks and background processes, operating independently from the main application flow. It supports the submission of new tasks, viewing of existing task details and status, and modification of task information. Built upon a distributed message passing framework like Celery, it enables real-time operations and scheduling. The API is designed to handle diverse data types in its request body, including primitive and compound fields, and is essential for end-users to monitor their submitted requests and other background operations.", "ontology_classification": {"features": ["asynchronous_task_manager", "process_creation", "process_identification_&_tracking", "process_status_&_priority_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Asynchronous Tasks", "Task Monitoring", "Background Processes"]}}, {"path": "/ux/common/async_tasks/{id}/", "method": "GET", "details": {"operationId": "ux_common_async_tasks_retrieve", "description": "This API endpoint provides functionalities to view and manage specific asynchronous tasks based on their unique identifier. It allows users to retrieve details about tasks, which can include various types of requests such as access requests or catalog items, as well as background operations like those initiated by a baseline scheduler. While the original description mentioned 'users to be viewed or edited', the context clarifies that the primary focus is on managing 'requests' or 'tasks' that users submit or are associated with, rather than directly viewing or editing user profiles.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Async Tasks"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that refers to the unique identifier of the asynchronous task or request being queried. Based on the contexts, these tasks are typically managed by an 'Asynchronous Task Manager' module built on the Celery framework, suggesting they are background operations. This endpoint allows for detailed viewing, and potentially quick or detailed editing, and even deletion or copying of these tasks/requests, similar to how 'Requests' (e.g., service requests) are handled. It implicitly supports monitoring background tasks that operate independently from the main application flow. For specific editing actions, context suggests capabilities like 'Quick Edit' for status/priority and 'Detailed Edit' for full request details. This endpoint is crucial for managing submitted requests and monitoring system background processes."}, "llm_generated": {"business_context": {"user_personas": ["System administrators", "IT operations personnel", "Users tracking their submitted requests"], "primary_use_case": "To retrieve detailed information about specific asynchronous tasks or user-submitted requests, enabling monitoring and management of background operations and request lifecycles."}, "content_for_embedding": "This API endpoint allows for the retrieval of detailed information about a specific asynchronous task or user-submitted request using its unique identifier. It is crucial for monitoring the status and progress of background operations, such as those managed by an Asynchronous Task Manager built on the Celery framework, and for tracking the lifecycle of various requests.", "semantic_keywords": ["Asynchronous Tasks", "Task Monitoring", "Details retrieval"], "ontology_classification": {"features": ["asynchronous_task_manager", "detailed_request_information_display", "request_monitoring_&_tracking"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/async_tasks/{id}/", "method": "PUT", "details": {"operationId": "ux_common_async_tasks_update", "description": "This API endpoint allows for the viewing and editing of asynchronous tasks managed by the system. Specifically, it enables users to retrieve details about a particular background task or update its properties. These tasks, often built on the Celery framework, handle operations such as access requests, catalog items, and request aging for helpdesk/ITSM, operating independently from the main application flow. The endpoint facilitates the management and monitoring of these 'requests' or 'tasks', which can include details like status, priority, urgency, severity, impact service, and assignee. It can also be used to edit broader request details.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Async Tasks"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the asynchronous task. The request body, if provided for editing operations, supports a wide range of field types for serializing document data, including primitive types (e.g., StringField, IntField, BooleanField, DateTimeField) and complex structures like ListField and DictField. ReferenceField and EmbeddedDocumentField are handled with nested serializers depending on depth. Fields like FileField, ImageField, and BinaryField are noted as not well supported or untested. This endpoint is crucial for managing and monitoring background processes, such as those automatically generated when a baseline scheduler is created, as described in the Asynchronous Task Manager documentation. Users can view, quick edit (for status, priority, etc.), or perform detailed edits on these tasks/requests."}, "llm_generated": {"business_context": {"user_personas": ["Helpdesk agents", "IT support staff", "System administrators", "Developers"], "primary_use_case": "To enable the management, monitoring, and updating of asynchronous tasks and background processes, particularly those related to helpdesk/ITSM requests, by allowing users to modify their status, priority, and other properties."}, "content_for_embedding": "This API endpoint facilitates the viewing, management, and updating of asynchronous tasks and background processes within a system, often built on the Celery framework. It allows users to retrieve detailed information about a specific task identified by its ID and to modify various properties such as status, priority, urgency, severity, impact service, and assignee. This includes both quick and detailed editing capabilities for tasks that function as requests in a helpdesk or ITSM context, supporting operations like access requests, catalog items, and request aging.", "semantic_keywords": ["Asynchronous Tasks", "Task Management", "Request Update"], "ontology_classification": {"features": ["ticket_state_&_status_management", "quick_edit_(key_attributes)", "detailed_ticket_editing", "ticket_monitoring", "ticket_tracking", "ticket_assignment_(individual/team/expertise)", "ticket_detail_view_(via_id)", "ticket_history_view", "ticket_aging_metrics_&_reporting", "ticket_filters", "ticket_tagging", "calendar_filter", "link_ticket_to_change_request_(add_change)", "view_linked_change_request", "requester_search_&_add", "ticket_url_for_tracking", "past_interactions_display_(requester_history)", "requester_self-service_portal"], "primary_module": "ticket_management", "confidence_score": 0.95}}}, {"path": "/ux/common/async_tasks/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_async_tasks_destroy", "description": "This API endpoint allows for the deletion of an asynchronous task, which operates independently from the main application flow. Asynchronous tasks often represent background operations such as processing requests (e.g., access requests, catalog items, or service requests). Deleting a task via this endpoint is an irreversible action.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Async Tasks"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter represents the unique identifier of the asynchronous task to be deleted. Asynchronous tasks are managed by the Asynchronous Task Manager, built on the Celery framework, focusing on real-time operations and scheduling. Deleting a task will remove it and any associated monitoring. This action is similar to the 'Delete' quick action described for general requests, indicating its finality."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To irreversibly delete a specific asynchronous background task, such as those processing access requests, catalog items, or service requests."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of an asynchronous task, identified by its unique ID. These tasks are background operations, often managed by the Asynchronous Task Manager (built on the Celery framework), and can include processing various types of requests. Deleting a task removes it and any associated monitoring, similar to a final 'Delete' quick action.", "semantic_keywords": ["Delete", "Asynchronous Tasks", "Task Management"], "ontology_classification": {"features": ["asynchronous_task_manager"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/async_tasks/disable_task/", "method": "GET", "details": {"operationId": "ux_common_async_tasks_disable_task_retrieve", "description": "This API endpoint is designed to disable an asynchronous task. While the original description suggested it was for viewing or editing users, the path `/ux/common/async_tasks/disable_task/` combined with the provided contexts indicates a different purpose. Contexts highlight functionalities related to editing and deleting, and managing permissions for APIs and services. Although direct mention of 'disable task' is not in the contexts, the endpoint's path strongly suggests managing asynchronous operations, likely by disabling them. The most relevant context (Rank 1) discusses allowing users to view and submit requests, which can be seen as an asynchronous operation. Other contexts talk about editing various entities (App registration, Change details, Request details), which supports the general theme of modifying system states, including potentially tasks. Given the path, the primary function is to disable existing tasks within the system.", "tags": ["Async Tasks"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint is a GET method, which is unusual for a 'disable' action as such actions typically modify resources and are better suited for POST, PUT, or DELETE. Developers should note that this endpoint might trigger a state change despite being a GET request. There are no specific parameters defined in the API specification, so it's unclear how a specific task to disable would be identified. It's recommended to consult further documentation or internal API design to understand task identification for this operation. Contexts (Rank 2, 3, 5, 9) frequently mention navigating to 'APIs & Services' and 'API Permissions' which might suggest an administrative context for managing such tasks. The function is likely tied to broader system administration for managing background processes or requests initiated by users."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Operator", "Developer"], "primary_use_case": "This API endpoint is used to disable a specific asynchronous task within the system. It allows administrators or automated processes to stop the execution of background jobs or scheduled tasks, effectively changing their operational status to disabled."}, "content_for_embedding": "This API endpoint facilitates the disabling of asynchronous tasks, which are background processes or jobs that run independently of the main application flow. Despite being a GET request, its function is to change the state of an asynchronous task to disabled, preventing further execution. This is crucial for managing system resources, stopping erroneous jobs, or temporarily pausing scheduled operations. The API is likely integrated with an Asynchronous Task Manager module, possibly built on frameworks like Celery, to oversee and control these tasks. It enables granular control over individual tasks, allowing for their deactivation.", "ontology_classification": {"features": ["asynchronous_task_manager"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Asynchronous Tasks", "Task Management", "Disable"]}}, {"path": "/ux/common/async_tasks/enable_task/", "method": "GET", "details": {"operationId": "ux_common_async_tasks_enable_task_retrieve", "description": "This API endpoint, `/ux/common/async_tasks/enable_task/`, is designed to enable users to view and potentially edit various types of requests and tasks. It facilitates the submission and viewing of requests, such as access requests or catalog items, and allows for operations like 'Quick Edit' or 'Detailed Edit' for related change requests or other items. The endpoint's function extends to managing user permissions, specifically enabling API permissions related to user data, such as 'User. Read.All', and allowing users to perform 'Edit' operations within selected modules or pages.", "tags": ["Async Tasks"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CeleryTaskManager"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body described, based on the context, typical usage would involve enabling specific tasks or permissions. For instance, processes might involve enabling an API permission by selecting it from a list, as hinted by context related to 'APIs & Services -> OAuth consent screen' and 'API Permissions'. The 'Edit' privilege, as described in context, specifically allows users to view and perform edit operations within a selected module, suggesting this API might be part of a broader system for managing user roles and access capabilities. The endpoint's name `enable_task` and the context suggest that it's likely used to enable or grant specific functionalities or access levels to users rather than just viewing or editing arbitrary user data."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Privileged User"], "primary_use_case": "This API enables specific asynchronous tasks and grants users the necessary permissions and access levels to perform actions like viewing and editing requests within various modules. It is crucial for managing user roles and capabilities within the system."}, "content_for_embedding": "This API endpoint, `/ux/common/async_tasks/enable_task/`, is designed to enable users to view and potentially edit various types of requests and tasks. It facilitates the submission and viewing of requests, such as access requests or catalog items, and allows for operations like 'Quick Edit' or 'Detailed Edit' for related change requests or other items. The endpoint's function extends to managing user permissions, specifically enabling API permissions related to user data, such as 'User. Read.All', and allowing users to perform 'Edit' operations within selected modules or pages. While the API specification shows no explicit parameters or request body described, typical usage would involve enabling specific tasks or permissions. For instance, processes might involve enabling an API permission by selecting it from a list, as hinted by context related to 'APIs & Services -> OAuth consent screen' and 'API Permissions'. The 'Edit' privilege, as described in context, specifically allows users to view and perform edit operations within a selected module, suggesting this API might be part of a broader system for managing user roles and access capabilities. The endpoint's name `enable_task` and the context suggest that it's likely used to enable or grant specific functionalities or access levels to users rather than just viewing or editing arbitrary user data. This is a privilege-based feature, where access, view, add, edit, delete, execute, and export capabilities are defined under roles and privileges.", "ontology_classification": {"features": ["asynchronous_task_manager", "roles_&_privileges_management", "request_editing_&_quick_actions"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Asynchronous Tasks", "API Permissions", "User Privileges"]}}, {"path": "/ux/common/business_rule/business_rule/", "method": "GET", "details": {"operationId": "ux_common_business_rule_business_rule_list", "description": "This endpoint retrieves a list of business_rule objects within the current organization. A business rule in the context of an Infraon product is a specific guideline or constraint that governs behavior, processes, or operations within the product's infrastructure. These rules are defined and enforced to ensure consistency, compliance, and efficient functioning. This API supports pagination and sorting to manage the retrieved list effectively.", "summary": "Gets a list of business_rule", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["BusinessRule"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/BusinessRule"}}}}, "description": ""}}, "additional_info": "Business rules can be of different types, such as 'Load Balancer', which ensures balanced workload distribution, as noted in the documentation. When fetching business rules, 'items_per_page' and 'page' are required query parameters for pagination. Optional parameters include 'reverse' (boolean) for sorting order and 'sort' (string) to specify the key for sorting the business rules. For example, a business rule might be configured to automatically assign tickets related to hardware diagnostics to a specific IT team level."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To retrieve and manage a paginated and sortable list of business rules that govern behavior, processes, or operations within the Infraon product, enabling automation and consistent functioning."}, "content_for_embedding": "This API retrieves a paginated and sortable list of business rule objects within the current organization. Business rules are specific guidelines or constraints that govern behavior, processes, or operations within the Infraon product's infrastructure, such as automatically assigning tickets or ensuring balanced workload distribution. This endpoint allows for effective management and viewing of these rules by supporting pagination (items_per_page, page) and sorting (reverse, sort) capabilities.", "semantic_keywords": ["Business Rule Management", "Rule Listing", "Details retrieval"], "ontology_classification": {"features": ["business_rules_for_auto-assignment", "search_functionality", "granular_data_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/business_rule/business_rule/", "method": "POST", "details": {"operationId": "ux_common_business_rule_business_rule_create", "description": "This endpoint is used to create and save a new business rule for the current organization. Business rules are specific guidelines or constraints that govern the behavior, processes, or operations within an Infraon product's infrastructure, ensuring consistency, compliance, and efficient functioning. Creating a business rule allows for defining how tasks or actions are assigned or allocated based on specified criteria and conditions, such as automating ticket assignments based on predefined criteria (e.g., Load Balancer for balanced workload distribution).", "summary": "Creates a new business_rule ", "tags": ["BusinessRule"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateBusinessRuleSample": {"value": {"business_rule": "business_rule1", "type": "User"}, "summary": "Create BusinessRule Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "When creating a business rule, ensure you provide a unique 'Rule name' (an identifier to distinguish it from other rules) and select a 'Type' from the dropdown, which determines the predefined logic for assignments. A 'Description' of the rule should also be provided. As per the example, the request body should include the `business_rule` name and its `type` (e.g., 'User'). While the current API specification explicitly states 'No response body', successful creation typically implies the rule has been saved. Further details on rule types (like 'Load Balancer') and their application in ticket allocation and auto-assignment within the Infraon system are available in the user guide.", "parameters": [{"name": "business_rule", "in": "body", "description": "Inferred parameter: business_rule", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "body", "description": "Inferred parameter: type", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To define and save new business rules that automate processes and assignments within the Infraon platform, such as ticket allocation."}, "content_for_embedding": "This API creates new business rules within the Infraon platform. These rules are essential for automating various operational processes, including the assignment and allocation of tasks and tickets based on predefined criteria and conditions. For example, a business rule can be configured to automatically assign tickets to specific users or teams, or to balance workloads using types like 'Load Balancer'. The API requires a unique rule name and a rule type. It is a core component for configuring system behavior and ensuring consistency and compliance.", "ontology_classification": {"features": ["business_rules_for_auto-assignment", "workflow_automation", "ticket_assignment_(individual/team/expertise)"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Business Rule Management", "Automation", "Configuration", "Add"]}}, {"path": "/ux/common/business_rule/business_rule/{id}/", "method": "GET", "details": {"operationId": "ux_common_business_rule_business_rule_retrieve", "description": "This endpoint retrieves the detailed information of a specific business rule identified by its unique ID within the current organization. A business rule in the Infraon product context defines a specific guideline or constraint governing behavior, processes, or operations to ensure consistency, compliance, and efficient functioning. These rules include types like 'Load Balancer' for ticket allocation and 'Impact Service' for automatically assigning tickets based on criteria, such as hardware diagnostics to a specific IT team level.", "summary": "Gets a business_rule with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BusinessRule"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string that uniquely identifies the business rule to be fetched. Business rules are crucial for processes like auto-assignment of tickets and managing workload distribution. They can also be defined with a 'Rule Name' and 'Description', and their 'Type' dictates predefined logic for task assignment. For example, a rule can be named 'Hardware Diagnostics - Assign to IT Team Level 1' and automatically assign related tickets to technicians at that level."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Operations Team"], "primary_use_case": "To retrieve detailed information about specific business rules, enabling administrators and IT operations to understand, manage, and audit how automated processes like ticket allocation and auto-assignment are configured and executed within the Infraon product."}, "content_for_embedding": "This API endpoint facilitates the retrieval of comprehensive details for a specific business rule, identified by its unique ID. Business rules are foundational to the Infraon product, acting as configurable guidelines that dictate system behavior, such as automated ticket assignment and workload distribution. By using this endpoint, users can access critical information about a rule, including its name, description, and type, which is essential for auditing, troubleshooting, and ensuring the consistent and efficient operation of automated workflows and compliance within the organization.", "semantic_keywords": ["Business Rule Management", "Details retrieval", "Configuration"], "ontology_classification": {"features": ["infraon_configuration.business_rules_for_auto-assignment", "workspace.detailed_record_view"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/business_rule/business_rule/{id}/", "method": "PUT", "details": {"operationId": "ux_common_business_rule_business_rule_update", "description": "This endpoint is used to modify the details of an existing Business Rule for the current organization within the Infraon product ecosystem. A Business Rule acts as a specific guideline or constraint that governs the behavior, processes, or operations to ensure consistency, compliance, and efficient functioning. Modifying a business rule allows users to update its definition, including its name, type (e.g., 'Load Balancer' for ticket allocation), description, and other criteria that determine how tasks or actions are assigned or allocated based on specified conditions. This operation is crucial for adapting system behavior to changing requirements or optimizing existing processes.", "summary": "Edits the business_rule with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BusinessRule"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "additional_info": "The Business Rule to be edited is identified by its unique `id` provided as a path parameter. The request body for this PUT operation will consist of the updated details for the Business Rule. The serializer for documents recognizes various primitive field types (StringField, IntField, BooleanField, DateTimeField, etc.) and compound fields like `ListField` and `DictField`, which are mapped to DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. When editing, ensure the updated data conforms to these recognized field types. This endpoint is typically used to update rules concerning ticket management, auto-assignment mechanisms, or other operational guidelines within the Infraon system, such as those related to service impact or technician level assignments."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Configurator", "Automation Engineer"], "primary_use_case": "To modify and update existing business rules that govern system behavior, processes, and operations, including ticket management and auto-assignment mechanisms."}, "content_for_embedding": "This API endpoint is designed to modify the details of an existing Business Rule within the Infraon product ecosystem. Business Rules serve as specific guidelines or constraints that dictate system behavior, processes, or operations, ensuring consistency and efficiency. This includes updating definitions such as the rule's name, type (e.g., for ticket allocation), description, and other criteria that determine how tasks or actions are assigned based on specified conditions. The operation is critical for adapting system behavior to changing requirements or optimizing existing automated processes. The Business Rule to be edited is identified by its unique ID provided in the path. The request body contains the updated details, which must conform to recognized field types. This endpoint is typically used to update rules related to ticket management, auto-assignment, service impact, or technician level assignments within the Infraon system.", "ontology_classification": {"features": ["business_rules_for_auto-assignment", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Update", "Edit", "Business Rule Management"]}}, {"path": "/ux/common/business_rule/business_rule/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_business_rule_business_rule_destroy", "description": "This endpoint is used to permanently delete an existing business rule for the current organization. A business rule in the context of Infraon products refers to a specific guideline or constraint that governs behavior, processes, or operations within the product's infrastructure, ensuring consistency, compliance, and efficient functioning. Deleting a business rule is an irreversible action, similar to the deletion of an SLA Profile, as highlighted in the broader documentation.", "summary": "Deletes the business_rule with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BusinessRule"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the business rule to be deleted. Business rules can be defined for various purposes, including the auto-assignment of tickets in the Infraon system, often categorized into types such as 'Load Balancer' or rules related to ticket allocation. Once deleted, the business rule and its associated configurations, such as match criteria or remedy actions, are removed from the system. There is no response body indicating success, only a successful status code."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator"], "primary_use_case": "To manage and delete specific business rules that govern automated processes and operational constraints within Infraon products, ensuring system consistency and compliance."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of an existing business rule identified by its unique ID within the current organization. Business rules are crucial guidelines or constraints that dictate behavior, processes, and operations across Infraon products, such as auto-assignment of tickets. The deletion is a critical administrative action, similar to removing an SLA Profile, and has no response body upon successful completion, only a 204 status code.", "semantic_keywords": ["Delete", "Business Rule Management", "Configuration"], "ontology_classification": {"features": ["business_rules_for_auto-assignment"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/business_rule/business_rule/create-csv/", "method": "POST", "details": {"operationId": "ux_common_business_rule_business_rule_create_csv_create", "description": "This API endpoint facilitates the creation of a CSV file for business rules. While the original description broadly mentioned viewing or editing users, the path `/ux/common/business_rule/business_rule/create-csv/` strongly indicates its purpose is related to generating CSV exports of business rules. This aligns with the concept of allowing users to 'view and perform add operations' (Context Rank 6) and 'sharing results via link or CSV' (Context Rank 9). It supports submitting and viewing requests (Context Rank 1), which could include business rules being created or modified, and subsequently exported.", "tags": ["BusinessRule"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "summary": "", "additional_info": "The request body, specifically described as a 'Serializer for Documents,' defines how various fields (StringField, IntField, DateTimeField, etc.) and complex structures (ListField, DictField, ReferenceField, EmbeddedDocumentField) within the document are mapped for serialization. Developers should be aware of how these primitive and compound fields are handled, especially concerning nested field specifications and the distinction between 'ReferenceField' and 'EmbeddedDocumentField' for different depth levels. Generic fields like 'GenericReferenceField' and 'GenericEmbeddedDocumentField' are also explicitly supported. Fields such as FileField, ImageField, and BinaryField are noted as 'not well supported or untested,' and other unmapped fields may behave incorrectly. This endpoint is crucial for scenarios requiring bulk data operations or exports of business rule configurations, potentially for auditing or migration purposes."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with specific privileges", "Data Analyst"], "primary_use_case": "To generate and export business rule configurations in CSV format for auditing, migration, or bulk data operations."}, "content_for_embedding": "This API endpoint allows for the creation and export of business rule configurations into a CSV file. It supports bulk data operations, enabling users to generate CSV exports of existing business rules for purposes such as auditing, migration, or external analysis. The request body defines the schema for various data types within the business rule document, including nested structures and references.", "ontology_classification": {"features": ["report_export_capabilities", "custom_report_creation_and_management"], "primary_module": "Report", "confidence_score": 0.9}, "semantic_keywords": ["Business Rule Management", "Data Export", "Configuration"]}}, {"path": "/ux/common/business_rule/business_rule/csv_cols/", "method": "POST", "details": {"operationId": "ux_common_business_rule_business_rule_csv_cols_create", "description": "This API endpoint, `/ux/common/business_rule/business_rule/csv_cols/`, is designed to manage CSV column interactions for business rules. Its primary purpose, inferred from the path and the context, is to facilitate operations related to business rules, specifically enabling the viewing and editing of data via CSV. This aligns with the capability to export logs in CSV format, sharing results via CSV, and the broader context of allowing users to submit and view requests, which often involves structured data like CSV. The endpoint supports various primitive and compound field types for data serialization, as detailed in the request body description, indicating its flexibility in handling diverse data structures for CSV-based operations.", "tags": ["BusinessRule"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint functions as a serializer for documents, supporting a wide range of primitive field types including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and specialized fields like `GeoPointField` and `UUIDField`. Compound fields such as `ListField` and `DictField` are also supported, with nested serializer auto-generation for `ReferenceField` and `EmbeddedDocumentField` where depth is greater than zero. Users should note that `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested. This endpoint plays a role in managing 'Business Rule' related privileges as highlighted in the provided contexts, particularly in scenarios involving data export and import via CSV."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To manage and interact with CSV columns for business rules, facilitating data viewing, editing, export, and import."}, "content_for_embedding": "This API endpoint, `/ux/common/business_rule/business_rule/csv_cols/`, is designed to manage CSV column interactions for business rules. Its primary purpose is to facilitate operations related to business rules, specifically enabling the viewing and editing of data via CSV. This aligns with the capability to export logs in CSV format, sharing results via CSV, and the broader context of allowing users to submit and view requests, which often involves structured data like CSV. The endpoint supports various primitive and compound field types for data serialization, indicating its flexibility in handling diverse data structures for CSV-based operations. It also plays a role in managing 'Business Rule' related privileges, particularly in scenarios involving data export and import via CSV.", "ontology_classification": {"features": ["business_rules_for_auto-assignment", "roles_&_privileges_management", "report_export_capabilities"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Business Rule Management", "Data Export", "CSV Import"]}}, {"path": "/ux/common/business_rule/business_rule/download_rule_csv/", "method": "GET", "details": {"operationId": "ux_common_business_rule_business_rule_download_rule_csv_retrieve", "description": "This API endpoint allows users to download business rule data in CSV format. Primarily, this functionality is integrated with the 'Business Rule' module within Infraon Infinity, enabling users with appropriate 'Download' privileges to export business rule configurations for offline analysis, sharing, and integration with other tools. It facilitates the export of rule details for review or modification, which can be part of a larger workflow involving the viewing, editing, or managing of business rules as described in the general system privileges.", "tags": ["BusinessRule"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically utilizes the 'Download' privilege, which is a key access control mechanism within Infraon Infinity. Users must have this privilege assigned for the 'Business Rule' module to successfully export the CSV file. The CSV format enables integration with external tools and facilitates bulk operations or analysis of business rule data. While the API specification does not list explicit parameters, the context implies that the download operation would typically apply to the business rule data accessible to the user based on their roles and privileges."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Business Rule Manager", "User with Download Privileges"], "primary_use_case": "This API allows users to download business rule configurations in CSV format for offline analysis, sharing, and integration with other tools."}, "content_for_embedding": "This API endpoint facilitates the download of business rule data in CSV format. It is integrated with the Business Rule module, enabling users with appropriate download privileges to export business rule configurations for offline analysis, sharing, and integration. This includes exporting rule details for review or modification, supporting bulk operations and analysis of business rule data.", "semantic_keywords": ["Business Rule Management", "Data Export", "CSV Export"], "ontology_classification": {"features": ["business_rules_for_auto-assignment", "report_export_capabilities", "adhoc_report_download"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/business_rule/business_rule/multidelete/", "method": "POST", "details": {"operationId": "ux_common_business_rule_business_rule_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of business rules. Users with appropriate 'Delete' privileges can remove multiple rules simultaneously from the system, such as those within the 'Business Catalogue' module (as per Context Ranks 1 and 5). This operation permanently deletes the selected rules, and this action is typically irreversible (Context Rank 6). While the original description mentioned viewing or editing users, the context strongly indicates this endpoint's purpose is related to deleting business rules, aligning with the '/multidelete/' path.", "tags": ["BusinessRule"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to contain data conforming to recognized primitive and compound field types as detailed in the API specification's `request_body_description`. Specifically, it handles `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ObjectIdField`, and other primitive types. Compound fields like `ListField` and `DictField` are mapped to DRF fields. `ReferenceField` and `EmbeddedDocumentField` are processed with nested serializers, while `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own serializer fields. Fields such as `FileField`, `ImageField`, and `BinaryField` have limited or untested support. Users performing this action must possess 'Delete' privileges for the relevant module (e.g., 'Business Catalogue') to successfully remove rules. This multi-delete functionality is crucial for managing and maintaining business rule sets effectively."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Configurator", "IT Operations Staff"], "primary_use_case": "This API enables the efficient and simultaneous removal of multiple business rules from the system, which is critical for maintaining and managing the integrity and relevance of automated processes and system configurations."}, "content_for_embedding": "This API endpoint, accessible via POST to `/ux/common/business_rule/business_rule/multidelete/`, is designed for the bulk deletion of business rules. It allows users with the necessary 'Delete' privileges, typically within modules like 'Business Catalogue', to permanently remove multiple selected rules. This action is generally irreversible and is a key function for managing system configurations and automated processes by cleaning up or modifying existing rule sets.", "semantic_keywords": ["Delete", "Business Rule Management", "User Privileges"], "ontology_classification": {"features": ["business_rules_for_auto-assignment", "roles_&_privileges_management", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/business_rule/business_rule/options/", "method": "GET", "details": {"operationId": "ux_common_business_rule_business_rule_options_retrieve", "description": "This API endpoint provides options for viewing and editing business rules, aligning with the administrative functions for managing user requests and catalog items. It specifically facilitates the ability to inspect and modify existing business rules associated with various operations, such as access requests or catalog item submissions. This functionality is crucial for maintaining the integrity and flow of request management systems.", "tags": ["BusinessRule"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is part of the `/ux/common/business_rule/business_rule` path, indicating its role in managing common business rule configurations within the user experience interface. While the primary description from the API spec mentions 'users to be viewed or edited', the context strongly suggests this refers to the rules governing user-submitted requests (like 'older requests and requests, such as access requests or catalog items') rather than direct user profiles. \n\nGiven the context from `infinity_user_guide_extracted.txt` (specifically Rank 4 and 5), 'Edit' privilege often implies the ability to 'view and perform edit operations within the selected module/page.' Therefore, this endpoint likely provides the necessary interface to either view the current settings of a business rule or to initiate an edit operation on it. This plays a role similar to 'Quick Edit' or 'Detailed Edit' functions described for requests in other parts of the system, but applied to business rules themselves. \n\nNo specific parameters or request body details are provided in the API specification, nor are they clearly inferable from the contexts. Developers should consult further documentation or sample requests for specific payload structures if edit operations are intended."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Administrator", "IT Operations"], "primary_use_case": "This API endpoint is used for managing and configuring business rules that govern system operations, particularly for user requests and catalog item submissions. It provides options for viewing and initiating edits on existing business rules."}, "content_for_embedding": "This API endpoint allows administrators to retrieve options for viewing and editing existing business rules. These rules are critical for managing user requests, such as access requests and catalog item submissions, and ensuring the integrity and flow of request management systems. It supports both inspection and modification of business rules, functioning as an interface for 'Quick Edit' or 'Detailed Edit' operations on these rules.", "semantic_keywords": ["Business Rule Management", "Edit", "Configuration"], "ontology_classification": {"features": ["business_rules_for_auto-assignment"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/business_rule/business_rule/rule_count/", "method": "GET", "details": {"operationId": "ux_common_business_rule_business_rule_rule_count_retrieve", "description": "This API endpoint provides functionality to view and manage business rules. While the original description broadly mentioned 'users to be viewed or edited', the context suggests a focus on permissions and managing requests. Specifically, it likely allows privileged users to view, edit, and potentially delete business rules associated with various processes, such as access requests or catalog items. This aligns with managing configurations related to how requests are approved or rejected, as indicated by references to 'business rule' and 'edit operations within the selected module/page' for privileged users.", "tags": ["BusinessRule"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "summary": "", "additional_info": "The path `/ux/common/business_rule/business_rule/rule_count/` suggests that this endpoint might also provide a count of rules, perhaps indicating the total number of business rules configured in the system or the number of rules associated with specific criteria. Although the JSON specification has an empty `parameters` field, it's possible that filtering or specific rule identification parameters could be introduced in future iterations to refine the view or edit scope. The endpoint's utility is likely tied to administrative functions, enabling the configuration and management of system-wide operational logic and workflows."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "This API endpoint is used by privileged users, such as administrators, to view and manage business rules, including retrieving a count of existing rules. It supports the configuration and management of system-wide operational logic and workflows, particularly those related to approval and rejection processes for requests and catalog items."}, "content_for_embedding": "This API endpoint, accessible via GET at `/ux/common/business_rule/business_rule/rule_count/`, provides functionality for viewing and managing business rules. While the path specifically suggests retrieving a count of rules, the API's broader purpose, as described, is to enable privileged users to view, edit, and potentially delete business rules. These rules are integral to managing system configurations, operational logic, and workflows, especially concerning the approval and rejection processes for various requests and catalog items. Its utility is primarily for administrative functions, allowing for the oversight and modification of how the system processes and governs its operations through defined business rules.", "semantic_keywords": ["Business Rule Management", "Rule Count", "User Privileges"], "ontology_classification": {"features": ["business_rules_for_auto-assignment", "roles_&_privileges_management", "workflow_automation", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/business_rule/business_rule/upload-csv/", "method": "POST", "details": {"operationId": "ux_common_business_rule_business_rule_upload_csv_create", "description": "This API endpoint facilitates the upload of CSV files related to business rules. It enables users with appropriate 'Upload' privileges to add or update records within the 'Business Rule' module. Specifically, it supports the bulk import of data through CSV files, which is crucial for operations such as adding multiple requesters or bulk resource tagging/untagging. The system validates uploaded CSV files and provides a summary of valid and invalid records. This endpoint supports a variety of data types within the CSV, utilizing a comprehensive serializer for documents, including string, URL, email, integer, float, boolean, date/time, and various complex and compound fields suitable for structured data import. For example, it allows for adding and performing add operations within the selected module.", "tags": ["BusinessRule"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessRule"}}}, "description": ""}}, "summary": "", "additional_info": "The upload functionality is specifically designed for CSV files, with capabilities for drag-and-drop or browsing to upload. The system provides validation reports for uploaded CSVs, allowing users to download details on invalid records. Supported file formats for general attachments (though not exclusively for this endpoint) include png, jpeg, jpg, txt, doc, docx, CSV, xls, xlsx, pdf, with a maximum size of 20MB. \n\nRegarding the request body, the API utilizes a serializer for documents. Primitive fields such as `StringField`, `URLField`, `EmailField`, `IntField`, `FloatField`, `BooleanField`, `DateTimeField`, `DateField`, and `UUIDField` are recognized. Compound fields like `ListField` and `DictField` are mapped appropriately for nested structures. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. Developers should be aware of unsupported or untested fields like `FileField`, `ImageField`, and `BinaryField`, which may not function as expected.\n\nCommon use cases include: bulk adding of entities (e.g., requesters), bulk tagging or untagging resources, and general data import for business rule configurations. Users should ensure their CSV data conforms to the expected structure and data types for successful processing."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Users with Upload privileges", "Data entry personnel"], "primary_use_case": "This API facilitates the bulk import and update of business rules, requester details, and resource tags via CSV file uploads. It streamlines the process of populating and modifying data within the Business Rule module, ensuring data validation and providing summaries of processed records."}, "content_for_embedding": "This API endpoint allows for the secure upload of CSV files to import or update business rules, bulk add requesters, and perform bulk resource tagging or untagging. It supports various data types and includes validation mechanisms to report on valid and invalid records, making it essential for efficient bulk data management within the Business Rule module.", "ontology_classification": {"features": ["business_rules_for_auto-assignment", "tag_management", "roles_&_privileges_management", "advanced_resource_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["CSV Import", "Business Rule Management", "Configuration"]}}, {"path": "/ux/common/business_service/business_service/", "method": "GET", "details": {"operationId": "ux_common_business_service_business_service_list", "description": "This endpoint is used to retrieve a paginated list of 'Business Service' configurations for the current organization. These Business Services are components of the service catalogue, which serves as the backend for services offered through the business catalog. The service catalogue module allows administrators or catalogue managers to define and manage products or services that can be viewed, wish-listed, and requested by internal and external end-users. Each Business Service represents a configured item offered to the end-user, facilitating structured content for a self-service framework, aligning with the concept of a service catalogue aimed at consolidating services and improving productivity. This API provides the capability to fetch these configured service items, enabling various front-end applications to display and manage the organizational service catalog.", "summary": "Gets a list of Business services", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["BusinessServiceConfiguration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination and sorting. `items_per_page` and `page` are mandatory query parameters for controlling the number of items returned per page and the specific page number to retrieve, respectively. Optional query parameters include `sort` for specifying the sorting key (e.g., by service name, creation date) and `reverse` (boolean) to set the sorting order (ascending or descending). Higher-ranked contexts emphasize that the service catalogue lists components offered as services, and this API would be instrumental in managing and displaying such services. The 'Business Service' likely corresponds to the 'Service Configuration' described in the user guides, allowing for detailed information about what is being offered to end-users (e.g., email creation, laptop servicing, HR services)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Developer"], "primary_use_case": "To enable front-end applications to display and manage the organization's service catalog by retrieving configured business service items."}, "content_for_embedding": "This API retrieves a paginated and sortable list of 'Business Service' configurations from the organizational service catalog. These configurations represent items offered to end-users through a self-service framework. It allows front-end applications to display and manage the service catalog. Parameters include items per page, page number, sorting key, and sorting order.", "semantic_keywords": ["Service Catalog", "Business Service", "Details retrieval"], "ontology_classification": {"features": ["knowledge_access_&_utilization", "search_functionality", "article_sorting_options"], "primary_module": "knowledge_base", "confidence_score": 0.9}}}, {"path": "/ux/common/business_service/business_service/", "method": "POST", "details": {"operationId": "ux_common_business_service_business_service_create", "description": "This endpoint facilitates the creation of a new business service within the current organization's service catalog. Business services are integral to the service catalog, which serves as the backend for services offered through the business catalog. It allows administrators or catalog managers to define and manage products or services that can be viewed, wish-listed, and requested by internal and external end-users. The service created via this endpoint is initially in a 'New' state and 'Draft' status, allowing for definition, review, and refinement before being 'Published' for availability on the self-service portal. The process involves defining parameters such as basic information (name, code, description), aligning the service, selecting a catalog to group the service, and potentially adding advanced information and ownership details.", "summary": "Creates a new business service ", "tags": ["BusinessServiceConfiguration"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateBusinessServiceSample": {"summary": "Create Business Service Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "To ensure usability on the self-service portal, the newly created service must be transitioned from 'Draft' to 'Published' status. The service catalogue helps in maintaining a list of components offered as services, improving productivity and facilitating the delivery of services in compliance with SLAs. Examples of services include 'Laptop Setup' or 'MS Office installation'. While the current API specification does not detail request body parameters, based on context from the 'Add Service' page, the creation process typically involves providing 'Service Name', 'Service Code', 'Catalogue', and a 'Description'. The service code serves as an identifier and can be defined based on organizational norms."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalog Manager"], "primary_use_case": "To enable administrators and catalog managers to define and manage new products and services within the organization's service catalog, making them available for end-users on the self-service portal."}, "content_for_embedding": "This API creates a new business service, which is a core component of an organization's service catalog. These services are designed to be offered to internal and external end-users via a self-service portal. The creation process involves defining essential details like service name, code, description, and associating it with a specific catalog. Initially, services are in a 'New' state and 'Draft' status, allowing for refinement before being 'Published' for user access on the self-service portal. This endpoint enables administrators and catalog managers to build and maintain the service offerings available to their users.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Business Service", "Service Catalog", "Add"]}}, {"path": "/ux/common/business_service/business_service/{id}/", "method": "GET", "details": {"operationId": "ux_common_business_service_business_service_retrieve", "description": "This endpoint retrieves the detailed information of a specific business service identified by its unique ID within the current organization. A business service, from an end-user perspective, represents any offering that can be classified as a service, ranging from requests for email IDs or HR policy information to clarification on salary slips. It is offered through the business catalog, which is sustained by the service catalog where administrators define and manage these services.", "summary": "Gets a business service with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BusinessServiceConfiguration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the business service to be fetched. This `id` corresponds to a service defined and managed within the service catalog, which acts as the backend for services displayed in the business catalog. The service catalog itself is designed to structure content for a self-service framework, making it easy for users to select and request services. This endpoint is crucial for fetching specifics about configured products or services that can be viewed, wish-listed, and requested by internal and external end-users."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "End-user", "Developer"], "primary_use_case": "To allow users and administrators to retrieve detailed information about specific business services available in the business and service catalogs, facilitating self-service and service management."}, "content_for_embedding": "This API endpoint allows for the retrieval of detailed information for a specific business service by its unique ID. Business services are offerings available through a business catalog, managed by administrators in a service catalog, and are crucial for a self-service framework, enabling users to view and request services.", "semantic_keywords": ["Business Service", "Service Catalog", "Details retrieval"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/business_service/business_service/{id}/", "method": "PUT", "details": {"operationId": "ux_common_business_service_business_service_update", "description": "This PUT API endpoint allows authorized users to view and edit details of a specific business service within the system, identified by its unique `id`. This functionality is critical for managing services listed in modules like the 'Business Catalogue', where users with 'Edit' privileges can modify existing service entries. The endpoint supports a wide array of primitive and compound field types for the request body, facilitating comprehensive updates to business service information. It maps various field types (e.g., `StringField`, `IntField`, `ListField`, `ReferenceField`) to their corresponding DRF (Django REST Framework) counterparts, enabling flexible data serialization for documents.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BusinessServiceConfiguration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the business service to be updated or viewed. The request body is expected to be a serialized document, supporting numerous primitive field types such as `StringField`, `IntField`, `DateTimeField`, and special types like `ObjectIdField` and `UUIDField`. Compound fields like `ListField` and `DictField` are mapped to DRF fields, and `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers if the serializer depth is greater than 0. Be aware that fields such as `FileField`, `ImageField`, and `BinaryField` are not well-supported or are untested and may not work as expected. Using the 'Edit' privilege ensures users can perform these operations within the selected module, like the 'Business Catalogue', as outlined in the user guide."}, "llm_generated": {"business_context": {"user_personas": ["Authorized Users", "Administrators", "Users with Edit Privileges"], "primary_use_case": "To allow authorized users with edit privileges to update and manage the details of specific business services within the system, particularly those listed in a Business Catalogue."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of existing business service details, identified by a unique ID. It supports comprehensive updates to business service information, handling various field types for data serialization. This functionality is crucial for managing service entries within modules like the Business Catalogue, enabling users with appropriate permissions to modify service configurations.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Business Service", "Update", "Configuration"]}}, {"path": "/ux/common/business_service/business_service/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_business_service_business_service_destroy", "description": "This endpoint permanently deletes an existing business service identified by its unique ID for the current organization. Deleting a business service is irreversible. It is important to note that when a business service is deleted, any dependent categories or services associated with it are also deleted. This action requires appropriate delete privileges, typically granted to users with 'Delete' access to the 'Business Catalogue' module.", "summary": "Deletes the business service with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BusinessServiceConfiguration"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and uniquely identifies the business service to be deleted. The deletion process is irreversible. This endpoint should be used with caution, as it can have cascading effects on other related services and categories. Users must have specific delete privileges to perform this operation. For instance, if a user has 'Delete' privilege for the 'Business Catalogue' module, they can delete existing services. If this action is part of a larger workflow, consider the impact on other services or categories, as indicated by the guide's warning that dependent services are also deleted when a category is deleted, a similar behavior may apply here for business services."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Catalog Manager", "IT Operations personnel with delete privileges"], "primary_use_case": "To permanently delete an existing business service and its associated dependent categories and services from the system, serving as a critical administrative function for managing the service catalog."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific business service identified by its unique ID. The deletion has cascading effects, automatically removing any dependent categories or services linked to the business service. This operation requires specific administrative delete privileges, typically within the 'Business Catalogue' module, and should be used with caution due to its significant impact on the service catalog and related configurations.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Business Service", "Service Catalog", "Configuration"]}}, {"path": "/ux/common/business_service/business_service/breach-status/", "method": "GET", "details": {"operationId": "ux_common_business_service_business_service_breach_status_retrieve", "description": "This API endpoint retrieves and manages the breach status of business services. It allows users with appropriate permissions to view the current breach status and potentially perform 'quick edit' actions, such as updating status, priority, urgency, severity, impact, or assigning the request. More detailed edits related to the breach status or associated requests can also be performed.", "tags": ["BusinessServiceConfiguration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is primarily used for managing business service incidents and requests, allowing for quick actions on breach status updates. While this API allows viewing and 'quick editing', users can also access a 'Detailed Edit' function (as indicated by the context) for more comprehensive modifications. The context also mentions that users can be 'Technicians' or 'Requesters', implying different levels of interaction and potentially different permissions for this API.  Specific parameters for filtering or editing breach status are not detailed in the provided API specification, but the context implies actions like 'status', 'priority', 'urgency', 'severity', and 'impact' can be modified."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Requester"], "primary_use_case": "This API endpoint is designed to manage and retrieve the breach status of business services, enabling users to view current status and perform quick edits on attributes like status, priority, urgency, severity, impact, and assignment. It also supports more detailed modifications related to breach status or associated requests."}, "content_for_embedding": "This API allows for the retrieval and management of the breach status of business services. It provides functionalities for viewing the current breach status and performing quick edit actions such as updating the status, priority, urgency, severity, impact, or assigning the request. Additionally, more detailed edits related to the breach status or associated requests can be performed. This endpoint is crucial for managing business service incidents and requests, facilitating rapid responses and updates. Users, potentially including Technicians and Requesters, can interact with this API to ensure timely resolution and accurate tracking of service breaches.", "semantic_keywords": ["Business Service", "Status", "Update"], "ontology_classification": {"features": ["ticket_state_&_status_management", "quick_edit_(key_attributes)", "detailed_ticket_editing", "assignee_management", "sla_monitoring_&_management"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/business_service/business_service/image-options/", "method": "GET", "details": {"operationId": "ux_common_business_service_business_service_image_options_retrieve", "description": "This API endpoint allows users to manage image options for business services, specifically enabling the viewing and editing of images. Users can add a product image or an icon to denote a service, using drag-and-drop functionality or by uploading files in PNG, JPG, or JPEG formats. This is crucial for customizing the visual representation of services within the platform.", "tags": ["BusinessServiceConfiguration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BusinessServiceConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is primarily concerned with the 'Product Image' aspect of business services, as indicated by context Rank 1, which states that 'Add an image of the product or an icon to denote service. You can add an image using the drag & drop option or upload files in PNG, JPG, or JPEG formats.' While the original description mentions users being 'viewed or edited', the higher-ranked contexts strongly point to image management for services. The 'GET' method implies retrieval of image options, but the description and context also suggest functionality related to adding/editing images. Further clarification on the exact GET request parameters for viewing image options, or if a PUT/POST is intended for editing/adding, would be beneficial for a complete understanding."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Manager"], "primary_use_case": "This API allows users to manage image options for business services, enabling them to view, add, and edit product images or icons. This is crucial for customizing the visual representation of services within the platform."}, "content_for_embedding": "This API endpoint is designed for managing image options associated with business services. Users can view existing images, and add or edit new product images or icons for services. It supports drag-and-drop functionality and file uploads in PNG, JPG, or JPEG formats, facilitating the customization of service visuals within the platform.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "attachment_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Business Service", "Image", "Configuration"]}}, {"path": "/ux/common/catalogue/servicecatalogue/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_list", "description": "This endpoint is designed to fetch the technical Service Catalogue tree. The Service Catalogue functions as the backend for services offered through the Business Catalogue, providing the module where administrators or catalogue managers define and manage products or services. These configured items can then be viewed, wish-listed, and requested by internal and external end-users. The retrieval of this catalogue tree is authorized based on the token used for authentication.", "summary": "Gets a catalogue tree.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Catalogue"}}}}, "description": ""}}, "additional_info": "The Service Catalogue maintains a list of components offered as services to the end-user. It is primarily meant for IT or other respective teams to define categories, subcategories, and services that will be listed in the Business Catalogue for end-users. Access to the catalogue and activities like viewing, adding, modifying, authorizing, and deleting records are restricted to authorized staff and users based on their roles. This API is crucial for understanding the structure and content of defined services before they are presented in the user-facing Business Catalogue."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "IT Team", "Developer"], "primary_use_case": "To provide administrators and catalogue managers with a structured view of the technical Service Catalogue, enabling them to manage and understand the defined services before they are exposed to end-users through the Business Catalogue."}, "content_for_embedding": "This API retrieves the technical Service Catalogue tree, which is the foundational backend for services presented in the Business Catalogue. It allows administrators and catalogue managers to view the hierarchical structure of defined products and services, including categories and subcategories. This is critical for managing and understanding the organization's service offerings, which can include IT services (e.g., email creation, laptop servicing), non-IT services (e.g., HR, finance, admin), and various asset requests. The catalogue serves as the central repository for service definitions, and access to its retrieval is restricted to authorized personnel based on their authentication token.", "semantic_keywords": ["Service Catalog", "Business Service", "Details retrieval"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/catalogue/servicecatalogue/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_create", "description": "This API endpoint, `/ux/common/catalogue/servicecatalogue/`, facilitates comprehensive management of the Service Catalogue. It enables authorized users, including administrators and catalogue managers, to view, create, modify, authorize, and delete service records and categories. This aligns with the Service Catalogue's role as the backend for defining and managing services offered to end-users, such as IT components, HR services, or finance queries. The endpoint supports operations on service items, allowing for detailed descriptions and structured content necessary for self-service frameworks. For example, it allows viewing existing services and adding new ones, and based on user privileges, can support editing or deleting services within the catalogue.", "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "summary": "", "additional_info": "Access to this endpoint and the available actions (viewing, adding, modifying, authorizing, deleting) are strictly controlled by the user's role and assigned privileges. For instance, a user might have 'Add' privilege but not 'Edit' or 'Delete'. The request body expects document-based data, and the serializer supports various primitive fields (StringField, URLField, IntField, BooleanField, DateTimeField, etc.) and compound fields like ListField and DictField. ReferenceField and EmbeddedDocumentField are handled with nested serializers depending on the depth. Generic fields (GenericReferenceField, GenericEmbeddedDocumentField) are also supported. Note that FileField, ImageField, and BinaryField are not well supported or untested, and all other fields are mapped to `DocumentField`, which may lead to incorrect behavior. This endpoint is crucial for defining and maintaining the components offered as services to end-users within Infraon's Service Catalogue."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager", "authorized users"], "primary_use_case": "To manage the Service Catalogue, including viewing, creating, modifying, authorizing, and deleting service records and categories, serving as the backend for defining and managing services offered to end-users."}, "content_for_embedding": "This API endpoint, `/ux/common/catalogue/servicecatalogue/`, is designed for comprehensive management of the Service Catalogue. It allows authorized users, including administrators and catalogue managers, to perform operations such as viewing, creating, modifying, authorizing, and deleting service records and categories. This endpoint is crucial for defining and maintaining services like IT components, HR services, or finance queries, which are offered to end-users through a self-service framework. Access and available actions are strictly controlled by user roles and assigned privileges. The API supports document-based data for service items, including detailed descriptions and structured content, and handles various field types. It is essential for defining and maintaining the components offered as services within Infraon's Service Catalogue.", "semantic_keywords": ["Service Catalog", "Add", "Configuration"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "record_creation_&_management", "record_lifecycle_&_status_management", "roles_&_privileges_management", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/catalogue/servicecatalogue/{id}/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_retrieve", "description": "This endpoint retrieves the detailed information for a specific service identified by its unique `id` within the service catalogue. The service catalogue acts as the backend for services offered through the business catalogue, where administrators or catalogue managers define and manage products or services. These configured items are meant for internal teams (IT, HR, Finance, etc.) to list and manage components offered as services, which can then be viewed, wish-listed, and requested by internal and external end-users via the business catalogue. This endpoint provides access to the granular details of these defined services to facilitate their management and display.", "summary": "Gets a service details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the service within the catalogue. This endpoint is primarily used by IT or other respective teams to manage the services that are listed in the Business Catalogue. The service catalogue is crucial for maintaining a consolidated list of service components offered to end-users and improving productivity levels. Specific details such as the service name, service code, and the catalogue it belongs to (e.g., IT, HR, Finance) are part of the service details. This API facilitates the programmatic access to these defined services."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "IT Team", "HR Team", "Finance Team"], "primary_use_case": "To retrieve detailed information about specific services within the service catalogue, enabling administrators and catalogue managers to effectively manage and display these services for internal and external end-users."}, "content_for_embedding": "This API retrieves comprehensive details for a specific service from the service catalogue using its unique ID. It is designed for internal teams, such as IT, HR, and Finance, as well as administrators and catalogue managers, to facilitate the management, display, and programmatic access of services offered through the business catalogue. The retrieved information includes granular details like service name, service code, and the catalogue it belongs to.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Catalog", "Details retrieval", "Service Details"]}}, {"path": "/ux/common/catalogue/servicecatalogue/{id}/", "method": "PUT", "details": {"operationId": "ux_common_catalogue_servicecatalogue_update", "description": "This endpoint allows authorized users, typically administrators or catalogue managers, to update the details of an existing service within a specific service catalogue. The service catalogue acts as the administrative backend for managing products and services offered through the business catalogue to internal and external end-users. This PUT operation facilitates the modification of configured service items, which are essential for maintaining the list of components offered as services.", "summary": "Edits the service with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "additional_info": "The `id` parameter in the path (`/ux/common/catalogue/servicecatalogue/{id}/`) refers to the unique identifier of the service to be edited. The request body for this endpoint is used to submit the updated service details. It supports various primitive and compound field types for comprehensive data representation, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Special attention is given to `ReferenceField` and `EmbeddedDocumentField`, which can autogenerate nested serializers based on depth. Fields like `FileField`, `ImageField`, and `BinaryField` are not well-supported or tested, and their use may lead to unexpected behavior. This functionality is crucial for maintaining an accurate and up-to-date service catalogue, which is integral to delivering services in compliance with SLAs and enhancing user experience."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager"], "primary_use_case": "To enable authorized users, such as administrators or catalogue managers, to update the details of existing services within the service catalogue, ensuring the accuracy and currency of service offerings."}, "content_for_embedding": "This API endpoint facilitates the modification of existing service details within a service catalogue. It allows authorized users, typically administrators or catalogue managers, to update configured service items by their unique ID. The API supports various field types for comprehensive data representation, including StringField, IntField, BooleanField, DateTimeField, ListField, and DictField, and is crucial for maintaining an accurate and up-to-date service catalogue for internal and external end-users.", "semantic_keywords": ["Update", "Edit", "Service Catalog", "Service Details", "Configuration"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "configuration", "edit"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/catalogue/servicecatalogue/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_catalogue_servicecatalogue_partial_update", "description": "This API endpoint allows authorized users to modify or view a specific service within the Service Catalogue. It is a critical component for managing services offered to end-users, enabling activities such as viewing, adding, modifying, authorizing, and deleting records. Only authorized staff and users with appropriate roles (e.g., administrator, catalogue manager, or privileged users) can access and perform operations on the service catalogue. This includes defining and managing services, adding service categories, and editing existing service entries.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedCatalogue"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedCatalogue"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedCatalogue"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter in the path refers to the unique identifier of the service catalogue entry to be viewed or edited. The request body, if provided for modifications, should adhere to the serializer for Documents. This serializer recognizes a wide range of primitive field types, including StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, GeoJsonBaseField, and DateField. Compound fields like ListField and DictField are supported, as are ReferenceField (similar to ForeignKey) and EmbeddedDocumentField. Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are also handled. Fields like FileField, ImageField, and BinaryField are not well supported or untested. This endpoint is primarily used by administrators or catalogue managers to maintain and update the list of available services, ensuring the service catalogue accurately reflects current offerings."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager", "privileged users"], "primary_use_case": "Managing and updating service catalogue entries."}, "content_for_embedding": "This API allows authorized users, primarily administrators and catalogue managers, to perform partial updates on specific service entries within the Service Catalogue. It enables the modification, viewing, addition, authorization, and deletion of service records, ensuring the catalogue accurately reflects current service offerings to end-users. The update mechanism supports various data types for service attributes.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Catalog", "Update", "Configuration"]}}, {"path": "/ux/common/catalogue/servicecatalogue/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_catalogue_servicecatalogue_destroy", "description": "This endpoint facilitates the deletion of an existing catalogue or service item from the service management backend. The `id` provided in the path specifies the unique identifier of the catalogue or service to be removed. In the context of Infinity, the service catalogue is where administrators or catalogue managers define and manage products or services offered to end-users through the business catalogue. Deleting a catalogue using this endpoint will also result in the deletion of all its dependent categories and services. Similarly, deleting a service will remove that specific offering.", "summary": "Deletes the catalogue or service with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the catalogue or service within the system. Users should be aware that deleting a catalogue has cascading effects, removing all associated categories and services. Similarly, deleting a category will remove all dependent services. This operation is typically performed by an administrator or catalogue manager. There is no response body expected upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager"], "primary_use_case": "To enable administrators and catalogue managers to delete existing service catalogue items, including catalogues, categories, and services, with cascading effects on dependent items."}, "content_for_embedding": "This API endpoint allows for the deletion of a service catalogue item, identified by its unique ID. This includes the ability to remove entire catalogues, which will consequently delete all associated categories and services, or to delete individual services. This operation is a critical part of service management and is typically performed by administrators or catalogue managers within the Infinity platform, where the service catalogue is used to define and manage products and services offered to end-users.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Service Catalog", "Service Management"]}}, {"path": "/ux/common/catalogue/servicecatalogue/add-attachment/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_add_attachment_create", "description": "This endpoint facilitates the addition of attachments for a selected service within the service catalogue. It allows users to upload files, such as product images, screenshots, or team documents, associating them directly with a service entry. The process supports drag-and-drop functionality or direct file uploads in formats like PNG, JPG, or JPEG. Attachments can be categorized (e.g., default, ticket screenshot), and a description can be provided for each.", "summary": "Add attachments for the selected service.", "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to handle various primitive and compound fields, mapping them to corresponding DRF (Django REST Framework) fields. Specifically, it supports basic types like String, URL, Email, Integer, Float, Boolean, and Date/Time fields. Compound fields such as `ListField` and `DictField` are also supported. Special handling is noted for `ReferenceField` (like a ForeignKey) and `EmbeddedDocumentField`, with nested serialization depending on the specified depth. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested', so alternative methods for image and file uploads (like base64 encoding or direct multipart forms if supported by the underlying framework) might be implicitly handled by the input field types described. This endpoint is crucial for enriching service entries with relevant visual and documentary evidence, enhancing the overall service catalogue management experience."}, "llm_generated": {"business_context": {"user_personas": ["Service managers", "Administrators", "Content creators"], "primary_use_case": "To enable users to enrich service entries within the service catalogue by adding various types of attachments, such as product images, screenshots, and documents."}, "content_for_embedding": "This API endpoint allows users to add attachments to a selected service within the service catalogue. It supports uploading various file types like PNG, JPG, and JPEG, either through drag-and-drop or direct file uploads. Attachments can be categorized and described, providing visual and documentary evidence to enhance service entries. It handles diverse data types for robust file and image uploads, crucial for comprehensive service catalogue management.", "ontology_classification": {"features": ["attachment_management", "service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Add", "Attachments", "Service Catalog"]}}, {"path": "/ux/common/catalogue/servicecatalogue/add-catalogue/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_add_catalogue_create", "description": "This endpoint facilitates the creation of a new service catalogue. The service catalogue serves as the backend of service management, allowing administrators or catalogue managers to define and manage products or services offered to end-users (both internal and external). These configured items become viewable, wish-listable, and requestable by requesters. A service catalogue is essential for maintaining a structured list of components offered as services, such as IT, HR, or Finance related items, which can then be grouped to consolidate services and improve productivity.", "summary": "Creates a new catalogue.", "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateCatalogueSample": {"summary": "Create Catalogue Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "When creating a new catalogue, it is used to group services. For example, based on the type of service, you might create catalogues for 'IT', 'HR', or 'Finance'. This catalogue will later be referenced when defining individual services (e.g., Laptop Setup, MS Office installation) to logically group them. While the API specification did not include request body details or parameters, it is implied that the creation of a new catalogue would involve providing at least a name or identifier for the catalogue. This endpoint is part of the 'UX/Common' module, focusing on common user experience functionalities within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "Facilitate the creation and management of service catalogues for defining and grouping services offered to end-users."}, "content_for_embedding": "This API creates a new service catalogue, which is a fundamental part of service management. It enables administrators and catalogue managers to define, organize, and group products or services (e.g., IT, HR, Finance) that will be offered to end-users. These catalogues are essential for structuring service offerings, making them viewable, wish-listable, and requestable. The created catalogue acts as a logical grouping mechanism for individual services like 'Laptop Setup' or 'MS Office installation', improving productivity and streamlining service delivery within an organization.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Catalogue", "Service Management", "Add"]}}, {"path": "/ux/common/catalogue/servicecatalogue/add-service/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_add_service_create", "description": "This endpoint enables the creation and saving of a new service within a selected service catalogue. A service catalogue functions as the backend of services offered through the business catalog, allowing administrators or catalogue managers to define and manage products or services. These configured items can then be viewed, wish-listed, and requested by internal and external end-users. The creation process involves defining key service attributes such as a Service Name (e.g., 'Laptop Setup', 'MS Office installation'), a Service Code for identification (e.g., 'MS_Install', 'HR_Serv_001'), and associating the service with a specific Catalogue (e.g., IT, HR, Finance) or creating a new one if necessary. Services created here are maintained as components offered to end-users.", "summary": "Creates a new service ", "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateCatalogueServiceSample": {"summary": "Create Catalogue Service Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "To effectively add a service, consider the following:\n- **Service Name:** This is a mandatory, user-friendly name for the service.\n- **Service Code:** This is an identifier that should follow organizational norms.\n- **Catalogue Selection:** The service must be grouped under an existing catalogue or a new one can be created dynamically. Choosing the right catalogue helps in organizing services by type (e.g., IT, HR, Finance).\n- **Lifecycle:** It is recommended to save the service in a 'New' or 'Draft' state initially for review and refinement. A service must be in 'Published' status to be available on the self-service portal for end-users.\nThis API is a core part of the service management module, facilitating the population of services that will ultimately be available to end-users via the business catalogue."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "This API enables administrators and catalogue managers to create and save new services within a service catalogue, making them available for end-users through the business catalog and self-service portal."}, "content_for_embedding": "This API endpoint facilitates the creation and saving of new services into a designated service catalogue. It allows administrators and catalogue managers to define essential service attributes such as Service Name, Service Code, and associate the service with an existing or new catalogue (e.g., IT, HR, Finance). Services can be initially saved in a 'New' or 'Draft' state for review and refinement, and must be set to 'Published' status to become accessible to internal and external end-users via the self-service portal. This is a core component of the service management module, enabling the population and organization of services offered to end-users.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Creation", "Service Catalogue", "Service Management"]}}, {"path": "/ux/common/catalogue/servicecatalogue/attachment/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_attachment_retrieve", "description": "This endpoint is used to retrieve attachments associated with a selected service within the Service Catalogue. The Service Catalogue is the backend of services offered through the business catalogue, where administrators or catalogue managers define and manage products or services. These attachments can be related to the service offering itself or associated with specific requests concerning that service. This endpoint facilitates the retrieval of documents, screenshots, or any other files linked to the service, similar to how attachments are displayed for a current request.", "summary": "Gets attachments for the selected service.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "additional_info": "This endpoint specifically targets attachments for services defined in the Service Catalogue. It is distinct from attachments related to individual requests, although the functionality of displaying attachments is similar. The Service Catalogue helps consolidate service offerings and improve productivity by providing a structured content framework for self-service. While the API specification does not list explicit parameters, it is implied that the 'selected service' context is managed to fetch the correct attachments. Users may find attachments related to specific requests through other endpoints, but this one focuses on the service definition itself."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "This API retrieves attachments associated with services defined within the Service Catalogue, enabling administrators and catalogue managers to manage service offerings by accessing linked documents and files."}, "content_for_embedding": "This API endpoint is designed to retrieve attachments for a selected service within the Service Catalogue. The Service Catalogue serves as the backend for managing products and services offered through the business catalogue. These attachments can include documents, screenshots, or any other files linked to the service offering itself. This functionality is similar to how attachments are displayed for a current request, but specifically targets service definitions rather than individual requests. It helps consolidate service offerings and improve productivity by providing a structured content framework for self-service.", "ontology_classification": {"features": ["attachment_management", "service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Attachments", "Service Catalogue", "Service Management"]}}, {"path": "/ux/common/catalogue/servicecatalogue/classification/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_classification_retrieve", "description": "This API endpoint provides functionalities for classifying and organizing entries within the Service Catalogue. It allows authorized users, based on their roles, to view, add, modify, and manage various classifications or categories. This is crucial for defining and managing services, products, or other components offered through the Service Catalogue, ensuring structured content for the self-service framework. Privileged users, such as administrators or catalogue managers, can define and manage service categories vital for proper organization.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is part of the Service Catalogue module, which serves as the backend for services provided through the business catalog. Only authorized staff and users can access and perform activities on the catalogue based on their assigned roles and privileges (e.g., 'Add', 'Edit'). The classifications managed via this API help in organizing requests and service offerings effectively. For instance, requests can be classified and organized by service desk agents. This API is essential for maintaining a structured and manageable list of services and components within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Service Desk Agent", "Authorized Staff"], "primary_use_case": "This API endpoint is used for managing and configuring classifications and categories within the Service Catalogue, enabling structured organization of services, products, and requests for a self-service framework."}, "content_for_embedding": "This API endpoint provides functionalities for classifying and organizing entries within the Service Catalogue. It allows authorized users, based on their roles, to view, add, modify, and manage various classifications or categories. This is crucial for defining and managing services, products, or other components offered through the Service Catalogue, ensuring structured content for the self-service framework. Privileged users, such as administrators or catalogue managers, can define and manage service categories vital for proper organization. This endpoint is part of the Service Catalogue module, which serves as the backend for services provided through the business catalog. Only authorized staff and users can access and perform activities on the catalogue based on their assigned roles and privileges (e.g., 'Add', 'Edit'). The classifications managed via this API help in organizing requests and service offerings effectively. For instance, requests can be classified and organized by service desk agents. This API is essential for maintaining a structured and manageable list of services and components within the system.", "semantic_keywords": ["Service Catalogue", "Classification", "Service Management"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "roles_&_privileges_management", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/catalogue/servicecatalogue/classification/{module_id}/{module_ref_id}/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_classification_create", "description": "This API endpoint facilitates the management and classification of service catalogue components within the system. It allows privileged users, such as administrators or catalogue managers, to perform `View` and `Edit` operations on catalogue items, services, and categories. Specifically, it enables modification of existing catalogue entries based on the provided `module_id` and `module_ref_id`. This endpoint is crucial for maintaining structured content within the self-service framework, ensuring that products and services are accurately defined and managed.", "parameters": [{"in": "path", "name": "module_id", "schema": {"type": "string"}, "required": true}, {"in": "path", "name": "module_ref_id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Catalogue"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "summary": "", "additional_info": "The `module_id` and `module_ref_id` path parameters are required string fields that identify the specific catalogue component to be acted upon. The request body is used for data manipulation and must conform to the defined serializer for Documents, supporting various primitive and compound fields. Developers should note that `FileField`, `ImageField`, and `BinaryField` are not well-supported or tested. The `POST` method suggests that this endpoint handles data submission for editing or modification. It's important to understand that 'Edit' privileges typically allow viewing the listed services and then modifying them, as opposed to 'Add' which would allow adding new ones. The classification aspect suggests integration with how requests are categorized and organized within the system."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager"], "primary_use_case": "To manage and classify service catalogue components, enabling privileged users to view and edit catalogue items, services, and categories within the self-service framework."}, "content_for_embedding": "This API endpoint, `POST /ux/common/catalogue/servicecatalogue/classification/{module_id}/{module_ref_id}/`, is designed for the management and classification of service catalogue components. It enables privileged users, such as administrators or catalogue managers, to perform 'View' and 'Edit' operations on existing catalogue items, services, and categories. The API uses `module_id` and `module_ref_id` for identification and expects a `Catalogue` schema in the request body for data manipulation. It is crucial for maintaining structured content within the self-service framework, acting as the backend for defining and managing products and services offered through the service catalogue. The classification aspect suggests its role in organizing requests and content within the system. It supports modification of existing entries rather than adding new ones.", "semantic_keywords": ["Service Catalogue", "Service Management", "Classification"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/catalogue/servicecatalogue/delete-catalogue/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_delete_catalogue_create", "description": "This endpoint is used to delete an existing service catalogue from the system. A service catalogue is a critical component of service management, defining and managing products or services offered to internal and external end-users. It serves as the backend for services provided through the business catalog. Deleting a catalogue removes the definition of these components that are offered as services.", "summary": "Delete a catalogue.", "parameters": [{"in": "query", "name": "catalogueId", "schema": {"type": "string"}, "description": "Catalogue ID"}], "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"DeleteACatalogue": {"summary": "Delete a catalogue"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "When a catalogue is deleted, all dependent categories and services associated with that catalogue are also deleted. This action cannot be undone. Users must have the appropriate authorization (e.g., administrator or catalogue manager role) to perform this operation. The `catalogueId` query parameter specifies the unique identifier of the catalogue to be deleted. To view all catalogues within a category before deletion, navigate to the specific category name. This endpoint is typically used by authorized staff to manage and maintain the service offerings within the system."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager", "authorized staff"], "primary_use_case": "This API is used to delete existing service catalogues from the system, which are critical for defining and managing products or services offered to end-users. It ensures the removal of service offerings and their dependent components."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of an existing service catalogue. A service catalogue is a foundational element in service management, used to define and manage services and products available to internal and external end-users. Deleting a catalogue also automatically removes all associated dependent categories and services, an irreversible action. This operation requires appropriate authorization, typically performed by administrators or catalogue managers, to maintain and manage the system's service offerings. The catalogue to be deleted is identified by its unique `catalogueId` query parameter.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Service Catalogue", "Service Management"]}}, {"path": "/ux/common/catalogue/servicecatalogue/delete-service/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_delete_service_create", "description": "This endpoint enables the deletion of a specific service from the Service Catalogue. The Service Catalogue is a core component of service management, serving as the backend where administrators or catalogue managers define and manage products or services. These configured items are offered to end-users (internal and external) and can be viewed, wish-listed, and requested. Deleting a service through this endpoint is a crucial administrative function for maintaining the service offering and ensuring an up-to-date list of components available to end-users.", "summary": "Delete a service.", "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"DeleteAService": {"summary": "Delete a service"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint is part of the Service Catalogue management functionalities, allowing administrators to manage defined products and services. As highlighted in the Infinity User Guide, deleting a service can have dependencies; for instance, if a category is deleted, all dependent services under that category are also deleted. While this specific endpoint handles individual service deletion, it's important to be aware of the broader implications for items within the Service Catalogue. This endpoint does not require any specific request body or parameters for its operation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "To enable administrators and catalogue managers to delete specific services from the Service Catalogue, ensuring the service offering remains accurate and up-to-date."}, "content_for_embedding": "This API endpoint allows administrators and catalogue managers to delete a specific service from the Service Catalogue. This is a critical administrative function for maintaining an accurate and current list of services offered to end-users. The deletion of a service can have broader implications, as dependent categories and services may also be affected, as outlined in the Infinity User Guide for Service Catalogue management.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Service Catalogue", "Service Management", "Configuration"]}}, {"path": "/ux/common/catalogue/servicecatalogue/history/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_history_retrieve", "description": "This endpoint retrieves the complete history for a selected service from the service catalogue. The service catalogue is the backend of services provided through the business catalog, where administrators or catalogue managers define and manage products or services. This history includes all activities related to the service's lifecycle, such as creation, modification, updates, and any changes in status or ownership, providing a full audit trail for reporting or troubleshooting purposes. It is crucial for understanding how a service has evolved and for tracking its lifecycle.", "summary": "Gets history for the selected service.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "additional_info": "The history provided by this endpoint is analogous to 'Recent Activities' sections found in other parts of the system, capturing all significant events related to the selected service. While the current API specification does not list explicit parameters, typical history views often include filtering options like date ranges or searches by user who made changes (as seen in asset history contexts). This historical data is valuable for analysis and could potentially be exported for further insights, similar to how asset history details can be downloaded in CSV format. This endpoint helps maintain full visibility into each service's lifecycle within the service management framework."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "IT Support Staff", "Auditor"], "primary_use_case": "Provides a comprehensive audit trail and lifecycle tracking for services within the service catalogue, enabling administrators and catalogue managers to understand service evolution, troubleshoot issues, and generate reports."}, "content_for_embedding": "This API endpoint allows for the retrieval of the complete historical record for a specific service within the service catalogue. It captures all significant activities throughout the service's lifecycle, including creation, modifications, updates, and changes in status or ownership. This comprehensive audit trail is crucial for administrators and catalogue managers to track service evolution, perform troubleshooting, and generate detailed reports. The historical data is analogous to 'Recent Activities' logs and can be filtered by date ranges or user, and is valuable for in-depth analysis, with potential for export in formats like CSV for further insights into service management.", "semantic_keywords": ["Service History", "Audit Trail", "Service Catalogue"], "ontology_classification": {"features": ["recent_activities_log", "historical_data_management", "report_export_capabilities"], "primary_module": "workspace", "confidence_score": 0.9}}}, {"path": "/ux/common/catalogue/servicecatalogue/is-catalogue-exist/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_is_catalogue_exist_retrieve", "description": "This API endpoint, `/ux/common/catalogue/servicecatalogue/is-catalogue-exist/`, is designed to check for the existence of a service catalogue. The service catalogue is a crucial part of service management, serving as the backend where administrators or catalogue managers define and manage products or services offered to end-users. These configured items can be viewed, wish-listed, and requested by internal and external end-users. The service catalogue maintains a comprehensive list of components offered as services, accessible only by authorized staff and users who can perform activities like viewing records based on their role.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "summary": "", "additional_info": "The primary function of this endpoint is to ascertain if a service catalogue exists within the system, likely preceding operations such as viewing, adding, or modifying catalogue entries. While the current specification indicates no parameters or request body, its context suggests it's foundational to broader service catalogue management. The service catalogue is not limited to IT components but can encompass services from various organizational teams (e.g., HR, Finance). Users can access the catalogue to view information, whereas administrators or catalogue managers are responsible for defining and managing services, and adding service categories."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Developer"], "primary_use_case": "To verify the presence of a service catalogue within the system, which is a prerequisite for managing and offering services to end-users."}, "content_for_embedding": "This API checks for the existence of a service catalogue, a central component for defining and managing products and services offered to end-users. It's a foundational check for service management operations, allowing administrators and catalogue managers to confirm the availability of the catalogue before performing actions like viewing, adding, or modifying service entries. The service catalogue can include both IT and non-IT services.", "semantic_keywords": ["Service Catalogue", "Service Management", "Status"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/catalogue/servicecatalogue/options-config/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_options_config_retrieve", "description": "This endpoint is used to retrieve configuration options specifically for the service catalogue. The service catalogue is a crucial component of service management, acting as the backend where administrators or catalogue managers define and manage the products and services offered. These configured items are then made available for viewing, wish-listing, and requesting by both internal and external end-users. This API allows fetching the underlying configurations that govern how these services and products are presented and managed within the catalogue.", "summary": "Gets options regarding service catalogue.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "additional_info": "The service catalogue is designed to maintain a comprehensive list of components offered as services to the end-user. Configuring a service catalogue can consolidate service offerings and improve productivity, enhancing the overall service experience. It is often integrated with a Configuration Management Database (CMDB). This endpoint likely provides the essential settings and definitions that dictate the behavior and content of the service catalogue."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "To retrieve configuration options for the service catalogue, enabling administrators and catalogue managers to manage and present service offerings effectively."}, "content_for_embedding": "This API endpoint is designed to retrieve the underlying configuration options for the service catalogue. The service catalogue is a critical component for service management, allowing administrators and catalogue managers to define, manage, and present various products and services to internal and external end-users. The retrieved configurations dictate how these services are displayed and managed within the catalogue, supporting the overall service offering and enhancing productivity.", "semantic_keywords": ["Service Catalogue", "Configuration", "Details retrieval"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/catalogue/servicecatalogue/service-list/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_service_list_retrieve", "description": "This endpoint retrieves a list of services associated with a specified service catalogue. The service catalogue acts as the administrative backend for service management, where administrators or catalogue managers define and manage products or services. These services are components offered to end-users (both internal and external) which can then be viewed, wish-listed, and requested through the business catalogue. The service catalogue helps maintain a structured list of offerings and facilitates the delivery of services in compliance with SLAs, enhancing workflow and user experience.", "summary": "Get list of services for the selected catalogue.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The service catalogue is distinct from the business catalogue; the former is for IT/respective teams to define services, while the latter is for end-users to select services. Services listed in a catalogue are not limited to IT components but can include HR, Finance, or any other user-requested service, such as email ID requests or HR policy information. This endpoint provides the foundational list of these configurable items managed within a specific catalogue."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "IT Team", "HR Team", "Finance Team"], "primary_use_case": "To retrieve a list of services defined and managed within a specific service catalogue, enabling administrators and catalogue managers to view and manage available offerings for end-users."}, "content_for_embedding": "This GET endpoint retrieves a comprehensive list of services from a specified service catalogue, which functions as the administrative backend for service management. It allows administrators and catalogue managers to define, manage, and view products or services that are offered to internal and external end-users. These services, which can span IT, HR, Finance, and other domains, are then made available for viewing, wish-listing, and requesting through a separate business catalogue. The API supports maintaining a structured inventory of offerings, ensuring compliance with SLAs, and enhancing overall workflow and user experience by providing the foundational list of configurable items.", "semantic_keywords": ["Service Catalogue", "Service Management", "Service Listing"], "ontology_classification": {"features": ["infraon_configuration.service_management_(catalogue_configuration)", "knowledge_base.service_catalog_integration_for_categorization", "request_management.request_display_views_(panel_&_grid)", "request_management.request_search_&_filtering", "asset.self-service_portal_integration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/catalogue/servicecatalogue/service_classes/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_service_classes_retrieve", "description": "This API endpoint provides authorized users with the ability to view and manage service classes within the Service Catalogue. Depending on the user's assigned privileges (e.g., 'Edit' or 'Add'), they can perform operations such as viewing listed services, editing existing services, or potentially adding new ones. The Service Catalogue is where administrators and catalogue managers define and manage the services offered to end-users.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "summary": "", "additional_info": "Access to this endpoint and the scope of actions a user can perform (view, add, edit) are strictly controlled by their assigned roles and privileges. For instance, a user with 'Add' privilege for the 'Business Catalogue' module can view and add services but not edit or delete them. Similarly, a user with 'Edit' privilege can view and perform edit operations. This aligns with the principle that only authorized staff and users can access the catalogue and undertake activities like viewing, adding, modifying, authorizing, and deleting records, all based on their specific role. The service classes managed here are integral to maintaining a list of components offered as services to the end-user."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Authorized User"], "primary_use_case": "To enable authorized users, such as administrators and catalogue managers, to view, add, edit, and manage service classes and their definitions within the Service Catalogue."}, "content_for_embedding": "This API endpoint allows for the retrieval and management of service classes within the Service Catalogue. Users with appropriate privileges can view, add, and modify service definitions, including their classification, name, code, description, and associated details. It is central to maintaining the list of services offered to end-users and is integrated with the self-service portal for operational availability.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Service Catalogue", "Service Management", "Service Classification"]}}, {"path": "/ux/common/catalogue/servicecatalogue/services/", "method": "GET", "details": {"operationId": "ux_common_catalogue_servicecatalogue_services_retrieve", "description": "This API endpoint provides functionalities to view and manage services within a service catalogue. Authorized users, based on their assigned roles, can view existing services. For users with appropriate 'Edit' privileges for the 'Business Catalogue' module, this endpoint also allows for modification of services listed in the catalogue.", "tags": ["Service Catalogue"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Catalogue"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for managing the components offered as services to end-users. Access to viewing and editing services is strictly role-based; only authorized staff and users can perform these activities. For example, a user with 'Edit' privilege to the 'Business Catalogue' module can view and modify existing services, whereas a user with only 'Add' privilege might only be able to view, but not edit. This aligns with the Service Catalogue's purpose of enabling administrators or catalogue managers to define and manage services, service categories, and other users to view catalogue information."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Authorized Staff"], "primary_use_case": "To enable administrators and catalogue managers to view and manage services within the service catalogue."}, "content_for_embedding": "This API endpoint facilitates the viewing and management of services within an organizational service catalogue. It enables administrators and catalogue managers to retrieve details of existing services, and based on their roles and privileges, also supports modification. The endpoint is integral to defining, categorizing, and maintaining the availability of services offered to end-users through a self-service portal.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "tag_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Catalogue", "Service Management", "Service Listing"]}}, {"path": "/ux/common/catalogue/servicecatalogue/update-catalogue/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_update_catalogue_create", "description": "This endpoint allows an administrator or catalogue manager to update an existing A service catalogue, which is a core component of service management. The service catalogue serves as the backend for services offered through the business catalogue, facilitating the definition and management of products or services. It is used to maintain a list of components offered as services to end-users, which can then be viewed, wish-listed, and requested by requesters (internal and external end-users). This update operation is crucial for maintaining the accuracy and relevance of the service offerings.", "summary": "Update a catalogue.", "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"UpdateACatalogue": {"summary": "Update a catalogue"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint does not currently accept any request body or parameters directly. The update operation likely relies on predefined identifiers or a system-level context to identify the catalogue being updated. The service catalogue is accessible only by authorized staff, such as administrators or catalogue managers, who are responsible for defining categories, subcategories, and services. Changes made via this endpoint would directly impact the list of services made available to end-users through the business catalogue, contributing to a smoother workflow involving assignments, approvals, and SLAs."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager"], "primary_use_case": "To enable administrators and catalogue managers to maintain the accuracy and relevance of service offerings by updating existing service catalogues, which are central to defining and managing products and services for end-users."}, "content_for_embedding": "This API endpoint facilitates the update of an existing service catalogue, a fundamental component of service management. It allows authorized personnel, specifically administrators and catalogue managers, to modify and maintain the definitions of products and services offered to end-users through the business catalogue. Although it does not accept a direct request body or parameters, it relies on system-level context to identify the catalogue for update, ensuring the accuracy and relevance of service offerings and impacting the services available to end-users.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Update", "Service Catalogue", "Service Management"]}}, {"path": "/ux/common/catalogue/servicecatalogue/update-service/", "method": "POST", "details": {"operationId": "ux_common_catalogue_servicecatalogue_update_service_create", "description": "This endpoint is used to update an existing service within the service catalogue. The service catalogue serves as the backend for services offered through the business catalogue, allowing administrators or catalogue managers to define, manage, and modify products or services. These services are the components offered to end-users (both internal and external) and can be viewed, wish-listed, and requested by them.", "summary": "Update a service.", "tags": ["Service Catalogue"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"UpdateAService": {"summary": "Update a service"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This API is crucial for maintaining up-to-date service offerings. When updating a service, ensure that the service details like 'Service Name', 'Service Code', and 'Catalogue' are accurately provided. The 'Service Code' acts as a unique identifier for the service. Services must be in a 'Published' status to be available on the self-service portal. This functionality helps consolidate services offered and improve overall productivity levels by facilitating smooth workflows for assignments, approvals, and SLAs."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "To update existing services within the service catalogue, allowing administrators and catalogue managers to maintain up-to-date service offerings and ensure services are available on the self-service portal."}, "content_for_embedding": "This API endpoint is used to update an existing service within the service catalogue. The service catalogue acts as a backend for services offered to end-users, enabling administrators and catalogue managers to define, manage, and modify products or services. Key service details such as 'Service Name', 'Service Code' (a unique identifier), and 'Catalogue' must be accurately provided during an update. Services need to be in a 'Published' status to be accessible on the self-service portal. This functionality is crucial for maintaining current service offerings, consolidating services, and improving productivity by facilitating smooth workflows for assignments, approvals, and SLAs.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Update", "Service Catalogue", "Service Management"]}}, {"path": "/ux/common/cmdb/blackwhitelist/", "method": "GET", "details": {"operationId": "ux_common_cmdb_blackwhitelist_retrieve", "description": "This endpoint retrieves a paginated list of all predefined tags within the current organization. Tags are simplified identification keywords used extensively within Infraon to group items or users, enabling efficient filtering and categorization across various modules such as Assets, Users, Expertise, Services, Incidents, and Requests. This allows organizations to define custom labels for various entities, facilitating use cases like tagging assets by brand or location, users by team or skills, or services by category.", "summary": "Gets a list of tags", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["CMDBBlacklistWhitelist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "Tags are critical for managing service availability and filtering data. For example, User Tags can control service access by limiting services to specific user groups (e.g., HR services restricted to internal users). Request tags, which must be predefined in the 'General Settings -> Tag Management module', are used to group requests. The response is paginated and can be sorted. Users must specify 'items_per_page' and 'page' for pagination. Optional parameters include 'sort' for the sorting key (e.g., tag name) and 'reverse' for the sorting order (ascending/descending)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To retrieve a paginated and sortable list of predefined tags used for categorization, grouping, and filtering across various modules within the organization."}, "content_for_embedding": "This API retrieves a paginated and sortable list of predefined tags. These tags are essential identification keywords used extensively within Infraon to group and categorize items or users across modules such as Assets, Users, Services, Incidents, and Requests. The tags are managed via the Tag Management module in General Settings and facilitate efficient data organization and access control.", "semantic_keywords": ["Tags", "Details retrieval", "Pagination"], "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/blackwhitelist/", "method": "POST", "details": {"operationId": "ux_common_cmdb_blackwhitelist_create", "description": "This endpoint facilitates the creation and management of software whitelists and blacklists within the system. Whitelisting explicitly permits specified software to run or be installed, enhancing security by ensuring only authorized applications are present. Conversely, blacklisting excludes software deemed undesirable, malicious, or unauthorized, blocking their installation or execution. This API combines the functionality to define both types of lists, enabling comprehensive control over software assets for improved security and compliance.", "summary": "Creates new Software whitelist and blacklist ", "tags": ["CMDBBlacklistWhitelist"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateSampleSoftwareWhitelistAndBlacklist": {"value": {"type": "1", "label": "List of Whitelist & Blacklist software", "description": "List of white and blacklist software", "whitelist": ["python"], "blacklist": ["node"]}, "summary": "Create Sample Software whitelist and blacklist"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This API endpoint is crucial for software and application security, allowing administrators to define allowed and disallowed programs. Common reasons for blacklisting include known malware, viruses, unwanted applications, pirated software, and vulnerable applications that pose security risks. Whitelisting offers advantages such as enhanced security by allowing only vetted software, simplified management, and improved compliance with security regulations. The request body requires specifying 'whitelist' and 'blacklist' arrays, containing the names of software to be added to each respective list, along with a 'type', 'label', and 'description' for the configuration.", "parameters": [{"name": "type", "in": "body", "description": "Inferred parameter: type", "required": true, "schema": {"type": "string"}}, {"name": "label", "in": "body", "description": "Inferred parameter: label", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "whitelist", "in": "body", "description": "Inferred parameter: whitelist", "required": true, "schema": {"type": "string"}}, {"name": "blacklist", "in": "body", "description": "Inferred parameter: blacklist", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "To create and manage software whitelists and blacklists for enhanced security and compliance within the system."}, "content_for_embedding": "This API creates and manages software whitelists and blacklists within the system. It allows administrators to define allowed and disallowed programs, enhancing security by ensuring only authorized applications run and blocking undesirable or malicious software. This comprehensive control over software assets aids in improving security and compliance. The API combines functionality to define both types of lists, requiring specification of software names in whitelist and blacklist arrays, along with type, label, and description for the configuration.", "ontology_classification": {"features": ["software_blacklist_&_whitelist", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Software Whitelist", "Software Blacklist", "Application Control"]}}, {"path": "/ux/common/cmdb/blackwhitelist/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_blackwhitelist_retrieve_2", "description": "This endpoint provides an adaptation of DRF (Django Rest Framework) ModelViewSet for retrieving specific entries from the CMDB (Configuration Management Database) Black/Whitelist. It allows for the fetching of data records identified by a unique ID, similar to how fields are described for clarity and identification in various system components. This includes details like name, type, and associated actions (e.g., edit, delete) for individual entries, providing a structured way to access CMDB configurations.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBBlacklistWhitelist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path parameter, which is a string identifier for the specific black/whitelist entry to be retrieved. While the original description mentions 'No response body', typically a GET request to a ModelViewSet adaptation with an ID would return the details of the requested object. The context suggests that entries might correspond to assets, devices, or fields with descriptive details and associated types, similar to 'Asset Tags' or 'Device Type' as seen in other system modules. Developers should expect a JSON response containing the details of the specified entry."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To retrieve specific entries from the Configuration Management Database (CMDB) Black/Whitelist, providing detailed information about blacklisted or whitelisted items."}, "content_for_embedding": "This API retrieves specific entries from the CMDB (Configuration Management Database) Black/Whitelist using a unique ID. It provides detailed information about blacklisted or whitelisted items, including their name, type, and associated actions. Developers can use this endpoint to access structured CMDB configurations and retrieve details of specific black/whitelist entries.", "semantic_keywords": ["Software Blacklist", "Software Whitelist", "Details retrieval"], "ontology_classification": {"features": ["software_blacklist_&_whitelist"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/blackwhitelist/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_blackwhitelist_update", "description": "This `PUT` endpoint is part of the CMDB's black/whitelist management, specifically designed to update an existing entry identified by its unique `id`. It functions as an adaptation of a DRF ModelViewSet, allowing for modification of configuration details related to assets or fields. For example, it can be used to update a field's description, set a specific display value, or change its format, impacting how information is displayed on pages like Log Search, Lens, and Data View Management. This endpoint could also be used to update details for asset tags, as seen in the context where `IN` values like 'IT- Asset' or 'Samsung' are chosen.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBBlacklistWhitelist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the black/whitelist entry to be updated. While the request body description is currently 'No response body' in the provided JSON, it is assumed that a request body containing the updated configuration details for the specific `id` would be required for a `PUT` operation. Although not explicitly detailed in the API spec or provided context, the context suggests that updates could include setting or changing field descriptions, values, or display formats, similar to how fields are managed or asset tags are updated. The changes are expected to affect visualization and data representation across various management interfaces."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Administrators", "Configuration Managers"], "primary_use_case": "To update existing entries within the Configuration Management Database (CMDB) black/whitelist, allowing modification of configuration details for assets, fields, and asset tags, which impacts how information is displayed across various management interfaces."}, "content_for_embedding": "This API endpoint facilitates the update of existing entries in the Configuration Management Database (CMDB) black/whitelist. It enables modification of configuration details related to assets and fields, such as updating field descriptions, display values, formats, and asset tags. Changes made through this endpoint directly influence data visualization and representation in interfaces like Log Search, Lens, and Data View Management. This is a PUT operation, requiring an 'id' to identify the specific black/whitelist entry to be updated.", "semantic_keywords": ["Software Blacklist", "Software Whitelist", "Configuration"], "ontology_classification": {"features": ["software_blacklist_&_whitelist", "advanced_resource_configuration_(aiops)", "customizable_asset_properties_and_fields", "tag_management", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/blackwhitelist/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_blackwhitelist_destroy", "description": "This endpoint allows for the deletion of a specific entry from the CMDB black/whitelist. It is an adaptation of the DRF ModelViewSet for managing these configurations. The `id` in the path parameter uniquely identifies the entry to be deleted. Similar to how fields and assets are managed, this operation provides a way to remove unwanted or outdated blacklist/whitelist entries, aiding in maintaining accurate configuration management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBBlacklistWhitelist"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path parameter, and it represents the unique identifier of the blacklist or whitelist entry to be deleted. The API returns no response body upon successful deletion, indicating that the operation was completed. This operation is analogous to deleting a field in a Multi-Index for comprehensive log analysis or removing an asset from inventory, as referenced in the provided documentation contexts. It's crucial to ensure the correct `id` is provided to prevent accidental deletion of critical entries."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "To delete specific entries from the CMDB blacklist/whitelist to maintain accurate configuration management."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific entry from the CMDB blacklist or whitelist by its unique identifier (ID). It is crucial for maintaining accurate configuration management by allowing the removal of unwanted or outdated blacklist/whitelist entries. This operation is analogous to deleting a field or an asset from an inventory, ensuring precise control over configuration settings.", "semantic_keywords": ["Delete", "Software Blacklist", "Software Whitelist"], "ontology_classification": {"features": ["software_blacklist_&_whitelist", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/blackwhitelist/options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_blackwhitelist_options_retrieve", "description": "This endpoint provides options for blacklisting and whitelisting configurations within the CMDB, likely related to asset tags and configurations. It appears to be an adaptation of a DRF ModelViewSet, implying it manages a list of black/whitelist options. Based on the context, this could involve filtering resources by 'Asset Tags' such as 'IT- Asset', 'IT-asset', 'Samsung', 'TAG1', 'Windows', 'Core', 'noc', and more, allowing users to select multiple values from a dropdown. It also relates to analyzing device configurations, highlighting differences between current and previous versions, aiding in troubleshooting and ensuring policy adherence. This suggests that the black/whitelist options might be used to define or filter configurations that are deemed acceptable or unacceptable.", "tags": ["CMDBBlacklistWhitelist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification states there are no parameters, the related contexts suggest the concept of 'Asset Tags' and selecting values for filters (e.g., 'IN' for inclusion). Although the API spec also states 'No response body', the functionality description implies a dynamic retrieval of options for configuration management. Users might interact with this endpoint to fetch valid configuration options for setting up blacklists or whitelists, which could then be applied to operations like comparing configuration files or ensuring policy compliance. The process typically involves selecting relevant configurations and then potentially saving these selections, as indicated by 'Click \u2018Save and Proceed\u2019 button' and 'Click \u201cSave\u201d to proceed' in the context."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Administrators", "Configuration Managers", "Security Analysts"], "primary_use_case": "To provide dynamic options for blacklisting and whitelisting configurations, particularly for asset tags, to enable filtering of resources and ensure policy adherence within IT operations and configuration management."}, "content_for_embedding": "This API retrieves dynamic options for blacklisting and whitelisting configurations within the CMDB, primarily focusing on asset tags. It enables users to fetch valid configuration choices for defining acceptable or unacceptable device configurations, facilitating filtering of resources and ensuring policy adherence within IT operations.", "ontology_classification": {"features": ["software_blacklist_&_whitelist", "it_operations", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Software Blacklist", "Software Whitelist", "Configuration"]}}, {"path": "/ux/common/cmdb/category/", "method": "GET", "details": {"operationId": "ux_common_cmdb_category_retrieve", "description": "This endpoint retrieves a comprehensive list of all CMDB (Configuration Management Database) categories available within the current organization. CMDB, referred to as 'Assets' in Infraon, is a crucial component integrated with the Service Catalog, helping to consolidate services and improve productivity. It stores a database of assets or CIs (Configurable Items) owned by the business, encompassing both IT and non-IT assets. This endpoint facilitates the viewing and management of these organizational assets by providing their categorization.", "summary": "Gets a list of cmdb category", "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "Infraon's CMDB (Assets) allows administrators and asset managers to view and manage all organizational assets from a single location. While this endpoint lists CMDB categories, it's important to note that, as seen with contract categories (from Contexts 5 and 7), new categories might not be creatable by users and may be limited to predefined types. There are no specific parameters required for this GET request. Deleting a category may also lead to the deletion of associated services, as indicated in a relevant context (Context 10)."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "asset manager", "developer"], "primary_use_case": "To retrieve a comprehensive list of all CMDB (Configuration Management Database) categories, which are used for categorizing and managing organizational assets within Infraon."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of CMDB (Configuration Management Database) categories, referred to as 'Assets' in Infraon. These categories serve as the first division for classifying both IT and non-IT assets within the organization. The CMDB is a crucial component integrated with the Service Catalog, consolidating services and improving productivity by storing a database of configurable items (CIs). This endpoint supports the viewing and management of organizational assets by providing their categorization. It's important to note that new categories may not be user-creatable, and deleting a category could lead to the deletion of associated services.", "semantic_keywords": ["CMDB category", "Asset category", "Details retrieval"], "ontology_classification": {"features": ["hierarchical_asset_categorization", "asset_search_and_filtering", "unified_asset_repository", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/category/", "method": "POST", "details": {"operationId": "ux_common_cmdb_category_create", "description": "This endpoint is used to create and save a new category within the Configuration Management Database (CMDB) for the current organization. Categories are fundamental for organizing various entities, such as services, configuration items (CIs), and contracts. While the endpoint facilitates the creation of new categories, it's important to note that certain pre-defined categories, like those for contracts (Software, Hardware, Lease, Service), might not be creatable via this mechanism, as specified in related documentation (Context Ranks 8 and 9). The proper categorization of entities helps streamline processes, improve record-keeping for gate procedures, and enhances overall service experience.", "summary": "Creates a new category ", "tags": ["CMDBCategory"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"status": "success"}}}, "description": ""}}, "additional_info": "When creating a new category, consider its potential impact on related entities. For instance, if a category is subsequently deleted, associated services linked to that category may also be deleted (Context Rank 1). While not explicitly detailed in the parameters, the new category likely requires attributes such as a name and possibly a description. This API would be instrumental in setting up the foundational structure for various CMDB assets and service catalogs, contributing to improved productivity and organized management of organizational resources."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "CMDB Manager", "Service Desk Manager", "System Integrator"], "primary_use_case": "To enable the creation and management of foundational categories within the Configuration Management Database (CMDB) for organizing various IT entities like services, configuration items (CIs), and contracts, thereby streamlining processes and improving record-keeping for asset and service management."}, "content_for_embedding": "This API endpoint facilitates the creation of new categories within the Configuration Management Database (CMDB). These categories are essential for organizing diverse entities such as services, configuration items (CIs), and contracts, forming a foundational structure for CMDB assets and service catalogs. While it enables the creation of new categories, certain pre-defined categories (e.g., for contracts like Software, Hardware, Lease, Service) may not be creatable via this mechanism. Proper categorization enhances process efficiency, improves record-keeping for gate procedures, and contributes to an improved overall service experience. It's crucial to note that the deletion of a category can lead to the deletion of associated services. The API likely requires attributes such as a category name and description for successful creation. Categories serve as the first division of assets within a selected asset type, such as laptops or desktops within IT assets, and defining them is a primary step in asset addition.", "ontology_classification": {"features": ["hierarchical_asset_categorization", "ci_relationship_management_(cmdb)", "unified_asset_repository", "multiple_asset_addition_methods", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB category", "Asset category", "Classification"]}}, {"path": "/ux/common/cmdb/category/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_category_retrieve_2", "description": "This API endpoint allows retrieval of a single CMDB (Configuration Management Database) category by its unique identifier. CMDB categories are an integral part of the Service Catalog, which consolidates services offered and enhances productivity by integrating CIs (Configurable Items) owned by the business. Infraon's CMDB assets are referred to as 'Assets' and play a crucial role in managing IT and non-IT organizational assets. This endpoint facilitates access to specific category definitions within the CMDB structure.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the CMDB category to be retrieved. A Service Catalog is often integrated with a CMDB, which serves as a database of assets or CIs. When a CMDB category is deleted, all dependent services associated with it are also deleted. This endpoint helps in understanding individual category definitions that contribute to the overall asset and service management framework."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Service Managers", "Asset Managers", "Developers"], "primary_use_case": "To retrieve specific Configuration Management Database (CMDB) category definitions, which are integral for managing IT and non-IT assets and structuring the Service Catalog."}, "content_for_embedding": "This API endpoint allows for the retrieval of a single CMDB (Configuration Management Database) category by its unique identifier. CMDB categories are fundamental for organizing and classifying both IT and non-IT assets (Configurable Items or CIs) within an organization. They are also a key component of the Service Catalog, which consolidates available services. This endpoint provides detailed access to these category definitions, supporting comprehensive asset and service management. The `id` path parameter is required to specify the CMDB category to be retrieved.", "ontology_classification": {"features": ["hierarchical_asset_categorization", "asset_search_and_filtering", "ci_relationship_management_(cmdb)", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB category", "Asset category", "Details retrieval"]}}, {"path": "/ux/common/cmdb/category/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_category_update", "description": "This API endpoint allows for the modification or update of a specific CMDB (Configuration Management Database) category. CMDB, referred to as 'Assets' within Infraon, is a critical database that stores information about IT and non-IT assets and Configuration Items (CIs) owned by the business. CMDB categories are integral to organizing and managing these assets, often integrated with Service Catalogs to consolidate services and improve productivity. Updating a CMDB category can impact how connected assets or services are recognized and managed within the system, especially considering that deleting a category also deletes its dependent services.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the CMDB category to be updated. While the API specification indicates 'No response body' for this `PUT` operation, successful updates typically result in a 2xx status code. This endpoint is crucial for maintaining the structure and accuracy of the CMDB, allowing administrators or asset managers to refine asset classification. Given that 'all dependent categories and services are deleted if a catalog is deleted' and similarly 'all dependent services are also deleted when a category is deleted,' caution should be exercised when modifying categories, as it can have cascading effects on associated services and assets."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager", "IT Operations"], "primary_use_case": "To modify and update existing CMDB categories, which are essential for organizing and managing IT and non-IT assets, and to ensure accurate asset classification within the system."}, "content_for_embedding": "This API updates a specific CMDB (Configuration Management Database) category, which is crucial for organizing and managing IT and non-IT assets within Infraon. Modifying these categories impacts how connected assets and services are recognized and managed, with potential cascading effects on dependent services and assets. It is used for maintaining the structure and accuracy of the CMDB and refining asset classification.", "ontology_classification": {"features": ["hierarchical_asset_categorization", "ci_relationship_management_(cmdb)", "asset_lifecycle_management", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["CMDB category", "Asset category", "Update"]}}, {"path": "/ux/common/cmdb/category/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_category_destroy", "description": "This API endpoint provides a DELETE operation for managing CMDB categories within the system. It allows for the removal of a specific CMDB category identified by its unique ID. CMDB (Configuration Management DataBase) is crucial for managing assets and Configuration Items (CIs), which are often integrated with service catalogs to enhance service experience and productivity. Deleting a category will also result in the deletion of all its dependent services, as highlighted in the documentation.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the CMDB category to be deleted. CMDB in Infraon is referred to as 'Assets,' where administrators manage all IT and non-IT assets. This endpoint is critical for maintaining an organized and accurate asset management system. Users should exercise caution when deleting categories, as dependent services are also removed, which can impact catalog services. This action directly affects how services are offered and managed within the business catalogue."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager", "Service Catalog Manager"], "primary_use_case": "To maintain an organized and accurate asset management system by allowing administrators to delete specific CMDB categories, which also results in the deletion of dependent services, impacting service catalogs."}, "content_for_embedding": "This API facilitates the deletion of a specific CMDB (Configuration Management Database) category identified by its unique ID. This operation is critical for maintaining an organized and accurate asset management system within Infraon, where CMDB is referred to as 'Assets'. Deleting a CMDB category will also result in the deletion of all its dependent services, directly impacting how services are offered and managed within the business catalog. This endpoint is used by administrators and asset managers to manage IT and non-IT assets and ensure data integrity within the CMDB.", "semantic_keywords": ["CMDB category", "Delete", "Asset management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "hierarchical_asset_categorization", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/category/all_options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_category_all_options_retrieve", "description": "This API endpoint allows users to retrieve all available categories for CMDB (Configuration Management Database) assets. It supports the consolidation and management of IT and non-IT assets, which are referred to as 'Assets' within Infraon's CMDB. This data can be crucial for building effective service catalogs and managing CIs (Configurable Items) within the business.", "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Infraon's CMDB is integrated with the Service Catalog functionality to enhance service experience and productivity. The categorization provided by this API can be used to establish connections between assets and their respective locations or departments, contributing to more precise and streamlined asset management. As per the API specification, this endpoint does not require any parameters or request body and returns no explicit response body, suggesting it might dynamically populate UI elements or be part of a larger client-side workflow."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Asset Managers", "Service Catalog Managers"], "primary_use_case": "Enabling efficient asset management and service catalog creation by providing a comprehensive list of CMDB asset categories."}, "content_for_embedding": "This API endpoint retrieves all available categories for Configuration Management Database (CMDB) assets, encompassing both IT and non-IT assets within Infraon's CMDB. This categorization is fundamental for effective asset management, enabling the establishment of connections between assets and their locations or departments. It also plays a crucial role in building comprehensive service catalogs and managing Configurable Items (CIs). The API supports streamlined asset management processes by providing the foundational data for asset classification, which is the first step in asset management as per Infraon's categorization structure: Asset Type -> Asset Category -> Asset Sub-Category -> Asset. This endpoint is integrated with Service Catalog functionality and is designed to dynamically populate UI elements or support client-side workflows, requiring no parameters or request body.", "ontology_classification": {"features": ["hierarchical_asset_categorization", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB category", "Asset category", "Asset management"]}}, {"path": "/ux/common/cmdb/category/audit_template_options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_category_audit_template_options_retrieve", "description": "This API endpoint allows retrieval of audit-related configuration options for CMDB categories. It is designed to provide choices for audit templates and related auditing functionality, aligning with the functionalities described in various user guides. This includes options for viewing audit details such as Timestamp, Task Name, IP Address, and messages, as well as configurations for upload jobs and generation of various audit reports.", "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint contributes to functionalities like viewing audit details which include Upload Job, Configuration Template, IP Address, Vendor, Created By, Executed By, and Result. It also supports 'View Audit' pop-ups that display information such as Timestamp, Task Name, IP Address, and respective messages. Furthermore, the endpoint is relevant for generating detailed summaries of configuration download activities and user actions during download job executions, as well as managing log exports and audit trail production for compliance."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Compliance Officer", "Auditor"], "primary_use_case": "To retrieve audit-related configuration options for CMDB categories, enabling the setup and viewing of audit details and reports for compliance and system activity review."}, "content_for_embedding": "This API endpoint retrieves audit-related configuration options for CMDB categories. It provides choices for audit templates and supports various auditing functionalities, including viewing audit details such as Timestamp, Task Name, IP Address, and messages. It also facilitates configurations for upload jobs and the generation of diverse audit reports. The endpoint is crucial for viewing audit details like Upload Job, Configuration Template, IP Address, Vendor, Created By, Executed By, and Result, and supports 'View Audit' pop-ups. Furthermore, it enables generating detailed summaries of configuration download activities and user actions, as well as managing log exports and ensuring audit trail production for compliance.", "semantic_keywords": ["Audit Trail", "Configuration", "CMDB category"], "ontology_classification": {"features": ["audit_log", "ci_relationship_management_(cmdb)", "nccm_reports_(configuration_download_&_jobs_account_audit)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/category/custom_options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_category_custom_options_retrieve", "description": "This API endpoint allows retrieval of custom options related to CMDB (Configuration Management DataBase) categories. The CMDB, referred to as 'Assets' in Infraon, is a crucial database of configurable items owned by a business, often integrated with a Service Catalog to enhance service experience and consolidate service offerings. This specific endpoint facilitates requests for custom options within these CMDB categories, enabling more precise and streamlined asset management by defining customizable attributes for various asset types.", "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint performs a `GET` operation, meaning it is used for retrieving data and does not require a request body. While the API specification did not list any specific parameters, typical usage scenarios for CMDB category custom options might involve filtering or specifying categories to retrieve relevant custom attributes. CMDB categories are configurable, playing a role in how service requests are initiated and approved, and can influence how assets are related to locations or departments, allowing for enhanced flexibility in asset management and service catalog configurations. Although not explicitly detailed for this endpoint, related contexts mention request categorization and potential sub-categories, which suggests custom options could provide fine-grained control over asset definitions."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "Service Catalog Administrators"], "primary_use_case": "Retrieving custom options for CMDB categories to enable precise and streamlined asset management and service catalog configurations."}, "content_for_embedding": "This API endpoint retrieves custom options for CMDB (Configuration Management DataBase) categories. The CMDB, referred to as 'Assets' in Infraon, is a crucial database of configurable items. This endpoint facilitates defining customizable attributes for various asset types, enabling precise and streamlined asset management. CMDB categories are configurable and play a role in how service requests are initiated and approved, influencing how assets are related to locations or departments, allowing for enhanced flexibility in asset management and service catalog configurations.", "ontology_classification": {"features": ["customizable_asset_properties_and_fields", "hierarchical_asset_categorization", "ci_relationship_management_(cmdb)", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB category", "Asset category", "Asset management", "Configuration", "Details retrieval", "Service Catalog"]}}, {"path": "/ux/common/cmdb/category/dropdown_options_for_all_tab/", "method": "GET", "details": {"operationId": "ux_common_cmdb_category_dropdown_options_for_all_tab_retrieve", "description": "This API endpoint retrieves dropdown options for all tabs within the CMDB category. It provides a predefined list of CMDB contract categories, such as Software, Hardware, Lease, and Service, which are dynamically displayed based on the types of contracts added to the system. This allows users to select categories from a dropdown menu, facilitating precise asset management and filtering options.", "tags": ["CMDBCategory"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Users cannot create new contract categories; only the predefined categories are available for selection. This endpoint is crucial for populating dropdown menus where CMDB categories need to be selected, such as when establishing connections between assets and their respective locations or departments within the CMDB view, or for filtering releases based on various fields and conditions."}, "llm_generated": {"business_context": {"user_personas": ["User", "IT Asset Manager"], "primary_use_case": "This API retrieves predefined CMDB contract categories for populating dropdown menus, enabling users to select categories for precise asset management and filtering."}, "content_for_embedding": "This API endpoint retrieves a predefined list of CMDB contract categories, such as Software, Hardware, Lease, and Service. These categories are dynamically displayed as dropdown options, facilitating precise asset management and filtering within the CMDB system. Users cannot create new contract categories; only the existing predefined options are available for selection. This is crucial for populating dropdowns when establishing connections between assets and their locations/departments or for filtering releases.", "ontology_classification": {"features": ["predefined_contract_categorization", "contract_filtering_capabilities", "hierarchical_asset_categorization", "asset_search_and_filtering"], "primary_module": "contract_management", "confidence_score": 0.9}, "semantic_keywords": ["CMDB category", "Contract categories", "Dropdown options"]}}, {"path": "/ux/common/cmdb/cloud/", "method": "GET", "details": {"operationId": "ux_common_cmdb_cloud_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["CMDBCloud"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "Developers"], "primary_use_case": "This API is used for retrieving Configuration Management Database (CMDB) information specifically related to cloud resources."}, "content_for_embedding": "This API provides a read-only interface to query and obtain detailed information about cloud assets and their configurations stored within the Configuration Management Database (CMDB). It is a GET operation designed for fetching existing CMDB cloud data, enabling users to retrieve specific details about their cloud infrastructure as managed within the CMDB.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB category", "Details retrieval", "Cloud Resources"]}}, {"path": "/ux/common/cmdb/cloud/", "method": "POST", "details": {"operationId": "ux_common_cmdb_cloud_create", "description": "Adaptation of DRF ModelViewSet", "tags": ["CMDBCloud"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations", "Developers"], "primary_use_case": "To create new cloud configuration items (CIs) within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API allows for the creation of new cloud-based Configuration Items (CIs) within the Configuration Management Database (CMDB). It is a POST operation, part of a DRF ModelViewSet adaptation, and uses API Key authentication. It facilitates the addition of cloud resources to the system's inventory.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "multiple_asset_addition_methods"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Cloud Resources", "CMDB category", "Add"]}}, {"path": "/ux/common/cmdb/cloud/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_cloud_retrieve_2", "description": "Adaptation of DRF ModelViewSet", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBCloud"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "Retrieving detailed information about a specific cloud resource from the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API performs a GET request to retrieve the detailed information of a specific cloud resource identified by its unique ID from the Configuration Management Database (CMDB). It is an adaptation of a DRF ModelViewSet, indicating standard data retrieval capabilities for CMDB cloud assets.", "semantic_keywords": ["CMDB", "Cloud Resources", "Details retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/cloud/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_cloud_update", "description": "Adaptation of DRF ModelViewSet", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBCloud"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Integrators", "Developers"], "primary_use_case": "To update and maintain accurate records of cloud resources within the Configuration Management Database (CMDB)."}, "content_for_embedding": "A PUT API endpoint designed to update the details of a specific cloud resource identified by its unique ID within the Configuration Management Database (CMDB). This operation allows for modification of existing cloud asset records, ensuring the CMDB accurately reflects the current state and configuration of cloud infrastructure. It is crucial for maintaining up-to-date IT asset information and supporting configuration management processes.", "semantic_keywords": ["Update", "CMDB", "Cloud Resources"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/cloud/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_cloud_destroy", "description": "Adaptation of DRF ModelViewSet", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBCloud"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "System Integrators"], "primary_use_case": "To remove specific cloud resources from the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API facilitates the permanent removal of a designated cloud resource from the Configuration Management Database (CMDB) by its unique identifier. It is secured via API Key authentication and is primarily used by IT administrators and operations teams for managing and cleaning up cloud infrastructure assets.", "semantic_keywords": ["Delete", "CMDB", "Cloud Resources"], "ontology_classification": {"features": ["asset_lifecycle_management", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/cloud/ec2-instances/", "method": "GET", "details": {"operationId": "ux_common_cmdb_cloud_ec2_instances_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["CMDBCloud"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations", "Cloud Engineers", "Developers"], "primary_use_case": "This API is used to retrieve and list Amazon EC2 instances from the Configuration Management Database (CMDB). It enables users to query and manage their cloud asset inventory."}, "content_for_embedding": "This API endpoint facilitates the retrieval and listing of Amazon EC2 instances from the Configuration Management Database (CMDB). It serves as a crucial component for managing cloud asset inventory, allowing users to access detailed information about their EC2 resources within the CMDB system.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "inventory_data_collection", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB", "Cloud Resources", "Asset management"]}}, {"path": "/ux/common/cmdb/consumable/", "method": "GET", "details": {"operationId": "ux_common_cmdb_consumable_retrieve", "description": "This endpoint, based on the DRF ModelViewSet, is designed to retrieve information related to CMDB (Configuration Management Database) consumables. In Infraon's context, the CMDB is referred to as 'Assets,' which encompasses all IT and non-IT organizational assets. This allows administrators and asset managers to view and manage these assets in a centralized location. The endpoint facilitates understanding and managing the consumption of these assets, which are integral to an effective service catalog.", "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Infraon's CMDB (Assets) facilitates the establishment of logical connections between assets and their respective locations or departments, allowing for precise and streamlined asset management. While the specific parameters for consumable retrieval are not detailed in the provided API spec, typical CMDB views allow for exploration of relationships (upstream/downstream) and filtering by location or department. The overall purpose aligns with enhancing service experience and productivity by providing comprehensive asset management capabilities."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager"], "primary_use_case": "Retrieving and managing consumable assets within the Configuration Management Database (CMDB) for comprehensive asset oversight and service catalog integration."}, "content_for_embedding": "This API endpoint is designed to retrieve information about CMDB (Configuration Management Database) consumable assets. In Infraon's context, CMDB is referred to as 'Assets', encompassing all IT and non-IT organizational assets. It allows administrators and asset managers to view, manage, and understand the consumption of these assets, which are integral to an effective service catalog. The API supports establishing logical connections between assets and their locations or departments, enabling precise and streamlined asset management. While specific parameters for consumable retrieval are not detailed, typical CMDB views allow for exploration of relationships and filtering by location or department. Consumable assets include items like printer ink, paper, and markers, and their management ensures continuous availability and cost control. The system provides capabilities for searching by asset ID, name, owner, and filtering by asset name, ID, owner, location, requester, and type. It also supports viewing detailed information including summary, inventory details, and recent activities, and categorizing assets for easier management and tracking.", "semantic_keywords": ["CMDB", "Asset management", "Consumable Assets"], "ontology_classification": {"features": ["consumable_asset_management", "asset_search_and_filtering", "ci_relationship_management_(cmdb)", "unified_asset_repository", "detailed_asset_activity_log", "hierarchical_asset_categorization", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/consumable/", "method": "POST", "details": {"operationId": "ux_common_cmdb_consumable_create", "description": "This `/ux/common/cmdb/consumable/` endpoint facilitates the creation or modification of 'consumable' items within the Configuration Management DataBase (CMDB), which Infraon refers to as 'Assets'. It integrates with the established CMDB view, allowing for precise and streamlined management of assets and their relationships. This POST request is designed to add new consumable items, likely linked to asset management functionalities such as tracking inventory, connecting assets to locations or departments, and updating configuration item (CI) relations based on predefined rules. Its underlying implementation adapts the Django Rest Framework's ModelViewSet patterns, providing a robust mechanism for data interaction.", "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for managing consumable assets within Infraon's CMDB (Assets module). It is expected to be used for tasks related to updating CI relations when associated entities (e.g., user, requester, department, asset, or location) are modified. While the API specification does not detail request body parameters, the context strongly suggests that the request will involve defining characteristics of the consumable item, possibly including relationships to other CIs or assets. The operation's success likely contributes to maintaining an accurate and comprehensive database of IT and non-IT assets, supporting an effective service catalog and improved productivity levels within an organization."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Asset Manager", "Inventory Manager"], "primary_use_case": "To create or modify consumable assets and manage their relationships within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint facilitates the creation and modification of 'consumable' items within the Configuration Management Database (CMDB), which Infraon refers to as 'Assets'. It supports asset management functionalities such as tracking inventory, connecting assets to locations or departments, and updating configuration item (CI) relations. The endpoint allows for adding new consumable items with various details including product image, asset name, category, owner/technician, end user/requester, owner tags, asset tags, location, quantity, re-order quantity, buying price, selling price, low stock threshold, threshold user type, threshold to, type (degradable/non-degradable), expiry date, model, description, and currency. It is crucial for maintaining an accurate and comprehensive database of IT and non-IT assets.", "ontology_classification": {"features": ["consumable_asset_management", "ci_relationship_management_(cmdb)", "multiple_asset_addition_methods", "inventory_data_collection", "unified_asset_repository", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["Consumable Assets", "CMDB", "Asset management"]}}, {"path": "/ux/common/cmdb/consumable/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_consumable_retrieve_2", "description": "This endpoint provides detailed information about a specific 'consumable' asset within the Configuration Management DataBase (CMDB), which is referred to as 'Assets' in Infraon. It allows administrators and asset managers to view comprehensive details for a given consumable, similar to how other IT and non-IT assets are managed. The retrieval of consumable details aligns with the broader asset management capabilities described in the Infinity User Guide, which emphasizes precise and streamlined asset management by establishing connections between assets and their locations or departments.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter for this GET request represents the unique identifier of the consumable item you wish to retrieve details for. While the original description states 'No response body,' this is likely a placeholder or an indication that the response structure can vary based on the specific consumable's attributes. Based on CMDB views, it's expected that the response would contain details such as asset ID, device type, hostname, IP address, make, model, and potentially relationships (upstream/downstream) to other CIs/assets. This endpoint is an adaptation of the DRF ModelViewSet, suggesting standard RESTful behavior. It's crucial for managing and obtaining granular information on individual consumable assets within the CMDB, which supports effective service catalog management and overall IT asset visibility."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager"], "primary_use_case": "This API retrieves detailed information about a specific consumable asset from the Configuration Management Database (CMDB), enabling administrators and asset managers to view comprehensive details for individual consumable items and support overall IT asset visibility."}, "content_for_embedding": "This API provides detailed information about a specific consumable asset within the Configuration Management Database (CMDB). It allows for the retrieval of comprehensive details for a given consumable item, including asset ID, device type, hostname, IP address, make, model, and potential relationships to other Configuration Items (CIs) or assets. This endpoint is crucial for managing and obtaining granular information on individual consumable assets, supporting effective service catalog management and overall IT asset visibility.", "ontology_classification": {"features": ["consumable_asset_management", "ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Consumable Assets", "CMDB", "Details retrieval"]}}, {"path": "/ux/common/cmdb/consumable/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_consumable_update", "description": "This PUT endpoint is used to update the details of a specific 'consumable' Configuration Item (CI) within the Configuration Management Database (CMDB). Consumables are considered a type of asset within Infraon's CMDB system. This update mechanism supports precise and streamlined asset management by allowing modifications to CI relations and asset attributes, such as user, requester, department, asset ID, and location. It adapts the standard DRF ModelViewSet for managing these consumable CMDB items, ensuring that changes to CI information, like asset and relation updates, are correctly propagated.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the consumable CI to be updated. While the API specification mentions 'No response body', a successful update typically implies a 2xx HTTP status code. The request body for this PUT operation is crucial for defining the updates to the consumable CI. Although `request_body_description` is empty in the provided spec, based on the context, this body would likely include fields related to asset properties such as 'Asset ID', 'Device Type', 'IP Address', 'Make', 'Model', and relationship information (e.g., 'location' or 'department'). This endpoint is key for maintaining an accurate and up-to-date CMDB, which integrates with the service catalog to enhance service experience and operational productivity."}, "llm_generated": {"business_context": {"user_personas": ["System administrators", "IT asset managers", "CMDB managers", "IT support staff"], "primary_use_case": "This API is used to update the details of specific consumable Configuration Items (CIs) within the Configuration Management Database (CMDB). This is crucial for maintaining accurate and up-to-date asset information, managing CI relations, and ensuring streamlined asset management within the system. It supports the overall goal of enhancing service experience and operational productivity by providing precise control over asset attributes and relationships."}, "content_for_embedding": "This API endpoint facilitates the update of specific consumable Configuration Items (CIs) within the Configuration Management Database (CMDB). It allows for the modification of various asset attributes, including user, requester, department, asset ID, and location, as well as CI relations. This is essential for maintaining accurate and current asset records, supporting asset lifecycle management, and ensuring data integrity within the CMDB system. The update mechanism is part of a broader consumable asset management interface that integrates with the service catalog to improve service experience and operational productivity.", "ontology_classification": {"features": ["consumable_asset_management", "ci_relationship_management_(cmdb)", "asset_lifecycle_management", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["Consumable Assets", "CMDB", "Update"]}}, {"path": "/ux/common/cmdb/consumable/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_consumable_destroy", "description": "This endpoint allows for the deletion of a specific consumable Configuration Item (CI) from the Configuration Management Database (CMDB). In Infraon, the CMDB is referred to as 'Assets', encompassing all IT and non-IT assets owned by the business. Deleting a consumable CI asset helps maintain an accurate and streamlined record within the asset management system, which is crucial for effective service catalog management and overall IT service experience.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter uniquely identifies the consumable CI to be deleted. This API endpoint is an adaptation of the DRF ModelViewSet, indicating standard RESTful conventions for deletion operations. As per the API specification, there is no response body upon successful deletion, typically implying a 204 No Content status. It's important to understand that CMDB entries are integral to asset management, tracking relationships between assets, locations, and departments (Context Rank 1), and defining comprehensive service catalogs (Context Rank 2, 6)."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "CMDB Administrators"], "primary_use_case": "Maintaining accurate asset records within the Configuration Management Database (CMDB) by enabling the deletion of specific consumable Configuration Items (CIs). This supports effective service catalog management and overall IT service experience."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific consumable Configuration Item (CI) from the Configuration Management Database (CMDB), referred to as 'Assets' in Infraon. It ensures accurate and streamlined asset records, which is vital for asset management and service catalog definition. The deletion is performed using a unique 'id' for the consumable CI, following standard RESTful conventions with a 204 No Content response upon success.", "semantic_keywords": ["Delete", "Consumable Assets", "CMDB"], "ontology_classification": {"features": ["consumable_asset_management", "ci_relationship_management_(cmdb)", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/consumable/distribute_stock/", "method": "POST", "details": {"operationId": "ux_common_cmdb_consumable_distribute_stock_create", "description": "This `/ux/common/cmdb/consumable/distribute_stock/` endpoint facilitates the distribution and management of consumable stock within the CMDB (Configuration Management Database). It leverages the DRF ModelViewSet for its adaptation, allowing for actions related to 'consumable' assets \u2013 specifically, the process of distributing or managing their stock. The CMDB, referred to as 'Assets' in Infraon, is a central database for managing IT and non-IT assets, including consumable items. This endpoint likely plays a role in tracking the allocation, inventory status, and availability of consumable assets, similar to how asset availability is monitored by location, and insights are gained into instock quantities and newly added items.", "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint, primarily focused on 'consumable' assets within the CMDB, aligns with the broader CMDB functionality of managing assets and their relationships. While the immediate context doesn't detail specific request parameters or body, typical operations for distributing stock would involve specifying the consumable asset, the quantity to distribute, and the target location or department. The overall goal is to enhance asset management and provide precise and streamlined control over inventory. Given the description, it's expected that actions performed via this endpoint would lead to updates in the total stock available for a consumable asset, potentially reflecting changes in quantity similar to how the 'Total Quantity' field can be modified (Context Rank 9). No specific request body details or parameters are provided in the current API spec, but conceptually, distribution would involve updating stock levels."}, "llm_generated": {"business_context": {"user_personas": ["Asset Managers", "Inventory Managers", "IT Administrators", "Procurement Personnel"], "primary_use_case": "To facilitate the distribution and management of consumable stock within the Configuration Management Database (CMDB), tracking allocation, inventory status, and availability of consumable assets."}, "content_for_embedding": "This API endpoint is designed for the distribution and management of consumable stock within the CMDB. It allows for actions related to consumable assets, specifically distributing or managing their stock. The endpoint tracks allocation, inventory status, and availability, and updates the total stock available for consumable assets, reflecting changes in quantity. Typical operations involve specifying the consumable asset, quantity, and target location or department to enhance asset management and streamline inventory control.", "semantic_keywords": ["Consumable Assets", "Stock distribution", "Inventory update"], "ontology_classification": {"features": ["consumable_asset_management", "inventory_data_collection", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/consumable/options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_consumable_options_retrieve", "description": "This endpoint provides access to options related to 'consumable' items within the Configuration Management DataBase (CMDB). It allows users to retrieve various configurable options for consumables, which are part of the broader asset management system (referred to as Assets within Infraon). The CMDB is central to connecting assets with locations, departments, and services, enhancing asset management precision and streamlining operations. This endpoint, an adaptation of the DRF ModelViewSet, likely facilitates dropdown menus and selection options related to consumable asset attributes or relationships, especially for establishing connections between assets and entities like departments or locations.", "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint, based on the DRF ModelViewSet, serves as a mechanism to fetch predefined options or values relevant to consumable items within the CMDB. While no specific parameters are listed in the API specification, typical usage for such an endpoint would involve populating dropdown menus or selection fields in a UI for asset configuration. The retrieved options could relate to asset tags, models, series, or other attributes that define a consumable asset's properties or its relationships within the CMDB, such as 'IT-Asset' or specific models. It's crucial for functions like updating CI relations and asset details when user, requester, department, asset, or location information is modified. Given the 'no response body' indication in the API spec, it implies that the options might be implicitly defined or that the response is structured differently than a typical body, potentially relying on HTTP headers or status codes, though this is less common for an 'options' endpoint. Further clarification on the actual response structure would be beneficial."}, "llm_generated": {"business_context": {"user_personas": ["Asset Managers", "IT Administrators", "CMDB Administrators"], "primary_use_case": "To retrieve configurable options for consumable assets within the Configuration Management Database (CMDB), facilitating UI elements like dropdowns for asset configuration and updating asset relationships."}, "content_for_embedding": "This API endpoint retrieves configurable options for consumable items stored within the Configuration Management Database (CMDB). These options are crucial for populating dropdown menus and selection fields in user interfaces, enabling precise asset configuration and the establishment or modification of relationships between assets and entities such as locations and departments. It supports the broader asset management system by providing predefined values for attributes like asset tags, models, and series, and is essential for updating CI relations and asset details.", "semantic_keywords": ["Consumable Assets", "CMDB", "Dropdown options"], "ontology_classification": {"features": ["consumable_asset_management", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/consumable/stocks/{ci_id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_consumable_stocks_retrieve", "description": "This endpoint retrieves detailed information about the consumable stock associated with a specific Configuration Item (CI). It provides an adaptation of the Django Rest Framework's ModelViewSet for accessing CMDB data. The response includes details about the consumable asset's available stock, which is essential for precise and streamlined asset management within the CMDB View. This allows users to easily establish connections between assets, their locations, or departments, and understand the total quantity of a consumable asset.", "parameters": [{"in": "path", "name": "ci_id", "schema": {"type": "string", "pattern": "\\w+"}, "required": true}], "tags": ["CMDBConsumables"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `ci_id` path parameter is a required string representing a unique identifier for the Configuration Item. This `ci_id` could relate to various asset details such as hostname, device type, asset ID, or CI Name. The CMDB itself facilitates updating CI relations and assets based on modifications to users, requesters, departments, assets, or locations, and supports CI relation creation based on predefined rules. This API provides insights into the 'Total Quantity' of a consumable, indicating the total stock available. While the response body is explicitly stated as 'No response body' in the provided JSON, it is implied that the data is nonetheless retrieved and perhaps displayed directly within the application's UI, rather than a direct API response payload for external consumption. For understanding asset properties like vendor and type (degradable/non-degradable) also refer to the CMDB documentation. The endpoint aligns with the broader CMDB functionality which includes managing asset information and relationships."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Asset managers", "Inventory managers"], "primary_use_case": "This API retrieves detailed information about the available stock of a specific consumable asset linked to a Configuration Item (CI). It enables users, such as IT administrators or asset managers, to monitor and manage inventory levels, understand asset relationships within the CMDB, and ensure precise asset tracking for operational efficiency."}, "content_for_embedding": "This GET endpoint, `ux_common_cmdb_consumable_stocks_retrieve`, is designed to retrieve detailed information regarding the consumable stock associated with a specific Configuration Item (CI). It functions as an adaptation of Django Rest Framework's ModelViewSet for accessing CMDB data. The response provides crucial details about the available stock of a consumable asset, which is vital for precise and streamlined asset management within the CMDB View. This functionality allows users to easily establish connections between assets, their locations, or departments, and ascertain the total quantity of a consumable asset. The `ci_id` path parameter is a mandatory string representing a unique identifier for the Configuration Item, which can relate to various asset details such as hostname, device type, asset ID, or CI Name. The CMDB facilitates updates to CI relations and assets based on modifications to users, requesters, departments, assets, or locations, and supports CI relation creation based on predefined rules. This API specifically provides insights into the 'Total Quantity' of a consumable, indicating the total stock available. Although the API specification states 'No response body', it implies that the retrieved data is intended for direct display within the application's UI. For further understanding of asset properties like vendor and type (degradable/non-degradable), users should refer to the CMDB documentation. This endpoint is integral to the broader CMDB functionality, which encompasses managing comprehensive asset information and relationships.", "ontology_classification": {"features": ["consumable_asset_management", "ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["Consumable Assets", "CMDB", "Details retrieval"]}}, {"path": "/ux/common/cmdb/item-classification/", "method": "GET", "details": {"operationId": "ux_common_cmdb_item_classification_list", "description": "This endpoint provides a paginated list of customer CI (Configurable Item) configurations for the current organization. These CI configurations are integral to a Service Catalog, which is often integrated with a Configuration Management Database (CMDB), referred to as 'Assets' in Infraon. An effective service catalog consolidates services, improves productivity, and enhances service experience, fulfilling user requirements and easing technician load. This API allows for the retrieval of these essential configuration items, playing a role in managing the assets owned by the business.", "summary": "Gets a list of customer ci configurations", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}}, "description": ""}}, "additional_info": "The API supports pagination through `items_per_page` (required) and `page` (required) query parameters to control the number of results per page and the specific page to retrieve. Results can be sorted using the optional `sort` query parameter and the sorting order can be reversed using the optional `reverse` (boolean) query parameter. While the context extensively discusses various relationships and uses of CIs (e.g., 'uses', 'used by', 'depends on', 'provides data'), this specific endpoint focuses on fetching the general configurations rather than specific relationship types.\n\nInfraon's CMDB (Assets) is a core component for IT service management, and understanding the customer CI configurations is crucial for building and maintaining effective service catalogs. This API serves as a foundational component for populating or querying data related to these configured assets."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Service Desk Managers", "CMDB Specialists", "Developers"], "primary_use_case": "Retrieving Configuration Item (CI) configurations for IT service management, specifically for populating and querying data related to assets within a Configuration Management Database (CMDB) and Service Catalog."}, "content_for_embedding": "This API endpoint retrieves a paginated list of customer Configuration Item (CI) configurations. These configurations are crucial for a Service Catalog and are integrated with a Configuration Management Database (CMDB), referred to as 'Assets' in Infraon. The API supports pagination with `items_per_page` and `page` parameters, and allows sorting using `sort` and `reverse` parameters. It plays a foundational role in managing business assets within an IT service management framework.", "ontology_classification": {"features": ["asset_search_and_filtering", "ci_relationship_management_(cmdb)", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Asset management", "CI configurations"]}}, {"path": "/ux/common/cmdb/item-classification/", "method": "POST", "details": {"operationId": "ux_common_cmdb_item_classification_create", "description": "This endpoint facilitates the creation of a new Configuration Item (CI) classification specific to the current organization. A CI classification helps categorize and manage various IT assets or components within the Configuration Management Database (CMDB) as detailed in the Infinity user guide. This process involves defining the relationships and functionalities of CIs, such as how one CI (e.g., a network endpoint) is implemented by or depends on another CI. The successful classification of CIs contributes to the stability and functionality of applications by ensuring proper categorization and avoiding compatibility issues.", "summary": "Creates a new ci classification", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateCiClassificationSample": {"value": {"classification_name": "", "classification_filters": ""}, "summary": "Create ci classification Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body for this endpoint is expected to contain 'classification_name' and 'classification_filters'. While the example usage provides these, developers should note that CIs are fundamental elements within the CMDB (referred to as Assets in Infraon's CMDB) for organizing and tracking IT infrastructure. Though not explicitly detailed, creating a new classification might involve defining how the categorized CIs 'implement end point from' or 'use end point from' other CIs, establishing their dependencies and relationships. This endpoint is crucial for maintaining an organized and effective service catalog.", "parameters": [{"name": "classification_name", "in": "body", "description": "Inferred parameter: classification_name", "required": true, "schema": {"type": "string"}}, {"name": "classification_filters", "in": "body", "description": "Inferred parameter: classification_filters", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "CMDB managers", "System integrators"], "primary_use_case": "This API facilitates the creation of new Configuration Item (CI) classifications within the Configuration Management Database (CMDB) to categorize and manage IT assets, define their relationships, and ensure proper organization for application stability and service catalog effectiveness."}, "content_for_embedding": "This endpoint creates a new Configuration Item (CI) classification for the current organization. CI classifications are crucial for categorizing and managing IT assets and components within the Configuration Management Database (CMDB), as detailed in the Infinity user guide. It involves defining relationships and functionalities of CIs, such as dependencies (e.g., how one CI is implemented by or depends on another). Successful classification ensures proper categorization, avoids compatibility issues, and contributes to application stability and functionality. The request body requires 'classification_name' and 'classification_filters'. CIs are fundamental elements within the CMDB (referred to as Assets in Infraon's CMDB) for organizing and tracking IT infrastructure. This endpoint is vital for maintaining an organized and effective service catalog by defining how CIs relate and interact.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "hierarchical_asset_categorization"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB", "Asset management", "Classification"]}}, {"path": "/ux/common/cmdb/item-classification/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_item_classification_retrieve", "description": "This endpoint is used to retrieve the detailed classification information for a specific Configuration Item (CI) within the current organization's Configuration Management Database (CMDB). A CI classification provides critical metadata about the CI, such as its source or how it is categorized (e.g., 'Server' as per context). This API helps in understanding the attributes and relationships of various assets managed in the CMDB, enabling more precise and streamlined asset management.", "summary": "Gets a ci classification with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the CI classification to be fetched. The CI attributes define specific behaviors or relationships, such as how a CI is 'used by' or 'uses' other CIs. For detailed understanding of CI types and their attributes, refer to the CMDB View documentation, particularly sections discussing asset connections, relationships (upstream/downstream), and how CIs are established and modified based on rules. This classification is integral to how assets are managed and how they interact within the system."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Managers", "System Administrators", "CMDB Administrators", "Developers (integrating with CMDB data)"], "primary_use_case": "To retrieve and understand the detailed classification information, attributes, and relationships of Configuration Items (CIs) within an organization's Configuration Management Database (CMDB) for precise and streamlined asset management."}, "content_for_embedding": "This API endpoint allows for the retrieval of comprehensive classification details for a specific Configuration Item (CI) identified by its unique ID within the Configuration Management Database (CMDB). The returned information includes critical metadata such as the CI's source, its categorization (e.g., 'Server'), and its various attributes. Understanding these classifications is crucial for managing asset relationships (e.g., 'used by', 'uses') and their interactions within the system, as detailed in CMDB View documentation regarding asset connections and rules-based modifications.", "semantic_keywords": ["CMDB", "Classification", "Asset management"], "ontology_classification": {"features": ["unified_asset_repository", "hierarchical_asset_categorization", "asset_search_and_filtering", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/item-classification/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_item_classification_update", "description": "This endpoint is designed to modify an existing Configuration Item (CI) classification within the system for the current organization. It allows for updates to various attributes of a CI classification. The classification defines how a CI is categorized, which is crucial for managing and understanding the relationships and functionalities of different CIs within the IT infrastructure. This includes defining properties like `Parent` and `Child` relationships between CIs, as well as `Author of` or `Edited by` attributes, which indicate responsible entities for the CI's content or state. The classification can also determine the `Source` from which a CI is created or obtained, or indicate if a CI is `From template`.", "summary": "Edits the ci classification with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and uniquely identifies the CI classification to be edited. The request body supports a variety of primitive and compound field types for updating the CI classification, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Special consideration is given to `ReferenceField` and `EmbeddedDocumentField`, which can auto-generate nested serializers depending on the depth. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. This endpoint is critical for maintaining consistency and accuracy in the CMDB by allowing flexible updates to CI classifications, which can impact how CIs are managed, related (e.g., `Implement End Point From`, `Uses End Point From`), and how visibility or access is configured based on rules as mentioned in context 4. It also plays a role in defining spatial and functional relationships, such as a CI being `located in a specific zone` or if it `Manages` another CI, or for `Source` and template based classifications."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "CMDB managers", "System integrators"], "primary_use_case": "To modify and update existing Configuration Item (CI) classifications within the CMDB system, ensuring accurate categorization, relationship management, and attribute definition for IT infrastructure components."}, "content_for_embedding": "This API endpoint facilitates the modification of existing Configuration Item (CI) classifications within a Configuration Management Database (CMDB) system. It enables comprehensive updates to various attributes that define how CIs are categorized, including their hierarchical relationships (Parent/Child), responsible entities (Author of/Edited by), origin (Source/From template), and functional connections (e.g., Implement End Point From, Uses End Point From, Manages). The endpoint is critical for maintaining the consistency, accuracy, and integrity of CI data, which directly impacts how IT assets are managed, related, and how their visibility or access is configured based on defined rules. It supports flexible updates across diverse field types and is uniquely identified by a CI classification ID.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "hierarchical_asset_categorization", "customizable_asset_properties_and_fields", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Classification", "Update"]}}, {"path": "/ux/common/cmdb/item-classification/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_item_classification_destroy", "description": "This API endpoint is designed for the `DELETE` operation on an item classification within the CMDB (Configuration Management Database). It allows privileged users to remove an existing item classification, such as a catalog item or request type. This action is irreversible, as highlighted in the context regarding delete operations for requests.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter in the path is required and represents the unique identifier of the item classification to be deleted. Given the endpoint's nature and the provided context, users with 'Edit' or 'Delete' privileges, as described in context ranks 4 and 9, would typically be authorized to perform this action. Common use cases include removing outdated catalog items or reclassifying items by deleting old classifications. This endpoint specifically targets 'item-classification' and is not for general user account management or editing, despite the original misleading description. No response body is returned upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["CMDB Administrators", "IT Asset Managers", "Service Catalog Managers"], "primary_use_case": "Managing the Configuration Management Database (CMDB) by removing obsolete or incorrect item classifications."}, "content_for_embedding": "This API allows for the permanent deletion of a specific item classification within the Configuration Management Database (CMDB) by its unique identifier. This includes removing catalog items or request types. The action is irreversible and typically performed by privileged users such as CMDB administrators or IT asset managers to maintain data hygiene, remove obsolete classifications, or facilitate reclassification processes. Upon successful deletion, no response body is returned.", "ontology_classification": {"features": ["hierarchical_asset_categorization", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "CMDB", "Classification"]}}, {"path": "/ux/common/cmdb/item-classification/default-item-classifications/", "method": "GET", "details": {"operationId": "ux_common_cmdb_item_classification_default_item_classifications_retrieve", "description": "This API endpoint provides functionalities related to item classification within the CMDB (Configuration Management Database). It allows users to view and potentially edit default item classifications. This is crucial for managing access requests and catalog items, enabling users to view and manage specific functionalities and requests. It supports operations similar to 'view' and 'edit' privileges described in general access control contexts, ensuring users can either just see the classifications or make detailed modifications to them.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no specific parameters, given the context of 'view' and 'edit' functionalities, it's implied that an item classification to be viewed or edited would either be identified by its path or implicitly handled by the system. The endpoint's lack of parameters suggests it might retrieve a default set of item classifications or operate on a context already established by the application. Further details on specific fields for editing or viewing would typically be found in model definitions or response schemas, which are not provided here. This endpoint is likely used in conjunction with other CMDB management tasks related to access and catalog item definition."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager", "Service Catalog Administrator"], "primary_use_case": "This API endpoint is used to manage and retrieve default item classifications within the Configuration Management Database (CMDB). It enables administrators and users to define and view how items are categorized, which is crucial for controlling access requests and organizing catalog items."}, "content_for_embedding": "This API endpoint provides functionalities for managing default item classifications within the CMDB (Configuration Management Database). It allows users to view and potentially edit these classifications, which are fundamental for defining access control for various functionalities and for structuring catalog items. The API supports operations related to viewing and modifying how items are categorized in the system, impacting access requests and service catalog definitions. Although no explicit parameters are listed, it implies operations on a predefined set of classifications or a context-driven retrieval/modification.", "semantic_keywords": ["CMDB", "Classification", "Service Catalog"], "ontology_classification": {"features": ["hierarchical_asset_categorization", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "service_management_(catalogue_configuration)", "roles_&_privileges_management", "request_classification_&_categorization"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/item-classification/delete-classification-config/", "method": "POST", "details": {"operationId": "ux_common_cmdb_item_classification_delete_classification_config_create", "description": "This API endpoint facilitates the deletion of classification configurations within the CMDB (Configuration Management Database). Although the original description suggests viewing or editing users, the path `/ux/common/cmdb/item-classification/delete-classification-config/` clearly indicates its purpose is for deletion operations, specifically for 'item-classification' configurations.\n\nPrivileged users with 'Delete' access to relevant modules, such as the 'Business Catalogue' or 'Service Catalog' (as per the user guides), can utilize this endpoint to remove existing classification configurations. This action is irreversible, similar to deleting a Request or a Knowledge Base article, as highlighted in the provided contexts. Deleting a catalog or category can also lead to the deletion of dependent services or categories.", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint needs to conform to the `Serializer for Documents` specification described in the API JSON. This serializer supports a variety of primitive fields like `StringField`, `IntField`, `BooleanField`, and `DateTimeField`, as well as compound fields such as `ListField` and `DictField`. It also handles `ReferenceField` and `GenericReferenceField` similar to foreign keys, and `GenericEmbeddedDocumentField`.\n\nFields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, and their behavior may be incorrect. Developers should be aware of this limitation when constructing the request body. While the exact structure for specifying the classification configuration to be deleted is not detailed in the provided JSON, it is implied that the request body will contain the necessary identifiers or data to target the correct configuration for deletion.\n\nAs this is a POST request to a delete endpoint, the request body likely carries the identifier(s) of the classification configuration(s) to be deleted. Given the irreversible nature of delete operations, careful attention to the data provided in the request body is crucial to avoid unintended data loss."}, "llm_generated": {"business_context": {"user_personas": ["Privileged users", "IT administrators", "Service Catalog Managers", "IT Operations Staff"], "primary_use_case": "This API facilitates the deletion of existing item classification configurations within the Configuration Management Database (CMDB). Its primary use case is to enable privileged users to maintain accurate and up-to-date CMDB data by removing obsolete or incorrect classification settings, which is crucial for effective IT asset and service management."}, "content_for_embedding": "This API endpoint allows for the irreversible deletion of item classification configurations within the CMDB. It is designed for privileged users with \"Delete\" access to relevant modules like the Business Catalogue or Service Catalog. The operation is critical as deleting a classification configuration can lead to the deletion of dependent services or categories. The request body is expected to contain the necessary identifiers for the classification configuration to be deleted, conforming to the ItemClassificationConfig schema.", "semantic_keywords": ["Delete", "Classification", "CMDB"], "ontology_classification": {"features": ["it_operations", "service_management_(catalogue_configuration)", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/item-classification/delete-sub-classification/", "method": "POST", "details": {"operationId": "ux_common_cmdb_item_classification_delete_sub_classification_create", "description": "This API endpoint facilitates the deletion of a sub-classification within the CMDB's (Configuration Management Database) item classification structure. While the original description ambiguously mentioned viewing or editing users, the path and relevant contexts strongly indicate a delete operation related to classifications or categories. This action is irreversible, similar to deleting requests or catalogue categories as highlighted in the user guides. This endpoint aligns with the 'Delete' privilege concept, allowing users with appropriate permissions to remove existing services or classifications.", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the serializer for documents, supporting various primitive and compound fields. While the specific fields required for deleting a sub-classification are not explicitly detailed in the `parameters` or `request_body_description` for this DELETE operation, it's expected that the request body (if present, given the POST method) would identify the sub-classification to be deleted. The described serializer supports fields like `StringField`, `ObjectIdField`, and `ReferenceField`, which might be used to define the identifier of the sub-classification. It's crucial for developers to ensure that the identifier for the sub-classification to be deleted is correctly provided in the request body. If a catalog or category is deleted, all dependent categories and services are also deleted, which might apply similarly to sub-classifications, making this an irreversible action requiring caution. Further details on data structures for CMDB classifications might be found in related administration guides."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "CMDB managers", "Users with delete privileges"], "primary_use_case": "To facilitate the irreversible deletion of a sub-classification within the Configuration Management Database (CMDB) item classification structure."}, "content_for_embedding": "This API endpoint allows for the permanent deletion of a specific sub-classification within the CMDB's item classification hierarchy. This action is irreversible and requires appropriate user permissions, similar to deleting catalogue categories or services. The request body is expected to contain the identifier for the sub-classification to be removed.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "it_operations", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "CMDB", "Classification"]}}, {"path": "/ux/common/cmdb/item-classification/item-classifications-tree/", "method": "GET", "details": {"operationId": "ux_common_cmdb_item_classification_item_classifications_tree_retrieve", "description": "This API endpoint provides a hierarchical view of item classifications within the Common CMDB (Configuration Management Database). It allows users to view and potentially edit these classifications, which are fundamental for organizing and managing various IT assets and service catalog items. The functionality is designed to support detailed organization, enabling actions like viewing older requests, access requests, or catalog items, and defining granular privileges for viewing and editing. This is crucial for managing requests and IT service management (ITSM) details effectively.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "summary": "", "additional_info": "The current API specification indicates that this endpoint supports viewing and editing. While the `parameters` and `request_body_description` fields are empty in the provided specification, common actions such as 'Quick Edit' (for status, priority, urgency, severity, impact, service, and assignee) and 'Detailed Edit' (for full request details) are typically associated with such functionalities. Additionally, 'View' privileges allow users to only see specific modules or pages, such as the business catalog services or device status summaries. The API likely integrates with broader ITSM modules to provide a central hub for key information. Users should consult the specific API documentation for parameter details and request body schemas when performing edit operations, as the current specification is generic."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "IT Manager", "IT Support Staff"], "primary_use_case": "To provide a hierarchical view and management capabilities for item classifications within the Common CMDB, enabling users to organize and manage IT assets and service catalog items, and to define granular viewing and editing privileges."}, "content_for_embedding": "This API endpoint offers a hierarchical view of item classifications within the Common Configuration Management Database (CMDB). It facilitates the organization and management of various IT assets and service catalog items by allowing users to view and edit these classifications. The functionality supports detailed organization, including viewing older requests, access requests, or catalog items, and defining granular privileges for viewing and editing. It is crucial for effective request management and IT Service Management (ITSM) details. The API supports both quick and detailed editing, as well as view-only privileges, and integrates with broader ITSM modules.", "ontology_classification": {"features": ["hierarchical_asset_categorization", "ci_relationship_management_(cmdb)", "unified_asset_repository", "service_management_(catalogue_configuration)", "roles_&_privileges_management", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Classification", "Asset management"]}}, {"path": "/ux/common/cmdb/item-classification/options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_item_classification_options_retrieve", "description": "This API endpoint is designed to allow users to view and perform edit operations on various system items, including requests such as access requests or catalog items, and potentially other configurable modules. It supports detailed editing of requests, enabling modifications to status, priority, urgency, severity, impact service, and assignee. The endpoint provides functionalities to manage and update item classifications within the CMDB (Configuration Management Database).", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint's capabilities align with 'View' and 'Edit' privileges, as described in context ranks 3, 7, and 9, allowing users to not only view but also modify details of items. While the API specification does not list explicit parameters, the context suggests that actions such as 'Quick Edit' and 'Detailed Edit' are relevant. The primary use case appears to be managing and updating requests or other classified items within the CMDB, including aspects like status, priority, and assignee. It is crucial to be aware that specific privileges might restrict or enable certain viewing or editing capabilities."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "CMDB Manager", "IT Configuration Specialist", "IT Support Staff"], "primary_use_case": "To configure and manage item classification options within the Configuration Management Database (CMDB), including the ability to view and edit attributes of various system items and requests."}, "content_for_embedding": "This API endpoint allows users to view, manage, and update item classifications within the Configuration Management Database (CMDB). It supports detailed editing of various system items, including requests, enabling modifications to attributes such as status, priority, urgency, severity, impact service, and assignee. The endpoint provides functionalities for quick and detailed editing of these classified items, aligning with CMDB management and request handling processes.", "semantic_keywords": ["CMDB", "Classification", "Edit"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "advanced_resource_configuration_(aiops)", "hierarchical_asset_categorization", "ci_relationship_management_(cmdb)", "quick_edit_(key_attributes)", "detailed_ticket_editing", "ticket_state_&_status_management", "ticket_assignment_(individual/team/expertise)", "request_classification_&_categorization", "request_editing_&_quick_actions", "request_ownership_&_assignment"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/item-classification/pin-item-classifications/", "method": "POST", "details": {"operationId": "ux_common_cmdb_item_classification_pin_item_classifications_create", "description": "This API endpoint, `/ux/common/cmdb/item-classification/pin-item-classifications/`, facilitates the management and interaction with item classifications, specifically focusing on the ability to view and potentially edit them. It integrates with CMDB (Configuration Management Database) functionalities and leverages a robust serialization mechanism for various data types, supporting both simple and complex data structures like lists, dictionaries, and references to other documents. The endpoint aligns with user privileges such as 'View' and 'Edit', as seen in context ranks related to user permissions.", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemClassificationConfig"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to be highly flexible, supporting a wide array of primitive field types including StringField, URLField, IntField, BooleanField, DateTimeField, and ObjectIdField. It also handles compound fields like ListField and DictField, enabling the specification of nested data. ReferenceField allows for relationships similar to foreign keys, while EmbeddedDocumentField permits the inclusion of nested documents. Although the current description notes some fields might not be well supported (FileField, ImageField, BinaryField), the broad support for other types makes it versatile for managing CMDB item classifications. The endpoint is intended for scenarios where users need to view or modify classified items within a CMDB context."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Configuration Manager", "Users responsible for maintaining and updating CMDB item classifications"], "primary_use_case": "To manage and interact with item classifications within a Configuration Management Database (CMDB), specifically allowing users to view and edit these classifications and their associated data."}, "content_for_embedding": "This API manages and interacts with item classifications within a Configuration Management Database (CMDB). It allows users to view and edit item classifications, supporting various data types and complex structures. The endpoint integrates with CMDB functionalities and respects user privileges for viewing and editing classified items.", "semantic_keywords": ["CMDB", "Classification", "Item classification"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "hierarchical_asset_categorization", "customizable_asset_properties_and_fields", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/license/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_retrieve", "description": "This endpoint provides functionality to retrieve a paginated list of all licenses registered within the current organization. It is designed to support detailed software license management by allowing users to fetch information such as license names, versions, support expiry dates, associated users, and assets. The response can be sorted and filtered to efficiently manage software licenses, which are critical for tracking usage, ensuring compliance, and understanding how software can be used and paid for, as defined by developers and users. This aligns with the broader Software License Management module, providing a comprehensive overview of allocated and available licenses.", "summary": "Gets a list of licenses", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The endpoint supports pagination via `items_per_page` and `page` parameters to handle large datasets. Sorting is available using the `sort` parameter, with `reverse` controlling the order. This API is commonly used to populate views showing details like publishers (e.g., Adobe, Autodesk, Windows), license names, and total licenses for specific software. It helps in managing details such as whether a license is purchased or subscription-based, its expiration date, and its status within the CMDB view. While this endpoint focuses on retrieval, it's assumed that other functionalities (like bulk upload of software licenses via CSV or setting up alert notifications for license expiry) would be handled by other dedicated API endpoints. Further context on specific license types (Perpetual, Subscription, Free License, Trial License, Volume) or licensing models (Number of users, device count, or site-based) can be found in related documentation."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Asset Manager", "Compliance Officer"], "primary_use_case": "To retrieve and manage a paginated and sortable list of all software licenses within an organization, enabling users to track usage, ensure compliance, and gain a comprehensive overview of allocated and available licenses."}, "content_for_embedding": "This API endpoint retrieves a paginated and sortable list of all software licenses registered within an organization. It provides detailed information for each license, including license names, versions, support expiry dates, associated users, and assets. The endpoint supports pagination using `items_per_page` and `page` parameters, and allows sorting by a `sort` key with `reverse` order. It is crucial for software license management, enabling users to track usage, ensure compliance, and gain a comprehensive overview of allocated and available licenses, such as perpetual, subscription, free, trial, and volume licenses.", "semantic_keywords": ["Software License", "Pagination", "Retrieval"], "ontology_classification": {"features": ["software_license_management", "asset_search_and_filtering", "Pagination", "Details retrieval"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/license/", "method": "POST", "details": {"operationId": "ux_common_cmdb_license_create", "description": "This endpoint, an adaptation of Django REST Framework's ModelViewSet, is designed to manage CMDB (Configuration Management Database) license information. It likely facilitates operations related to creating, updating, or viewing license details within the CMDB, which are crucial for tracking software licenses and their associated properties. This includes handling license types with end dates and providing clear visibility of license-specific attributes. It's an integral part of asset management, particularly for IT and non-IT assets within Infraon's CMDB.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification shows no response body, typical usage, as suggested by the context, would involve viewing license details such as License Name, Version, Support Expiry Date, Users, Assets, and License Module. It may also allow for uploading new license keys. Given the mention of 'Bulk Upload Of Software License' via CSV files, this endpoint or a related one could support bulk operations with a limit of 5000 records. For license expiry, it is possible to set up alert notifications, applicable only to license types with an end date. The CMDB view integrates asset relationships, allowing connections between assets, locations, and departments."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "asset managers", "IT support personnel", "compliance officers"], "primary_use_case": "Managing software license information within a Configuration Management Database (CMDB), including creation, updating, viewing, and bulk importing of license details to ensure proper tracking and compliance of IT and non-IT assets."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of software licenses within a Configuration Management Database (CMDB). It supports the creation, updating, and viewing of detailed license information, such as license name, version, support expiry dates, associated users, assets, and license modules. The API also enables bulk uploading of software licenses via CSV files (up to 5000 records) and allows for the addition of new license keys. It integrates with asset relationships within the CMDB and can be configured for alert notifications on license expiry. This is a crucial component for tracking software entitlements and ensuring compliance across an organization's IT and non-IT assets.", "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "multiple_asset_addition_methods", "software_license_property_management", "automated_renewal_&_expiry_notifications", "record_creation_&_management", "detailed_record_view"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Software License", "CMDB", "Asset management"]}}, {"path": "/ux/common/cmdb/license/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_retrieve_2", "description": "This endpoint, an adaptation of the DRF ModelViewSet, is designed to retrieve detailed information about a specific CMDB license entry. It allows users to access comprehensive license details, including those with an end date, which is crucial for asset management and tracking. The API leverages the unique 'id' of the license to fetch its associated attributes, contributing to a more precise and streamlined asset management process within the CMDB system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The primary purpose of this GET endpoint is to provide visibility into individual software licenses linked to contracts within the CMDB, which Infraon refers to as Assets. Key information such as basic details, software license properties, contract terms, and itemized cost details for the selected license are expected to be available through the underlying model. The `id` path parameter is a mandatory string that uniquely identifies the license record to be retrieved. While the current specification indicates 'No response body', in a typical DRF ModelViewSet adaptation for a GET operation, a detailed JSON representation of the requested license object is expected as the response. This endpoint supports the broader CMDB functionality, which focuses on managing IT and non-IT assets and their relationships, similar to how CI relations are established and viewed."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager"], "primary_use_case": "To retrieve detailed information about a specific software license entry within the CMDB for asset management and tracking purposes."}, "content_for_embedding": "This GET API endpoint retrieves detailed information for a specific software license entry within the Configuration Management Database (CMDB) using its unique ID. It provides comprehensive license details, including software license properties, contract terms, and cost details, which are essential for asset management, tracking, and maintaining visibility into IT and non-IT assets and their relationships within the CMDB system.", "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["Software License", "Retrieval", "CMDB"]}}, {"path": "/ux/common/cmdb/license/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_license_update", "description": "This endpoint, adapting the DRF ModelViewSet, allows for the modification and update of a specific license record within the CMDB (Configuration Management Database). It is designed to manage various attributes of a license, particularly those with an associated end date, and can facilitate changes related to the license's properties and associated configurations. The CMDB, referred to as 'Assets' in Infraon, centralizes the management of IT and non-IT assets, ensuring precise and streamlined asset management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the license to be updated. While the original specification mentions 'No response body', a successful PUT operation typically implies the resource has been updated. This endpoint is crucial for maintaining accurate records of software licenses and their properties, such as those detailed in 'License Info' fields within CMDB views, as well as handling updates related to CI relationships based on defined rules (e.g., changes to user, requester, department, asset, or location as specified in the context). The system supports customized CMDB rules for departments, locations, requesters, software, and users, influencing how license updates might affect CI visibility and relationships."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Asset Manager", "CMDB Manager"], "primary_use_case": "Managing and updating software license records within a Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint allows for the modification and update of specific software license records within the Configuration Management Database (CMDB). It uses a PUT method and requires a unique license ID. It manages various attributes of a license, including those with an associated end date, and facilitates changes related to license properties and associated Configuration Item (CI) relationships. The CMDB centralizes IT and non-IT asset management.", "semantic_keywords": ["Update", "Software License", "CMDB"], "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "asset_lifecycle_management", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/license/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_license_destroy", "description": "Deletes a specific license entry from the CMDB (Configuration Management DataBase) based on its unique identifier. This operation is an adaptation of the DRF (Django Rest Framework) ModelViewSet delete functionality. The CMDB is an integral part of Infraon Assets, which enables administrators and asset managers to view and manage all organizational IT and non-IT assets. Licenses, especially those with an end date, are managed within this system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a mandatory path parameter which represents the unique identifier of the license to be deleted. Successful deletion results in no response body. The CMDB is closely associated with asset management, allowing for the establishment of connections between assets and their locations or departments, and updating CI (Configurable Item) relations. Users often find license information linked to contracts within the CMDB which details software license properties and terms."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager"], "primary_use_case": "To delete specific software license entries from the Configuration Management Database (CMDB) to maintain accurate asset records."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific software license record from the Configuration Management Database (CMDB) within the Infraon Assets system. It requires a unique license identifier as a path parameter. The operation is part of the asset management functionality, allowing administrators and asset managers to maintain accurate records of IT and non-IT assets, including software licenses and their associated contract details. A successful deletion results in a 204 No Content response.", "semantic_keywords": ["Delete", "Software License", "CMDB"], "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/license/assetsearch/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_assetsearch_retrieve", "description": "This GET endpoint facilitates the search and retrieval of licensed assets within the CMDB (Configuration Management Database). It leverages a DRF ModelViewSet adaptation to provide robust search capabilities. Users can efficiently search for assets by various criteria, including asset ID, name, hostname, IP address, or category/sub-category, similar to the functionality available through the 'Scan & Search Asset' icon or 'Search Filter' field in the user interface. This enables precise and streamlined asset management, allowing users to find specific assets quickly for viewing details, managing relationships, or performing other asset-related actions.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for asset management, enabling users to quickly locate and access details about IT assets. The asset search functionality is integral for operations like establishing connections between assets and their locations/departments, updating CI relations, and overall asset information management. While the current specification shows no parameters, future enhancements may include query parameters to refine searches, similar to the filters mentioned in the context (name, asset ID, hostname, IP address, category/sub-category)."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Managers", "System Administrators", "Help Desk Technicians"], "primary_use_case": "Efficiently search and retrieve licensed assets within a Configuration Management Database (CMDB) for streamlined asset management and relationship management."}, "content_for_embedding": "This GET endpoint facilitates the search and retrieval of licensed assets within the CMDB (Configuration Management Database). It provides robust search capabilities, allowing users to efficiently search for assets by various criteria, including asset ID, name, hostname, IP address, or category/sub-category. This functionality is similar to the \"Scan & Search Asset\" icon or \"Search Filter\" field in the user interface. It is crucial for asset management operations such as establishing connections between assets and their locations/departments, updating CI relations, and overall asset information management.", "semantic_keywords": ["Asset management", "CMDB", "Search"], "ontology_classification": {"features": ["asset_search_and_filtering", "software_license_management", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/license/delete-software/", "method": "POST", "details": {"operationId": "ux_common_cmdb_license_delete_software_create", "description": "This endpoint handles the deletion of software licenses within the CMDB (Configuration Management Database) system. It is an adaptation of DRF (Django REST Framework) ModelViewSet functionality, suggesting it adheres to standard RESTful patterns for resource manipulation. The operation is specifically designed for managing software license records, potentially those related to assets and their associated license information, particularly for license types with an end date.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint likely facilitates the removal of individual software license entries. While the API specification indicates 'No response body', a successful deletion typically implies an HTTP 204 No Content status or a similar success indicator without returning data. Contexts suggest that software license management also involves features like bulk uploads, license expiry notifications, and viewing detailed contract/license information, but this specific endpoint is focused solely on deletion. There are no request parameters or body descriptions provided, so it is assumed the identification of the software license to be deleted is managed internally, possibly via parameters dynamically constructed by the frontend or within the URL if it were a DELETE method, or contained within the request body, which is not described. Users should ensure they have the necessary privileges to perform delete operations on software licenses."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Manager", "CMDB Administrator", "Software License Administrator"], "primary_use_case": "This API is used to delete existing software license records from the Configuration Management Database (CMDB). It addresses the need to remove outdated, expired, or incorrect software license entries to maintain an accurate inventory."}, "content_for_embedding": "This API endpoint facilitates the deletion of software licenses within the CMDB (Configuration Management Database) system. It follows standard RESTful patterns, specifically adapting DRF ModelViewSet functionality for resource manipulation. The operation is designed for managing software license records, particularly those with an end date. While other software license management features exist (bulk uploads, expiry notifications, viewing details), this endpoint is exclusively for deleting individual software license entries. The identification of the software license to be deleted is handled internally, likely via parameters in the request body or URL.", "semantic_keywords": ["Software License", "Delete", "CMDB"], "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/license/details/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_details_retrieve", "description": "This GET endpoint retrieves detailed license information within the Configuration Management Database (CMDB) module. It provides a comprehensive view of license-specific attributes, functioning as a read-only field without allowing actions. This aligns with the 'License Info' section mentioned in the user guide, which emphasizes clear visibility of license-specific attributes linked to a contract, especially for license types that have an end date. The endpoint is an adaptation of the DRF ModelViewSet, focusing specifically on license details.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily for viewing detailed contract information, including basic details, software license properties, terms of the contract, and itemized cost details. As a view-only field, no actions or modifications can be performed directly through this endpoint. It's crucial for understanding the specifics of how licenses are tracked and integrated within the broader asset management and CI (Configurable Item) relationship framework governed by CMDB rules. The CMDB, referred to as 'Assets' in Infraon, manages all organizational IT and non-IT assets, making this endpoint vital for license auditing and management."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "Compliance Officers"], "primary_use_case": "To retrieve and view detailed software license information, including associated contract details, for auditing, management, and compliance purposes within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API retrieves comprehensive, read-only software license details from the Configuration Management Database (CMDB). It provides a detailed view of license attributes, contract information, and supports license auditing and asset management within the CMDB framework.", "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "unified_asset_repository", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Details retrieval", "Software License", "CMDB"]}}, {"path": "/ux/common/cmdb/license/filterapp/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_filterapp_retrieve", "description": "This endpoint, an adaptation of the DRF ModelViewSet, is designed to filter applications related to CMDB license management. It allows users to filter resources based on various criteria, similar to how asset tags are used, enabling precise and streamlined asset management. The filtering can involve selecting values from dropdowns, supporting criteria such as asset types (e.g., IT-Asset, Samsung, Windows), and potentially integrating with license types that have an end date. It plays a role in configuring advanced resource configurations within IT operations, helping to identify and manage specific applications based on defined filter resources.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is typically used to dynamically filter applications within the CMDB license view. While the current specification indicates 'No response body', in a typical filtering scenario, a successful response would return a list of filtered applications or related CMDB license entities. Common use cases include: 1) Narrowing down licensed applications within CMDB for review, and 2) Assisting in the setup of Advanced Resource Configurations by providing a mechanism to select specific licensed applications to be included or excluded. Although not explicitly detailed in the parameters, filtering criteria should be passed as query parameters, aligning with standard GET request practices for filtering. Users should refer to UI documentation for specific filter categories (e.g., Name, Category, Condition) and available dropdown options for precise usage."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Asset Manager"], "primary_use_case": "To filter applications related to CMDB license management, narrow down licensed applications for review, and assist in setting up Advanced Resource Configurations by providing a mechanism to select specific licensed applications."}, "content_for_embedding": "This GET endpoint is designed to filter applications within the context of CMDB license management. It allows users to filter resources based on various criteria, similar to asset tags, enabling precise asset management. The filtering supports selecting values from dropdowns, including asset types and license types with end dates. It is crucial for configuring advanced resource configurations within IT operations, helping to identify and manage specific applications based on defined filter resources. Common use cases include narrowing down licensed applications within CMDB for review and assisting in Advanced Resource Configurations by selecting/excluding licensed applications. Filtering criteria are expected as query parameters.", "ontology_classification": {"features": ["asset_search_and_filtering", "software_license_management", "ci_relationship_management_(cmdb)", "it_operations", "advanced_resource_configuration_(aiops)"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Software License", "CMDB", "Filter"]}}, {"path": "/ux/common/cmdb/license/insights/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_insights_retrieve", "description": "This GET endpoint provides license-related insights within the CMDB (Configuration Management Database). It leverages a DRF (Django Rest Framework) ModelViewSet adaptation to allow users to view essential license data, particularly focusing on license types with an end date. This functionality supports obtaining targeted insights, potentially revealing specific asset events related to licenses from the asset page, and aiding in precise and streamlined asset management.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically focuses on 'insights' related to license data. While the API specification indicates 'no response body,' the context suggests the output should provide 'essential data' and 'targeted insights' for license types, likely related to their end dates. This functionality is part of the broader CMDB view features, which aim to establish connections between assets and their locations or departments, contributing to a more precise overview of IT assets. There are no explicit parameters or request body defined for this GET request according to the API specification."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Asset Manager"], "primary_use_case": "Retrieving and analyzing software license insights, particularly focusing on expiry dates, within a Configuration Management Database (CMDB) for precise and streamlined asset management."}, "content_for_embedding": "This GET endpoint provides targeted insights into software license data within the CMDB, specifically focusing on license types with end dates. It allows users to view essential license information to support asset management and reveal specific asset events related to licenses.", "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "inventory_data_collection", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Software License", "CMDB", "Insights"]}}, {"path": "/ux/common/cmdb/license/linegraph/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_linegraph_retrieve", "description": "This endpoint provides a line graph visualization for license types, essential for dynamic asset management within the CMDB View. It enables users to visualize license expiry and usage over time, particularly for licenses with defined end dates. This helps in precise and streamlined asset management by offering an intuitive view of license status, akin to how other views provide summaries and topology visualizations.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the 'UX/common/cmdb' module, emphasizing its role in the user experience related to Configuration Management Database functionalities. While the summary and description in the API spec are brief, context indicates its utility for \"license types with an end date.\" This functionality assists in establishing connections between assets and their respective license statuses for better tracking and understanding. The output is a line graph, implying a visual representation of data points over a continuous range, likely time-based. No specific request parameters or body are mentioned in the API specification, suggesting a straightforward GET request for the graph data."}, "llm_generated": {"business_context": {"user_personas": ["IT asset managers", "CMDB administrators", "Software license managers", "IT operations personnel"], "primary_use_case": "To provide visual insights into software license expiry and usage trends for effective asset management within a CMDB."}, "content_for_embedding": "This API retrieves data to generate a line graph visualizing software license expiry and usage over time. It is crucial for dynamic asset management within the Configuration Management Database (CMDB) view, allowing users to track license status, identify expiring licenses, and monitor usage trends. The output is a time-based visual representation of license data, aiding in precise and streamlined asset tracking and understanding.", "semantic_keywords": ["Software License", "Asset management", "Visualization"], "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "asset_lifecycle_management", "visual_data_representation"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/license/options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_options_retrieve", "description": "This endpoint, adapted from DRF ModelViewSet, is designed to retrieve configuration options specifically related to CMDB (Configuration Management Database) license types. It likely provides a list of available license options, particularly those associated with 'end dates' and potentially other CMDB-related attributes as suggested by the context. This functionality supports precise and streamlined asset management within the CMDB view by offering relevant dropdown menu options for configurations or relationships within the system.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates 'No response body', the description of an adaptation from DRF ModelViewSet for a GET request typically implies a retrieval of data. Given the context about 'license types with an end date' and 'dropdown menu with location and department options' in the CMDB view, it's probable that this endpoint serves to populate selection fields for license-related configurations or asset relationships within the CMDB UI. Developers should anticipate a structured JSON response containing these license options, even if the current specification is generic. Further details on specific license attributes or filtering capabilities are not provided in the current specification or highly ranked contexts."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "Developers"], "primary_use_case": "To retrieve configuration options for CMDB license types, enabling users to select relevant license attributes for streamlined asset management within the CMDB view."}, "content_for_embedding": "This API retrieves configuration options for CMDB (Configuration Management Database) license types. It provides a list of available license options, including those with end dates, and potentially location and department options, to populate dropdown menus in the CMDB UI. This functionality supports precise and streamlined software asset management by offering relevant selection fields for configurations or relationships within the system.", "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Software License", "Dropdown options"]}}, {"path": "/ux/common/cmdb/license/upload-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_license_upload_csv_create", "description": "This endpoint facilitates the upload of a CSV file containing license details. It is part of the license management module, allowing users with appropriate permissions to import new license keys and update existing license information. The process involves validating the uploaded CSV file and proceeding with the valid records to integrate license data into the system, aligning with the functionality for viewing and managing license details as described in the user guides.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The upload process typically involves steps such as selecting the CSV file, an implicit validation phase (where validation results, including valid and invalid records, can be reviewed), and then proceeding with the import of the valid data. While the API specification does not explicitly list parameters or a request body structure, based on related CSV import functionalities described in the user guides, the request body is expected to contain the CSV file itself (e.g., as a multipart/form-data upload). Users should ensure the CSV file is properly formatted according to a predefined template for license data. Related examples within the user guides indicate a pattern of 'Upload -> Validate -> Import -> Proceed with Valid Records' for CSV-based data ingestion. This endpoint is an adaptation of the DRF ModelViewSet pattern."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager"], "primary_use_case": "This API facilitates the bulk import and update of software license details into the system via CSV file uploads."}, "content_for_embedding": "This API endpoint allows users to upload a CSV file containing software license details for bulk import and update. The process includes validation of the uploaded CSV and integration of valid license records into the system, supporting the management of software licenses within the CMDB.", "semantic_keywords": ["CSV Import", "Software License", "Update"], "ontology_classification": {"features": ["software_license_management", "multiple_asset_addition_methods", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/license/usersearch/", "method": "GET", "details": {"operationId": "ux_common_cmdb_license_usersearch_retrieve", "description": "This `/ux/common/cmdb/license/usersearch/` endpoint provides a user search functionality, primarily for managing user licenses within the CMDB (Configuration Management Database) system. It is an adaptation of the Django Rest Framework (DRF) ModelViewSet, implying it supports standard CRUD operations (though this specific endpoint is GET) and potentially features like filtering, ordering, and pagination. The primary purpose is to allow users to search for user-related data, likely for managing user licenses, establishing connections between assets and users/departments, and ensuring accurate asset management. This endpoint is crucial for tasks like updating CI relations when user or department information is modified. It facilitates comprehensive log analysis by allowing the inclusion of additional user-related fields and supports searching within multi-index data.", "tags": ["CMDBSoftwareLicense"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically focuses on 'usersearch' in the context of CMDB and license management, suggesting a focus on user-related attributes relevant for license allocation and asset relationship tracking. While the API specification notes 'No response body', this is likely an error as a search endpoint would be expected to return results. Given its DRF ModelViewSet adaptation, typical responses would include a list of users matching the search criteria. Potential search parameters (not explicitly listed in the API spec but implied by 'usersearch' and contexts) could include user ID, department, license type, and date information relevant to licenses. The endpoint is integral to the CMDB View functionality for establishing and managing asset relationships, including those tied to users and departments. Users should anticipate a structured JSON response containing user profiles and associated license or CMDB data."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "CMDB Administrators"], "primary_use_case": "To enable users to search for user-related data within the CMDB system, primarily for managing user licenses, establishing asset-user/department connections, and ensuring accurate asset management. It also supports comprehensive log analysis and searching within multi-index data."}, "content_for_embedding": "This GET endpoint provides user search functionality within the CMDB (Configuration Management Database) system, specifically for managing user licenses and establishing connections between assets and users/departments. It supports searching for user-related data to facilitate accurate asset management and updating CI relations. The endpoint is adapted from Django Rest Framework ModelViewSet, implying support for filtering, ordering, and pagination. It also aids in comprehensive log analysis by allowing the inclusion of additional user-related fields and supports searching within multi-index data. Potential search parameters include user ID, department, license type, and date information relevant to licenses. It is integral to CMDB View functionality for managing asset relationships.", "semantic_keywords": ["User Search", "Software License", "CMDB"], "ontology_classification": {"features": ["asset_search_and_filtering", "software_license_management", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_retrieve", "description": "This endpoint is designed to retrieve a paginated list of Configuration Items (CIs) from the CMDB (Configuration Management Database) within the current organization. The CMDB stores assets or CIs, as noted in the guide, and this endpoint is instrumental in managing and viewing these Configuration Items. Specifically, it can help in identifying and filtering 'Profile' related CIs, which are critical for device discovery (as seen in NCCM) and defining user access levels or configuration settings.", "summary": "Gets a list of cmdb ci", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination via `items_per_page` and `page` query parameters. Filtering and sorting capabilities are available using the `sort` parameter for the sorting key and `reverse` for the sorting order. For example, users can search for existing 'profiles' by applying filters as described in the context, potentially via the `sort` parameter or by subsequent client-side filtering. The `Profile` concept is central to NCCM, facilitating automatic device discovery and configuration management. Contexts mention various types of profiles such as 'Configuration Profile' and 'Authorization Profile', which suggests the data returned by this endpoint will contain details pertaining to such configurations and access controls. Assets in Infinity are referred to as CIs in the CMDB. While the endpoint retrieves CIs, the context highlights that 'CMDB View' facilitates establishing relationships between assets (CIs) and their locations or departments."}, "llm_generated": {"business_context": {"user_personas": ["System administrators", "Network administrators", "IT operations", "Asset managers"], "primary_use_case": "To enable IT and network administrators to efficiently retrieve, search, and filter Configuration Items (CIs), particularly 'Profile' related CIs, from the CMDB for purposes such as device discovery, managing user access, and applying configuration settings across the organization's assets."}, "content_for_embedding": "This API retrieves a paginated and filterable list of Configuration Items (CIs) from the CMDB, specifically focusing on 'Profile' related CIs. These profiles are essential for network device discovery, managing user access levels, and configuring network settings, supporting comprehensive asset and configuration management.", "semantic_keywords": ["CMDB", "Configuration Profiles", "CI configurations"], "ontology_classification": {"features": ["asset_search_and_filtering", "ci_relationship_management_(cmdb)", "device_discovery", "network_configuration_and_change_management", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/profile/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_create", "description": "This API endpoint, located at `/ux/common/cmdb/profile/`, facilitates the viewing and editing of configurations for 'bot cmdb' profiles. It is specifically designed for managing various bot settings and details. For detailed guidance, users can refer to the Bots module. This endpoint integrates with the CMDB (Configuration Management Database) to handle bot-related configuration data, ensuring that changes to bot functionalities, such as those related to Finance, HR Assistant, or IT Assistance bots, are properly managed. This POST method is used to persist changes or queries to these bot profiles.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates no explicit request body or response body, the nature of 'editing' configurations typically implies that updated configuration details would be sent in a request payload, and success/failure status would be returned. Details on specific fields for bot configuration, such as 'Bot Name', 'Label', and 'Description', suggest that these might be part of the request body for editing operations. Users should consult the 'Bots Configuration' section within the documentation (specifically related to Context Rank 2 and 7) for expected field names and data types when constructing a request. This endpoint is crucial for maintaining and customizing bot behaviors within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Developer"], "primary_use_case": "This API is used for managing (viewing, editing, and persisting changes to) configuration profiles for bots within a Configuration Management Database (CMDB). It allows for the customization and maintenance of various bot settings and details."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of configurations for 'bot cmdb' profiles. It is specifically designed for managing various bot settings and details, such as Bot Name, Label, and Description. The POST method is used to persist changes or queries to these bot profiles, which are crucial for maintaining and customizing bot behaviors within the system. Although the specification doesn't explicitly detail request/response bodies, it implies that updated configuration details would be sent in a payload.", "ontology_classification": {"features": ["infraon_configuration.ai_bot_assistance", "infraon_configuration.network_configuration_management_(nccm)", "asset.ci_relationship_management_(cmdb)", "infraon_configuration.general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Profiles", "CMDB", "Edit"]}}, {"path": "/ux/common/cmdb/profile/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_retrieve_2", "description": "This API endpoint facilitates the viewing and editing of bot CMDB configurations. Specifically, it allows access to individual bot profiles identified by a unique ID. Users can interact with details such as 'Bot Name', 'Label', 'Description' (similar to fields mentioned in bot configuration guides), and other relevant settings associated with a specific bot's configuration. This endpoint is crucial for managing and understanding the setup of various bots, including those with predefined functionalities like Finance or HR Assistant bots.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the bot CMDB profile to be accessed. While the current specification indicates 'No response body' for this GET request, it's expected that the response will provide the configuration details of the requested bot. For further guidance on bot configurations, including enabling App Registration permissions for bots and managing bot services, refer to the 'Bots module' as suggested in the admin guide. Similar to profile management in other systems, this endpoint likely supports operations such as searching, filtering (using fields like 'Profile Name', 'Status', 'User Tag', 'Asset Tag', 'Device IP Address', 'Device Credential'), and potentially adding new profiles, though this specific GET method focuses on retrieval for a given ID."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows users to view and manage individual bot CMDB configurations, including details like bot name, label, and description, which is essential for understanding and maintaining various bot setups."}, "content_for_embedding": "This API endpoint, `/ux/common/cmdb/profile/{id}/` with a GET method, is designed for viewing and editing bot CMDB configurations. It enables access to individual bot profiles using a unique `id`. Users can interact with and retrieve details such as 'Bot Name', 'Label', 'Description', and other relevant settings associated with a specific bot's configuration, including those for Finance or HR Assistant bots. The `id` path parameter is required. While the current specification indicates 'No response body', the expected response will provide the configuration details of the requested bot. The endpoint supports operations like searching and filtering based on fields such as 'Profile Name', 'Status', 'User Tag', 'Asset Tag', 'Device IP Address', and 'Device Credential'. It is crucial for managing and understanding the setup of various bots and aligns with concepts found in the 'Bots module' of the admin guide for bot configuration and service management.", "semantic_keywords": ["CMDB", "Configuration", "Retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_profile_update", "description": "This PUT endpoint is used to update an existing asset profile within the Configuration Management Database (CMDB) for the current organization. The CMDB, referred to as 'Assets' within Infraon, allows administrators and asset managers to view and manage all organizational IT and non-IT assets in one centralized place. Updating an asset profile can involve modifying asset properties such as Asset Name, Asset ID, IP Address, Status (e.g., Active, Inactive, Under Maintenance), Manufacturer, and other detailed information like Serial Number, Operating System, MAC Address, CPU, Memory, and HDD details. This endpoint supports updating asset relationships by establishing connections between assets and their respective locations or departments, allowing for more precise and streamlined asset management. It also supports updating CI relations and assets when associated entities like user, requester, department, or location are modified.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Cmdb"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"UpdateAssetSample": {"value": {"ci_id": "123456789", "ci_name": "localhost"}, "summary": "Update Asset Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the asset profile to be updated. The request body, exemplified by `{\"ci_id\": \"123456789\", \"ci_name\": \"localhost\"}`, should contain the fields to be updated for the specified asset. The CMDB effectively tracks and manages Configurable Items (CIs) owned by the business. Updating asset profiles is crucial for maintaining an accurate and current inventory of all organizational assets and their relationships, supporting effective asset management and service catalog integration. For more details on asset properties and relationships, refer to the 'CMDB View' section in the Infraon user guide. This endpoint is vital for processes related to changes in asset status or relationships."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager", "IT Staff"], "primary_use_case": "This API is used to update existing asset profiles within the Configuration Management Database (CMDB), enabling organizations to maintain an accurate and current inventory of their IT and non-IT assets, including properties, status, and relationships. It supports streamlined asset management by reflecting changes in asset details and their associated entities."}, "content_for_embedding": "This PUT endpoint, `ux_common_cmdb_profile_update`, is designed to update an existing asset profile in the Configuration Management Database (CMDB). It allows for modification of various asset properties such as Asset Name, Asset ID, IP Address, Status (e.g., Active, Inactive, Under Maintenance), Manufacturer, Serial Number, Operating System, MAC Address, CPU, Memory, and HDD details. Crucially, it also supports updating asset relationships by connecting assets to locations or departments, and modifying CI relations when associated entities like users, requesters, departments, or locations are changed. The `id` path parameter uniquely identifies the asset, and the request body contains the fields to be updated. This API is vital for maintaining an accurate and current organizational asset inventory and supporting effective asset management and service catalog integration.", "semantic_keywords": ["Update", "CMDB", "Asset management"], "ontology_classification": {"features": ["unified_asset_repository", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_profile_destroy", "description": "This API endpoint provides functionality to manage bot CMDB (Configuration Management Database) profiles. Specifically, this `DELETE` method allows for the removal of a bot CMDB configuration profile identified by its unique ID. These profiles are integral for defining and managing various bot functionalities, including financial bots, HR assistant bots, and more, as detailed in the Bots module and relevant configuration guides. This endpoint contributes to the overall management of bot setups, allowing for their configurations to be viewed, edited, and ultimately removed.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the bot CMDB profile to be deleted. Detailed guidance on bot configurations, including how to add necessary details, set bot names, and understand default bot functionalities (like Finance and HR Assistant bots), can be found in the 'Bots module' and specific sections of the 'infinity_user_guide_extracted.txt'. This endpoint plays a role in the broader 'Bots Configuration' module, where individual profiles are defined with labels, descriptions, and other relevant fields. Users can search for existing profiles by entering at least three characters, and filters can be applied based on fields like 'Profile Name', 'Status', and 'User Tag' to locate specific profiles before deletion. There is no request body for this DELETE operation, and the API returns no specific response body upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Administrator"], "primary_use_case": "To manage and delete bot Configuration Management Database (CMDB) profiles, which define bot functionalities."}, "content_for_embedding": "This API allows for the deletion of bot CMDB (Configuration Management Database) profiles, identified by a unique ID. These profiles are crucial for defining and managing various bot functionalities, such as financial and HR assistant bots. The endpoint supports the overall management of bot configurations, enabling their viewing, editing, and removal. Users can search and filter profiles by name, status, or user tag before deletion. This operation does not require a request body and returns no specific response upon successful deletion.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "asset_lifecycle_management", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "CMDB", "Configuration Profiles"]}}, {"path": "/ux/common/cmdb/profile/access-points/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_access_points_retrieve", "description": "This API endpoint provides functionalities to view or edit configuration settings for 'bots' within the CMDB (Configuration Management Database). Specifically, it manages access points which are interfaces or entry points to these bot configurations. Integrators can use this to manage how different bot services are accessed and configured, aligning with administration tasks found within the Bots module.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for managing bot services and their configurations. While the API specification indicates no request body or response body, the nature of 'editing' configurations implies that in a real-world scenario, either parameters or a request body would be used for modification tasks, and a response indicating success/failure or the updated configuration would be expected. Users should refer to the 'Bots module' for detailed guidance on how bot configurations and access points are structured and managed within the system. The endpoint also touches on concepts like enabling app registration as a contributor for the bot and managing role assignments for access control (IAM)."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "integrator"], "primary_use_case": "To view and manage configuration settings and access points for bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint allows integrators to view and manage configuration settings and access points for bots within the Configuration Management Database (CMDB). It supports tasks related to bot service configuration, app registration, and role assignments for access control (IAM).", "ontology_classification": {"features": ["infraon_configuration.platform_account_configuration", "infraon_configuration.roles_&_privileges_management", "infraon_configuration.agent_management", "asset.ci_relationship_management_(cmdb)", "asset.asset_search_and_filtering", "infraon_configuration.general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Access Control"]}}, {"path": "/ux/common/cmdb/profile/activity_log_options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_activity_log_options_retrieve", "description": "This API endpoint provides functionalities for viewing and editing bot CMDB (Configuration Management Database) configurations. It allows users to manage details such as Bot Handles, Subscriptions, and Resource Group details associated with various bots, including Azure Bots, as highlighted in the user guides. The endpoint plays a crucial role in managing how different bots are configured within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is specifically designed for managing 'Bot Configuration' details as mentioned in several contexts including the 'Privileges module'. Users can access detailed guidance on bot configurations from the 'Bots module'. When editing, ensure all mandatory fields, such as 'Bot Handle', 'Subscription', and 'Resource Group', are filled out. This endpoint is integral for setting up and maintaining the operational parameters of configured bots."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "Managing and configuring bot settings within the Configuration Management Database (CMDB), including viewing activity logs related to these configurations."}, "content_for_embedding": "This API endpoint is designed for managing bot configurations within the Configuration Management Database (CMDB). It allows for viewing and editing details such as Bot Handles, Subscriptions, and Resource Group details for various bots, including Azure Bots. The endpoint also provides options related to activity logs for CMDB profiles, which is integral for setting up and maintaining the operational parameters of configured bots.", "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration"], "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)", "audit_log"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/adapter-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_adapter_list_retrieve", "description": "This API endpoint provides functionalities to view or edit configurations related to 'bots' within the CMDB (Configuration Management Database). It specifically targets \"adapter lists\" for these bot configurations, allowing users to manage how different bots are integrated and configured within the system. The endpoint facilitates the administration of bot details, including their labels, descriptions, and functionalities, as referenced in the system's configuration guides, particularly within the 'Bots module' for detailed guidance.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on configuring bots and understanding their respective fields (such as 'Bot Name', 'Label', 'Description'), refer to the 'Bots module' documentation (Context Rank 1) or the 'Bots Configuration' section mentioned in the user guides (Context Rank 2). This endpoint is crucial for managing the behavior and scope of various system bots, including default bots that provide specific functionalities like 'Finance' or 'HR Assistant' bots, as described in Context Rank 4. While the API specification does not list explicit parameters for this GET request, the description implies direct interaction with CMDB bot configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "To view and manage configuration settings for various bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint is designed to retrieve and facilitate the management of \"adapter lists\" for bot configurations stored in the Configuration Management Database (CMDB). It allows users to view and administer critical details of system bots, such as their labels, descriptions, and operational functionalities. This includes managing the integration and behavior of both standard and specialized bots (e.g., Finance, HR Assistant bots) as described in system configuration guides, ensuring their proper setup and scope within the IT environment.", "ontology_classification": {"features": ["infraon_configuration.platform_account_configuration", "infraon_configuration.ai_bot_assistance", "asset.ci_relationship_management_(cmdb)", "infraon_configuration.agent_management", "asset.asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration"]}}, {"path": "/ux/common/cmdb/profile/add-attachment/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_add_attachment_create", "description": "This endpoint facilitates the addition of new attachments for a selected asset within the CMDB profile. It allows users to upload various files, such as product images, using a drag-and-drop feature or direct file upload. Supported formats include PNG, JPG, or JPEG, with a maximum size of 20 MB per file. Users can categorize attachments (e.g., Default, Procurement, Service, Retirement Documents) and provide a description for each uploaded file.", "summary": "Add attachments for the selected asset.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "To use this endpoint, users should navigate to the Asset module, specifically when adding or managing assets. Attachments can be images representing the asset or other relevant documents. The 'Next' button or equivalent action to proceed with asset creation or modification will only be enabled once all required asset information, including attachments, is correctly provided. This functionality is crucial for maintaining comprehensive asset profiles. After uploading, users can click 'Upload files' to finalize the attachment process."}, "llm_generated": {"business_context": {"user_personas": ["Asset Managers", "IT Administrators", "Users managing asset profiles"], "primary_use_case": "This API facilitates the addition of various file attachments (images, documents) to selected assets within the CMDB profile, crucial for maintaining comprehensive and detailed asset records."}, "content_for_embedding": "This API endpoint allows users to add new attachments, such as product images (PNG, JPG, JPEG, max 20 MB per file) and other relevant documents, to a selected asset within the CMDB profile. It supports both drag-and-drop and direct file uploads. Users can categorize attachments (e.g., Default, Procurement, Service, Retirement Documents) and provide a description for each. This functionality is integral to maintaining comprehensive asset profiles and is typically accessed within the Asset module during asset creation or modification processes, with the asset completion action enabled only after all required information, including attachments, is provided.", "ontology_classification": {"features": ["attachment_management", "asset_association_&_classification", "addition_workflow"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}, "semantic_keywords": ["Attachments", "Asset management", "CMDB"]}}, {"path": "/ux/common/cmdb/profile/add-disable-pm/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_add_disable_pm_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows for the management (viewing, editing, adding, and disabling) of bot-specific CMDB configurations."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of bot-related CMDB configurations. It enables users to retrieve, view, edit, add new, and disable existing configuration items within the Configuration Management Database (CMDB) that are specifically associated with bot operations.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "CI configurations"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/add-display/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_add_display_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations Teams", "Developers"], "primary_use_case": "This API allows for the management of bot CMDB configurations, enabling users to add, view, and edit these configurations to maintain an accurate and up-to-date Configuration Management Database for automated systems."}, "content_for_embedding": "This API facilitates the management of bot CMDB configurations. It enables users to add new configurations, view existing ones, and modify their properties. The functionality includes creating, editing, searching, and filtering CMDB configuration profiles, which is crucial for maintaining an accurate and current Configuration Management Database for automated systems.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "multiple_asset_addition_methods", "customizable_asset_properties_and_fields", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/add-enable-pm/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_add_enable_pm_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Administrators", "Developers"], "primary_use_case": "To manage (view and edit) Configuration Management Database (CMDB) configurations, specifically for bots."}, "content_for_embedding": "This API endpoint is designed for managing Configuration Management Database (CMDB) configurations, specifically those related to 'bot cmdb configurations'. It allows users to view and edit these configurations. The functionality aligns with general CMDB operations such as searching, filtering, adding, editing, and deleting configuration profiles and parameters, as detailed in the relevant documentation.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/add-remove-log/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_profile_add_remove_log_update", "description": "This API endpoint, operating as a `PUT` method, facilitates the adding or removing of log entries specifically related to bot CMDB (Configuration Management Database) profiles. It supports the management of bot configurations, allowing for updates to their profiles within the CMDB. The action of adding or removing log entries is a critical aspect of maintaining an auditable and manageable record of changes made to bot configurations.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily used for logging modifications to bot CMDB configurations. Developers can find detailed guidance on bot configurations within the 'Bots' module as per the Admin Guide (Context Rank 1). While the endpoint handles log aspects, the actual 'Add' operations for bot details (like Bot Name, Description, Bot Handle, Subscription, Resource Group) are done elsewhere, as suggested by contexts about bot configuration details (Context Ranks 2, 4, 7). The endpoint does not return a response body, as indicated by the API specification. It's crucial for tracking changes to bot profiles, aligning with the broader log management practices mentioned in other contexts (Context Rank 10)."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator"], "primary_use_case": "To add or remove log entries for bot CMDB profiles, ensuring an auditable record of changes to bot configurations."}, "content_for_embedding": "This API endpoint allows for the addition or removal of log entries related to bot CMDB (Configuration Management Database) profiles. It is a PUT method used for managing and updating bot configurations within the CMDB, specifically for logging modifications. The primary purpose is to maintain an auditable and manageable record of changes made to bot configurations, crucial for tracking profile updates and aligning with broader log management practices.", "ontology_classification": {"features": ["audit_log", "detailed_asset_activity_log", "log_search_module"], "primary_module": "log_management", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "CMDB", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/add-remove-netflow/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_profile_add_remove_netflow_update", "description": "This API endpoint (`PUT /ux/common/cmdb/profile/add-remove-netflow/`) facilitates the management of CMDB (Configuration Management Database) configurations, specifically for NetFlow profiles. It allows for changes to be made to existing configurations, potentially involving the addition or removal of NetFlow-related settings. The functionality aligns with NCCM (Network Change & Configuration Management) processes, which include managing various network configurations, adding devices for management, and handling device credentials.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the broader NCCM framework, where network devices are automatically added for management, backup, change, compliance, and monitoring. While the API specification does not detail specific parameters, based on the context, interactions with configuration jobs and device credentials are highly relevant. Users would typically need pre-configured device credentials for operations. The endpoint likely supports an 'Add to NCCM' toggle or similar mechanism to apply changes, consistent with how configurations are managed within the Infraon system. Although the 'request_body_description' and 'parameters' fields are empty in the provided spec, it's implied that the request body would carry the necessary configuration data for adding or removing NetFlow profiles. There is no response body expected, indicating a synchronous operation where success is implied by the lack of an error."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel"], "primary_use_case": "To manage CMDB configurations, specifically adding or removing NetFlow profiles, as part of network change and configuration management processes."}, "content_for_embedding": "This API endpoint facilitates the management of CMDB (Configuration Management Database) configurations, specifically for NetFlow profiles. It allows for changes to be made to existing configurations, potentially involving the addition or removal of NetFlow-related settings. The functionality aligns with NCCM (Network Change & Configuration Management) processes, which include managing various network configurations, adding devices for management, and handling device credentials. This endpoint is part of the broader NCCM framework, where network devices are automatically added for management, backup, change, compliance, and monitoring. Interactions with configuration jobs and device credentials are highly relevant. Users would typically need pre-configured device credentials for operations. The endpoint likely supports an 'Add to NCCM' toggle or similar mechanism to apply changes, consistent with how configurations are managed within the Infraon system. The request body would carry the necessary configuration data for adding or removing NetFlow profiles. No response body is expected, indicating a synchronous operation where success is implied by the lack of an error.", "ontology_classification": {"features": ["network_configuration_and_change_management", "ci_relationship_management_(cmdb)", "centralized_management", "device_credential_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "NetFlow", "Configuration Profiles"]}}, {"path": "/ux/common/cmdb/profile/add-valient-channelmap-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_add_valient_channelmap_data_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows for the management (viewing and editing) of bot CMDB configurations within the system."}, "content_for_embedding": "This API endpoint is designed for managing bot CMDB configurations. It enables users to view and edit existing configuration profiles and parameters, as well as add new ones. Key functionalities include searching, filtering, editing, and adding configuration details related to CMDB assets.", "semantic_keywords": ["CMDB", "Configuration", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "multiple_asset_addition_methods", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/aiops-test-options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_aiops_test_options_retrieve", "description": "This API endpoint provides functionalities to view and manage configurations for bots within the system. It specifically allows users to configure and test bot credentials and settings, crucial for setting up and maintaining various bot types such as those for financial, HR, or IT assistance. The endpoint facilitates the setup of 'Bot Name' and 'Description' for respective created bots and supports testing configurations before saving, including specifying an 'IP address' and selecting an 'Agent'.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to the 'Bots Configuration' module. For comprehensive guidance on bot setup and customization, users should refer to the 'Bots module' in the documentation. Admins have the flexibility to customize default bots to align with specific departmental terminology and compliance requirements. This involves navigating to 'Infraon configuration -> Bots -> Bots Assistance' and adding new bots at the 'Create New Bot' section."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "user"], "primary_use_case": "To enable users and administrators to configure, test, and manage various bot types, including their credentials, settings, names, descriptions, IP addresses, and associated agents, ensuring proper bot functionality and compliance within the system's 'Bots Configuration' module."}, "content_for_embedding": "This API endpoint allows users to view, manage, configure, and test settings and credentials for various bot types (e.g., financial, HR, IT assistance) within the system's 'Bots Configuration' module. It supports setting bot names, descriptions, IP addresses, and agents, and is crucial for maintaining bot functionality.", "semantic_keywords": ["Bot Configuration", "AI Bot Assistance", "Configuration"], "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)", "device_credential_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/all-card-inv/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_all_card_inv_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To view and manage bot CMDB configurations and profiles within the system."}, "content_for_embedding": "This API endpoint allows for the retrieval, viewing, and management of bot CMDB configurations and their associated profiles. Users can search, filter, edit, delete, add, and export these configuration profiles, which are essentially properties of Configuration Items (CIs) within the CMDB.", "semantic_keywords": ["CMDB", "Configuration", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/all-topology/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_all_topology_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network engineers", "System integrators"], "primary_use_case": "To retrieve and manage CMDB configurations related to the overall network topology, allowing users to view, search, filter, edit, and export these configurations."}, "content_for_embedding": "This API endpoint facilitates the retrieval and management of CMDB configurations, specifically focusing on the entire network topology. It enables users to view, search, filter, edit, and export configuration profiles, providing a comprehensive overview and control over the IT infrastructure's topological setup within the CMDB.", "semantic_keywords": ["CMDB", "Topology", "Configuration"], "ontology_classification": {"features": ["topology_view_display", "topology_configuration_editing", "topology_management_filtering_(field/condition)", "export_topology_configuration_(csv/xls)"], "primary_module": "topology", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/profile/allocated-assets/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_allocated_assets_retrieve", "description": "This endpoint is used to retrieve a comprehensive list of assets specifically allocated to a particular user. These allocated assets within Infraon's CMDB (Configuration Management Database) typically include essential details such as the asset's Hostname, IP Address, Device Type, and Vendor. Infraon Assets, which forms a core part of ITSM, allows administrators and asset managers to efficiently view and manage both IT and non-IT organizational assets in a centralized location. This endpoint provides a granular view of an End-User's allocated assets and related details that could include status and potentially further information upon selection. Accessing this information is crucial for understanding which IT assets (like laptops or desktops) are assigned to a user, which can assist in troubleshooting, monitoring asset usage, and ensuring security and compliance.", "summary": " ", "parameters": [{"in": "query", "name": "email", "schema": {"type": "string"}, "description": "Requester Email", "required": true}], "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The primary parameter for this GET request is the 'email' query parameter, which is required and specifies the email address of the user whose allocated assets are to be retrieved. This API provides an end-user-centric view of relevant IT assets. It is useful for scenarios such as populating user profiles with their assigned equipment or for asset management dashboards to track individual allocations. While the API specification indicates 'No response body', the context suggests that the response for 'allocated assets' would contain structured data including 'Hostname', 'IP Address', 'Device Type', and 'Vendor'. Developers should anticipate a JSON response containing an array of asset objects with these fields."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager", "IT Support Staff"], "primary_use_case": "To retrieve a comprehensive list of IT and non-IT assets allocated to a specific user, enabling asset managers and administrators to monitor usage, troubleshoot, and ensure compliance."}, "content_for_embedding": "This API endpoint retrieves a detailed list of assets allocated to a particular user within Infraon's Configuration Management Database (CMDB). The response includes crucial asset details such as Hostname, IP Address, Device Type, and Vendor. It is primarily used for asset tracking, troubleshooting user-specific equipment issues, monitoring asset utilization, and ensuring adherence to security and compliance policies. The API requires an email address as a query parameter to identify the user whose allocated assets are to be retrieved.", "semantic_keywords": ["Asset management", "Retrieval", "CMDB"], "ontology_classification": {"features": ["unified_asset_repository", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "asset_lifecycle_management", "user_access_auditing"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/profile/asset-audit-record/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_asset_audit_record_create", "description": "This `/ux/common/cmdb/profile/asset-audit-record/` API endpoint is designed to manage and query audit records specifically related to CMDB assets. It allows users to view or edit configurations associated with 'bot CMDB' entries. The endpoint facilitates monitoring and auditing of asset history by documenting key actions and updates. This includes changes to asset attributes such as city, country, criticality, connection protocol, device credentials, and download job details. Detailed logs are organized by date and time, ensuring comprehensive oversight of IT assets. This API is integral for maintaining security compliance and troubleshooting access issues by identifying user activities on specific assets.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Audits accessed via this endpoint can typically be exported in various formats, including CSV, Excel, or PDF. The system logs details such as Timestamp, Task Name, IP Address, and relevant messages for each audit entry. This endpoint is related to the broader 'Audit' module within Infraon Infinity. While the method is POST, the current specification indicates 'No response body' and an empty 'parameters' list, suggesting that the primary functionality might involve internal system triggers or specific, pre-defined 'bot CMDB' interactions rather than complex dynamic requests or responses via the typical request/response cycle for this particular endpoint."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "IT Technicians", "Security Analysts", "Auditors"], "primary_use_case": "To manage, query, monitor, and audit historical changes and user activities related to CMDB assets for security compliance and troubleshooting."}, "content_for_embedding": "This API endpoint manages and queries audit records for CMDB assets, providing a comprehensive history of changes to asset attributes such as city, country, criticality, connection protocol, device credentials, and download job details. It facilitates monitoring and auditing of asset history, including user activities, with logs organized by date and time. This functionality is integral for maintaining security compliance and troubleshooting access issues by identifying user activities on specific assets. Audit logs accessed via this endpoint can be exported in various formats like CSV, Excel, or PDF, and can be filtered by date range, asset name or ID, or by the user who made changes.", "semantic_keywords": ["Audit Trail", "CMDB", "Asset management"], "ontology_classification": {"features": ["detailed_asset_activity_log", "user_access_auditing", "asset_search_and_filtering", "report_export_capabilities"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/profile/asset-audit-template/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_asset_audit_template_create", "description": "This API endpoint facilitates the management and viewing of configuration templates associated with asset audit processes within the Infraon Infinity CMDB. It allows users to view or edit these templates, which are crucial for defining how asset audits are conducted and how audit details are collected and organized. The functionality is linked to the 'Bot Configuration' module, suggesting that automated processes or 'bots' might utilize these templates for auditing tasks. The audit templates are integral to documenting actions, changes, and updates to IT assets, ensuring comprehensive management and oversight.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint contributes to the detailed logging and auditing capabilities of Infraon Infinity, enabling the tracking of changes to asset attributes such as city, country, criticality, connection protocol, and device credentials. While the API specification currently states 'No response body' and 'parameters': [], it is implied that a POST request to this endpoint would either create a new audit template or modify an existing one. Users can track asset history through organized entries by date and time, and audits can often be exported in various formats (CSV, Excel, PDF) through related functionalities. This endpoint is distinct from viewing audit logs themselves, focusing on the configuration of the audit templates. The 'Bot Configuration' context suggests a potential integration with automated audit execution."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "CMDB managers", "Automation engineers"], "primary_use_case": "To define and manage the templates used for auditing IT assets and tracking changes within the CMDB, potentially for automated audit processes."}, "content_for_embedding": "This API manages configuration templates specifically designed for asset audit processes within the Infraon Infinity CMDB. It enables users to create, view, edit, and manage these templates, which dictate how IT asset audits are conducted and how changes to asset attributes (like city, country, criticality, connection protocol, and device credentials) are tracked and organized. The functionality is closely integrated with the 'Bot Configuration' module, suggesting that these templates are utilized by automated processes or bots for executing auditing tasks. This endpoint is crucial for establishing comprehensive logging and auditing capabilities, ensuring detailed documentation of actions and updates to IT assets. It focuses on the configuration of audit templates rather than the audit logs themselves, supporting the definition of audit parameters and data collection methods.", "semantic_keywords": ["Configuration", "CMDB", "Bot Configuration"], "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)", "ci_relationship_management_(cmdb)", "audit_log"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/asset-circuits/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_asset_circuits_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "This API allows users to view and edit configuration items (CIs) within the Configuration Management Database (CMDB), specifically focusing on asset circuits and general CMDB configurations. It enables management of CI properties and relationships."}, "content_for_embedding": "This API endpoint is designed for managing Configuration Management Database (CMDB) configurations, particularly for viewing and editing asset circuits. It facilitates the retrieval and modification of CMDB configuration details, supporting operations like searching, filtering, adding, editing, and deleting configuration profiles and parameters. This is crucial for maintaining an accurate and up-to-date inventory of IT assets and their relationships.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "configuration_download_jobs"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration", "Asset management"]}}, {"path": "/ux/common/cmdb/profile/asset-circuits-count/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_asset_circuits_count_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager", "Developer"], "primary_use_case": "To retrieve the count of circuits associated with assets, facilitating the management and viewing of CMDB configurations."}, "content_for_embedding": "This API retrieves the count of circuits associated with assets, specifically within CMDB configurations. It supports the viewing and management of asset-related configuration data, including capabilities for searching and filtering within a CMDB system.", "semantic_keywords": ["CMDB", "Asset count", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_count_display", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/asset-cos-col/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_asset_cos_col_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Configuration Managers", "IT Operations", "System Engineers"], "primary_use_case": "To provide a programmatic interface for viewing and managing configuration items (CIs) within the Configuration Management Database (CMDB), specifically for bot-related asset configurations, enabling IT administrators and operations teams to monitor and prepare for modifications of these critical settings."}, "content_for_embedding": "This API endpoint allows for the retrieval and management of bot CMDB configurations, specifically focusing on asset-related configuration items. Users can view detailed configuration profiles, search for specific configurations, and apply filters to narrow down results. While primarily a GET operation for viewing, the API's description indicates its role in enabling subsequent editing of these configurations, supporting comprehensive CMDB management workflows.", "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/asset-count/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_asset_count_retrieve", "description": "This GET API endpoint retrieves a count of assets configured within the CMDB profile. It is specifically related to the 'Bot Configuration' module, allowing administrators and asset managers to view the total number of IT and non-IT assets. The endpoint provides insight into the asset inventory and is part of the broader asset management functionalities within Infraon Infinity, which incorporates CMDB as 'Assets'.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily used for viewing the asset count related to bot CMDB configurations. For more detailed guidance related to bot configurations, users should visit the 'Bots module'. While the initial description mentioned 'viewed or edited', this GET endpoint specifically focuses on counting assets and does not support editing functionalities. Other modules within Infraon Infinity that utilize CMDB and asset management include Agent, API Registration, Audit, Business Hour, and Business Rule modules. The CMDB view also allows establishing connections between assets and their respective locations or departments."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "asset manager"], "primary_use_case": "To retrieve the total count of IT and non-IT assets configured within the CMDB profile, specifically those related to bot configurations, providing administrators and asset managers with insights into the asset inventory."}, "content_for_embedding": "This GET API endpoint retrieves a count of assets configured within the CMDB profile. It is specifically related to the 'Bot Configuration' module, allowing administrators and asset managers to view the total number of IT and non-IT assets. The endpoint provides insight into the asset inventory and is part of the broader asset management functionalities within Infraon Infinity, which incorporates CMDB as 'Assets'. This endpoint is primarily used for viewing the asset count related to bot CMDB configurations. For more detailed guidance related to bot configurations, users should visit the 'Bots module'. While the initial description mentioned 'viewed or edited', this GET endpoint specifically focuses on counting assets and does not support editing functionalities. Other modules within Infraon Infinity that utilize CMDB and asset management include Agent, API Registration, Audit, Business Hour, and Business Rule modules. The CMDB view also allows establishing connections between assets and their respective locations or departments.", "ontology_classification": {"features": ["asset_count_display", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "ai_bot_assistance"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Asset count", "CMDB", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/asset-life-cycle/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_asset_life_cycle_retrieve", "description": "This API endpoint provides functionalities to `view` or `edit` bot configurations within the CMDB (Configuration Management Database), specifically as they relate to asset life cycles. The CMDB, referred to as 'Assets' in Infraon, centralizes the management of all IT and non-IT organizational assets. This endpoint serves to manage the integrations and relationships between bots and these assets, allowing for precise and streamlined asset management.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to managing 'Bot Configuration' within the 'CMDB View' of Infraon. For detailed guidance on bot functionalities and their configurations, users should visit the 'Bots module' in the documentation. The CMDB, a database of configurable items (CIs), is frequently integrated with service catalogs to enhance service experience and productivity. This management includes establishing connections between assets and their locations/departments, and updating CI relations when user, requester, department, asset, or location details are modified. This endpoint does not have a response body."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "CMDB Manager", "System Integrator"], "primary_use_case": "To manage and configure bot integrations and their relationships with IT and non-IT assets within the Configuration Management Database (CMDB), specifically focusing on asset life cycles."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of bot configurations within the Configuration Management Database (CMDB), specifically in relation to asset life cycles. It enables the management of integrations and relationships between bots and various organizational assets (both IT and non-IT). The endpoint supports updating Configuration Item (CI) relations when details such as user, requester, department, asset, or location are modified, ensuring precise and streamlined asset management within the Infraon CMDB View. It is integral for maintaining accurate bot configurations and their associated asset data.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_lifecycle_management", "customizable_asset_properties_and_fields", "ai_bot_assistance", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB", "Asset management", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/asset-operations/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_asset_operations_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To retrieve and manage bot-related configurations within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing configurations specifically for bots within the Configuration Management Database (CMDB). It enables users to view existing bot CMDB configurations and provides the necessary data for subsequent editing operations. The functionality includes capabilities for searching and filtering these configurations to facilitate efficient management of assets and their relationships within the CMDB system.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/asset-summary/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_asset_summary_retrieve", "description": "This API endpoint provides functionalities to view and manage Configuration Management DataBase (CMDB) configurations related to 'bots'. Specifically, it focuses on the asset summary within the CMDB context, allowing administrators and asset managers to inspect various IT and non-IT assets. The CMDB in this system is referred to as 'Assets'. It integrates with the 'Bot Configuration' module, enabling users to add and manage details such as 'Bot Name' and 'Description' for configured bots. This endpoint is crucial for maintaining an up-to-date inventory of organizational assets and their associated bot configurations, which can be linked to service catalogs.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For more detailed guidance on bot functionalities and configurations, users should visit the 'Bots' module within the system. Default bots with their functionalities, such as Finance and HR Assistant bots, are described in the user guides. This API facilitates the management of bot-related configurations within the broader CMDB asset management framework, linking configured bots to their respective assets. While the current specification indicates 'No response body', successful GET requests would typically imply retrieval of asset summary data related to bot configurations, which developers should infer based on the endpoint's purpose. The CMDB allows establishing connections between assets and their locations or departments, although this specific endpoint focuses on the asset summary in relation to bot configurations."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "asset manager"], "primary_use_case": "To view and manage Configuration Management Database (CMDB) configurations related to bots, specifically focusing on the asset summary to maintain an up-to-date inventory of organizational assets and their associated bot configurations."}, "content_for_embedding": "This API endpoint allows administrators and asset managers to retrieve and manage asset summaries within the Configuration Management Database (CMDB), specifically for assets related to bot configurations. It enables inspection of IT and non-IT assets, integration with the Bot Configuration module for managing bot details like name and description, and facilitates maintaining an accurate inventory of assets linked to service catalogs.", "ontology_classification": {"features": ["unified_asset_repository", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Asset management", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/assetList/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_assetList_retrieve", "description": "This API endpoint allows administrators and asset managers to view and manage all organizational assets within the Infraon platform. It is part of the CMDB (Configuration Management Database), which is integrated as 'Assets' in Infraon. This endpoint provides capabilities for managing IT and non-IT assets in a centralized location, facilitating asset management and their relationships (upstream/downstream connections). While the initial description mentioned 'bot cmdb configurations', the contexts strongly suggest this is a broader 'Asset' management API within the CMDB module.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Infraon's CMDB (Assets) is designed to manage various organizational assets and establish connections between them and their locations or departments. This endpoint is crucial for maintaining precise and streamlined asset management. Although the `description` states 'bot cmdb configurations', the strong emphasis across multiple highly-ranked contexts on 'Assets' as the CMDB part of ITSM, managing all IT and non-IT assets, suggests a broader scope for this endpoint in viewing and managing general assets rather than being limited to bot-specific CMDB configurations. For detailed guidance on asset relationships, users can navigate to an asset, click 'relationship', and choose 'upstream' or 'downstream'. This API does not expect any parameters or request body for a GET operation, and it produces no response body, indicating it might trigger an internal process or be part of a larger UI-driven workflow where the 'asset list' is dynamically loaded."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "asset manager"], "primary_use_case": "To view and manage all organizational assets within the Infraon platform's CMDB."}, "content_for_embedding": "This API endpoint allows administrators and asset managers to retrieve and manage a list of all organizational assets within the Infraon platform. It is a core part of the Configuration Management Database (CMDB), specifically the 'Assets' module. The endpoint facilitates comprehensive asset management, including IT and non-IT assets, and their relationships (e.g., upstream/downstream connections). While the description mentions 'bot cmdb configurations', the primary focus is on general asset management within the CMDB module, providing a dynamically loaded asset list.", "ontology_classification": {"features": ["unified_asset_repository", "asset_search_and_filtering", "ci_relationship_management_(cmdb)", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["Asset management", "CMDB", "Retrieval"]}}, {"path": "/ux/common/cmdb/profile/attachment/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_attachment_retrieve", "description": "This endpoint retrieves all attachments associated with a selected asset. It is part of the asset profile management system, enabling users to view documents related to an asset's history, such as product images, CSV files of asset data, or other relevant files. This functionality is crucial for providing a comprehensive overview of an asset, akin to the 'Attachment' section described in asset detail views within the Infinity User Guide.", "summary": "Gets attachments for the selected asset.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint does not require any parameters or request body for fetching attachments. While attachments can typically be added by clicking an 'add' button and uploading files (potentially including CSV files as mentioned in Context Rank 5), this specific GET endpoint is solely for retrieving them. The attachments displayed are those aligned to the asset's process or profile, offering historical and current documentation."}, "llm_generated": {"business_context": {"user_personas": ["Asset Managers", "IT Administrators", "Help Desk Agents"], "primary_use_case": "Retrieving and viewing asset-related attachments for comprehensive asset overview and historical documentation."}, "content_for_embedding": "This API endpoint allows users to retrieve all attachments linked to a specific asset within the asset profile management system. It provides access to various document types, including product images, CSV files of asset data, and other relevant files, offering a complete historical and current view of the asset. This read-only functionality is crucial for comprehensive asset documentation and overview.", "ontology_classification": {"features": ["attachment_management"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}, "semantic_keywords": ["Attachments", "Retrieval", "Asset management"]}}, {"path": "/ux/common/cmdb/profile/audit-template-details/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_audit_template_details_retrieve", "description": "This API endpoint is designed to view and manage audit template details related to bot CMDB configurations. It allows users to retrieve comprehensive information about how bot configurations are audited, including details such as Upload Job, Configuration Template, IP Address, Vendor, Created By, Executed By, and Result. This functionality is crucial for monitoring and ensuring compliance of automated bot processes within the CMDB.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically focuses on the audit aspects of bot CMDB configurations, distinguishing itself from general bot configurations. While the current specification indicates 'no response body', the contextual information suggests that viewing audit details typically involves a pop-up window with specifics like Timestamp, Task Name, IP Address, and custom messages. Users should consult the 'View Audit' section in the user guide for more practical details on the displayed information. This endpoint is central to understanding the historical changes and actions performed on bot configurations within the CMDB."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Compliance Officer"], "primary_use_case": "To retrieve and manage audit details for bot CMDB configurations, enabling monitoring, compliance, and understanding of historical changes and actions."}, "content_for_embedding": "This GET API retrieves comprehensive audit template details for bot CMDB configurations. It provides information on how bot configurations are audited, including Upload Job, Configuration Template, IP Address, Vendor, Created By, Executed By, and Result. This is vital for monitoring compliance and understanding historical changes and actions on bot configurations within the CMDB. Although the response body is not explicitly defined, the endpoint is used to view audit specifics like Timestamp, Task Name, IP Address, and custom messages, typically in a pop-up.", "semantic_keywords": ["Audit Trail", "CMDB", "Configuration retrieval"], "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "real-time_and_historical_reporting", "historical_data_management", "granular_data_filtering"], "primary_module": "report", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/audit_record_item/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_audit_record_item_retrieve", "description": "This API endpoint provides access to detailed audit records for configuration management database (CMDB) profiles, specifically focusing on `audit_record_item` entries. It allows users to view comprehensive information related to various actions and configurations within the CMDB. This includes details such as a list of activities related to a specific configuration, timestamps, associated IP addresses, task names, and system messages. The endpoint is crucial for auditing and tracking changes made to CMDB configurations, offering insight into what configurations were downloaded (e.g., running or startup configurations) and any related error logs, much like viewing audit logs for download jobs.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string", "pattern": "[^/]+"}, "required": true}], "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier for the specific audit record item to be retrieved. This API is commonly used to inspect the history and details of CMDB configurations, providing transparency on actions performed, similar to reviewing 'View Audit' details for 'Upload Job' or 'Configuration Template' entries. It provides details such as 'Upload Job', 'Configuration Template', 'IP Address', 'Vendor', 'Created By', 'Executed By', and 'Result'. There is no request body for this GET operation, and the response is an empty body, implying the details are communicated through status codes or headers."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Auditors", "Network engineers"], "primary_use_case": "To provide detailed audit records and historical information for Configuration Management Database (CMDB) profiles, enabling users to track changes, actions, and configurations within the CMDB."}, "content_for_embedding": "This API endpoint provides access to detailed audit records for Configuration Management Database (CMDB) profiles, specifically focusing on `audit_record_item` entries. It allows users to view comprehensive information related to various actions and configurations within the CMDB, including timestamps, IP addresses, task names, and system messages. It is crucial for auditing and tracking changes made to CMDB configurations, offering insight into downloaded configurations and related error logs. The `id` path parameter is a mandatory unique identifier for the specific audit record item to be retrieved, commonly used to inspect the history and details of CMDB configurations, similar to reviewing audit details for upload jobs or configuration templates. It provides details such as 'Upload Job', 'Configuration Template', 'IP Address', 'Vendor', 'Created By', 'Executed By', and 'Result'.", "ontology_classification": {"features": ["audit_log", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Audit Trail", "CMDB", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/audit_record_list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_audit_record_list_retrieve", "description": "This API endpoint provides access to the audit records related to bot CMDB configurations. It allows for viewing and potentially editing these configurations. The audit records include details such as Timestamp, Task Name, IP Address, and associated messages, offering traceability for changes made to bot configurations. This is particularly useful for understanding the history of bot setups like Finance bots, HR Assistant bots, and others relevant to various Infinity modules.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the 'Audit' module within Infraon Infinity, which is one of the modules accessible to users with appropriate privileges (Context Rank 10, 5). Users can typically view audit details after clicking a 'View Audit' option, which then displays a pop-up with relevant information (Context Rank 4, 9). The configurations managed here are related to 'Bot Configuration' (Context Rank 5, 10). While the primary function is viewing audit records, the description also indicates potential editing capabilities ('viewed or edited'). For detailed guidance on Bots, users should visit the 'Bots module' (Context Rank 2)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Compliance Officer"], "primary_use_case": "To provide a historical record and traceability for changes made to bot CMDB configurations, enabling users to view and understand the audit trail of these setups."}, "content_for_embedding": "This API retrieves audit records for bot CMDB configurations within Infraon Infinity. It provides a detailed history of changes, including timestamps, task names, IP addresses, and messages, offering traceability for bot setups like Finance and HR Assistant bots. While primarily for viewing, it also hints at potential editing capabilities for these configurations, serving as a crucial tool for administrators and IT operations to monitor and understand modifications.", "semantic_keywords": ["Audit Trail", "Bot Configuration", "CMDB"], "ontology_classification": {"features": ["audit_log", "ai_bot_assistance", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/audit_status_count/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_audit_status_count_retrieve", "description": "This API endpoint provides a mechanism to view or edit configurations related to bot 'CMDB' (Configuration Management Database) items. It is specifically designed to manage audit statuses of these configurations, allowing for insights into bot-related activities and their configuration integrity. This functionality aligns with the broader reporting capabilities, such as those for NCCM reports, which summarize configuration download activities and audit information related to user actions during job executions, as indicated in the highest-ranked context.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification shows no specific parameters, given the context of 'audit_status_count' and general audit reporting, it is likely intended to summarize or provide counts of various audit statuses for bot CMDB configurations. Although the original description suggests viewing or editing, the 'audit_status_count' in the path implies a focus on retrieval of status counts rather than direct editing of configurations. Further details on bot functionality and configuration can be found in the 'Bots module' as per the admin guide (Rank 2) or within the general 'Bot Configuration' sections of the Infinity user guide (Rank 9). This endpoint plays a role in monitoring the health and activity of bot configurations, similar to how NCCM reports summarize network device configuration activities."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Auditor", "Developer"], "primary_use_case": "To monitor the health and activity of bot configurations within the CMDB by providing audit status counts, supporting reporting and auditing functions."}, "content_for_embedding": "This API retrieves audit status counts for bot Configuration Management Database (CMDB) items. It provides insights into bot-related activities and configuration integrity, supporting monitoring, reporting, and auditing functions similar to NCCM reports.", "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "ci_relationship_management_(cmdb)", "audit_log"], "primary_module": "report", "confidence_score": 0.9}, "semantic_keywords": ["Audit Trail", "CMDB", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/audit_status_count_filter/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_audit_status_count_filter_retrieve", "description": "This GET API endpoint retrieves filtered audit status counts related to bot CMDB configurations. While the original description mentioned viewing or editing bot CMDB configurations, the endpoint's path (`audit_status_count_filter`) and the context suggest its primary purpose is to provide audit-related statistics. This aligns with broader 'Bot Configuration' or 'Audit' functionalities mentioned in the user guides, allowing for detailed summaries of activities and statuses related to bot configurations.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The endpoint is likely used within the UX for displaying filtered audit information, possibly related to the status of bot configurations. Although the API specification indicates no response body, this is often a placeholder, and a successful call would typically return JSON data containing the filtered audit status counts. The 'Bot Configuration' module, as highlighted in several contexts, provides further guidance on managing bots, which may indirectly relate to the data retrieved by this audit endpoint. Consider scenarios where users might filter audits by bot name, status (e.g., success, failure), or other relevant criteria, although the specific filter parameters are not detailed in the current API spec."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Auditor"], "primary_use_case": "This API retrieves filtered audit status counts for bot CMDB configurations, enabling users to monitor and analyze audit-related statistics within the IT infrastructure. It supports displaying audit information in a user interface, potentially allowing filtering by bot name or status."}, "content_for_embedding": "This GET API endpoint retrieves filtered audit status counts related to bot CMDB configurations. It provides audit-related statistics for monitoring and displaying audit information within the UX, potentially allowing filtering by bot name, status, or other criteria. The API is crucial for understanding the activities and statuses of bot configurations within the CMDB.", "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "report_filtering_options", "audit_log", "ai_bot_assistance", "ci_relationship_management_(cmdb)", "user_access_auditing", "asset_count_display"], "primary_module": "report", "confidence_score": 0.9}, "semantic_keywords": ["Audit Trail", "Bot Configuration", "CMDB Management"]}}, {"path": "/ux/common/cmdb/profile/audit_template_details/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_audit_template_details_retrieve_2", "description": "This API endpoint provides functionalities for viewing and editing bot CMDB configurations. Specifically, it allows users to delve into the details of audit templates associated with these configurations. Users can expect to retrieve comprehensive information such as Upload Job, Configuration Template, IP Address, Vendor, Created By, Executed By, and the Result of bot-related actions. The endpoint is crucial for managing and monitoring the operational aspects of configured bots.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Upon accessing or viewing audit details, a pop-up window will typically display further information, including Timestamp, Task Name, IP Address, and relevant messages. This aligns with the 'View Audit' functionality mentioned in the user guide, which describes similar details for general audits. While the API specification mentions 'bot cmdb configurations', the context strongly suggests a focus on the 'audit template details' within these configurations, allowing for a deep dive into the operational history and setup of bots. This endpoint would be key for administrators and developers to inspect and manage the configurations and their associated audit trails."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "Retrieving and inspecting audit template details for bot CMDB configurations to manage and monitor operational aspects and audit trails."}, "content_for_embedding": "This API retrieves comprehensive audit template details for bot CMDB configurations, including upload job, configuration template, IP address, vendor, creation and execution details, and results of bot actions. It also provides timestamp, task name, and messages for audit trails, enabling administrators and developers to inspect and manage operational history and setup of configured bots.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "user_access_auditing", "asset_search_and_filtering", "configuration_download_jobs"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Audit Trail"]}}, {"path": "/ux/common/cmdb/profile/available_stats/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_available_stats_retrieve", "description": "This API endpoint provides access to view or edit the available CMDB configurations for bots. It is an integral part of managing bot functionalities, particularly within the Bots module. These configurations relate to specifying details such as the bot's label, description, and other relevant fields, aligning with how bots are configured whether they are default bots (like Finance or HR Assistant) or custom-created bots.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is specifically designed for CMDB (Configuration Management Database) related settings for bots. While the current specification indicates no request body or parameters for this GET endpoint, its description suggests potential for viewing and editing. Users can find detailed guidance on managing bots within the 'Bots module', as mentioned in Rank 1 context. This API supports the larger framework where bots can be given roles, and their details, like descriptions, are defined and managed."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Personnel", "Developer"], "primary_use_case": "To view and potentially edit available CMDB configurations for bots, facilitating the management of bot functionalities and details like labels and descriptions."}, "content_for_embedding": "This API endpoint allows users to retrieve and manage the available Configuration Management Database (CMDB) settings specifically for bots. It is crucial for configuring bot functionalities, including their labels and descriptions, within the Bots module. This GET endpoint supports the broader framework of defining and managing bot roles and details, whether for default or custom-created bots.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/basicview/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_basicview_retrieve", "description": "This API endpoint allows users to view basic configurations of 'bots' within the CMDB (Configuration Management Database). It provides a mechanism to retrieve information about bot configurations, such as their labels, descriptions, and functionalities, as defined in the system. While the original description mentioned editing, this GET endpoint primarily focuses on viewing these configurations. For detailed guidance on bot functionalities and configurations, users are directed to the 'Bots module' in the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint does not require any parameters for viewing bot configurations. There is no request body for this GET operation, and the response body is not explicitly defined in the provided specification, indicating it might return data directly relevant to the 'basicview' of bot profiles. Common use cases include administrators or users needing to quickly review bot setups, such as 'Finance' or 'HR Assistant' bots, and their associated descriptions and functionalities. The official 'Bots module' should be consulted for comprehensive management and configuration, including detailed guidance on adding necessary details and assigning roles."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To allow users, particularly administrators, to view and retrieve basic configuration details of \"bots\" stored within the Configuration Management Database (CMDB). This enables quick review of bot setups and their functionalities."}, "content_for_embedding": "This API endpoint provides a read-only mechanism to access and view fundamental configuration details of \"bots\" within the CMDB. It allows for the retrieval of information such as bot labels, descriptions, and functionalities. The primary use case is for administrators and other users to quickly review existing bot setups, like \"Finance\" or \"HR Assistant\" bots, and understand their associated configurations and descriptions. It does not support editing or modification of these configurations, focusing solely on the \"basicview\" aspect of bot profiles.", "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)", "ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/bmc_vm_relation/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_bmc_vm_relation_retrieve", "description": "This API endpoint provides functionalities to view and edit configuration details for bots within the CMDB (Configuration Management Database) system. It specifically interacts with the `bmc_vm_relation` profile, allowing for the management of bot-related configurations. Users can apply filters based on predefined fields and conditions to refine their search for specific configurations.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on managing bot configurations, refer to the 'Bots module' mentioned in the administrative guide (Context Rank 1). When adding or editing bot configurations, key fields typically include 'Bot Name' and 'Description', as highlighted in relevant documentation (Context Rank 2). Although the API specification indicates no request body for GET requests, future updates or related endpoints for POST/PUT operations would likely involve providing details such as 'Bot Handle', 'Subscription', and 'Resource Group' for Azure Bots (Context Rank 9). This endpoint ties into broader CMDB functionalities, which allow for establishing relationships between assets and their locations or departments, contributing to precise and streamlined asset management (Context Rank 6)."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "CMDB administrators", "Developers"], "primary_use_case": "To view, search, filter, and manage configuration details for bots within the Configuration Management Database (CMDB) system."}, "content_for_embedding": "This API endpoint allows users to view, search, filter, and manage configuration details for bots within the Configuration Management Database (CMDB) system. It specifically interacts with the `bmc_vm_relation` profile to handle bot-related configurations, including fields like 'Bot Name' and 'Description'. The functionality supports refining searches based on various fields and conditions, contributing to precise asset management within the CMDB by establishing relationships between assets and their locations or departments.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/bulk-inventory-create-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_bulk_inventory_create_csv_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "CMDB Manager"], "primary_use_case": "To enable the bulk creation or import of Configuration Management Database (CMDB) configurations, specifically bot configurations, through a CSV file."}, "content_for_embedding": "This API allows users to upload a CSV file to perform bulk creation or import of Configuration Management Database (CMDB) configurations, specifically for bot configurations. It streamlines the process of adding multiple configuration items to the CMDB simultaneously.", "ontology_classification": {"features": ["multiple_asset_addition_methods", "ci_relationship_management_(cmdb)", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB", "CSV Import", "Configuration"]}}, {"path": "/ux/common/cmdb/profile/bulk_inventory_csv_cols/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_bulk_inventory_csv_cols_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "To enable the definition and management of CSV column structures for bulk importing configuration item (CI) inventory data into the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint facilitates the management of Configuration Management Database (CMDB) configurations, specifically by allowing the creation or modification of CSV column definitions for bulk inventory imports. It enables users to define the structure of CSV files used to populate and update CMDB profiles, ensuring accurate and efficient data ingestion for configuration items.", "semantic_keywords": ["CMDB", "CSV Import", "Configuration"], "ontology_classification": {"features": ["inventory_data_collection", "multiple_asset_addition_methods", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/category-form-options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_category_form_options_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "Allows viewing and editing of bot CMDB configurations by retrieving form options for defining CMDB categories."}, "content_for_embedding": "This API retrieves configuration options for CMDB categories, specifically for bot configurations. It enables users to view and prepare for editing the structural definitions of CMDB categories, including details like profile names, vendors, OS types, and series. It supports the management and retrieval of configuration details within a CMDB context.", "semantic_keywords": ["CMDB category", "Configuration", "Dropdown options"], "ontology_classification": {"features": ["platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/channel-mapping/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_channel_mapping_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Developer"], "primary_use_case": "Managing and retrieving bot-specific CMDB configurations."}, "content_for_embedding": "This API endpoint is designed for managing bot CMDB configurations. It allows users to retrieve, view, and potentially edit configuration settings related to bots within the Configuration Management Database. This includes functionalities like searching, filtering, and managing various configuration profiles and parameters, similar to general system configuration management.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/channelmap-run-command/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_channelmap_run_command_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows users to view and edit configurations related to bot CMDB entries, enabling management of specific CMDB profiles and parameters."}, "content_for_embedding": "This API endpoint is designed for managing bot CMDB configurations. It facilitates the viewing, searching, filtering, and editing of configuration profiles and parameters within the CMDB, including actions like adding, deleting, and modifying settings for specific bot-related CMDB entries.", "semantic_keywords": ["CMDB", "Configuration", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/child-cis/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_child_cis_retrieve", "description": "This API endpoint provides functionalities to view and manage configurations for 'bot CMDB' (Configuration Management Database) child CIs (Configuration Items). It allows for detailed management and insights into various bot configurations, enabling users to add necessary details for bots like Bot Name and Description, and manage default bot functionalities such as Finance, HR Assistant, and IT Assistance bots, as suggested by the guide documentation.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on bot configurations, developers should refer to the 'Bots module' as highlighted in the admin guide. This endpoint is crucial for tasks like adding suitable descriptions to created bots and understanding the fields associated with different bot types. Although the API specification indicates no request body, the context heavily suggests that the configurations involve setting properties like 'Bot Name' and 'Description' for bots. The endpoint relates to managing the relationships between assets (like bots) and their respective locations or departments within the CMDB, as well as updating CI relationships when user, requester, department, asset, or location is modified, and CI relation is created based on rules."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Developer"], "primary_use_case": "To view and manage configurations for bots within a Configuration Management Database (CMDB), including their details, properties, and relationships with other Configuration Items (CIs). This enables administrators to define bot names, descriptions, and manage how bots relate to locations or departments, as well as update CI relationships based on rules."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing configurations of 'bot CMDB' child Configuration Items (CIs). It allows users, primarily administrators and IT managers, to view and update details for various bots, such as 'Bot Name' and 'Description'. The functionality extends to managing default bot types like Finance, HR Assistant, and IT Assistance bots. A crucial aspect is its role in managing relationships between assets (like bots) and their associated locations or departments within the CMDB. It also supports updating CI relationships based on predefined rules, as part of CI Rule Configuration. The endpoint facilitates actions like searching, filtering, editing, and deleting bot configurations, ensuring comprehensive management of bot assets and their integration within the CMDB.", "semantic_keywords": ["Bot Configuration", "CMDB", "CI configurations"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "unified_asset_repository", "inventory_data_collection"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/cmdb-exists/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_cmdb_exists_retrieve", "description": "This `GET` API endpoint, `/ux/common/cmdb/profile/cmdb-exists/`, is designed to check for the existence of specific CMDB (Configuration Management Database) configurations related to 'Bots'. It facilitates the management of bot configurations, allowing users to verify if certain configurations are present before attempting further view or edit operations. This aligns with the 'Bots module' guidance (Context Rank 1) for detailed bot configuration management. While the summary in the specification is empty, the description indicates its role in managing bot CMDB settings, implying a lookup or validation function.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Although the API specification currently lists no parameters, typical usage scenarios for verifying CMDB existence would likely involve querying by bot name, configuration ID, or other specific identifiers. Developers should refer to the 'Bots Configuration' section in the user guide (Context Rank 2) for details on relevant fields like 'Bot Name' and 'Description', which might be used as search criteria if parameters are introduced in the future or are implicitly handled by the backend. The endpoint's utility lies in confirming the presence of a CMDB profile, which is crucial before attempting modifications or viewing details, as implied by the initial description regarding 'viewing or editing'. The system often automatically finds the right profile during discovery (Context Rank 5), suggesting this endpoint might be used to confirm if that discovery was successful for a given profile."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Administrators", "Developers"], "primary_use_case": "Verifying the existence of CMDB configurations for bots to facilitate management and prevent errors during view or edit operations."}, "content_for_embedding": "This API endpoint allows users to check for the existence of specific Configuration Management Database (CMDB) configurations, particularly those related to 'Bots'. Its primary purpose is to validate the presence of a CMDB profile before any view or edit operations are attempted, ensuring data integrity and preventing errors. While it currently has no explicit parameters, future enhancements might include querying by bot name or configuration ID. This endpoint is crucial for managing bot configurations and can be used to confirm successful profile discovery within the CMDB system.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration Profiles"]}}, {"path": "/ux/common/cmdb/profile/common-get-trace-test/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_common_get_trace_test_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Engineer"], "primary_use_case": "To retrieve and view configuration details for CMDB, specifically related to trace tests for bot configurations."}, "content_for_embedding": "This API endpoint allows for the retrieval and viewing of bot CMDB configurations, specifically those related to trace tests. It enables users to access and inspect configuration details within the CMDB system.", "ontology_classification": {"features": ["trace_test", "ci_relationship_management_(cmdb)", "topology_view_display"], "primary_module": "topology", "confidence_score": 0.9}, "semantic_keywords": ["Trace Test", "CMDB", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/common-set-trace-test/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_common_set_trace_test_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Engineer"], "primary_use_case": "To retrieve and manage trace test information for bot CMDB configurations."}, "content_for_embedding": "This API allows for the retrieval of trace test information pertaining to bot CMDB configurations. It enables users to view details and potentially manage these configurations, providing insights into the network connectivity and status of CMDB-managed assets.", "semantic_keywords": ["Trace Test", "CMDB", "Configuration retrieval"], "ontology_classification": {"features": ["trace_test", "ci_relationship_management_(cmdb)"], "primary_module": "topology", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/component-inventory/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_component_inventory_retrieve", "description": "This `/ux/common/cmdb/profile/component-inventory/` API endpoint facilitates the viewing and editing of configurations for bots within the CMDB (Configuration Management Database). It allows users to manage bot-specific details such as Bot Name and Description, similar to the \"Bots Configuration\" module described in the user guides. This includes managing default bots and their functionalities.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint directly relates to the 'Bots Configuration' functionality where users can add, view, or edit details for bots, including their Bot Name and Description. For detailed guidance on bot management, users can refer to the 'Bots module' as suggested in the admin guide. The CMDB, referred to as 'Assets' in Infraon, often integrates with a Service Catalog. Admins also have the capability to customize default bots for specific departments, aligning with their terminology and compliance needs. While the current specification indicates 'No response body', a successful operation would likely imply the configuration change was applied or the configuration was successfully retrieved, without returning data in the response body itself."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To view and edit configurations for bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of configurations for bots within the CMDB (Configuration Management Database). It allows users, particularly administrators, to manage bot-specific details such as Bot Name and Description, similar to the \"Bots Configuration\" module. This includes managing default bots and their functionalities, and customizing them for specific departments to align with their terminology and compliance needs. Although a GET method, the description implies that configuration changes are applied or retrieved successfully.", "ontology_classification": {"features": ["ai_bot_assistance", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/configuration-card-details/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_configuration_card_details_retrieve", "description": "This API endpoint allows users to view and edit configurations related to 'bots' within the CMDB (Configuration Management Database). It specifically targets details found on 'configuration cards' for these bots, enabling management of bot-specific settings. This includes the ability to define details such as 'Bot Name', 'Label', and 'Description' for respective created bots, as detailed in the Bots Configuration guide. The endpoint is integral for managing how bots are configured and integrated into the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on using this API and managing bot configurations, refer to the 'Bots module' in the documentation. The configuration for bots often involves defining various fields related to their functionality, similar to how 'Default bots' are described with their specific operations. Device credentials must be pre-configured for selection and configuration changes. This API facilitates capabilities found in modules like NCCM (Network Change & Configuration Management), which involves managing configuration parameters and job content effectively, though this API is focused on bot configurations rather than network devices directly. It is part of the system where automatically discovered network devices are added to NCCM for management, backup, change, compliance, and monitoring, highlighting the broader context of configuration management."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations personnel", "Users responsible for configuring and managing bots"], "primary_use_case": "To view and edit configuration details for bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API allows users to retrieve and modify configuration details for bots stored in the Configuration Management Database (CMDB). It specifically targets 'configuration cards' to manage bot-specific settings such as 'Bot Name', 'Label', and 'Description'. This endpoint is crucial for the ongoing management and integration of bots within the system, facilitating updates to their operational parameters.", "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration"], "ontology_classification": {"features": ["general_settings", "ai_bot_assistance", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/confirm-delete-cross-connections/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_confirm_delete_cross_connections_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "CMDB Manager", "Network Engineer"], "primary_use_case": "This API is used to retrieve details about cross-connections related to bot CMDB configurations, specifically to confirm the impact of a potential deletion. It allows users to understand which related items or dependencies would be affected before proceeding with a delete operation within a Configuration Management Database (CMDB) system."}, "content_for_embedding": "This API retrieves information about cross-connections linked to bot CMDB configurations. It serves as a pre-deletion validation step, providing necessary details to confirm the impact of deleting specific configurations. Users can view affected relationships and dependencies within the Configuration Management Database (CMDB) before initiating a permanent delete action.", "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "ci_relationship_management_(cmdb)", "diagnosis_tools", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/congiguration-details/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_congiguration_details_create", "description": "This API endpoint facilitates the viewing and editing of bot CMDB configurations. It allows administrators to manage details for various bots, including their names and descriptions. This is part of the larger Bots Configuration module, enabling the setup and customization of default and new bots within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Admins can customize default bots for specific departments to align with their terminology and compliance requirements. For detailed guidance on bot management, users should visit the Bots module. This endpoint likely supports operations that align with adding and modifying bot configuration fields such as 'Bot Name' and 'Description', as referenced in the Infinity User Guide. Common use cases include setting up new bot functionalities or adjusting existing bot behaviors and information."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "This API allows administrators to manage and customize bot configurations within the CMDB, including viewing, editing, adding, and modifying bot names and descriptions."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of bot CMDB configurations. It allows administrators to manage details for various bots, including their names and descriptions. This is part of the larger Bots Configuration module, enabling the setup and customization of default and new bots within the system. Admins can customize default bots for specific departments to align with their terminology and compliance requirements. Common use cases include setting up new bot functionalities or adjusting existing bot behaviors and information.", "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Edit"]}}, {"path": "/ux/common/cmdb/profile/congiguration-inventory-details/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_congiguration_inventory_details_retrieve", "description": "This API endpoint provides functionalities to view and manage configurations related to 'bots' within the CMDB (Configuration Management Database) system. It enables users to access inventory details and modify existing bot configurations. The integration with CMDB suggests that these bot configurations are treated as configurable items. This endpoint is crucial for administrators to customize default bots for specific departments, align with terminology, and fulfill compliance requirements, as highlighted in the user guides. Users can define various fields for bots, such as 'Bot Name', 'Label', and 'Description', mirroring the structured information found in the 'Bots Configuration' sections of the documentation.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically manages 'bot cmdb configurations,' implying a close relationship with the broader CMDB system which treats assets and configurations as configurable items. For detailed guidance on how to manage bots, users should refer to the 'Bots module' as mentioned in the admin guide. Administrators have the capability to customize default bots to align with specific departmental needs and compliance, which is a key use case for this API. While the API specification currently lists no parameters, any future additions would likely follow the structure of bot configurations, including fields such as bot name, label, and description, as noted in the context documents."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "Managing and viewing configurations of bots within the CMDB system."}, "content_for_embedding": "This API endpoint allows administrators to view, manage, and customize configurations for 'bots' within the Configuration Management Database (CMDB). It provides access to inventory details and enables modification of existing bot configurations, treating them as configurable items. Key functionalities include defining fields like 'Bot Name', 'Label', and 'Description', as well as actions such as editing, deleting, searching, and filtering bot configurations. This is crucial for aligning bots with departmental needs and compliance requirements.", "semantic_keywords": ["Bot Configuration", "CMDB", "CI configurations"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering", "asset_lifecycle_management", "inventory_data_collection"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/controller-clients/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_controller_clients_retrieve", "description": "This API endpoint provides functionalities related to managing 'bot CMDB configurations,' specifically focusing on 'controller-clients.' Users can either view existing bot configurations or make modifications to them. The endpoint is integral to the overall Bots module, allowing for detailed management of bot settings, including parameters like 'Bot Name' and 'Description' as described in relevant guides. This enables users to define and manage how bots interact within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on utilizing or configuring bots, developers and administrators should refer to the 'Bots module' as indicated in the admin guide. The configurations managed by this API are closely linked to the bot's functionality and its associated fields. While the current specification indicates \"No response body,\" success typically implies a successful update or retrieval of the bot CMDB configuration."}, "llm_generated": {"business_context": {"user_personas": ["developers", "administrators", "users"], "primary_use_case": "To manage and retrieve configurations for bots within the CMDB, including viewing and modifying bot settings like 'Bot Name' and 'Description'."}, "content_for_embedding": "This API endpoint is used for managing bot CMDB configurations, specifically for controller-clients. It allows users, developers, and administrators to view existing bot configurations and make modifications to bot settings such as 'Bot Name' and 'Description'. It is an integral part of the overall Bots module, enabling the definition and management of how bots interact within the system. Success implies a successful update or retrieval of bot CMDB configurations.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "asset_lifecycle_management", "ai_bot_assistance"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/profile/controller-stats/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_controller_stats_retrieve", "description": "This API endpoint provides a mechanism to view or modify configuration settings related to bots within the Common CMDB's profile controller statistics. It is specifically designed to manage and update the details and operational parameters of various bots, which may include default bots like Finance and HR Assistant, as well as customized bots. The configurations pertain to attributes such as bot name, description, and functionalities, enabling administrators to tailor bot behavior to specific departmental needs and compliance requirements.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For an admin looking for detailed guidance on bot configurations, it is highly recommended to visit the 'Bots module' within the system. The configuration process often involves adding necessary bot details, including the bot's label and a descriptive explanation of its purpose. Admins can also customize default bots to align with specific organizational terminology. While this GET endpoint is primarily for viewing/editing configurations, the broader context suggests a workflow for bot creation and management (e.g., 'Create New Bot' or 'Add the necessary details')."}, "llm_generated": {"business_context": {"primary_use_case": "To manage and update configuration settings for various bots within the Common CMDB, allowing administrators to view, modify, and tailor bot behavior and operational parameters."}, "content_for_embedding": "This API endpoint enables administrators to view and modify configuration settings for bots within the Common CMDB. It supports managing bot attributes like name, description, and functionalities, facilitating the customization of bot behavior to meet specific departmental and compliance requirements. The API is integral to the broader workflow of bot creation and management.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration"], "ontology_classification": {"features": ["ai_bot_assistance", "ci_relationship_management_(cmdb)", "general_settings", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/create-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_create_csv_create", "description": "This API endpoint facilitates the management of bot CMDB (Configuration Management Database) configurations. While the original description states it allows configurations to be 'viewed or edited,' the path `/ux/common/cmdb/profile/create-csv/` and context related to CSV importing (Context 6, 7) strongly suggest its primary function is for creating or updating bot profiles, likely by importing data via a CSV file. It's used for adding necessary details for bot configurations. Users can define bot names and descriptions to suit their respective created bots, as referenced in the 'Bots Configuration' fields described in the documentation (Context 2).", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Although the API specification does not explicitly list parameters or a request body, the path suggests a CSV file import. The context indicates that importing from a CSV file may be optional for certain configurations (Context 6, 7). For detailed guidance on bot configurations, users should refer to the 'Bots module' in the documentation (Context 1). This functionality ties into the broader 'Bot Configuration' module within Infraon Infinity (Context 9, 10), which allows for managing various bot functionalities like Finance and HR Assistant bots (Context 3, 4). Fields such as 'Bot Name' and 'Description' are pertinent (Context 2). Note that details like 'Bot Handle,' 'Subscription,' and 'Resource Group' might be mandatory inputs in related bot configuration steps (Context 8)."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "Bot Managers"], "primary_use_case": "To manage (create and update) bot Configuration Management Database (CMDB) configurations, primarily through bulk data import via CSV files."}, "content_for_embedding": "This API facilitates the creation and updating of bot Configuration Management Database (CMDB) profiles. It is designed to import bot configuration data, such as bot names and descriptions, likely via a CSV file. This functionality is integral to managing bot configurations within the Infraon Infinity platform, allowing for bulk updates or additions of bot profiles.", "semantic_keywords": ["CMDB", "CSV Import", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "multiple_asset_addition_methods", "bulk_actions_on_assets", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/cross-connection-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_cross_connection_data_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To view and manage configurations for bot-related CMDB items."}, "content_for_embedding": "This API endpoint allows users to retrieve and manage bot-specific configuration items within the Configuration Management Database (CMDB). It supports viewing existing configurations and is designed to facilitate editing of these configurations.", "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/ctp-utilization/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_ctp_utilization_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Configurators", "Developers"], "primary_use_case": "This API allows for the viewing and editing of bot CMDB configurations, facilitating the management and customization of configuration rules within the Configuration Management Database."}, "content_for_embedding": "This API endpoint is designed for managing bot CMDB configurations. It enables users to retrieve, view, and modify existing configurations, as well as perform actions like adding, deleting, searching, filtering, and exporting configuration profiles and parameters. It is crucial for maintaining and customizing CI rules and settings within the Configuration Management Database.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "ai_bot_assistance", "correlation_rule_configuration", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/ctp-utilization-matrix-grid/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_ctp_utilization_matrix_grid_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows users to view and potentially edit bot CMDB configurations, presented in a utilization matrix grid format. It facilitates the management and monitoring of configuration profiles within the CMDB."}, "content_for_embedding": "This API endpoint retrieves a CTP utilization matrix grid, providing a comprehensive view of bot CMDB configurations. Users can search, filter, and manage these configuration profiles, including viewing details like profile name, vendor, OS type, and series. While primarily for viewing, the description implies capabilities for editing these configurations, aligning with broader CMDB management functions such as adding, exporting, and deleting configurations.", "semantic_keywords": ["CMDB Management", "Configuration retrieval", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "real-time_asset_performance_monitoring"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/ctp-utilization-matrix-pattern/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_ctp_utilization_matrix_pattern_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "Manage and retrieve bot CMDB configurations, including viewing, editing, searching, filtering, adding, deleting, and exporting."}, "content_for_embedding": "This API endpoint allows for the retrieval, viewing, and management of bot CMDB configurations. Users can search, filter, edit, delete, add, and export these configuration profiles, including importing them via CSV. It provides comprehensive control over CMDB configuration details.", "semantic_keywords": ["CMDB", "Configuration", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "bulk_actions_on_assets", "configuration_download_jobs"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/delate-card-inventory/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_delate_card_inventory_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "To retrieve, view, search, and filter bot CMDB configurations."}, "content_for_embedding": "This API retrieves bot CMDB configurations, enabling users to view, search, and filter configuration profiles and parameters. It supports the management of automated system configurations within the CMDB.", "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/delete-cross-connections/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_delete_cross_connections_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To retrieve and manage (view/edit) configurations for bots within the CMDB system, specifically those related to cross-connections that can be deleted."}, "content_for_embedding": "This API retrieves and allows management (viewing and editing) of bot CMDB configurations, particularly those associated with cross-connections that are eligible for deletion. It provides access to configuration details within the CMDB system.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/delete-flow-domain/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_delete_flow_domain_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "CMDB Manager", "Network Administrator"], "primary_use_case": "To retrieve and view details of CMDB configurations, specifically those related to flow domains, enabling users to inspect or prepare for management actions such as editing or deletion."}, "content_for_embedding": "This API is designed to retrieve and view specific CMDB configurations, particularly those associated with 'flow domains'. While the path suggests deletion, the GET method and 'retrieve' in the operation ID confirm its purpose is to fetch configuration details. This allows users to inspect, prepare for editing, or identify configurations eligible for deletion within the CMDB system, supporting the management of automated CMDB processes.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration", "Retrieval"]}}, {"path": "/ux/common/cmdb/profile/delete-led-display/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_delete_led_display_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API is used for retrieving and viewing specific bot CMDB configurations. It allows users to inspect the details of these configurations, likely as a precursor to editing or for general oversight."}, "content_for_embedding": "This API allows for the retrieval and viewing of specific bot CMDB configurations. Despite the \"delete-led-display\" in the path, the GET method and operation ID \"retrieve\" confirm its purpose is to fetch details of CMDB configuration profiles, enabling users to inspect or prepare for editing these settings.", "semantic_keywords": ["CMDB", "Configuration", "Retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/delete-valient-channelmap/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_delete_valient_channelmap_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Configuration Managers", "Developers"], "primary_use_case": "To enable users to view and retrieve specific bot CMDB configurations, facilitating their management (editing, deletion, etc.)."}, "content_for_embedding": "This API retrieves details of bot CMDB configurations. It allows users to view specific configuration profiles, which can then be used for further management actions such as editing or deletion. The API supports searching and filtering to locate desired configurations within the CMDB.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "detailed_record_view"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/delete-vne-cross-connections/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_delete_vne_cross_connections_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "Configuration Managers", "Developers"], "primary_use_case": "To manage (specifically delete) bot CMDB configurations, including VNE cross-connections."}, "content_for_embedding": "This API endpoint is designed for managing CMDB configurations, specifically allowing for the deletion of bot CMDB configurations, such as VNE cross-connections. It enables administrators and configuration managers to maintain and clean up configuration data within the CMDB.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration", "Delete"]}}, {"path": "/ux/common/cmdb/profile/delete_audit_record/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_profile_delete_audit_record_update", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string", "pattern": "[^/]+"}, "required": true}], "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To delete a specific audit record associated with CMDB configurations."}, "content_for_embedding": "This API facilitates the deletion of a specific audit record related to CMDB configurations. It targets a single record identified by its unique ID, which is essential for maintaining and managing the integrity of configuration audit trails within the CMDB system.", "ontology_classification": {"features": ["audit_log", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Audit Trail", "CMDB"]}}, {"path": "/ux/common/cmdb/profile/delete_ge_channel_mapping/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_delete_ge_channel_mapping_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "CMDB Manager"], "primary_use_case": "This API is used to delete specific bot CMDB configurations, particularly GE channel mappings, allowing administrators to remove unwanted or outdated configurations from the CMDB."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific CMDB configuration, identified as a GE channel mapping, within the system. It enables users to remove existing bot CMDB configurations, contributing to the overall management and maintenance of CMDB data. The operation is part of managing configuration profiles and parameters within the CMDB.", "semantic_keywords": ["CMDB Management", "Configuration", "Delete"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/disable-pm/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_disable_pm_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "CMDB Manager"], "primary_use_case": "This API allows for the management of bot CMDB configurations, specifically enabling users to view, edit, and disable these configurations."}, "content_for_embedding": "This API endpoint is designed for managing bot CMDB configurations. It provides functionality to view, edit, and disable specific configuration profiles within the CMDB. This includes actions such as searching, filtering, adding, modifying, and deleting configuration settings for various assets and parameters.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_lifecycle_management", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration", "Disable"]}}, {"path": "/ux/common/cmdb/profile/disable-pm-common-info/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_disable_pm_common_info_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Integrators", "Developers"], "primary_use_case": "To retrieve and manage the status of common information settings for bot CMDB configurations, specifically related to disabling them."}, "content_for_embedding": "This API endpoint, accessed via a GET request, allows for the retrieval and management of bot CMDB configurations. Specifically, it provides functionality to view or edit settings related to disabling common information within the CMDB for automated bots. This enables administrators to control and monitor the state of these critical configurations.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB", "Disable"]}}, {"path": "/ux/common/cmdb/profile/disable-port-status/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_disable_port_status_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators", "CMDB Managers"], "primary_use_case": "Manage and retrieve the status of CMDB configurations, specifically for enabling or disabling port statuses."}, "content_for_embedding": "This API endpoint allows for the retrieval and modification of CMDB configurations, specifically focusing on the status of network ports. It enables users to view, edit, and disable port statuses for configured items within the Configuration Management Database (CMDB). This includes managing the active/inactive status of configurations and controlling CI visibility, which is crucial for IT operations and network management.", "semantic_keywords": ["CMDB", "Configuration", "Disable"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/discovery-url/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_discovery_url_create", "description": "This API endpoint (`/ux/common/cmdb/profile/discovery-url/`) facilitates the management and configuration of Bot CMDB settings. It allows users to view and edit configurations related to bot profiles, which are crucial for network device discovery within NCCM. Specifically, it relates to how NCCM automatically finds and applies the correct profiles to devices during the discovery process, ensuring devices are added for management, backup, change, compliance, and monitoring.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For detailed guidance on bot configurations and their management, users should refer to the 'Bots module' as mentioned in the admin guide (Context Rank 1). The concept of 'Profile Details' in discovery (Context Ranks 7, 10) highlights that NCCM can automatically set profiles or allow manual selection for ranges of devices. This API is essential for establishing and modifying these Discovery Profiles, ensuring that discovered network devices are correctly categorized and managed within the system."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel"], "primary_use_case": "This API manages and configures Bot CMDB settings, specifically for network device discovery within NCCM, by allowing users to establish and modify Discovery Profiles to ensure devices are correctly categorized and managed."}, "content_for_embedding": "This API endpoint facilitates the management and configuration of Bot CMDB settings. It allows users to view and edit configurations related to bot profiles, which are crucial for network device discovery within NCCM. Specifically, it relates to how NCCM automatically finds and applies the correct profiles to devices during the discovery process, ensuring devices are added for management, backup, change, compliance, and monitoring. This API is essential for establishing and modifying these Discovery Profiles, ensuring that discovered network devices are correctly categorized and managed within the system. Network admins create and manage comprehensive configuration profiles, including device details and connection protocols (SSH/Telnet), for efficient device setup and control. The API is used for adding discovery configurations and managing configuration profile details.", "ontology_classification": {"features": ["device_discovery", "network_configuration_management_(nccm)", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Network Device Discovery"]}}, {"path": "/ux/common/cmdb/profile/display-options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_display_options_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To retrieve and manage (view and edit) configuration profiles and their display options within a CMDB system."}, "content_for_embedding": "This API allows for the retrieval and management of CMDB configuration profiles, including their display options. Users can view, search, filter, edit, add, and delete these configuration profiles, which define various aspects of CMDB entities such as profile name, vendor, OS type, and series. It supports detailed configuration management for bot CMDB systems.", "semantic_keywords": ["CMDB", "Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/download-config-diff/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_download_config_diff_retrieve", "description": "This API endpoint facilitates the viewing, comparison, and management of device configuration differences within the Network Configuration Change Management (NCCM) system. Specifically, it enables users to download and inspect configuration profiles, providing detailed insights into configuration data, connection protocols, and download statuses. This functionality is crucial for tracking changes, auditing device configurations, and ensuring compliance, serving as a core component of the configuration download and management process.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the broader NCCM reports and configuration download activities. While the current API specification does not list explicit parameters, the user guide indicates that configuration downloads and comparisons often involve concepts like selecting communication protocols (TELNET or SSH), determining whether the download is from a remote or local source ('Remote' or 'Local'), and associating configurations with specific profiles. Users may also need to consider device credentials and job summaries when working with related configuration download jobs. The ultimate goal is to generate detailed summaries of configuration download activities, including success/failure statuses and device details, aligning with audit trails for user actions during download job executions. Further details regarding configuration profiles and connection protocols can be found in related NCCM documentation."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Auditors", "Compliance Officers", "Technicians"], "primary_use_case": "This API endpoint allows users to download and compare device configuration differences within the Network Configuration Change Management (NCCM) system. It provides detailed insights into configuration data, connection protocols, and download statuses, which is crucial for tracking changes, auditing device configurations, and ensuring compliance."}, "content_for_embedding": "This API endpoint, `download-config-diff`, is part of the Network Configuration Change Management (NCCM) system. Its primary function is to enable users to download and inspect device configuration profiles and view configuration differences. It provides detailed insights into configuration data, connection protocols (such as TELNET or SSH), and download statuses (success/failure). This functionality is essential for tracking configuration changes, auditing device configurations, and ensuring compliance. The API supports viewing current and historical configurations, generating detailed summaries of download activities, and reviewing audit trails of user actions during download jobs. It integrates with concepts like configuration profiles, device credentials, and remote/local download sources.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "download_success_count_display", "download_fail_count_display", "download_job_status_drill-down", "download_result_page_drill-down", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration retrieval", "Audit Trail", "Configuration Profiles"]}}, {"path": "/ux/common/cmdb/profile/download-csv-sample/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_download_csv_sample_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "To enable users to download or export CMDB configuration profiles in CSV format for purposes such as backup, reporting, or further analysis."}, "content_for_embedding": "This API allows users to download a sample CSV file containing CMDB configuration profiles. It facilitates the export of bot CMDB configurations for viewing, editing, backup, or reporting purposes.", "semantic_keywords": ["CMDB", "CSV Export", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "configuration_download_jobs", "report_export_capabilities"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/profile/driver-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_driver_list_retrieve", "description": "This API endpoint provides read and modify access to the bot CMDB (Configuration Management Database) configurations, specifically focusing on the '/ux/common/cmdb/profile/driver-list/' path. It allows for the viewing and editing of configurations related to 'Bots' and their integration with the CMDB. This is crucial for managing bot profiles and their associated settings, which might include details like labels, descriptions, and functionalities as described in the 'Bots Configuration' and 'Default bots' sections of the user guide. For detailed guidance on bot configurations, users are encouraged to visit the Bots module.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the CMDB profile management for bots. While the API specification indicates no parameters or request body for this specific GET method, the context suggests its role in managing bot configurations. Information regarding 'Profile Details' and 'NCCM' (Network Configuration and Change Management) automatically finding the right profile for each device during discovery is highly relevant, implying that this API might interact with or provide data consumed by such discovery processes. It is generally used to retrieve lists or details related to drivers within the bot CMDB profiles. Note that 'driver-list' specific details are not explicitly found in the provided contexts, but the general context of bot configurations and profiles is highly relevant."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Administrator"], "primary_use_case": "To manage and retrieve configuration details for bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint allows for the retrieval and management of bot configurations stored within the Configuration Management Database (CMDB). It provides access to view and potentially modify bot profiles, including associated settings and driver lists. This is crucial for maintaining accurate records of bot functionalities and integrations, supporting tasks like device discovery and configuration management for automated systems.", "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration"], "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)", "device_discovery"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/enable-pm/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_enable_pm_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "This API allows for the viewing and editing of bot-related configurations within the Configuration Management Database (CMDB). It enables administrators and IT operations personnel to manage how bots interact with and utilize CMDB data, including rules and general settings."}, "content_for_embedding": "This API endpoint is designed for retrieving, viewing, and modifying bot-specific configurations within the Configuration Management Database (CMDB). It facilitates the management of various CMDB-related settings for bots, such as CI rules, network configurations, and general operational parameters. Users can search, filter, add, edit, delete, export, and import these configurations to ensure proper bot functionality and data integrity within the CMDB environment.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "correlation_rule_configuration", "network_configuration_management_(nccm)", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/enable-pm-common-info/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_enable_pm_common_info_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "Managing and configuring bot CMDB settings."}, "content_for_embedding": "This API endpoint allows users to view and edit bot CMDB configurations, including searching, filtering, adding, modifying, deleting, importing, and exporting configuration profiles and parameters within the CMDB system.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration"], "ontology_classification": {"features": ["general_settings", "ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/enable-port-status/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_enable_port_status_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Engineer"], "primary_use_case": "To view and edit CMDB configurations, specifically the status of network ports."}, "content_for_embedding": "This API endpoint allows for the retrieval and modification of CMDB configurations related to bot systems, specifically enabling or disabling the status of network ports. It facilitates viewing and editing of configuration settings within the CMDB.", "semantic_keywords": ["CMDB", "Configuration", "Port Status"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/export-backup-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_export_backup_data_retrieve", "description": "This API endpoint facilitates the export of configuration data for bots within the CMDB. It allows users to download backup configurations and view details related to bot settings. The functionality is primarily for exporting data, supporting tasks like offline analysis or integration with other tools, similar to how logs can be exported in various formats. This endpoint is crucial for managing and maintaining bot configurations, offering capabilities aligned with viewing and potentially editing bot configurations.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The export functionality provided by this endpoint is analogous to the 'Download privilege' described for exporting logs, suggesting that users require appropriate permissions to access and utilize this feature. While the original description mentioned 'viewed or edited', the context more strongly emphasizes 'export' and 'download' options for configuration data, particularly for backups. For detailed guidance on bot configurations and related modules, refer to the Bots module as mentioned in the admin guide. There is no request body for this GET endpoint, and the response body is not explicitly defined in the provided specification."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "Exporting backup configuration data for bots within the CMDB for offline analysis or integration with other tools."}, "content_for_embedding": "This API endpoint allows users to export and download backup configuration data for bots within the CMDB. It is crucial for managing and maintaining bot configurations, enabling offline analysis and integration with other systems. The functionality is similar to exporting logs, requiring appropriate permissions for access and utilization.", "semantic_keywords": ["Data Export", "Bot Configuration", "CMDB"], "ontology_classification": {"features": ["configuration_download_jobs", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/flow-domain/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_flow_domain_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To view and edit bot CMDB configurations, enabling management of IT infrastructure configurations and CI relationships."}, "content_for_embedding": "This API endpoint is used to retrieve and modify bot CMDB configurations. It supports operations such as viewing, editing, adding, deleting, searching, and filtering configuration profiles and parameters within the CMDB. This is crucial for managing IT infrastructure configurations and ensuring accurate asset and CI relationships.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration"]}}, {"path": "/ux/common/cmdb/profile/free-time-slot/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_free_time_slot_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To manage (view and edit) bot CMDB configurations, specifically retrieving free time slots."}, "content_for_embedding": "This API endpoint allows for the retrieval and management of bot CMDB configurations, including viewing, searching, and filtering configuration profiles and parameters related to free time slots within the CMDB system.", "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/ge_delete_web_shocket/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_ge_delete_web_shocket_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "system engineers", "CMDB managers"], "primary_use_case": "To enable the retrieval and inspection of bot-related Configuration Management Database (CMDB) configurations."}, "content_for_embedding": "This API endpoint facilitates the retrieval and viewing of specific bot CMDB configurations. It allows users to access and inspect details of CMDB configuration profiles and parameters, which may be related to web socket management or other bot-driven processes.", "semantic_keywords": ["CMDB", "Configuration Profiles", "Bot Configuration", "Retrieval", "Search"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.7}}}, {"path": "/ux/common/cmdb/profile/get-channel-map/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_get_channel_map_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows for the viewing and editing of bot CMDB configurations, enabling administrators and IT operations to manage configuration profiles."}, "content_for_embedding": "This API endpoint is designed for the comprehensive management of bot CMDB configurations. It facilitates the viewing, editing, and general administration of configuration profiles within the CMDB system. Users can search, filter, add, and modify various configuration settings, including details like profile name, vendor, OS type, and series, as well as manage their status. This supports the lifecycle management of configuration items related to bots within the CMDB.", "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "asset_lifecycle_management", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/profile/get-config-options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_get_config_options_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows users to retrieve configuration options for bot CMDB profiles, enabling them to view and prepare for editing these settings within the CMDB system."}, "content_for_embedding": "This API endpoint is designed for retrieving configuration options related to bot CMDB profiles. It facilitates the viewing and preparation for editing of these configurations, supporting operations such as searching, filtering, and understanding the details of CMDB configuration profiles and parameters.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/get-led-display/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_get_led_display_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Integrators", "Developers"], "primary_use_case": "Retrieving and managing bot-specific configuration details within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API allows for the retrieval and management of bot-specific CMDB configurations, enabling users to view and potentially modify settings related to bot assets within the Configuration Management Database.", "semantic_keywords": ["CMDB Management", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/get-nodes/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_get_nodes_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To retrieve and manage Configuration Management Database (CMDB) nodes, specifically bot configurations."}, "content_for_embedding": "This API endpoint allows for the retrieval and viewing of Configuration Management Database (CMDB) nodes, specifically bot configurations. It enables users to search, filter, and access details of configuration profiles and parameters, which can also be edited or deleted through related functionalities. This is crucial for managing and understanding the IT infrastructure's configuration items.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration retrieval", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/get-stat-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_get_stat_list_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "CMDB managers", "IT operations personnel"], "primary_use_case": "To retrieve and manage bot CMDB configurations, including their profiles and parameters."}, "content_for_embedding": "This API endpoint retrieves a list of statistics for bot CMDB configurations and their associated profiles. It facilitates the viewing and potential editing of these configurations, encompassing functionalities such as searching, filtering, adding, modifying, and deleting configuration profiles and parameters within the CMDB.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration retrieval", "CMDB Statistics"]}}, {"path": "/ux/common/cmdb/profile/get-tags/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_get_tags_retrieve", "description": "This API endpoint, `/ux/common/cmdb/profile/get-tags/`, is designed to facilitate the viewing and editing of configuration settings for various bots within the CMDB (Configuration Management Database) system. It plays a crucial role in managing bot functionalities and their associated profiles. While primarily focused on bot configurations, the endpoint also touches upon broader profile management, allowing users to interact with detailed aspects of bot setup and configuration.\n\nSpecifically, this endpoint enables administrators to manage details such as Bot Name, Description, and other relevant fields as outlined in the Bots Configuration documentation. The primary goal is to provide a programmatic interface for maintaining the settings of bots, which may include default bots like 'Finance' and 'HR Assistant' that offer access to company policies and procedures. This endpoint can be used to set up or modify the configuration of new bots, ensuring they align with organizational requirements and terminology.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Usage Notes:\n- While the API specification indicates no parameters or request body, the description implies that the endpoint is used for viewing and editing. This suggests the specific 'tags' it operates on relate to bot and profile configurations, potentially determined by the context in which the API is called, or implied parameters not explicitly listed.\n- For detailed guidance on configuring bots, users should refer to the 'Bots module' as suggested in Context Rank 1. This includes adding necessary details for bot configuration, such as labels and descriptions.\n- The endpoint is likely utilized by administrators or system integrators to customize and manage bot behavior, including aligning default bots with specific department needs or creating new bot instances. The context also hints at the necessity to enable 'App Registration' with 'contributor' permissions for the bot within service access control (IAM).\n- The specific 'tags' retrieved or edited by this endpoint are implicitly related to the configuration fields mentioned in the context (e.g., Bot Name, Description).\n- This endpoint is part of the larger 'ux/common/cmdb/profile' path, suggesting its role in general CMDB profile management alongside bot-specific configurations.\n- No explicit response body is expected, indicating that interactions primarily involve state changes or that responses are handled implicitly within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator"], "primary_use_case": "This API endpoint is used for viewing and editing configuration settings for various bots within the CMDB system, specifically managing bot functionalities and their associated profiles. It allows administrators to set up or modify bot configurations."}, "content_for_embedding": "This API endpoint, `/ux/common/cmdb/profile/get-tags/`, is designed for retrieving and modifying configuration settings, referred to as \"tags,\" for bots and their profiles within the Configuration Management Database (CMDB). It enables administrators to manage bot-specific details like name and description, facilitating the setup and customization of new and existing bots. The API supports both viewing and editing of these bot configuration tags.", "semantic_keywords": ["Bot Configuration", "CMDB", "Tags"], "ontology_classification": {"features": ["tag_management", "ai_bot_assistance", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/profile/get-trace-responce/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_get_trace_responce_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "Developers"], "primary_use_case": "To retrieve trace responses for bot CMDB configurations, facilitating their viewing, editing, and troubleshooting within the CMDB system."}, "content_for_embedding": "This API retrieves trace responses for bot CMDB configurations. It enables users to view and edit these configurations, providing essential data for troubleshooting and managing CMDB assets related to bots.", "semantic_keywords": ["Trace Test", "CMDB", "Bot Configuration"], "ontology_classification": {"features": ["trace_test", "ci_relationship_management_(cmdb)", "ai_bot_assistance", "asset_search_and_filtering", "topology_configuration_editing"], "primary_module": "topology", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/getAssetAuditTempateData/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_getAssetAuditTempateData_retrieve", "description": "This API endpoint provides functionalities to view and manage configurations for 'bots' within the CMDB (Configuration Management Database) system. It specifically relates to 'Assets' within Infraon ITSM, allowing administrators and asset managers to oversee both IT and non-IT organizational assets. The endpoint facilitates the viewing or editing of bot-related configurations, which are part of the broader asset management capabilities provided by Infraon.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The CMDB in Infraon incorporates assets, enabling centralized management of all organizational assets. Configurations for bots, which are also considered assets, can be managed via this endpoint. For detailed guidance on bot configurations, users are advised to visit the Bots module which provides information on adding necessary details and fields like 'Bot Name' and 'Description'. This API is part of the Asset Audit Template Data retrieval, implying its use in auditing and templating configurations related to assets, including bots."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Asset Managers"], "primary_use_case": "Managing and auditing asset configurations, including bot configurations, within a CMDB system."}, "content_for_embedding": "This API endpoint provides functionalities to view and manage configurations for 'bots' within the CMDB (Configuration Management Database) system. It specifically relates to 'Assets' within Infraon ITSM, allowing administrators and asset managers to oversee both IT and non-IT organizational assets. The endpoint facilitates the viewing or editing of bot-related configurations, which are part of the broader asset management capabilities provided by Infraon. The CMDB in Infraon incorporates assets, enabling centralized management of all organizational assets. Configurations for bots, which are also considered assets, can be managed via this endpoint. For detailed guidance on bot configurations, users are advised to visit the Bots module which provides information on adding necessary details and fields like 'Bot Name' and 'Description'. This API is part of the Asset Audit Template Data retrieval, implying its use in auditing and templating configurations related to assets, including bots.", "ontology_classification": {"features": ["unified_asset_repository", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering", "detailed_asset_activity_log"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB", "Asset management", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/getResDetails/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_getResDetails_create", "description": "This API endpoint, located at `/ux/common/cmdb/profile/getResDetails/`, is designed to facilitate the viewing and editing of bot CMDB configurations. It allows users to manage details pertinent to various bots, including their labels, descriptions, and specific functionalities, as outlined in the Bots Configuration and Default Bots sections of the user guides. This includes the ability to add and modify details for newly created bots and to view the configurations of existing bots like Finance and HR Assistant.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily used for managing bot configurations within the CMDB (Configuration Management Database). For detailed guidance on configuring bots, users should refer to the Bots module. The API supports actions similar to those described for other configuration jobs, such as viewing results and managing profiles. While the current API specification does not detail specific parameters or request body for this POST method, common configurable fields for bots include 'Bot Name', 'Label', and 'Description'."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "Developers"], "primary_use_case": "To view, add, and modify bot configurations within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint allows users to view, add, and modify bot configurations stored in the CMDB (Configuration Management Database). It supports managing details such as bot labels, descriptions, and specific functionalities for both new and existing bots. This includes capabilities similar to other configuration management jobs, focusing on viewing results and managing profiles within the CMDB.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering", "multiple_asset_addition_methods"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/getResDropdownList/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_getResDropdownList_retrieve", "description": "This GET API endpoint, `/ux/common/cmdb/profile/getResDropdownList/`, is designed to retrieve a list of resources that can be used to configure or view bot CMDB (Configuration Management Database) settings. It facilitates operations related to bot configurations, allowing users to manage, view, or edit these settings. The endpoint is integral to the CMDB capabilities, providing necessary dropdown options for various bot-related fields. This functionality is closely tied to the \"Bots module\" as referenced in the admin guide, which provides detailed guidance for bot configurations. Specifically, it can provide dropdown values for fields like 'Bot Name', 'Description', 'Label', and potentially even 'Agent Details' for configuring how agents interact with devices for discovery and data collection, as suggested by the broader context of bot and device management.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint does not require any parameters or request body. The response is a list structure, though the API specification indicates 'No response body' which implies the structure is directly delivered or is implicitly understood as a standard dropdown list array. Usage of this API should be followed by consulting the 'Bots module' within the application for detailed guidance on how to interpret and utilize the retrieved resource list for configuring bots. While not specified directly as a search/filter function, the context suggests similar profile management interfaces often include search and filter capabilities, which might apply to the resources loaded by this endpoint in the UI. No specific 'gotchas' or common use cases beyond populating dropdowns for bot configuration are immediately evident from the provided contexts, as the API itself is for fetching a list rather than performing an action."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Administrator"], "primary_use_case": "To provide a dynamic list of resources for populating dropdown menus within the user interface, specifically for configuring and managing bot-related settings within the Configuration Management Database (CMDB). This enables users to efficiently manage bot configurations by selecting from predefined options."}, "content_for_embedding": "This GET API endpoint, `/ux/common/cmdb/profile/getResDropdownList/`, retrieves a list of resources essential for configuring and viewing bot CMDB settings. It serves to populate dropdown options for various bot-related fields such as 'Bot Name', 'Description', 'Label', and 'Agent Details'. This functionality is a core part of CMDB capabilities, directly supporting the \"Bots module\" for managing bot configurations and facilitating device discovery and data collection. The API returns a list structure without requiring any input parameters.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Dropdown options"], "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)", "network_configuration_management_(nccm)", "ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/profile/hardware/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_hardware_retrieve", "description": "This API endpoint provides functionalities for viewing and editing hardware profiles within the CMDB (Configuration Management Database), specifically as they relate to bot configurations. While the base description states 'bot cmdb configurations', the context suggests a broader scope to include various hardware profiles managed within the CMDB and potentially related to NCCM (Network Change & Configuration Management) for device management.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint likely interacts with the 'Bots Configuration' module for managing bot details, such as 'Bot Name', 'Label', and 'Description' as outlined in the user guides. Given its path '/ux/common/cmdb/profile/hardware/', it suggests a focus on the hardware aspect of CMDB profiles. Although the current specification indicates 'No response body' and an empty 'parameters' list, in practice, a 'GET' method would typically return configuration data, and 'editing' capabilities would imply either a PUT/POST method or parameters to specify changes. Developers should consult the 'Bots module' for detailed guidance on how to integrate and utilize bot functionalities with this endpoint. The endpoint's utility may extend to managing network devices as discovered and added to NCCM, which handles management, backup, change, compliance, and monitoring of devices, potentially influencing how hardware profiles are defined and updated."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Administrator", "Developer"], "primary_use_case": "Managing and retrieving hardware configuration profiles within a Configuration Management Database (CMDB), including bot and network device configurations."}, "content_for_embedding": "This API endpoint allows for the retrieval and management of hardware configuration profiles stored in the Configuration Management Database (CMDB). It is specifically designed to handle configurations for bots and can also be extended to manage various network devices. The endpoint supports viewing existing hardware profiles and, implicitly, editing them, although the GET method primarily focuses on retrieval. It integrates with bot configuration modules and has potential applications in Network Change & Configuration Management (NCCM) for device setup, control, and monitoring.", "semantic_keywords": ["CMDB Management", "Configuration Profiles", "Hardware Configuration"], "ontology_classification": {"features": ["unified_asset_repository", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "configuration_download_jobs"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/hardware-inv/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_hardware_inv_retrieve", "description": "This GET API endpoint allows users to view configurations related to 'bots' and their associated CMDB profiles, specifically focusing on hardware inventory. It provides access to details such as Bot Name, Description, and other fields relevant to bot configuration, which can be viewed or edited. This endpoint is crucial for managing bot functionalities within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For detailed guidance on bot configurations and their management, users are advised to visit the 'Bots module' as mentioned in the administration guide. The endpoint pertains to 'Bot Configuration' within the system's various modules. While the current specification indicates no request body or response body, the primary function is to retrieve existing bot CMDB profile hardware inventory details. The field 'Bot Name' is essential for identifying the respective created bot."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Bot Manager"], "primary_use_case": "This API allows users to view and retrieve configurations and hardware inventory details for bots and their associated CMDB profiles, crucial for managing bot functionalities within the system."}, "content_for_embedding": "This GET API endpoint is designed for retrieving configurations and hardware inventory details related to \"bots\" and their associated CMDB profiles. It provides access to essential information like Bot Name and Description, which are vital for managing bot functionalities. The primary purpose is to view existing bot CMDB profile hardware inventory, with \"Bot Name\" serving as a key identifier. This endpoint supports the retrieval of bot configuration details.", "semantic_keywords": ["Bot Configuration", "CMDB", "Hardware Configuration"], "ontology_classification": {"features": ["inventory_data_collection", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/history/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_history_retrieve", "description": "This API endpoint provides functionalities to view and manage configuration histories for CMDB (Configuration Management Database) bots. It allows users to access past configurations, which is crucial for auditing, troubleshooting, and understanding changes over time. This includes configurations related to various bot functionalities as described in the documentation, such as Finance, HR Assistant, and IT Assistance bots, which offer instant access to company policies and procedures. The endpoint facilitates the detailed examination of bot configurations within the CMDB system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API definition indicates that it allows viewing or editing, the primary emphasis from the provided contexts, particularly the mention of the 'Bots module' in the Admin Guide, suggests viewing and managing existing bot configurations. For detailed guidance on bot configuration, users should refer to the Bots module within the system. The endpoint path '/ux/common/cmdb/profile/history/' suggests its purpose is to retrieve a historical record of these 'profile' configurations. The API currently has no specific parameters or request body described within its specification, and it returns no response body, implying its use might be integrated with a UI or other system that handles the display of this history. Refer to the 'Bots Configuration' and 'Default bots with their functionalities' sections in the Infinity User Guide for context on the types of bot configurations managed."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT support personnel", "Auditors", "Developers"], "primary_use_case": "To provide a historical record and management capabilities for configuration changes made to CMDB bots, enabling auditing, troubleshooting, and tracking of system evolution."}, "content_for_embedding": "This API provides access to the historical configurations of CMDB (Configuration Management Database) bots. It allows users to view past settings, track changes over time for auditing purposes, and assist in troubleshooting by reviewing previous states of bot configurations within the CMDB system.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "detailed_asset_activity_log", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Bot Configuration", "Audit Trail"]}}, {"path": "/ux/common/cmdb/profile/history_data_export/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_history_data_export_retrieve", "description": "This endpoint allows users to retrieve the comprehensive history of a selected asset. It fetches details such as when an asset ID was created, modified, or updated, as well as any changes in its status, location, or ownership. This audit trail is crucial for full visibility into an asset's lifecycle, enabling easier tracing of changes for reporting or troubleshooting purposes. The history can be searched by asset name or ID and filtered by the user who made changes. Users can also apply a date range filter to view the asset history within a specified time frame, selecting options like Current Hour, Last 30 minutes, or Last Hour. The retrieved asset history details can be downloaded in CSV format for easier analysis of asset history for tracking and financial purposes.", "summary": "Gets history for the selected asset.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The asset history encompasses the asset's entire journey from initial purchase through use, maintenance, and eventual disposal. Entries are organized by date and time, providing a detailed log of all key actions and updates. This endpoint is particularly useful for auditing and managing IT assets effectively."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "Auditors", "Financial Personnel"], "primary_use_case": "This API allows users to retrieve a comprehensive audit trail of a selected asset's lifecycle, including creation, modification, status changes, location, and ownership. It enables effective tracking, reporting, and troubleshooting of IT assets."}, "content_for_embedding": "This API endpoint provides a comprehensive history of a selected asset, detailing its lifecycle from creation to disposal. It tracks changes in asset ID, status, location, and ownership, serving as a crucial audit trail for full visibility. Users can search by asset name or ID, filter by the user who made changes, and apply date range filters (e.g., Current Hour, Last 30 minutes, Last Hour). The retrieved asset history can be downloaded in CSV format for analysis, reporting, and troubleshooting IT assets.", "ontology_classification": {"features": ["Detailed Asset Activity Log", "Asset Lifecycle Management", "Asset Search and Filtering", "Report Export Capabilities"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["Asset History", "Audit Trail", "Data Export"]}}, {"path": "/ux/common/cmdb/profile/hw-inv-options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_hw_inv_options_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["CMDB administrators", "IT operations staff", "System administrators"], "primary_use_case": "To retrieve and manage hardware inventory options and configuration details within the CMDB."}, "content_for_embedding": "This API retrieves hardware inventory options and configuration details within the CMDB. It allows users to view, search, filter, and manage various configuration profiles related to hardware devices and servers, including details like profile name, vendor, OS type, and series. It supports operations like editing and deleting configurations.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "inventory_data_collection", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration Retrieval", "Hardware Configuration"]}}, {"path": "/ux/common/cmdb/profile/interface/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_interface_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager", "Developer"], "primary_use_case": "This API allows users to view, search, filter, and modify bot CMDB configurations. It is used for managing configuration items within the CMDB."}, "content_for_embedding": "This API endpoint facilitates the retrieval and modification of bot CMDB configurations. It enables operations such as viewing, editing, searching, filtering, adding, and deleting configuration profiles and parameters within the Configuration Management Database (CMDB). This is essential for maintaining and managing configuration items and their relationships.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Bot Configuration", "CMDB Management"]}}, {"path": "/ux/common/cmdb/profile/interface-card-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_interface_card_data_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To retrieve and view detailed configuration data for bot-related assets within the Configuration Management Database (CMDB), enabling administrators and IT operations to understand and manage these configurations."}, "content_for_embedding": "This API provides read access to interface card data for CMDB profiles, specifically for bot configurations. It allows users to view, search, filter, and retrieve detailed CMDB configuration profiles and parameters, which are essential for managing and understanding bot-related assets within the CMDB. The retrieved data is intended to be viewable and potentially editable via other interfaces.", "semantic_keywords": ["CMDB Management", "Configuration Retrieval", "Bot Configuration"], "ontology_classification": {"features": ["asset_search_and_filtering", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "configuration_download_jobs"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/interface-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_interface_list_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows users to view and manage bot-related CMDB configurations, specifically interface lists. It enables the retrieval and potential editing of configuration data for bots within the CMDB."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing bot CMDB configurations, focusing on interface lists. It provides functionality to view existing configurations and supports the broader management of configuration items within the CMDB, including search, filter, add, edit, delete, import, and export operations for configuration profiles and parameters.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration retrieval", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/interface-sidebar/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_interface_sidebar_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "This API allows users to view and edit configuration details for bot-related Configuration Items (CIs) within the CMDB. It provides functionalities for managing configuration profiles and parameters."}, "content_for_embedding": "This API endpoint is designed for managing bot CMDB configurations. It enables users to retrieve, view, and modify configuration profiles and their associated parameters. Key functionalities include searching, filtering, adding, editing, and deleting these configurations, which are crucial for maintaining accurate and up-to-date CMDB data related to automated systems.", "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["general_settings", "ai_bot_assistance", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/inv-retrieve/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_inv_retrieve_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations"], "primary_use_case": "Manages and retrieves bot CMDB configurations, allowing for viewing and editing of configuration profiles."}, "content_for_embedding": "This API allows for the retrieval and management of bot CMDB configurations. It enables users to view existing configuration profiles, search and filter them, and potentially initiate edits to these settings. It is central to managing configuration items within the CMDB for automated systems.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Management", "Configuration Retrieval", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/inventory-tree/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_inventory_tree_retrieve", "description": "This API endpoint provides functionalities to view and manage CMDB (Configuration Management Database) configurations related to bots. It specifically focuses on the inventory tree structure within the CMDB for these bot configurations, allowing administrators to access and modify how bots are integrated and managed within the system. This is an integral part of the 'Bots Configuration' module.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the Infraon application's 'Bots' module, which is accessible via 'Infraon configuration -> Bots -> Bots Assistance'. It is used to add and manage details for various bot configurations. Although the API specification indicates 'No response body', it's implied that successful operations (viewing or editing) would either confirm the action's success or return relevant status codes. The CMDB in Infraon is also referred to as 'Assets'. This endpoint is crucial for customizing default bots for specific departments and aligning them with terminology and compliance requirements."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Administrator", "System Administrator"], "primary_use_case": "To view and manage Configuration Management Database (CMDB) configurations specifically related to bots, including their integration and management within the system's inventory tree structure."}, "content_for_embedding": "This API endpoint allows administrators to view, access, and modify CMDB (Configuration Management Database) configurations for bots, focusing on the inventory tree structure. It is part of the 'Bots Configuration' module within the Infraon application, also referred to as 'Assets'. It facilitates adding, managing, and customizing bot configurations to align with departmental terminology and compliance requirements.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings", "agent_management", "workflow_automation", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "hierarchical_asset_categorization"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration retrieval"]}}, {"path": "/ux/common/cmdb/profile/inventory-tree-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_inventory_tree_data_retrieve", "description": "This API endpoint provides access to the inventory tree data within the Configuration Management Database (CMDB), specifically for 'Bot Configuration' profiles. It allows for the viewing and editing of configurations related to bots within the Infraon Infinity modules. The CMDB, referred to as 'Assets' in Infraon, integrates with the Service Catalog to manage configurable items (CIs). This endpoint is crucial for managing and configuring the various bots used across the Infraon Infinity ecosystem, which include functionalities like Finance, HR Assistance, and customizable departmental bots.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily concerned with 'Bot Configuration', which involves details such as Bot Name, Label, and Description. While the API specification indicates no request body or response body, the context suggests this endpoint is used for both viewing and editing bot configurations within the CMDB's inventory tree. Users can refer to the 'Bots Configuration' section within the Infinity user guide for guidance on configuring bots and understanding related fields. The CMDB itself is a database of assets and configurable items, making this endpoint a key part of managing Infraon's IT assets related to bot functionalities."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Administrators", "CMDB Managers", "Bot Developers"], "primary_use_case": "To manage (view and edit) bot configurations and related inventory data within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint provides access to and allows for the viewing and editing of inventory tree data within the Configuration Management Database (CMDB), specifically for 'Bot Configuration' profiles. It is crucial for managing configurable items (CIs) related to bots across Infraon Infinity modules, including functionalities like Finance, HR Assistance, and customizable departmental bots. The endpoint handles details such as Bot Name, Label, and Description, and is a key part of managing Infraon's IT assets.", "semantic_keywords": ["Bot Configuration", "CMDB", "Asset management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "inventory_data_collection", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/inventory-tree-summary/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_inventory_tree_summary_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Developers"], "primary_use_case": "This API allows users to retrieve and view a summary of bot CMDB configurations and their associated inventory in a tree structure. It supports searching and filtering of these configuration profiles for management and oversight."}, "content_for_embedding": "This API endpoint is designed for retrieving a summary of bot CMDB configurations and their inventory, presented in a tree-like structure. It enables users to view, search, and filter configuration profiles within the Configuration Management Database (CMDB) for effective management and oversight of bot-related assets and their relationships.", "semantic_keywords": ["CMDB", "Configuration retrieval", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository", "inventory_data_collection"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/profile/ipam_asset_update/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_profile_ipam_asset_update_update", "description": "This API endpoint facilitates the viewing and editing of 'bot CMDB configurations' within the Infraon Infinity system. Specifically, it enables comprehensive management of IPAM (IP Address Management) assets as part of the CMDB. This includes establishing and updating relationships between assets and their locations or departments, ensuring precise and streamlined asset management. The endpoint also supports updates to CI (Configuration Item) relations and assets when related entities like user, requester, department, or location are modified, and CI relations are created based on predefined rules.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the specific IPAM asset to be updated or viewed. This endpoint is crucial for maintaining accurate records of IT and non-IT assets within the CMDB module, which is incorporated as 'Assets' in Infraon Infinity. It allows administrators and asset managers to view and manage all organizational assets in a centralized manner. For bot configurations, the system uses 'Bot Handle', 'Subscription', and 'Resource Group' details. While the context mentions 'App Registration' for bot contributor permissions, this API focuses on the CMDB configuration aspect of the bots and their associated assets. The endpoint supports operations that make asset management more precise, including an intuitive dropdown for location and department options."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager", "IT Operations Staff"], "primary_use_case": "This API endpoint is used for viewing and editing IPAM (IP Address Management) asset configurations within the CMDB. It enables the establishment and update of relationships between assets and their locations or departments, and supports updates to Configuration Item (CI) relations based on predefined rules. This is crucial for maintaining accurate records of IT and non-IT assets and their configurations."}, "content_for_embedding": "This API endpoint, `/ux/common/cmdb/profile/ipam_asset_update/{id}/`, is a PUT method designed for comprehensive management of IPAM assets within the Infraon Infinity CMDB module. It facilitates the viewing and editing of bot CMDB configurations, allowing users to establish and update relationships between assets and their locations or departments. The endpoint also supports dynamic updates to CI relations and assets when related entities like user, requester, department, or location are modified, and new CI relations are created based on predefined rules. The `id` path parameter uniquely identifies the IPAM asset for update or viewing. This functionality is vital for maintaining accurate IT and non-IT asset records, including bot configurations using 'Bot Handle', 'Subscription', and 'Resource Group' details, and offers an intuitive dropdown for location and department options to streamline asset management.", "semantic_keywords": ["CMDB Management", "Asset management", "Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_lifecycle_management", "customizable_asset_properties_and_fields", "network_configuration_and_change_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/list/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_list_create", "description": "This API endpoint, `/ux/common/cmdb/profile/list/`, allows users to manage CMDB (Configuration Management Database) profiles, specifically focusing on configurations related to 'bots'. It supports both viewing and editing of these bot CMDB configurations. The functionality seems to align with managing bot profiles within the system, potentially for defining bot names, descriptions, and their associated functionalities as observed in the retrieved contexts. It is likely part of the overall 'Bots module' mentioned in Context Rank 1.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Detailed guidance on managing these bot configurations can be found within the 'Bots module' as per Context Rank 1. The functionality described likely pertains to setting up fields such as 'Bot Name' and 'Description' as mentioned in Context Rank 2 and 5. Although the API specification states 'No response body', it's implied that successful operations, whether viewing or editing, would lead to a change or retrieval of these configurations. The API doesn't specify parameters or a request body, suggesting the operation might either be a simple listing or takes implicit data from a session, or the parameters are handled through a generic request structure not detailed in the provided spec. For more information on default bots and their functionalities, refer to the relevant sections of the Infinity User Guide."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "This API allows users to manage Configuration Management Database (CMDB) profiles specifically for bots, enabling viewing and editing of bot configurations such as names and descriptions."}, "content_for_embedding": "This API endpoint facilitates the management of CMDB profiles related to bots. It enables users to view and edit configurations for bot profiles, including defining bot names, descriptions, and associated functionalities. The API is crucial for maintaining and updating bot configurations within the system, acting as a central point for bot-specific CMDB data.", "semantic_keywords": ["CMDB Management", "Bot Configuration", "Configuration Profiles"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "ai_bot_assistance"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/log-config-audit/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_log_config_audit_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Developers"], "primary_use_case": "To manage (view and edit) bot CMDB configurations and audit their changes."}, "content_for_embedding": "This API allows for the viewing and editing of bot CMDB configurations. It also supports logging and auditing of these configuration changes, providing a comprehensive record of modifications within the CMDB system.", "ontology_classification": {"features": ["log_management", "audit_log", "network_configuration_management_(nccm)", "general_settings", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Log Management", "Configuration Audit"]}}, {"path": "/ux/common/cmdb/profile/log_url/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_log_url_retrieve", "description": "This API endpoint, `/ux/common/cmdb/profile/log_url/`, is used to manage bot CMDB (Configuration Management Database) configurations. It allows for viewing and potentially editing these configurations. This includes managing details for various bots, such as their names, descriptions, and other relevant fields, as detailed in the 'Bots Configuration' section of the user guide. The endpoint is part of a broader module related to bot management within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on bot configurations, users should consult the 'Bots' module within the system's interface. Key fields for bot configuration typically include 'Bot Name' and 'Description'. While the API specification currently lists no parameters or request body, any future updates might introduce fields for specific bot details or configuration modifications. The logging functionalities (e.g., sourceinterface logging) mentioned in some contexts seem to be related to network device logging rather than bot configuration logging directly, so they are not directly applicable to this endpoint's current scope as a CMDB configuration API. This endpoint might be used for reviewing details for bots like 'Finance' or 'HR Assistant' which have predefined functionalities, as well as for custom bots."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Developer"], "primary_use_case": "This API endpoint is used for managing and viewing bot configurations within the Configuration Management Database (CMDB). It allows users to retrieve and potentially edit details such as bot names and descriptions, supporting comprehensive bot management."}, "content_for_embedding": "This API endpoint facilitates the management and retrieval of bot configurations stored in the Configuration Management Database (CMDB). It enables users to view and potentially modify critical details like bot names and descriptions, serving as a central point for overseeing and updating bot functionalities and their associated data within the system.", "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/loopback-test/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_loopback_test_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Configuration Managers", "Developers", "IT Operations personnel"], "primary_use_case": "To manage (view and potentially edit) configuration items specifically related to bots within a Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint, accessible via a GET request at `/ux/common/cmdb/profile/loopback-test/`, is designed for retrieving and managing bot-specific configurations stored within the Configuration Management Database (CMDB). It allows users to view and potentially modify these configurations, enabling detailed inspection and adjustment of bot operational parameters and settings. The functionality supports searching and filtering of configuration profiles and parameters, facilitating efficient management of bot CMDB entries.", "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/netflow_url/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_netflow_url_retrieve", "description": "This API endpoint provides functionalities to view or edit NetFlow URL configurations within the Infraon NCCM (Network Change & Configuration Management) system. While the original description generally mentions 'bot CMDB configurations,' the context suggests a focus on network devices and their configurations, particularly related to automated management, backup, change, compliance, and monitoring within NCCM. This endpoint likely allows for managing the specific URL configurations used for NetFlow data collection related to these discovered network devices.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The endpoint operates within the context of Infraon NCCM, which manages network devices, their configurations, and automates various tasks (e.g., vulnerability data downloads, configuration management). Access to such functionalities, including viewing or editing CMDB configurations like NetFlow URLs, is privilege-based. Users require appropriate roles and privileges assigned by an administrator to perform these actions. Discovered network devices are automatically added to NCCM for management, suggesting that this endpoint interacts with configuration details of these managed devices. There are no specific parameters or request body details provided in the API specification for this GET method, implying it might retrieve the current NetFlow URL configuration or is part of a larger process where changes are made via other methods (e.g., PUT/POST) interacting with related configuration parameters."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System administrators"], "primary_use_case": "To view and manage NetFlow URL configurations for network devices within the Infraon NCCM system, enabling efficient data collection and network management."}, "content_for_embedding": "This API endpoint facilitates the retrieval and viewing of NetFlow URL configurations. It operates within the Infraon NCCM (Network Change & Configuration Management) system, focusing on managing the specific URL settings for NetFlow data collection from discovered network devices. This supports various automated network management tasks, including backup, change, compliance, and monitoring. Access to this functionality is privilege-based, requiring appropriate administrative roles.", "semantic_keywords": ["NetFlow", "CMDB Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/nivetti-panel-view/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_nivetti_panel_view_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Automation Engineer"], "primary_use_case": "To enable the viewing and editing of bot-specific CMDB configurations, ensuring accurate and up-to-date configuration data for automated processes."}, "content_for_embedding": "This API endpoint facilitates the retrieval and modification of configurations for CMDB entries managed by bots. It supports operations such as viewing, editing, searching, and filtering these automated configuration profiles and their associated parameters, which is crucial for maintaining the integrity and efficiency of bot-driven CMDB processes.", "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Management"], "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/olt-asset-summary/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_olt_asset_summary_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "To view and manage Configuration Management Database (CMDB) configurations, specifically for OLT (Optical Line Terminal) asset summaries."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing CMDB configurations, specifically focusing on OLT (Optical Line Terminal) asset summaries. It allows users to view and potentially edit these configurations, enabling comprehensive management of IT assets within the Configuration Management Database. The associated documentation highlights capabilities such as searching, filtering, editing, deleting, and exporting configuration profiles and parameters.", "ontology_classification": {"features": ["unified_asset_repository", "asset_search_and_filtering", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Asset Management", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_options_retrieve", "description": "This GET API endpoint provides access to view and manage configuration options related to 'bots' within the CMDB system. It allows users to retrieve details required for configuring bots, which includes defining bot names and descriptions. This configuration is crucial for setting up and customizing different bot functionalities within the platform, such as Finance or HR Assistant bots. For more detailed guidance on bot functionalities and configurations, users are advised to visit the 'Bots module'.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically focuses on the profile/options for common CMDB bot configurations. While the API specification lists no parameters or request body, the contexts indicate that configuration details like 'Bot Name' and 'Description' are pertinent to bot setup. For practical implementation, refer to the 'Bots module' as suggested in the documentation for specific fields and details required when configuring bots."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "To retrieve configuration options for bots within the CMDB system, enabling users to define bot names and descriptions for customizing bot functionalities."}, "content_for_embedding": "This API endpoint allows users to retrieve configuration options for bots within the CMDB system. It provides details necessary for setting up and customizing various bot functionalities, including defining bot names and descriptions. This is crucial for configuring bots like Finance or HR Assistant bots within the platform. The endpoint focuses on common CMDB bot configurations and is part of the 'Bots module' functionality.", "ontology_classification": {"features": ["ai_bot_assistance", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/os-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_os_data_retrieve", "description": "This API endpoint facilitates the viewing and editing of configurations for bots within the CMDB (Configuration Management Database). It specifically targets OS-related data profiles for these bots. The functionality aligns with managing bot configurations, including details such as their name and description, as outlined in the `Bots Configuration` sections of the user guides. This allows for comprehensive management of bot-related configurations within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For more detailed guidance on configuring bots, users should refer to the 'Bots module' as advised in the admin guide. This endpoint is crucial for maintaining the operational parameters and metadata of configured bots, ensuring their proper functionality and alignment with system requirements. While the current API specification does not list explicit parameters or a request body, any future updates might introduce fields for 'Bot Name' and 'Description' as suggested by the context documents for bot configuration."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "System Integrator"], "primary_use_case": "To enable administrators and IT personnel to view and manage OS-related data profiles for bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint allows for the retrieval and modification of OS-related data profiles specifically for bots stored within the Configuration Management Database (CMDB). It supports the comprehensive management of bot configurations, including attributes like bot name and description, aligning with established user guides for bot configuration. While primarily for viewing, the context implies capabilities for editing these configurations. This endpoint is crucial for maintaining operational parameters and metadata of configured bots, ensuring their proper functionality and adherence to system requirements. Future updates may introduce explicit parameters for \"Bot Name\" and \"Description\".", "semantic_keywords": ["CMDB", "Bot Configuration", "Configuration Retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/panel-view/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_panel_view_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager", "Developer"], "primary_use_case": "To view and manage configuration profiles and parameters within the CMDB for various assets and bots."}, "content_for_embedding": "This API endpoint allows users to retrieve, search, filter, and manage (view and edit) bot CMDB configurations and configuration profiles. It provides detailed views of configuration parameters and supports actions like editing, deleting, downloading, and copying configurations.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "integrated_panel_view", "detailed_record_view", "record_creation_&_management"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB Configuration", "Configuration Retrieval", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/pdh-mux-perf-grid/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_pdh_mux_perf_grid_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Administrators", "Configuration Managers"], "primary_use_case": "To manage (view, edit, add, delete, search, filter) bot CMDB configurations and configuration profiles."}, "content_for_embedding": "This API allows for the comprehensive management of bot CMDB configurations and associated configuration profiles. Users can view, edit, add, delete, search, and filter these configurations, providing full control over CMDB settings.", "ontology_classification": {"features": ["general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Management", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/pdh-mux-pm-data/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_pdh_mux_pm_data_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To manage (view, create, edit, delete) configuration items within a Configuration Management Database (CMDB), specifically focusing on bot-related configurations."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of bot CMDB configurations. It allows users to view existing configurations, create new ones, and modify or delete them. This includes operations like adding configuration profiles manually or in bulk via CSV, editing configuration settings, and deleting configurations. It is central to maintaining accurate and up-to-date configuration item data within the CMDB for automated systems.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Management", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/perf-filters/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_perf_filters_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Developers"], "primary_use_case": "This API is used for managing (viewing and editing) CMDB configurations, specifically performance filters for bot-related CMDB entries. It allows users to retrieve, search, filter, and modify these configurations."}, "content_for_embedding": "This API retrieves and allows for the editing of performance filters related to bot CMDB configurations. It supports operations like searching and filtering configuration profiles within the CMDB system.", "semantic_keywords": ["CMDB Configuration", "Configuration Management", "Bot Configuration"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/perform_bulk_edit_resource/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_perform_bulk_edit_resource_create", "description": "This API endpoint, `/ux/common/cmdb/profile/perform_bulk_edit_resource/`, facilitates the viewing, editing, and bulk configuration of bot CMDB settings. It specifically targets 'Bot Configuration' fields such as 'Bot Name', 'Label', and 'Description', as referenced in the Infinity User Guide. This endpoint is crucial for managing and customizing bot functionalities within the system, adhering to guidelines for adding necessary details for bot configurations. It allows administrators to define and manage attributes like bot handles, subscriptions, and resource groups, which are mandatory for setting up bots, as highlighted in the user documentation.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on bot configuration, users should refer to the 'Bots module' as mentioned in the admin guide (Context Rank 1), or navigate to 'Infraon configuration -> Bots -> Bots Assistance' in the Infinity User Guide. Admins can utilize this endpoint in conjunction with the UI to create new bots or modify existing ones, including customizing default bots to align with specific departmental terminology and compliance requirements. While the API specification does not detail request body parameters, the context implies that a suitable JSON payload should contain the updated bot configuration details following the 'Bots Configuration | Fields' structure."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "Managing and configuring bot settings within the CMDB."}, "content_for_embedding": "This API endpoint facilitates the viewing, editing, and bulk configuration of bot CMDB settings. It specifically targets 'Bot Configuration' fields such as 'Bot Name', 'Label', and 'Description'. It is crucial for managing and customizing bot functionalities within the system, allowing administrators to define and manage attributes like bot handles, subscriptions, and resource groups. Admins can utilize this endpoint to create new bots or modify existing ones, including customizing default bots to align with specific departmental terminology and compliance requirements. The payload should contain the updated bot configuration details.", "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Bulk Configuration"]}}, {"path": "/ux/common/cmdb/profile/performance-stats-grid/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_performance_stats_grid_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "System Administrator", "Developer"], "primary_use_case": "This API allows for the viewing and editing of CMDB configurations, specifically focusing on bot CMDB configurations and their associated performance statistics grids. It enables administrators to manage and update configuration items within the CMDB."}, "content_for_embedding": "This API endpoint facilitates the management of Configuration Management Database (CMDB) entries, specifically for bot configurations. It supports operations to view existing CMDB configurations and to modify or update them, including data related to performance statistics grids. This allows for dynamic control and oversight of automated system configurations within the CMDB.", "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Performance Statistics"], "ontology_classification": {"features": ["infraon_configuration.network_configuration_management_(nccm)", "infraon_configuration.advanced_resource_configuration_(aiops)", "asset.ci_relationship_management_(cmdb)", "asset.asset_search_and_filtering", "asset.customizable_asset_properties_and_fields"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/physical_summary/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_physical_summary_retrieve", "description": "This GET API endpoint is designed to retrieve configurations for bots within the CMDB (Configuration Management Database) profile. It allows for the viewing of existing bot configurations, which can include details such as the bot's name and description. The endpoint serves as a direct access point for understanding the physical summary of these bot settings.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint provides a consolidated view of bot configurations, which are essential for managing and understanding the functionalities of various bots, including default ones like 'Finance' and 'HR Assistant'. For detailed guidance on adding or editing bot configurations, users should refer to the 'Bots module' as mentioned in the admin guide. This endpoint is specifically for retrieving the 'physical summary' of these configurations. No request body is required, and the response does not contain a body, implying that the data is conveyed via status codes or headers."}, "llm_generated": {"business_context": {"primary_use_case": "To retrieve and view existing bot configurations from the CMDB, enabling users to understand and manage bot functionalities and settings."}, "content_for_embedding": "This API retrieves the physical summary of bot configurations stored in the Configuration Management Database (CMDB). It provides a consolidated view of existing bot settings, including details like bot name and description, essential for managing and understanding various bot functionalities such as 'Finance' and 'HR Assistant' bots. This endpoint is read-only and does not require a request body, with data conveyed via status codes or headers.", "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/pm-data/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_pm_data_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Developers"], "primary_use_case": "To manage (create, view, and edit) bot CMDB configurations."}, "content_for_embedding": "This API endpoint enables the comprehensive management of bot CMDB configurations. It allows users to create new configurations, view existing ones, and modify their settings. The functionality includes support for adding, editing, deleting, searching, and filtering configuration profiles and parameters relevant to bot operations within the CMDB system.", "ontology_classification": {"features": ["general_settings", "ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/pm-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_pm_list_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "Configuration Managers", "Developers"], "primary_use_case": "To enable administrators and IT personnel to view, edit, and manage bot CMDB configurations, ensuring accurate and up-to-date configuration data within the CMDB."}, "content_for_embedding": "This API provides comprehensive capabilities for managing bot CMDB configurations. It allows users to retrieve, view, search, filter, add, edit, delete, import, and export configuration profiles and parameters associated with CMDB assets, facilitating efficient configuration management and data integrity.", "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "multiple_asset_addition_methods", "customizable_asset_properties_and_fields", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/pm-stat-label/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_pm_stat_label_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows for the viewing and editing of bot CMDB configurations, specifically related to performance monitoring statistics labels. It enables administrators or IT operations to manage how CMDB data is configured for automated processes."}, "content_for_embedding": "This API endpoint is used to retrieve and manage bot CMDB configurations, specifically focusing on performance monitoring statistics labels. It supports viewing and editing operations for these configurations, which are crucial for defining how automated systems interact with and utilize CMDB data. The API facilitates the search, filtering, addition, editing, and deletion of configuration profiles and parameters within the CMDB.", "semantic_keywords": ["CMDB Configuration", "Configuration Management", "Bot Configuration"], "ontology_classification": {"features": ["configuration", "ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/poll-status/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_poll_status_create", "description": "This API endpoint is designed to allow external systems to poll the status of bot CMDB (Configuration Management Database) configurations. It facilitates the viewing and editing of configurations associated with various bots, as described in detailed guidance provided within the Bots module. The endpoint is crucial for managing bot-related details and ensuring compliance, such as limiting uploads to specific file types (plain text, PDF, Microsoft Word) for content libraries and validating bot responses. Configurations include details like 'Bot Name', 'Label', and 'Description' for effective bot management.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the 'CMDB' functionality within the 'UX/Common' module. While the API specification currently shows no specific parameters or request body for this endpoint, its purpose aligns with the broader context of managing bot configurations, including adding details, expanding bot understanding with topics, and ensuring compliance. Developers should refer to the 'Bots module' for detailed guidance on how to use this endpoint in conjunction with other bot configuration processes. Common use cases include monitoring the deployment status of new bot configurations or verifying changes made to existing bot definitions."}, "llm_generated": {"business_context": {"user_personas": ["Developers", "IT Administrators", "Configuration Managers"], "primary_use_case": "Managing and monitoring the status and details of bot configurations within a Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint allows external systems to poll the status of bot Configuration Management Database (CMDB) configurations. It enables viewing and editing of bot-related configurations, including 'Bot Name', 'Label', and 'Description'. The endpoint is crucial for managing bot details, ensuring compliance, and monitoring deployment status or verifying changes to bot definitions within the CMDB functionality of the UX/Common module. Common use cases include monitoring the deployment status of new bot configurations or verifying changes made to existing bot definitions.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "real-time_asset_performance_monitoring"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Management", "Bot Configuration", "Status"]}}, {"path": "/ux/common/cmdb/profile/port-channel/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_port_channel_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Administrators", "System Administrators"], "primary_use_case": "To retrieve and manage configuration profiles within the Configuration Management Database (CMDB), particularly for network devices like port-channels."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing bot CMDB configurations, specifically focusing on network-related profiles like port-channels. It allows users to view existing configuration details within the Configuration Management Database (CMDB), supporting search and filtering capabilities to locate specific configuration profiles.", "ontology_classification": {"features": ["asset_search_and_filtering", "ci_relationship_management_(cmdb)", "configuration_download_jobs"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Retrieval", "Search"]}}, {"path": "/ux/common/cmdb/profile/port-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_port_data_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network engineers", "Developers"], "primary_use_case": "This API enables the viewing and editing of bot CMDB configurations, specifically focusing on port data, to manage and maintain configuration items within a CMDB."}, "content_for_embedding": "This API retrieves and allows for the viewing and editing of bot CMDB configurations, specifically focusing on port data. It supports operations like searching, filtering, editing, and deleting configuration profiles and parameters within the CMDB, enabling comprehensive management of configuration items.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Retrieval", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/port-inventory/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_port_inventory_retrieve", "description": "This GET API endpoint provides functionality to view or edit configurations for bots managed within the CMDB (Configuration Management Database). It specifically targets bot configurations related to the port inventory, facilitating the management of bot details such as their name and description. This is part of the broader bot configuration management within the system, allowing for detailed guidance and administration through the 'Bots' module, as highlighted in the administrative guides.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily used for managing details of bots, including their labels and descriptions, which are crucial for their operation. While the API specification indicates no response body for the GET request, its purpose is to enable viewing of bot CMDB configurations. Further guidance and detailed information on creating and managing bots can be found by navigating to 'Infraon configuration -> Bots -> Bots Assistance', and within the 'Bots module' as mentioned in the admin's detailed guidance."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "CMDB Manager"], "primary_use_case": "To view and manage configurations for bots within the Configuration Management Database (CMDB), specifically focusing on bot details like name and description related to port inventory."}, "content_for_embedding": "This GET API endpoint allows for viewing and potentially editing bot configurations stored in the Configuration Management Database (CMDB). It specifically handles details such as bot names and descriptions, which are crucial for port inventory management. This functionality is integrated within the broader bot configuration management system, accessible through the 'Bots' module under 'Infraon configuration'. The API supports searching and filtering of these bot configuration parameters.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/port-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_port_list_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network engineers", "System administrators"], "primary_use_case": "This API allows users to view and manage CMDB configurations, specifically focusing on 'port-list' configurations. It facilitates the retrieval of configuration details for further viewing or editing."}, "content_for_embedding": "This API endpoint retrieves a list of bot CMDB configurations, specifically related to 'port-list' profiles. It enables users to view existing configurations and serves as a prerequisite for editing these configurations. The functionality supports searching and filtering of configuration profiles.", "semantic_keywords": ["CMDB Configuration", "Configuration Management", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/port-status/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_port_status_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations", "Network Engineers"], "primary_use_case": "To retrieve and manage configuration details, specifically port status, for bot-related assets within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API retrieves and allows management of configuration details, specifically the status of ports, within the Configuration Management Database (CMDB) for bot-related assets. It enables users to view and potentially modify these configurations.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "real-time_asset_performance_monitoring"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Port Status", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/port-timeslot-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_port_timeslot_data_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "System Administrators", "Developers"], "primary_use_case": "To retrieve, view, and manage bot CMDB configurations, including port timeslot data."}, "content_for_embedding": "This API allows for the retrieval, viewing, and editing of bot CMDB configurations, specifically related to port timeslot data. It provides functionality for managing configuration profiles and parameters within the CMDB system, enabling operations such as searching, filtering, and modifying configuration details.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/protection-group/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_protection_group_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows for the retrieval and viewing of bot CMDB configuration profiles, specifically for protection-group settings. It enables users to access and understand existing CMDB configurations related to bot operations, which is essential for managing and auditing the IT infrastructure."}, "content_for_embedding": "This API endpoint facilitates the retrieval of CMDB configuration profiles, specifically for 'protection-group' settings related to bot operations. It enables users to view existing bot CMDB configurations, providing crucial insights for managing and auditing the IT infrastructure. The functionality is focused on accessing configuration details, similar to searching and filtering configuration profiles as described in the documentation, and forms part of broader CMDB management capabilities.", "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/resource-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_resource_data_retrieve", "description": "This API endpoint, `/ux/common/cmdb/profile/resource-data/`, is designed to manage bot CMDB configurations. It allows for viewing and editing of configurations associated with bots, including details such as Bot Name, Label, and Description, as seen in the 'Bots Configuration' and 'Default bots' contexts. This endpoint is crucial for maintaining and updating the settings for various bot functionalities, such as Finance and HR Assistant bots mentioned in the guide documents.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For detailed guidance on bot configurations, developers should visit the 'Bots module' as suggested in the highest-ranked context (Rank 1). The endpoint interacts with configurations that define bot functionalities and associated fields. While the current specification indicates 'No response body', successful operations would implicitly confirm the viewing or editing action. No specific parameters are listed in the API specification for this GET request, implying it might retrieve a general list or require context from the path itself to identify configurations. Further details on fields like 'Bot Handle', 'Subscription', and 'Resource Group' might be relevant for editing specific bot details, as hinted in lower-ranked contexts regarding Azure Bot setup."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator"], "primary_use_case": "To manage, view, and edit configurations for various bot functionalities within the CMDB."}, "content_for_embedding": "This API endpoint, `/ux/common/cmdb/profile/resource-data/`, is a GET request designed for managing bot CMDB configurations. It enables viewing and editing of configurations for various bot functionalities, such as Finance and HR Assistant bots, including details like Bot Name, Label, and Description. It interacts with configurations that define bot functionalities and associated fields. This endpoint is crucial for maintaining and updating bot settings and resource data within the CMDB. While the API is a GET request, its purpose extends to supporting editing actions implicitly, as it retrieves data necessary for modification. It relates to advanced resource configuration and AI bot assistance within the system.", "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/resource-stat-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_resource_stat_data_retrieve", "description": "This API endpoint provides functionalities to view and manage configuration data for various bots, specifically focusing on resource statistics data within the CMDB (Configuration Management Database) system. It allows administrators to review and edit settings related to bot functionalities, aligning with the detailed guidance found in the Bots module and bot configuration sections outlined in the user guides. This includes management of various bot fields like 'Label', 'Description', and 'Bot Name', and ensures the proper configuration of bot services.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For comprehensive guidance on bot configurations and details regarding specific bot types and their functionalities, refer to the Bots module within the application, as well as the 'Add the necessary details' and 'Bots Configuration' sections in the user guide. The API is central to managing bot settings, such as those related to financial, HR, and IT assistance bots, and ensures compliance with company policies and procedures. Note that admins can customize default bots to fit specific departmental needs."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To retrieve and manage configuration data and resource statistics for bots within the CMDB system."}, "content_for_embedding": "This API retrieves and manages configuration data and resource statistics for various bots within the Configuration Management Database (CMDB) system. It enables administrators to review, edit, and ensure proper configuration of bot services, including fields like 'Label', 'Description', and 'Bot Name'. Comprehensive guidance for bot configurations is available in the Bots module and user guides, covering financial, HR, and IT assistance bots, and allowing customization for departmental needs.", "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)", "ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Statistics", "Performance Statistics"]}}, {"path": "/ux/common/cmdb/profile/resources/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_resources_retrieve", "description": "This API endpoint provides functionalities to view and manage configuration settings for bots (CMDB configurations).\nIt allows administrators to access and modify various aspects of bot configurations, including details like Bot Name, Label, and Description, as described in the Infinity User Guide's 'Bots Configuration' section. The endpoint is crucial for managing the behavior and setup of different bot types, such as Finance and HR Assistant bots, which offer instant access to specific company policies and procedures.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For a comprehensive understanding of specific bot functionalities and their management, refer to the 'Bots module' as stated in the Admin Guide. This endpoint is central to the administration of bot services within the system, enabling granular control over how bots are configured and function. While the API specification does not list request parameters or a request body, the description implies capabilities for both viewing (GET operation typically) and editing (potentially requiring a different HTTP method like PUT or POST if editing is supported, though the current method is GET). Developers should consult the Bot Services documentation for specific permissions and roles, such as 'Access Control (IAM)' and 'Role Assignment', relevant to managing bot configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To view and manage configuration settings for various bot types within the CMDB, enabling administrators to control bot behavior and setup."}, "content_for_embedding": "This API endpoint allows administrators to view and manage configuration settings for various bot types, including Bot Name, Label, and Description, within the CMDB. It is crucial for controlling the behavior and setup of bot services and provides granular control over bot configurations. Developers can use this API to integrate with bot services, understanding permissions and roles related to access control and role assignment.", "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Management"], "ontology_classification": {"features": ["ai_bot_assistance", "platform_account_configuration", "roles_&_privileges_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/resources/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_resources_create", "description": "This API endpoint (`/ux/common/cmdb/profile/resources/`) is designed for managing bot CMDB (Configuration Management Database) configurations. It specifically allows users to view or edit the details of configured bots. This includes adding necessary details, defining fields such as bot name and description, and configuring various parameters related to bot functionalities. The management of bot configurations is a core aspect, suggesting that this endpoint plays a crucial role in enabling or modifying how bots operate within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For detailed guidance on managing bots and their configurations, users are advised to visit the 'Bots module' in the administrative interface. The endpoint's functionality directly aligns with setting up and modifying parameters for different bot types, including general 'Bot Names' and 'Descriptions', as detailed in the user guides. Although the API specification states 'No response body', successful operations likely imply a status code confirming the configuration has been updated or retrieved. Due to the lack of specific parameters or request body details in the provided JSON, it's inferred that the configuration changes are either submitted implicitly or via a mechanism not detailed in the spec. Future enhancements might include specific request body schemas for 'Bots Configuration' fields like 'Label', 'Bot Name', and 'Description'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with configuration privileges"], "primary_use_case": "This API is used for managing Configuration Management Database (CMDB) configurations specifically for bots. It enables users to view, edit, add details, and configure parameters for various bot functionalities, playing a crucial role in how bots operate within the system."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of bot configurations within the Configuration Management Database (CMDB). It allows users to view existing bot details, edit their parameters, and add new bot configurations, including defining essential fields like bot name and description. The primary function is to enable and modify how bots operate by managing their underlying configurations. This endpoint is central to the \"Bots module\" in the administrative interface, supporting the setup and modification of various bot types.", "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Management"], "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)", "ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/resources-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_resources_list_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "IT Operations", "Developers"], "primary_use_case": "To retrieve, search, and filter configuration profiles and resources within the Configuration Management Database (CMDB), enabling their subsequent management (viewing, editing, and deletion)."}, "content_for_embedding": "This API endpoint is designed to retrieve a list of bot CMDB configurations. It allows users to view, search, and filter these configuration profiles, serving as a foundational step for further management operations such as editing or deleting specific configurations. The API provides access to the CMDB's configuration resources, facilitating efficient inventory and relationship management of configuration items.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Retrieval", "Search"]}}, {"path": "/ux/common/cmdb/profile/resources-list-options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_resources_list_options_retrieve", "description": "This API endpoint, `/ux/common/cmdb/profile/resources-list-options/`, is designed to allow users to view or edit configuration details related to 'bots' within the Configuration Management Database (CMDB) environment. It specifically manages the 'resources-list-options' for these CMDB bot configurations, providing the necessary interface for managing bot-related data. The functionality is closely tied to the 'Bots module' for detailed configurations, as mentioned in the admin guide, suggesting that this endpoint supports the broader bot management capabilities.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates 'No response body', the description strongly suggests that this endpoint facilitates the viewing and editing of configurations. Developers should refer to the 'Bots module' for detailed guidance on how to interact with these configurations. The context also highlights the importance of providing 'Label' and 'Description' for bots, implying these might be key aspects of the configurations managed by this endpoint. For advanced configurations, understanding the structure of 'Bot Handle', 'Subscription', and 'Resource Group' details, possibly related to Azure Bot integration, may be relevant, though this endpoint's direct interaction with these specific fields is not explicitly detailed."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Network Administrator"], "primary_use_case": "This API allows users to view and edit configuration details related to \"bots\" within the Configuration Management Database (CMDB) environment, specifically managing the \"resources-list-options\" for these bot configurations."}, "content_for_embedding": "This API endpoint, /ux/common/cmdb/profile/resources-list-options/, is designed for viewing and editing configuration details of \"bots\" within the Configuration Management Database (CMDB). It manages \"resources-list-options\" for CMDB bot configurations, providing an interface for bot-related data. The functionality supports broader bot management capabilities, including aspects like \"Label\" and \"Description\" for bots, and potentially \"Bot Handle\", \"Subscription\", and \"Resource Group\" details related to Azure Bot integration, though direct interaction with these specific fields is not explicitly detailed.", "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Retrieval"], "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)", "ai_bot_assistance", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/resourse/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_resourse_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Developers"], "primary_use_case": "To view and manage bot CMDB configurations."}, "content_for_embedding": "This API allows for the retrieval and management of CMDB (Configuration Management Database) configurations, specifically focusing on bot-related configurations. It supports viewing, searching, and filtering configuration profiles and parameters within the CMDB, providing data that can then be edited via other means.", "ontology_classification": {"features": ["asset_search_and_filtering", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration retrieval", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/resync-poll-jobs/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_resync_poll_jobs_create", "description": "This API endpoint initiates the resynchronization of poll jobs related to CMDB configurations, specifically for 'bot' configurations. It allows for the refresh or update of how devices are configured and managed within the system, particularly concerning Network Change & Configuration Management (NCCM) functionalities. While the initial description broadly mentions viewing or editing configurations, the context strongly suggests its role in scheduled configuration downloads and management tasks, as evidenced by references to 'Configuration Download Job' and 'Baseline Scheduler' within NCCM.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint performs a POST request and has no specific request body or parameters. It yields no response body upon successful execution. For further details and guidance on managing 'bot' configurations and their related functionalities, users should refer to the 'Bots module' as indicated in the administrative guide. This operation is crucial for ensuring that the system's CMDB (Configuration Management Database) accurately reflects the latest configurations, especially those automated via bots or scheduled jobs within NCCM."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Integrator"], "primary_use_case": "This API initiates the resynchronization of CMDB poll jobs for bot configurations, ensuring the Configuration Management Database (CMDB) accurately reflects the latest device configurations, particularly within Network Change & Configuration Management (NCCM) functionalities."}, "content_for_embedding": "This API endpoint initiates the resynchronization of poll jobs for CMDB configurations, specifically for 'bot' configurations, to refresh and update how devices are managed within the system. It is crucial for Network Change & Configuration Management (NCCM) functionalities, ensuring the CMDB accurately reflects the latest configurations from automated bots and scheduled jobs like Configuration Download Jobs and Baseline Scheduler.", "semantic_keywords": ["Configuration Management", "CMDB", "Configuration Download Jobs"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "centralized_management", "ci_relationship_management_(cmdb)", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/run-command/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_run_command_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["administrator", "IT operations", "developer"], "primary_use_case": "To manage and modify bot CMDB configurations, allowing for viewing, editing, adding, importing, exporting, searching, and filtering of configuration profiles and parameters within the CMDB."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of bot CMDB configurations. It enables users to view, edit, add, import, and export configuration profiles and parameters. Functionality includes searching and filtering configurations, updating CI relations, and managing CI rule configurations within the CMDB.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "correlation_rule_configuration", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/save-cross-connect/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_save_cross_connect_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "System Integrators", "CMDB Managers"], "primary_use_case": "To manage (create, view, and edit) CMDB configurations, specifically focusing on cross-connect profiles within the CMDB system."}, "content_for_embedding": "This API endpoint facilitates the management of Configuration Management Database (CMDB) configurations, allowing users to create, view, and edit specific \"cross-connect\" profiles. It is designed to interact with bot-related CMDB settings, enabling comprehensive control over configuration items and their relationships within the CMDB. The functionality includes actions such as adding new configurations, modifying existing ones, and retrieving detailed configuration profiles, aligning with core CMDB operations for asset and configuration item management.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "multiple_asset_addition_methods", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Edit", "Add"]}}, {"path": "/ux/common/cmdb/profile/save-flow-domain/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_save_flow_domain_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "Configuration Managers"], "primary_use_case": "To manage and save Configuration Management Database (CMDB) profiles, specifically for bot configurations, allowing for their creation and modification."}, "content_for_embedding": "This API endpoint facilitates the creation and modification of Configuration Management Database (CMDB) profiles, specifically for bot configurations. It allows users to save flow domain settings, contributing to the overall management and editing of CMDB configurations. The API supports core configuration management operations such as adding and editing configuration profiles, as detailed in the related documentation concerning CMDB configuration details, search, filter, add, edit, delete, import, and export functionalities.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/save-inventory/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_save_inventory_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Configuration Managers", "System Integrators", "Developers"], "primary_use_case": "This API is used for managing and updating configuration items and inventory within the Configuration Management Database (CMDB), specifically for bot-related configurations."}, "content_for_embedding": "This API endpoint facilitates the creation, saving, and modification of bot CMDB configurations. It enables the management of inventory data and properties of configuration items within the CMDB.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "inventory_data_collection", "multiple_asset_addition_methods", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Inventory update", "Add"]}}, {"path": "/ux/common/cmdb/profile/save-latest-sfp/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_save_latest_sfp_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System integrators", "Developers"], "primary_use_case": "This API allows for the management and saving of bot CMDB configurations, enabling users to view and edit these settings within the system."}, "content_for_embedding": "This API endpoint facilitates the management of bot CMDB configurations. It allows users to view and edit existing configurations, aligning with broader CMDB functionalities such as adding, modifying, deleting, searching, and filtering configuration profiles and parameters within the system. This is crucial for maintaining accurate and up-to-date configuration item data for automated processes.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "it_operations", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Management", "Update"]}}, {"path": "/ux/common/cmdb/profile/save-resources-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_save_resources_list_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows for the viewing and management of bot-specific CMDB configurations, enabling administrators and IT operations personnel to retrieve and potentially modify settings related to how bots interact with and manage CMDB data."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing bot-specific CMDB configurations. It facilitates the viewing and editing of settings that govern how automated bots interact with and manage configuration management database (CMDB) resources. Key functionalities include searching, filtering, adding, editing, deleting, and exporting these configuration profiles, ensuring proper control over bot operations within the CMDB environment.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/saveAssetAudit/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_saveAssetAudit_create", "description": "This API endpoint, `/ux/common/cmdb/profile/saveAssetAudit/`, is a POST request that allows for the viewing and editing of configurations for 'bot CMDB' assets. It is specifically designed to manage audit-related aspects of bot configurations within the CMDB, aligning with the broader 'Assets within Infraon' concept, where IT and non-IT assets are managed. The functionality is closely tied to the configuration of bots and their associated details, enabling users to either review or modify these settings. This endpoint plays a crucial role in maintaining and auditing the configuration of robotic processes defined within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body description, the context suggests that operations on 'bot CMDB configurations' would involve defining or modifying fields such as 'Bot Name' and 'Description' for the respective created bots. Detailed guidance regarding bot configurations, including adding necessary details and general management, can be found within the 'Bots module' as per the administrative guide. This endpoint is distinct from network device configurations, focusing instead on bot-specific settings within the CMDB. Users should refer to the 'Bots module' for comprehensive information on the data structure and specific details required for configuring bots."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows users to view, edit, and audit configurations for \"bot CMDB\" assets, ensuring accurate record-keeping and compliance for robotic processes within the CMDB system."}, "content_for_embedding": "This API endpoint facilitates the viewing, editing, and auditing of configurations specifically for \"bot CMDB\" assets. It enables the management of audit-related aspects of bot configurations within the Configuration Management Database (CMDB), aligning with the broader concept of managing IT and non-IT assets. The functionality is crucial for maintaining and auditing robotic process configurations, allowing users to review or modify settings such as \"Bot Name\" and \"Description\". It is distinct from network device configurations, focusing solely on bot-specific settings and audit trails within the CMDB.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Audit"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "user_access_auditing", "ai_bot_assistance", "audit_log", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/saveResource/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_saveResource_create", "description": "This API endpoint facilitates the viewing and editing of configurations for 'bot CMDB resources'. It is specifically designed to manage various bot-related configurations within the system. This includes the ability to define and modify details such as 'Bot Name', 'Label', and 'Description' for respective created bots, as detailed in the bot configuration guides. The functionality extends to managing default bots and their functionalities, such as Finance and HR Assistant bots. This endpoint is central to the 'Bots Configuration' module, allowing users to add and update the necessary details for bot operations.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for managing the behavior and details of various bots. For detailed guidance on configuring bots, users should refer to the 'Bots module' as mentioned in the admin guide. The bot configuration fields are structured to include 'Label', 'Description/Example', and 'Bot Name', allowing for comprehensive definition of each bot. The API does not have explicit parameters or a request body defined in the provided specification, implying that the configuration details are likely passed directly within the request, possibly as part of the path or an implicit payload. There is no specific response body, suggesting a status-only response or a simple confirmation of the save operation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Administrator", "Bot Administrator"], "primary_use_case": "To manage and configure bot resources within the CMDB, including defining and modifying bot details like name, label, and description."}, "content_for_embedding": "This API endpoint allows for the viewing, editing, adding, and updating of configurations for 'bot CMDB resources'. It is specifically designed to manage various bot-related configurations, including defining and modifying 'Bot Name', 'Label', and 'Description' for created bots. It also supports managing default bots and their functionalities within the 'Bots Configuration' module. This endpoint is crucial for managing the behavior and details of various bots and their configurations within the system's CMDB.", "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration Management"], "ontology_classification": {"features": ["AI Bot Assistance", "Advanced Resource Configuration (AIOps)", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/profile/service-mapping/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_service_mapping_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network engineers", "System integrators"], "primary_use_case": "To view and manage bot CMDB configurations, specifically service mappings."}, "content_for_embedding": "This API retrieves and allows viewing of bot CMDB configurations, specifically service mappings. It supports searching and filtering of configuration profiles and parameters, and is part of a broader system for managing configuration details within a CMDB.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/service-rept-station/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_service_rept_station_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "System Integrators"], "primary_use_case": "To retrieve and manage bot CMDB configurations, enabling viewing and preparation for editing."}, "content_for_embedding": "This API endpoint facilitates the retrieval of bot CMDB configurations, allowing users to view detailed configuration profiles and prepare them for subsequent modifications. It is a core component for managing and auditing network and system configurations within a CMDB environment.", "ontology_classification": {"features": ["network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Retrieval", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/set-trace-responce/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_set_trace_responce_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To view and manage bot CMDB configurations, including their trace response settings."}, "content_for_embedding": "This API endpoint is used to retrieve and manage bot CMDB configurations. It allows for viewing and potentially editing settings related to CMDB profiles, including specific trace response configurations for bots. This is part of a broader CMDB management system that handles configuration profiles, parameters, and CI relations.", "semantic_keywords": ["CMDB Configuration", "Configuration Retrieval", "Trace Test"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/slot/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_slot_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System integrators", "Developers"], "primary_use_case": "This API allows for the retrieval and management (viewing and implied editing) of CMDB configurations specifically for bots."}, "content_for_embedding": "This API endpoint, ux_common_cmdb_profile_slot_retrieve, is a GET request used to view and manage bot CMDB configurations. It allows users to retrieve details of configuration profiles, including searching and filtering based on various fields like Profile Name, Vendor, OS Type, and Series. While the method is GET, the description implies the capability to view and edit these configurations, aligning with general configuration management actions such as adding, importing, editing, and deleting configuration profiles as seen in the related documentation.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Retrieval", "Bot Configuration"]}}, {"path": "/ux/common/cmdb/profile/slottooltip/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_slottooltip_retrieve", "description": "This API endpoint provides functionalities to view or edit the configurations of CMDB (Configuration Management Database) bots. It allows for detailed management of bot CMDB settings, including the ability to add necessary details for bot configuration, such as defining bot names, labels, and descriptions. This is crucial for managing the behavior and functionalities of various bots within the system, like those handling financial management, HR assistance, or network change and configuration management (NCCM).", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to the 'Bots module' for detailed guidance on bot configurations. Its operations are closely tied to managing bot fields, labels, and descriptions as outlined in the bot configuration process. For example, it can be used to configure 'Bot Name', 'Label', and 'Description' fields. It implicitly supports the setup of functionalities for default bots (e.g., Finance, HR Assistant) by allowing their configuration details to be managed. While the API specification currently lists no parameters, practical usage for editing configurations would likely involve specifying which bot's configuration is being modified or viewed. Developers should consult the 'Bots module' within the application for more specific usage instructions and examples, especially concerning how different bot types leverage these configurations."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer", "IT operations"], "primary_use_case": "This API endpoint enables administrators and developers to view and edit the configurations of CMDB (Configuration Management Database) bots, allowing for detailed management of bot settings such as names, labels, and descriptions to control their behavior and functionalities within the system."}, "content_for_embedding": "This API endpoint, `/ux/common/cmdb/profile/slottooltip/`, is designed for the comprehensive management of Configuration Management Database (CMDB) bot configurations. It facilitates the viewing and editing of bot settings, including essential details like bot names, labels, and descriptions. This functionality is critical for defining and controlling the behavior and operational scope of various bots within the system, such as those used for financial management, HR assistance, or network change and configuration management (NCCM). The endpoint is integral to the \"Bots module\" and supports the setup of default bot functionalities. While primarily for configuration, practical usage for editing would involve specifying the target bot. Developers should refer to the \"Bots module\" for detailed usage examples.", "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/software-app-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_software_app_list_retrieve", "description": "This API endpoint provides functionalities to both view and edit configurations related to software applications within the platform's bot CMDB (Configuration Management Database). It specifically targets \"bot cmdb configurations,\" allowing administrators and authorized users to manage how bots are set up and integrated. For detailed guidance on bot management, users can refer to the Bots module.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "To effectively use this API, ensure that the bot is configured to allow permission for app registration and that the user has the necessary 'contributor' role assignment via Access Control (IAM) within the Bot Services. Common use cases include setting up new bot functionalities, updating existing bot parameters (e.g., bot name, description), and verifying current bot configurations within the CMDB. For a broader overview of bot functionalities, consult the Infinity User Guide, which outlines default bots like 'Finance' and 'HR Assistant' and their purposes."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "authorized user"], "primary_use_case": "This API endpoint allows administrators and authorized users to view, edit, and manage configurations related to software applications within the platform's bot Configuration Management Database (CMDB). It facilitates the setup, integration, updating of parameters (like bot name and description), and verification of bot functionalities and configurations."}, "content_for_embedding": "This API endpoint provides comprehensive functionalities for managing software application configurations within the bot CMDB. Users can view and edit existing configurations, set up new bot functionalities, update bot parameters such as name and description, and verify current bot configurations. Effective use requires proper bot configuration for app registration and the user having a 'contributor' role via Access Control (IAM) within Bot Services. This API is crucial for maintaining and integrating bot setups within the CMDB.", "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/software-env-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_software_env_list_retrieve", "description": "This API endpoint, `/ux/common/cmdb/profile/software-env-list/`, is designed for managing bot CMDB (Configuration Management Database) configurations. It allows users to view or edit configurations related to various bots. The endpoint is integral for setting up and maintaining bot functionalities, such as those detailed in the `Bots module` and configurations like 'Bot Name', 'Label', and 'Description' as described in the user guides.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is specifically related to the 'Bots module'. For detailed guidance on bot configurations, users are advised to visit the Bots module. Configurations include details like 'Bot Name', 'Label', and 'Description'. The process involves adding necessary details for each bot configuration. Although the endpoint definition mentions 'No response body', successful operations would typically reflect the changes made or confirm the view operation. This API seems to be part of a larger system that supports various default bots with specific functionalities, such as 'Finance' bots for financial management and 'HR Assistant' bots for HR-related information. Future enhancements might include specific parameters to filter or identify particular bot configurations, although none are currently specified in the `parameters` field."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "To manage and retrieve bot-related Configuration Management Database (CMDB) configurations, enabling users to view and edit software environment lists for various bot functionalities."}, "content_for_embedding": "This API endpoint, `/ux/common/cmdb/profile/software-env-list/`, is designed for managing and retrieving bot CMDB configurations. It allows users to view and potentially edit configurations related to various bots, including details such as 'Bot Name', 'Label', and 'Description'. This is integral for setting up and maintaining bot functionalities within the CMDB system. The endpoint supports operations similar to managing configuration profiles, including searching, filtering, and exporting, as detailed in the documentation for configuration profiles. It is part of a larger system that supports various default bots like 'Finance' and 'HR Assistant' bots.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Management", "Bot Configuration", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/software-inv-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_software_inv_list_retrieve", "description": "This API endpoint provides functionalities to view or edit configuration details related to 'Bot' CMDB (Configuration Management Database) items. It is specifically designed to manage software inventory lists associated with these bots. The endpoint allows users to interact with detailed bot configurations, including aspects like bot names, descriptions, and other relevant fields, as referenced in the 'Bots Configuration' within the Infinity User Guide. It is part of the broader CMDB management within the system.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "For a comprehensive understanding and detailed guidance on managing bots and their configurations, users should visit the 'Bots' module as indicated in various guide documents. The configurations can include information such as 'Label', 'Description/Example', and 'Bot Name'. Default bots and their functionalities are also relevant context, although this endpoint primarily deals with configuration viewing and editing. This endpoint forms part of the 'Bot Configuration' module, one of the various Infraon Infinity modules."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "Managing configuration details and software inventory for bot-related CMDB items."}, "content_for_embedding": "This API endpoint allows for the viewing and editing of configuration details for 'Bot' CMDB (Configuration Management Database) items. It specifically manages software inventory lists associated with these bots, enabling users to interact with detailed bot configurations such as names and descriptions. This functionality is part of CMDB management and bot configuration within the system.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "software_inventory_discovery"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "Software Inventory", "CMDB"]}}, {"path": "/ux/common/cmdb/profile/software-service-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_software_service_list_retrieve", "description": "This `/ux/common/cmdb/profile/software-service-list/` API endpoint, available via a GET request, enables the retrieval and management of bot configuration data within the CMDB (Configuration Management Database). It allows users to view existing bot configurations and potentially prepare them for editing, providing access to details such as bot labels, descriptions, and other relevant fields, as seen in various bot configuration templates and default bot functionalities described in the documentation. This endpoint is central to managing the array of 'bots' mentioned in the context (Finance, HR Assistant) and their associated configurations.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically focuses on the configuration of 'bots' within the CMDB, which are integral to various functionalities, as highlighted by mentions of 'Bot Configuration' within the system modules. While the initial description suggests editing capabilities, this GET endpoint primarily facilitates viewing. For detailed guidance on specific bot functionalities or their configuration, users are advised to refer to the 'Bots module' as mentioned in the admin guide, or explore the comprehensive bot configuration sections within the Infinity User Guide. The API does not require any parameters or request body for the GET operation, and the response is noted as having no body, implying information is conveyed through status codes or header data for simple list retrieval, or further details provided through other linked endpoints for editing."}, "llm_generated": {"business_context": {"primary_use_case": "This API retrieves and allows viewing of bot configuration data within the Configuration Management Database (CMDB). It is used to manage and access details of existing bot configurations, such as labels and descriptions, for various bot functionalities."}, "content_for_embedding": "This GET API endpoint, `/ux/common/cmdb/profile/software-service-list/`, is designed for the retrieval and viewing of bot configuration data stored in the CMDB. It provides access to details like bot labels and descriptions, enabling users to manage existing bot configurations. While the description mentions potential editing, this endpoint primarily facilitates viewing. It is central to managing various bot types (e.g., Finance, HR Assistant) and their associated configurations within the system. The API does not require parameters and the response conveys information via status codes or header data for simple list retrieval.", "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB", "Configuration Retrieval"]}}, {"path": "/ux/common/cmdb/profile/stack-list/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_stack_list_retrieve", "description": "This GET API endpoint, `/ux/common/cmdb/profile/stack-list/`, is designed to manage configurations related to bots within the system's CMDB (Configuration Management Database). It allows for the viewing and editing of bot configurations, providing access to essential details such as Bot Name, Label, and Description, which are crucial for defining bot functionalities. This endpoint is integral for administrators who need to customize or manage the system's various bots, including default ones like Finance and HR Assistant, to align with specific departmental terminology and compliance requirements.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Admins can use this endpoint in conjunction with other modules in the 'Infraon configuration' section, specifically under 'Bots' -> 'Bots Assistance' to add new bots or modify existing ones. For detailed guidance on bot management, users are advised to visit the 'Bots module' within the application. The system supports detailed configuration fields for each bot, as outlined in the Infinity User Guide, ensuring comprehensive control over bot behavior and descriptions. No specific request body is expected for this GET method, and it supports the listing of configurations."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To manage and configure bot settings within the system's Configuration Management Database (CMDB), including viewing and editing bot configurations."}, "content_for_embedding": "This API endpoint allows administrators to view and edit bot configurations within the system's Configuration Management Database (CMDB). It provides access to essential details like Bot Name, Label, and Description, enabling customization and management of various bots, including default ones. This endpoint is part of the 'Infraon configuration' section, specifically under 'Bots' -> 'Bots Assistance', supporting the listing of configurations for bot management.", "ontology_classification": {"features": ["ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/trace-test-response/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_trace_test_response_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Network Engineer", "System Administrator"], "primary_use_case": "This API allows users to view and edit bot CMDB configurations, specifically those related to trace test responses. It enables the management and retrieval of diagnostic information within the CMDB system."}, "content_for_embedding": "This API endpoint is designed to view and edit bot CMDB configurations, specifically focusing on trace test responses. It allows users to retrieve and modify configuration details related to network trace tests within the CMDB system.", "semantic_keywords": ["CMDB Configuration", "Trace Test", "Bot Configuration"], "ontology_classification": {"features": ["trace_test", "topology_configuration_editing", "ci_relationship_management_(cmdb)", "network_configuration_and_change_management", "search_functionality", "filtering_options"], "primary_module": "topology", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/trigger-alarm-fetch/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_trigger_alarm_fetch_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "System Integrators", "Developers"], "primary_use_case": "This API endpoint is designed for managing and retrieving bot-related CMDB configurations, including the ability to view, edit, and potentially trigger or fetch alarms based on these configurations. It supports the management of configuration profiles and CI rules within the CMDB."}, "content_for_embedding": "This API endpoint allows for the viewing and editing of bot-related CMDB configurations. It also facilitates the fetching or triggering of alarms based on CMDB profiles. This includes managing configuration profiles, CI rules, and related asset properties within the CMDB.", "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Retrieval"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "threshold_configuration", "ai_bot_assistance", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "configuration_download_jobs"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/trigger-cross-connection-services/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_trigger_cross_connection_services_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows users to retrieve and view configurations related to bot CMDB (Configuration Management Database), including their profiles and associated parameters. It supports searching and filtering of these configurations."}, "content_for_embedding": "This API endpoint is designed for retrieving and viewing bot CMDB configurations and their associated profiles and parameters. It enables users to search, filter, and access detailed information about CMDB configurations, including their properties and relationships, which are crucial for managing configuration items within the CMDB. The operation specifically focuses on retrieving cross-connection services related to CMDB profiles.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Management", "Configuration Retrieval", "CI configurations"]}}, {"path": "/ux/common/cmdb/profile/unmap-valient-channelmap/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_unmap_valient_channelmap_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "System Integrators"], "primary_use_case": "To manage and modify bot-related configurations within the CMDB."}, "content_for_embedding": "This API allows for the retrieval and modification of bot-related CMDB configurations. It enables users to view existing configurations and make necessary edits, facilitating the management of bot behavior and integration within the CMDB system.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/update-card-inventory/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_update_card_inventory_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System configurators", "Developers"], "primary_use_case": "To manage (view, edit, add, delete, search, filter) bot CMDB configurations and their associated profiles."}, "content_for_embedding": "This API allows for the retrieval and modification of bot CMDB configurations. It supports operations such as viewing, editing, deleting, and adding configuration profiles, as well as searching and filtering these configurations. It is part of a broader CMDB management system that handles configuration profiles, CI relations, and asset updates.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/update-channel-map/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_update_channel_map_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Developers"], "primary_use_case": "To manage and update configurations for bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of bot CMDB configurations. It allows for the management of configuration profiles and parameters related to how bots interact with and utilize the Configuration Management Database.", "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Management"], "ontology_classification": {"features": ["ai_bot_assistance", "general_settings", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/update-channelmap-data/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_update_channelmap_data_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Developers"], "primary_use_case": "To manage and update configuration items (CIs) within the Configuration Management Database (CMDB), specifically for bot configurations."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of bot CMDB configurations. It enables users to update configuration profiles, modify configuration parameters, and manage CI relations within the Configuration Management Database, ensuring accurate and up-to-date configuration data.", "semantic_keywords": ["CMDB Management", "Configuration Management", "Update"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/update-ge-channel-map/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_update_ge_channel_map_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Configuration Manager", "IT Operations"], "primary_use_case": "This API allows for the viewing, editing, and creation of bot-related configuration items within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of bot configurations within the Configuration Management Database (CMDB). Users can view, edit, create, and update specific configuration profiles and parameters related to automated systems and their associated CI relationships. It supports searching and filtering capabilities for efficient configuration retrieval and modification.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering", "multiple_asset_addition_methods"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Configuration Management", "Update"]}}, {"path": "/ux/common/cmdb/profile/update-loopback-dbdata/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_update_loopback_dbdata_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To view and prepare bot CMDB configurations for updates or modifications."}, "content_for_embedding": "This API retrieves bot CMDB configurations, enabling users to view and prepare them for potential updates or modifications. It supports searching and filtering of these configuration profiles and parameters within the CMDB.", "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/update-trace-responce/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_update_trace_responce_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations", "Developers"], "primary_use_case": "To view and edit configurations for bot CMDB, specifically related to trace responses within a network topology."}, "content_for_embedding": "This API endpoint is used to retrieve and update bot CMDB configurations, focusing on settings related to trace responses. It enables users to view and modify how automated CMDB elements handle and respond to network tracing information.", "ontology_classification": {"features": ["trace_test", "topology_configuration_editing", "topology_view_display"], "primary_module": "topology", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Trace Test", "Configuration Management"]}}, {"path": "/ux/common/cmdb/profile/update_ci_from_audit/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_update_ci_from_audit_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "System Engineer", "CMDB Manager"], "primary_use_case": "This API allows for the viewing and editing of bot CMDB configurations, specifically updating Configuration Items (CIs) and their relationships based on audit findings or predefined rules."}, "content_for_embedding": "This API endpoint facilitates the update of Configuration Items (CIs) within the Configuration Management Database (CMDB). It enables the modification of bot CMDB configurations and CI relationships, often triggered by audit processes or rule-based changes related to users, requesters, departments, assets, or locations. It is used to maintain the accuracy and consistency of CI data and their interdependencies within the IT infrastructure.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_lifecycle_management", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["CMDB", "Configuration Management", "Update CI"]}}, {"path": "/ux/common/cmdb/profile/update_tenable_sync_status/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_update_tenable_sync_status_create", "description": "This API endpoint facilitates the update of Tenable sync status related to Common Configuration Management Database (CMDB) profiles. While the original description broadly refers to viewing or editing bot CMDB configurations, the endpoint's specific path indicates its role in managing Tenable sync status updates for CMDB profiles, which ties into network change and configuration management (NCCM). It plays a crucial role in maintaining synchronization for discovered network devices and their configuration data within the CMDB.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification indicates this endpoint does not require any parameters or a request body, and it returns no response body. However, given its purpose to 'update_tenable_sync_status', it is implied that the system uses internal mechanisms to determine which CMDB profile's Tenable sync status is being updated or what status it transitions to. Users interested in managing bot configurations or network configurations more broadly can refer to the 'Bots module' for detailed guidance as mentioned in the admin guide (Rank 2) or explore NCCM functionalities for managing network devices, configurations, and related tasks."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations Engineer", "CMDB Manager"], "primary_use_case": "This API updates the synchronization status of Common Configuration Management Database (CMDB) profiles, specifically for Tenable integration. Its primary use case is to maintain accurate and synchronized configuration data for discovered network devices within the CMDB, supporting network change and configuration management (NCCM) processes."}, "content_for_embedding": "This API endpoint facilitates the update of Tenable sync status related to Common Configuration Management Database (CMDB) profiles. It plays a crucial role in maintaining synchronization for discovered network devices and their configuration data within the CMDB, directly supporting network change and configuration management (NCCM). The API implicitly determines which CMDB profile's Tenable sync status is updated and its new status, without requiring explicit parameters or a request body.", "ontology_classification": {"features": ["network_configuration_and_change_management", "ci_relationship_management_(cmdb)"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Configuration Management", "Update CI"]}}, {"path": "/ux/common/cmdb/profile/upload-bulk-inventory-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_upload_bulk_inventory_csv_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Integrators", "Configuration Managers", "Asset Managers"], "primary_use_case": "This API enables the bulk upload of inventory data and configuration profiles into the CMDB using a CSV file. This streamlines the process of populating and updating asset and configuration information within the system."}, "content_for_embedding": "This API endpoint facilitates the bulk upload of inventory data and CMDB configuration profiles via a CSV file. It allows for the creation or update of bot CMDB configurations, enabling efficient management and population of asset and configuration information within the system. This includes importing configuration profiles in bulk, which is crucial for maintaining an up-to-date and accurate CMDB.", "semantic_keywords": ["CMDB", "CSV Import", "Bulk Configuration"], "ontology_classification": {"features": ["inventory_data_collection", "multiple_asset_addition_methods", "bulk_actions_on_assets", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/upload-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_upload_csv_create", "description": "This API endpoint facilitates the upload of CSV files for managing bot Configuration Management Database (CMDB) profiles. It allows users to create, edit, or view configurations related to bots, often in the context of network change and configuration management (NCCM) tools. Specifically, it supports the import of profile templates (e.g., .xls files are supported for template import, suggesting CSV/Excel-like file handling) and is integral to managing predefined templates for configuration uploads, similar to functionalities found in the Configuration Template module.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily used for uploading configuration files, likely in CSV format, to update existing configurations or deploy new changes. While the API specification indicates no response body, the process is akin to 'Import -> Proceed with Valid Records' as described in related contexts, implying a backend validation and processing of the uploaded file. The endpoint's utility is closely tied to 'Upload Jobs' which involve changing or updating configuration files/firmware on network devices from the Infraon NCCM server. It plays a role in creating new upload jobs by specifying configurations, device details, and schedule parameters. Users should refer to the 'Bots module' for detailed guidance on bot-related configurations and the user guide for insights into the Configuration Template module and job task management."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Configuration managers"], "primary_use_case": "To facilitate the bulk upload and management of bot Configuration Management Database (CMDB) profiles and network device configurations via CSV files, supporting updates and new deployments within an NCCM framework."}, "content_for_embedding": "This API allows users to upload CSV files containing configuration data to manage bot Configuration Management Database (CMDB) profiles. It supports the creation, editing, and updating of configurations for network devices, integrating with Network Change and Configuration Management (NCCM) tools to facilitate bulk configuration uploads and manage associated upload jobs.", "ontology_classification": {"features": ["network_configuration_and_change_management", "ci_relationship_management_(cmdb)", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CSV Import", "Configuration Management", "CMDB Management"]}}, {"path": "/ux/common/cmdb/profile/validate_resource_csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_validate_resource_csv_create", "description": "This API endpoint facilitates the validation of CSV files intended for configuring resources within the CMDB (Configuration Management Database). Specifically, it supports the validation process for importing bulk resource tag/untag lists from a CSV file. The process involves uploading a CSV file containing resource configuration details, after which this endpoint performs a validation to summarize valid and invalid records. This endpoint is crucial for ensuring the integrity and correctness of CMDB configurations related to bots and other resources.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of a larger workflow for managing CMDB configurations, particularly for bots. Similar to other UI processes, after uploading a CSV file for validation, users can typically download a validation report for further analysis. This is a POST request, and while the API specification indicates 'No response body', in a complete workflow, a validation report or summary could be returned, or further actions like 'Click 'Next' to proceed with Validation' might be available in the UI. For detailed guidance on the overall process, users should refer to the Bots module and relevant sections of the Infinity User Guide concerning 'Import Configuration (CSV File)' and 'Upload | Validation' steps."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "CMDB Manager"], "primary_use_case": "To validate the integrity and correctness of CSV files containing resource configuration details, specifically for bulk tagging and untagging operations within the CMDB, prior to import."}, "content_for_embedding": "This API endpoint validates CSV files used for configuring resources within the Configuration Management Database (CMDB). It specifically supports the validation of bulk resource tag and untag lists from a CSV file, summarizing valid and invalid records. This is crucial for ensuring data integrity and correctness of CMDB configurations, especially for bots. It's part of a larger workflow for managing CMDB configurations, where users typically upload a CSV for validation and can then download a validation report. This process is detailed in sections concerning 'Import Configuration (CSV File)' and 'Upload | Validation' in the user guide.", "semantic_keywords": ["CSV Import", "CMDB", "Configuration Management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "bulk_actions_on_assets", "multiple_asset_addition_methods"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/common/cmdb/profile/vcg-trigger-data/", "method": "GET", "details": {"operationId": "ux_common_cmdb_profile_vcg_trigger_data_retrieve", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "Allows users to view and manage bot CMDB configurations."}, "content_for_embedding": "This API endpoint is designed for retrieving and viewing bot-related CMDB configurations. It provides access to the current state of these configurations, enabling administrators and IT operations personnel to inspect and understand the settings for bot CMDB entries. While the method is GET for retrieval, the description indicates that these configurations can also be edited, suggesting a broader management capability for bot CMDB data.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/profile/vcg-trigger-save/", "method": "POST", "details": {"operationId": "ux_common_cmdb_profile_vcg_trigger_save_create", "description": "API endpoint that allows bot cmdb configurations to be viewed or edited.", "tags": ["Cmdb"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "System Administrator", "IT Operations Staff"], "primary_use_case": "To manage (view, edit, and save) bot-specific configurations within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint facilitates the viewing, editing, and saving of bot-specific configurations within the Configuration Management Database (CMDB). It allows for the management and updating of configuration settings and profiles related to automated systems in the CMDB.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB Configuration", "Bot Configuration", "Configuration Management"]}}, {"path": "/ux/common/cmdb/relation/", "method": "GET", "details": {"operationId": "ux_common_cmdb_relation_retrieve", "description": "This GET endpoint provides a powerful mechanism for managing relationships (CI relations) within the Configuration Management Database (CMDB). It allows users to establish and explore connections between various assets, such as linking an asset to its location or department. The API facilitates precise and streamlined asset management by enabling the retrieval of these relationships. This endpoint is an adaptation of the Django Rest Framework (DRF) ModelViewSet, indicating it likely supports standard CRUD (Create, Retrieve, Update, Delete) operations, with this specific method focusing on retrieval. It is integral to features like updating CI relations when associated entities (user, requester, department, asset, or location) are modified, and for creating CI relations based on predefined rules, enhancing the CMDB's ability to maintain an accurate and dynamic representation of an organization's IT and non-IT assets.", "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for understanding the interconnectedness of Configuration Items (CIs) within the CMDB. While this GET method retrieves relation details, the broader context of CMDB relation management suggests integration with features such as CI Rule Configuration, allowing customization of rules for various entities like departments, locations, requesters, software, and users. The 'relationship' feature, as described in the user guide, explores 'upstream' or 'downstream' connections, which could imply capabilities for navigating dependency graphs. Although the API specification states 'No response body' for this GET method, typically for API endpoints that retrieve data via a GET request, a response body containing the requested data (in this case, CMDB relation details) would be expected. Developers should consult further documentation or test the API to understand the actual response structure for relations. This endpoint is fundamental for administrators and asset managers looking to manage organizational assets effectively within Infraon's CMDB, which is referred to as 'Assets'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Asset Manager", "Developer"], "primary_use_case": "To manage and retrieve relationships between Configuration Items (CIs) within the Configuration Management Database (CMDB), enabling precise and streamlined asset management and understanding the interconnectedness of assets."}, "content_for_embedding": "This GET endpoint retrieves relationship details between Configuration Items (CIs) within the Configuration Management Database (CMDB). It allows users to establish, explore, and manage connections between various assets, such as linking assets to locations, departments, or other CIs. This is crucial for maintaining an accurate and dynamic representation of an organization's IT and non-IT assets, supporting features like updating CI relations based on rule configurations and navigating dependency graphs. The API is part of a broader CMDB relation management system, facilitating comprehensive asset management.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CMDB", "Asset management", "Retrieval"]}}, {"path": "/ux/common/cmdb/relation/", "method": "POST", "details": {"operationId": "ux_common_cmdb_relation_create", "description": "This endpoint, adapting the DRF ModelViewSet, is designed to manage Configuration Item (CI) relations within the CMDB (Configuration Management DataBase). It facilitates the establishment, updates, and general management of connections between assets, their locations, and departments. This includes linking assets to their respective locations or departments ('upstream'/'downstream' relationships), updating CI relations when associated entities like users, requesters, departments, assets, or locations are modified, and creating CI relations based on predefined rules. The API also plays a role in customizing CI visibility based on these relationships and configurations.", "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for maintaining the integrity and accuracy of the CMDB, particularly in how assets and CIs relate to various organizational elements. The 'CMDB View' (as per Context Rank 1) highlights its use in establishing precise and streamlined asset management. It is also inherently linked to the 'CI Rule Configuration' (Context Rank 2), which allows for custom rules based on departments, locations, requesters, software, and users. While the current specification indicates 'No response body', successful operations would typically result in a standard acknowledgment. This endpoint is central to defining how CIs are consumed, structured (e.g., 'made up of' relationships), and how authorship is attributed, as indicated by various CI attribute descriptions in higher-ranked contexts."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "CMDB Manager", "IT Operations Staff"], "primary_use_case": "To establish, update, and manage Configuration Item (CI) relations within the CMDB, ensuring accurate connections between assets, locations, and departments based on predefined rules."}, "content_for_embedding": "This API endpoint facilitates the creation, update, and general management of Configuration Item (CI) relations within the CMDB. It enables the establishment of connections between assets, their locations, and departments, including \"upstream\" and \"downstream\" relationships. The endpoint is crucial for maintaining CMDB integrity by updating CI relations when associated entities (users, requesters, departments, assets, locations) are modified, and for creating new CI relations based on predefined rules. It supports precise and streamlined asset management and plays a role in customizing CI visibility based on these relationships and configurations.", "semantic_keywords": ["CMDB", "CI relations", "Asset management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "workflow_automation", "asset_association_&_classification"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/relation/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_relation_retrieve_2", "description": "This endpoint provides functionality to retrieve information about a specific Configuration Item (CI) relation based on its unique identifier. It is an adaptation of the DRF ModelViewSet, allowing for detailed inspection of asset relationships within the CMDB. This includes connections between assets and their locations, departments, or other CIs, facilitating precise and streamlined asset management. The endpoint supports exploring relationships such as 'upstream' or 'downstream' connections.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is a mandatory string that represents the unique identifier of the CI relation to be retrieved. This API is crucial for understanding how various CIs (like users, requesters, departments, assets, or locations) are related and how these relationships are established or updated, often governed by CMDB rules. The CMDB, referred to as 'Assets' in Infraon, centralizes IT and non-IT asset management. This endpoint is part of a broader CMDB View that enables users to establish, explore, and manage CI relationships, such as authorship or consumption, as defined by CI rules. No request body is expected for this GET operation, and the response will not contain a body, implying the information is conveyed through status codes or headers, or an empty success response."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "CMDB Users", "Developers"], "primary_use_case": "To retrieve detailed information about a specific Configuration Item (CI) relation, enabling precise understanding and management of asset relationships within the CMDB."}, "content_for_embedding": "This API retrieves information about a specific Configuration Item (CI) relation using its unique identifier. It allows for detailed inspection of asset relationships within the Configuration Management Database (CMDB), including connections between assets and their locations, departments, or other CIs. This facilitates precise and streamlined IT and non-IT asset management. The endpoint supports exploring relationships like 'upstream' or 'downstream' connections, crucial for understanding how various CIs (users, requesters, departments, assets, locations) are related and governed by CMDB rules. It's part of a broader CMDB View for establishing, exploring, and managing CI relationships.", "semantic_keywords": ["CMDB", "CI relations", "Retrieval"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/relation/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_relation_update", "description": "This PUT endpoint updates an existing relationship within the CMDB (Configuration Management DataBase). It allows for the modification of CI (Configurable Item) relations, particularly when associated entities such as users, requesters, departments, assets, or locations are altered. It extends the functionality of a DRF ModelViewSet, enabling precise and streamlined asset management by establishing and updating connections between assets and their respective locations or departments.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the CI relationship to be updated. While the API specification indicates 'No response body', a successful update will typically result in a 200 OK status. This endpoint is crucial for maintaining the integrity and accuracy of CMDB data. Custom rules for departments, locations, requesters, software, and users can influence how CI relations are created and updated, and CI visibility can be enabled/disabled based on these relationships and configurations."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Asset Manager", "System Integrator", "CMDB Specialist"], "primary_use_case": "To update existing Configuration Item (CI) relationships within the Configuration Management DataBase (CMDB), particularly when associated entities like users, requesters, departments, assets, or locations are modified. This ensures the integrity and accuracy of CMDB data and streamlines asset management."}, "content_for_embedding": "This PUT endpoint, `ux_common_cmdb_relation_update`, is designed to modify existing relationships between Configuration Items (CIs) within the CMDB. It is crucial for maintaining accurate CMDB data when attributes of associated entities such as users, requesters, departments, assets, or locations change. The endpoint requires a unique `id` for the CI relationship to be updated. A successful update typically returns a 200 OK status. This functionality is integral to precise and streamlined asset management, enabling the establishment and updating of connections between assets and their locations or departments. Custom rules can influence how these CI relations are created and updated, and CI visibility can be managed based on these relationships and configurations.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_lifecycle_management", "change_workflow", "record_relationship_linking"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CMDB", "CI relations", "Update CI"]}}, {"path": "/ux/common/cmdb/relation/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_relation_destroy", "description": "This endpoint allows for the deletion of a specific Configuration Item (CI) relation within the CMDB (Configuration Management DataBase) system. The CMDB, referred to as 'Assets' in Infraon, is a central repository for viewing and managing all IT and non-IT organizational assets. Deleting a CI relation effectively removes the established connection between assets, such as those linking assets to their locations or departments, or those defined by CI Rule Configurations. This operation is critical for maintaining accurate and streamlined asset management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the CI relationship to be deleted. CMDB relations can be established 'upstream' or 'downstream' to define connections between assets and different entities like locations or departments. Additionally, CI relations can be created based on pre-defined rules, which might involve departments, locations, requesters, software, and users. Deleting a CI relation impacts how assets are viewed and managed within the system, potentially affecting CI visibility based on remaining relationships. This action is irreversible and directly affects the configuration of asset relationships."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Asset managers", "CMDB specialists"], "primary_use_case": "This API allows for the deletion of specific Configuration Item (CI) relations within the CMDB system, which is crucial for maintaining accurate and streamlined asset management by removing established connections between assets."}, "content_for_embedding": "This endpoint allows for the deletion of a specific Configuration Item (CI) relation within the CMDB (Configuration Management DataBase) system. The CMDB, referred to as 'Assets' in Infraon, is a central repository for viewing and managing all IT and non-IT organizational assets. Deleting a CI relation effectively removes the established connection between assets, such as those linking assets to their locations or departments, or those defined by CI Rule Configurations. This operation is critical for maintaining accurate and streamlined asset management. The `id` path parameter is mandatory and represents the unique identifier of the CI relationship to be deleted. CMDB relations can be established 'upstream' or 'downstream' to define connections between assets and different entities like locations or departments. Additionally, CI relations can be created based on pre-defined rules, which might involve departments, locations, requesters, software, and users. Deleting a CI relation impacts how assets are viewed and managed within the system, potentially affecting CI visibility based on remaining relationships. This action is irreversible and directly affects the configuration of asset relationships.", "semantic_keywords": ["Delete", "CMDB", "CI relations"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/relation/ci-rel-map/", "method": "POST", "details": {"operationId": "ux_common_cmdb_relation_ci_rel_map_create", "description": "This endpoint, built as an adaptation of the DRF ModelViewSet, facilitates the management and configuration of Configuration Item (CI) relationships within the CMDB. It enables the creation and update of CI relations, particularly when attributes like user, requester, department, asset, or location are modified. The endpoint is integral to customizing CI visibility and behavior based on predefined rules for departments, locations, requesters, software, and users, streamlining asset management by establishing precise connections between assets and their associated entities.", "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for maintaining the accuracy and coherence of the CMDB by automating CI relation updates. It supports the dynamic configuration of CI rules, allowing for a tailored experience in how CIs are related and displayed. Developers should be aware that CI relations can be 'upstream' or 'downstream' and are defined by rules governing how CIs consume, are consumed by, exchange data with, or are otherwise related to other CIs (e.g., 'Author of', 'Backed up by', 'Consumed by', 'Exchanges data with', 'Template for', 'Cools', 'Defines Resources for'). While the current specification indicates 'No response body' and no parameters, successful operations likely imply adherence to CMDB rule configurations to manage CI relationships."}, "llm_generated": {"business_context": {"user_personas": ["CMDB Administrators", "IT Asset Managers", "Developers"], "primary_use_case": "To manage and configure Configuration Item (CI) relationships within the CMDB, enabling the creation and update of CI relations based on attribute modifications and predefined rules to maintain CMDB accuracy and streamline asset management."}, "content_for_embedding": "This API endpoint manages and configures Configuration Item (CI) relationships within the CMDB. It enables the creation and update of CI relations, particularly when attributes like user, requester, department, asset, or location are modified. The endpoint is crucial for maintaining CMDB accuracy by automating CI relation updates and dynamically configuring CI rules. It supports various CI relationship types (e.g., 'Author of', 'Consumed by', 'Located In') and streamlines asset management by establishing precise connections between assets and their associated entities.", "semantic_keywords": ["CI relations", "CMDB", "Asset management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_lifecycle_management", "workflow_automation"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/relation/ci_opt/", "method": "GET", "details": {"operationId": "ux_common_cmdb_relation_ci_opt_retrieve", "description": "This endpoint provides access to Configuration Item (CI) relation options within the CMDB, adapted from the DRF ModelViewSet. It enables exploration and management of how CIs are related, which is crucial for defining and understanding infrastructure dependencies. This includes parent-child relationships, authorship (e.g., 'Author of', 'Selected CI is written by this CI'), and consumption (e.g., 'Consumed by', 'Selected CI is consumed by this CI'). It supports the dynamic configuration of CI rules for departments, locations, requesters, software, and users, ensuring that relationships are automatically created or updated based on defined rules and maintaining tailored CI visibility. The endpoint helps to establish precise connections between assets and their locations or departments, streamlining asset management.", "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This GET endpoint currently has no parameters and does not return a response body, suggesting its primary purpose might be for internal system calls or a highly simplified status check within the CMDB's CI relation framework. The broader context indicates that CI relations are foundational for asset management, allowing for customized rules and visibility. While this specific endpoint (GET /ux/common/cmdb/relation/ci_opt/) provides no direct output, the system relies on such configurations to automatically add required rules, update CI relations when users, requesters, departments, assets, or locations are modified, and manage CI visibility based on these relationships and configurations. The full range of possible CI relation attributes includes 'Author of', 'Backed up by', 'Consumes', 'Consumed by', 'Contains', 'Cools', 'Defines Resources for', and 'Exchanges data with', among others."}, "llm_generated": {"business_context": {"primary_use_case": "To provide and manage the available options and types of Configuration Item (CI) relationships within the CMDB, which is essential for defining infrastructure dependencies, streamlining asset management, and enabling dynamic configuration of CI rules."}, "content_for_embedding": "This API endpoint provides access to Configuration Item (CI) relation options within the CMDB. It is crucial for defining and understanding infrastructure dependencies, including parent-child, authorship, and consumption relationships. The endpoint supports the dynamic configuration of CI rules for various entities such as departments, locations, requesters, software, and users, ensuring that relationships are automatically created or updated based on defined rules. This functionality helps maintain tailored CI visibility and establishes precise connections between assets and their locations or departments, thereby streamlining asset management. Although this specific GET endpoint does not have parameters and does not return a response body, it is integral to the system's ability to automatically add required rules, update CI relations, and manage CI visibility. It deals with the various types of CI relation attributes like 'Author of', 'Backed up by', 'Consumes', 'Contains', 'Cools', 'Defines Resources for', 'Exchanges data with', 'IP Connection', 'Located In', 'From template', 'Has Registered', 'Cooled By', 'Gets Resources from', 'Use End Point To', 'Used by', 'Contains Room', 'Zone contains', 'Virtualized by', 'Master of', and 'Owns'.", "semantic_keywords": ["CI relations", "CMDB", "Asset management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/relation/cisearch/", "method": "GET", "details": {"operationId": "ux_common_cmdb_relation_cisearch_retrieve", "description": "This GET endpoint leverages a DRF (Django REST Framework) ModelViewSet adaptation to facilitate the search and retrieval of Configuration Item (CI) relationships within the CMDB (Configuration Management Database). It allows users to gain precise and streamlined insights into asset management by exploring connections between assets and their respective locations, departments, or other CIs. This includes understanding 'upstream' or 'downstream' relationships, as well as authorship, consumption, or backup relationships as defined within the CMDB.", "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for functionalities such as updating CI relations when asset, user, requester, department, or location details are modified. It aligns with the CMDB's ability to easily establish and navigate asset connections. While the current specification indicates 'No response body' and an empty 'parameters' array, a typical `cisearch` functionality would likely involve query parameters (e.g., ci_id, relation_type, search_term) to filter search results and return a structured list of related CIs. The adaptation of a DRF ModelViewSet suggests that filtering, ordering, and pagination capabilities might be implicitly available. Common use cases include viewing related assets, understanding system dependencies, and auditing CI relationships based on configured rules."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Asset managers", "System architects", "Auditors"], "primary_use_case": "To enable users to search and retrieve Configuration Item (CI) relationships within the CMDB, facilitating insights into asset management, understanding system dependencies, and auditing CI relationships."}, "content_for_embedding": "This GET API endpoint is designed for searching and retrieving Configuration Item (CI) relationships within a Configuration Management Database (CMDB). It enables users to explore connections between various assets, including their locations, departments, and other CIs, such as 'upstream' or 'downstream' dependencies, authorship, consumption, or backup relationships. This functionality is critical for updating CI relations when asset, user, requester, department, or location details are modified. It supports precise asset management, understanding system dependencies, and auditing CI relationships based on defined rules. While the current specification doesn't detail parameters, typical usage would involve query parameters for filtering search results, and it implicitly supports filtering, ordering, and pagination.", "semantic_keywords": ["CMDB", "CI relations", "Search"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/relation/options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_relation_options_retrieve", "description": "This endpoint provides options for managing relationships within the Configuration Management Database (CMDB). It allows users to retrieve available relationship types, facilitating the establishment of connections between assets and entities like locations, departments, or other Configuration Items (CIs). The endpoint supports the creation of CI relations based on predefined rules, and the available options are crucial for defining 'upstream' or 'downstream' relationships, thereby enhancing asset management precision. It also implicitly supports customization of rules for entities such as departments, locations, requesters, software, and users, as well as managing CI visibility based on these relationships and configurations.", "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is an adaptation of the DRF ModelViewSet, suggesting it follows standard Django REST Framework patterns for retrieving model-based options. While the API specification states 'No response body' and 'parameters: []', the context indicates that this endpoint would likely return a list of available relationship options (e.g., 'Author of', 'Backed up by', 'Consumed by', 'Cools', 'Defines Resources for') to be used when establishing or updating CI relations. Its primary use case is within the CMDB section for setting up or modifying asset relationships, offering an intuitive dropdown menu of choices. This endpoint is central to defining how CIs relate to each other, improving traceability and configuration management. The 'CMDB View' and 'CI Rule Configuration' sections of the user guide highlight how these options are utilized by end-users."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "System Integrators"], "primary_use_case": "This API retrieves available relationship types for the Configuration Management Database (CMDB), enabling users to establish and manage connections between assets and Configuration Items (CIs). It facilitates the definition of \"upstream\" or \"downstream\" relationships, enhancing asset management precision, traceability, and configuration management within the CMDB."}, "content_for_embedding": "This GET endpoint retrieves available relationship options for the Configuration Management Database (CMDB). It facilitates the establishment and modification of connections between assets and Configuration Items (CIs), supporting the definition of \"upstream\" or \"downstream\" relationships. These options are crucial for enhancing asset management precision, traceability, and configuration management within the CMDB. It also supports customization of rules for various entities and managing CI visibility. The endpoint provides a list of relationship types (e.g., 'Author of', 'Backed up by', 'Cools') used in dropdown menus for setting up or modifying CI relations.", "semantic_keywords": ["CMDB", "CI relations", "Dropdown options"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/relation/slot/", "method": "GET", "details": {"operationId": "ux_common_cmdb_relation_slot_retrieve", "description": "This GET endpoint leverages the DRF (Django REST Framework) ModelViewSet adaptation to retrieve information about CMDB relationships. Specifically, it is designed to manage and display connections between Configuration Items (CIs), such as assets, their locations, or departments. This includes establishing and viewing 'upstream' and 'downstream' relationships, making asset management more precise and streamlined. The endpoint plays a crucial role in enabling the CMDB view to explore an intuitive dropdown menu with location and department options, and helps in updating CI relations when associated entities like user, requester, department, asset, or location are modified. It also facilitates understanding of various relationship types, such as 'Consumes' or 'Attached to'.", "tags": ["CMDBRelation"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the CMDB functionality which allows users to easily establish and manage relationships between assets. It is fundamental for systems that rely on understanding how different CIs interact, for instance, which CIs are 'consumed by' or 'attached to' others. While the current specification indicates 'No response body', it's implied that successful calls to this endpoint would retrieve or affirm the configuration of these relationship 'slots' which are central to how CI relations are established and managed based on rules. The API is indirectly related to the 'CI Rule Configuration in CMDB' that customizes rules for departments, locations, requesters, software, and users, and enables/disables CI visibility based on relationships."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Asset Manager", "System Integrator", "Developer"], "primary_use_case": "This API endpoint is designed to retrieve and manage Configuration Item (CI) relationships within the CMDB, enabling users to establish, view, and update connections between assets, locations, and departments, including \"upstream\" and \"downstream\" relationships."}, "content_for_embedding": "This GET endpoint retrieves information about CMDB relationships, specifically managing and displaying connections between Configuration Items (CIs) such as assets, their locations, or departments. It facilitates establishing and viewing \"upstream\" and \"downstream\" relationships, making asset management more precise and streamlined. The endpoint helps in updating CI relations when associated entities like user, requester, department, asset, or location are modified. It also enables understanding of various relationship types like \"Consumes\" or \"Attached to\". This functionality is central to how CI relations are established and managed based on rules, and is indirectly related to CI Rule Configuration in CMDB for customizing rules and managing CI visibility.", "semantic_keywords": ["CMDB", "CI relations", "Asset management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "record_relationship_linking"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/software/", "method": "GET", "details": {"operationId": "ux_common_cmdb_software_retrieve", "description": "This endpoint provides a paginated list of all software assets within the current organization's Configuration Management DataBase (CMDB), which Infraon refers to as 'Assets'. This functionality allows administrators and asset managers to view and manage all software installed on IT assets. The response includes detailed information about each software, such as its name, version, and license details (e.g., purchased vs. subscription-based, expiration date). It supports filtering and sorting capabilities to enhance searchability, enabling users to sort by various keys and specify the sorting order.", "summary": "Gets a list of softwares", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The CMDB is a critical component of IT Service Management (ITSM), consolidating services and improving productivity. For effective asset management, Infraon Assets allows for a centralized view of both IT and non-IT assets. The endpoint supports pagination through `items_per_page` and `page` query parameters, ensuring efficient retrieval of large datasets. Optional `sort` and `reverse` parameters allow for custom sorting of the results based on specific software attributes. Although the exact searchable fields like 'name', 'type', 'vendor', and 'version' are mentioned in the context for general asset searching, the API currently only exposes a generic `sort` parameter. Users should be aware that detailed software information (like 'Alias', 'Build Number', 'Device Type') might be available in the full software detail view rather than directly sortable through this list API."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "asset manager"], "primary_use_case": "Retrieving and managing software asset inventory from the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API retrieves a paginated list of software assets from the Configuration Management Database (CMDB). It allows administrators and asset managers to view detailed information about installed software, including name, version, and license details. The endpoint supports pagination using `items_per_page` and `page` parameters, and offers sorting capabilities via `sort` and `reverse` parameters for efficient data retrieval and management of software inventory.", "semantic_keywords": ["Software Inventory", "CMDB", "Asset Management"], "ontology_classification": {"features": ["unified_asset_repository", "inventory_data_collection", "asset_search_and_filtering", "software_license_management", "ci_relationship_management_(cmdb)", "software_inventory_discovery"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/software/", "method": "POST", "details": {"operationId": "ux_common_cmdb_software_create", "description": "This endpoint facilitates the creation and management of software assets within the Configuration Management Database (CMDB). Adapted from the DRF ModelViewSet, it allows users to establish connections between assets and their respective locations or departments, making asset management more precise and streamlined, as highlighted in the CMDB View section of the user guide (Context Rank 1). While the exact request body details are not specified, based on related contexts for managing assets and configurations, it is highly likely that this endpoint allows for inputting details such as vendor and model information (Context Rank 2). This functionality is crucial for maintaining accurate records of software configurations and their relationships within the IT infrastructure.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This API endpoint is designed for the POST method, implying its primary use is for creating new software entries or updating existing ones within the CMDB. The lack of a specified request body description in the API spec indicates that the specifics of the data to be sent are expected to be derived from the DRF ModelViewSet conventions or implied from the broader CMDB asset management documentation. Common use cases would involve initial software asset registration, bulk import of software inventory, or updates to software relationships. Given the context about 'CMDB View' and 'Update CI relation and asset' (Context Rank 1), it is critical for establishing and maintaining CI relations when user, requester, department, asset, or location information is modified. Although 'No response body' is specified, a successful operation typically implies a 2xx HTTP status code."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Asset Manager", "CMDB Specialist"], "primary_use_case": "Creation and management of software assets and their relationships within a Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint, POST /ux/common/cmdb/software/, is designed for the creation, update, and comprehensive management of software assets within a Configuration Management Database (CMDB). It enables users to register new software entries, perform bulk imports of software inventory, and update existing software relationships. A key functionality is establishing and maintaining Configuration Item (CI) relations, linking software assets to their respective locations, departments, or other related assets, thereby ensuring precise and streamlined asset management. It supports inputting details like vendor and model information, crucial for accurate record-keeping of software configurations and their IT infrastructure relationships.", "semantic_keywords": ["CMDB", "Software Inventory", "Asset Management"], "ontology_classification": {"features": ["unified_asset_repository", "hierarchical_asset_categorization", "multiple_asset_addition_methods", "software_license_management", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "bulk_actions_on_assets", "software_inventory_discovery"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/software/{id}/", "method": "GET", "details": {"operationId": "ux_common_cmdb_software_retrieve_2", "description": "Retrieves comprehensive details about a specific software Configuration Item (CI) within the CMDB, identified by its unique ID. This endpoint serves as an adaptation of the DRF (Django Rest Framework) ModelViewSet for fetching single records. It allows users to access granular information about software assets, mirroring the CMDB's ability to establish connections between assets and their locations or departments, and provides details such as device type, model, and series, which are crucial for asset management and configuration analysis.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a mandatory path parameter, representing the unique identifier for the software CI. This endpoint is particularly useful for scenarios requiring the inspection of individual software asset details, such as when updating CI relations based on modifications to users, requesters, departments, or locations. While the API specification mentions 'No response body', typically a GET request for a specific ID would return the details of that object. This suggests the response might be an object containing the detailed software CI information, which could include fields similar to those discussed in the CMDB view like Device Type, Model, and Series details. This aligns with the overall purpose of managing and correlating asset information within a CMDB."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Asset managers", "Developers"], "primary_use_case": "To retrieve comprehensive details about a specific software Configuration Item (CI) within the CMDB for asset management, configuration analysis, and updating CI relations."}, "content_for_embedding": "This API retrieves comprehensive details about a specific software Configuration Item (CI) from the CMDB using its unique ID. It provides granular information about software assets, including device type, model, and series, which is crucial for effective asset management and configuration analysis. The endpoint is also useful for inspecting individual software asset details when updating CI relations based on modifications to users, requesters, departments, or locations.", "ontology_classification": {"features": ["unified_asset_repository", "inventory_data_collection", "asset_search_and_filtering", "ci_relationship_management_(cmdb)", "software_license_management"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["Retrieval", "CMDB", "Software Inventory"]}}, {"path": "/ux/common/cmdb/software/{id}/", "method": "PUT", "details": {"operationId": "ux_common_cmdb_software_update", "description": "This PUT endpoint is part of the CMDB (Configuration Management Database) view and is designed to allow adaptation of specific software configuration items (CIs) identified by their unique ID. Building upon the DRF ModelViewSet, it facilitates updates to software details. This is particularly relevant for maintaining precise and streamlined asset management by updating CI relationships, such as when associated users, requesters, departments, assets, or locations are modified. The process for updating software CIs is analogous to how other asset details, like model or series information, are input or changed within the system, ensuring data consistency and adherence to established rules.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` in the path refers to the unique identifier of the software CI being updated. While the API specification mentions 'No response body', successful operations generally imply a 204 No Content status or similar. Based on the context, this endpoint plays a crucial role in ensuring that changes to related entities (e.g., location, department) are propagated to the software's CI relationship. Users should refer to the asset management documentation, particularly sections on 'relationship' and 'upstream'/'downstream' connections, to understand the full impact of changes made via this endpoint. Inputting details like 'Model' and 'Series' as described in context rank 2 is likely part of the request body for this update operation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager", "System Administrator"], "primary_use_case": "To update specific software configuration items (CIs) and their relationships within the Configuration Management Database (CMDB), ensuring data consistency when associated entities like users, departments, or locations are modified."}, "content_for_embedding": "This API endpoint allows for the modification of existing software Configuration Items (CIs) within a Configuration Management Database (CMDB). It specifically enables updates to software details and their associated relationships, such as linking to users, requesters, departments, assets, or locations. This is crucial for maintaining accurate asset records and propagating changes across related entities, similar to how other asset details like model or series information are updated. The endpoint is identified by the unique ID of the software CI.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "change_workflow", "asset_association_&_classification"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Update CI", "CI relations", "CMDB"]}}, {"path": "/ux/common/cmdb/software/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_cmdb_software_destroy", "description": "This endpoint allows for the deletion of a specific software entry within the Configuration Management Database (CMDB), identified by its unique ID. It functions as an adaptation of a DRF (Django Rest Framework) ModelViewSet delete operation, providing a standardized way to remove software assets from the CMDB. This action contributes to maintaining precise and streamlined asset management within the CMDB system, especially for license types with an end date, ensuring that obsolete or retired software components are correctly removed.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the software entry to be deleted. Successful deletion results in no response body. While specific usage notes for 'delete' were not explicitly detailed, CMDB management typically involves updating or deleting entries when asset relationships, locations, or departments are modified, or when an asset becomes obsolete. This aligns with the broader CMDB functionality of establishing connections between assets and their locations or departments, as mentioned in Context Rank 1. This operation is akin to deleting a field in a multi-index list, as described in Context Rank 8 for data management within the Infinity system."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Managers", "CMDB Administrators", "System Administrators"], "primary_use_case": "This API allows for the deletion of specific software entries from the Configuration Management Database (CMDB), ensuring accurate and streamlined asset management by removing obsolete or retired software components, especially those with expiring licenses."}, "content_for_embedding": "This API endpoint facilitates the permanent removal of a specific software entry from the Configuration Management Database (CMDB) using its unique identifier. It is essential for maintaining accurate and streamlined asset records, particularly for managing software licenses with expiry dates and ensuring that obsolete or retired software components are correctly purged from the system. This operation is a fundamental aspect of CMDB management, akin to updating or deleting entries when asset relationships or statuses change, contributing to precise asset lifecycle management.", "ontology_classification": {"features": ["software_license_management", "ci_relationship_management_(cmdb)", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["Delete", "CMDB", "Software License"]}}, {"path": "/ux/common/cmdb/software/create-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_software_create_csv_create", "description": "This endpoint facilitates the creation of software configurations by allowing users to import data via a CSV file. It is an adaptation of the Django REST Framework's ModelViewSet, specifically tailored for bulk creation operations. Users can upload an edited CSV file containing software configuration details, and the system will process valid records to add the configurations. This process is crucial for efficiently managing software inventory and settings.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "To use this endpoint, users should first download a sample CSV template to ensure proper data structure. After populating the template with the necessary software configuration details, the edited CSV file can be uploaded. The import process typically includes steps to validate the CSV file and proceed with the valid records. While the API specification does not detail request body parameters, based on the context, the request body is expected to contain the CSV file for upload, likely as multipart form data. This functionality is part of a larger workflow for managing CMDB software assets, often used for adding configuration profiles in bulk."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Software asset managers", "Users responsible for bulk data entry of software configurations"], "primary_use_case": "This API facilitates the bulk creation and import of software configurations and assets into the CMDB system via CSV file uploads, enabling efficient management of software inventory and settings."}, "content_for_embedding": "This API endpoint enables the bulk creation and import of software configurations and assets into the CMDB system. Users can upload an edited CSV file containing software configuration details, allowing for efficient management of software inventory and settings. The process involves downloading a sample CSV template, populating it, and then uploading the completed file for processing and validation of records.", "semantic_keywords": ["CSV Import", "Software Inventory", "Bulk Configuration"], "ontology_classification": {"features": ["multiple_asset_addition_methods", "bulk_actions_on_assets", "software_inventory_discovery"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/software/create-relation-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_software_create_relation_csv_create", "description": "This endpoint facilitates the creation of relationships (CI relations) between software assets within the CMDB, specifically through a CSV import. It builds upon the capabilities of a DRF ModelViewSet, allowing users to establish connections between assets, locations, or departments programmatically via a structured CSV file. The process involves uploading a CSV template with appropriate data, which then enables the system to create CI relations based on predefined rules. This is particularly useful for bulk operations in asset management, making the establishment of relationships more precise and streamlined.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is designed for CSV import, implying that the request body will contain the CSV file for processing. Users should first download a sample CSV template to ensure proper data structure for creating software relations. The system leverages CI Rule Configuration, which can be customized for departments, locations, requesters, software, and users. The endpoint will automatically add required rules and proceed with valid records from the uploaded CSV. This method is an efficient way to update CI relations and asset details in the CMDB in bulk."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "CMDB Managers", "System Integrators"], "primary_use_case": "This API efficiently creates and updates Configuration Item (CI) relationships between software assets within the CMDB in bulk via CSV import. This streamlines asset management by enabling programmatic establishment of connections between assets, locations, and departments based on predefined rules."}, "content_for_embedding": "This API endpoint facilitates the bulk creation and updating of Configuration Item (CI) relationships for software assets within the Configuration Management Database (CMDB). It operates by processing a structured CSV file, allowing users to programmatically establish connections between various assets, locations, and departments. The system automatically applies predefined CI rules to validate and integrate the imported data, ensuring precise and streamlined asset management for large-scale operations.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["CI relations", "CSV Import", "CMDB"]}}, {"path": "/ux/common/cmdb/software/csv_cols/", "method": "POST", "details": {"operationId": "ux_common_cmdb_software_csv_cols_create", "description": "This endpoint, an adaptation of Django REST Framework's ModelViewSet, facilitates the processing of CSV files for importing software-related asset data. It is specifically designed to handle column matching and the subsequent import of valid records from an uploaded CSV file, a critical step in managing asset information within the system. The process involves uploading an edited CSV file, proceeding with an 'Import' action, and confirming 'Valid Records' to seamlessly integrate software asset data.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to the CSV import workflow, particularly for asset management. Based on the provided contexts, the typical use case involves: 1. Downloading a sample CSV template for structuring data. 2. Adding or editing software asset details offline within this CSV. 3. Uploading the prepared CSV file via this endpoint. 4. The system then likely presents options for column matching (though this endpoint specifically handles the CSV columns), followed by importing valid records. It is crucial that the CSV file is relevant and correctly formatted to enable the 'Next' button and proceed with column matching and import. This endpoint is a key part of Method 7: Import from CSV for managing various configurations, including software asset details."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Managers", "System Administrators", "IT Operations Personnel", "CMDB Administrators"], "primary_use_case": "To facilitate the bulk import of software asset data into the system via CSV files, including handling column matching and validating records, thereby streamlining the process of populating and updating the asset inventory."}, "content_for_embedding": "This API endpoint is designed for the bulk import of software asset data into the system using CSV files. It specifically handles the processing of uploaded CSV files, including column matching and the identification of valid records, as a crucial step in the asset management workflow. It enables users to upload prepared CSVs containing software asset details, facilitating the seamless integration of this data into the Configuration Management Database (CMDB) and supporting various asset management configurations. This is part of a larger 'Import from CSV' functionality for adding and updating IT and software assets.", "semantic_keywords": ["CSV Import", "Asset Management", "Software Inventory"], "ontology_classification": {"features": ["multiple_asset_addition_methods", "software_license_management", "inventory_data_collection", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/cmdb/software/csv_relation_cols/", "method": "POST", "details": {"operationId": "ux_common_cmdb_software_csv_relation_cols_create", "description": "This endpoint, adapted from DRF ModelViewSet, is responsible for processing CSV file uploads related to software assets within the CMDB. Specifically, it handles the 'column matching' phase, which is crucial for correctly interpreting and importing asset information from a CSV file into the Infraon system. After a relevant CSV file has been uploaded, this step ensures that the columns in the CSV map correctly to the asset attributes in the CMDB.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of a larger workflow for importing asset information via CSV. Users typically upload a CSV file, then proceed to a 'column matching' step which this API facilitates, and finally 'Import' the data. The 'Next' button to proceed with column matching or import is often only enabled once a valid CSV file has been uploaded. The successful completion of this process enables asset information to be viewed, edited, or deleted within Infraon."}, "llm_generated": {"business_context": {"user_personas": ["Asset Managers", "IT Administrators", "CMDB Specialists", "Data Import Specialists"], "primary_use_case": "To facilitate the accurate import of software asset data into the CMDB by handling the column matching phase of CSV file uploads."}, "content_for_embedding": "This API endpoint is crucial for the import workflow of software assets into the CMDB via CSV files. It specifically manages the 'column matching' phase, ensuring that the columns in an uploaded CSV file are correctly mapped to the asset attributes within the Infraon CMDB system. This step is essential for successful data ingestion and enables subsequent viewing, editing, or deletion of asset information within Infraon. It supports bulk import of asset details.", "ontology_classification": {"features": ["multiple_asset_addition_methods", "ci_relationship_management_(cmdb)", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 1}, "semantic_keywords": ["CSV Import", "CMDB", "Asset Management"]}}, {"path": "/ux/common/cmdb/software/devices/", "method": "GET", "details": {"operationId": "ux_common_cmdb_software_devices_retrieve", "description": "This GET endpoint provides an adaptation of the DRF ModelViewSet for retrieving information about software devices. It allows users to query and view details about registered software devices, including their basic attributes like Model and Series details, often used for inventory management and understanding device specifics.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates no request body or parameters for this GET endpoint, based on the context, typical usage would involve retrieving device attributes such as 'Model' and 'Series' details, similar to an 'ALL TYPE' input for vendor devices. The broader context of 'software devices' suggests it pertains to managed IT assets, potentially including details like 'Device Type', 'IP Address', 'Make', and 'Model', as seen in inventory information. This endpoint is crucial for populating device inventories and providing a comprehensive view of software-defined assets."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Inventory managers", "System administrators"], "primary_use_case": "To retrieve detailed information about registered software devices for inventory management and asset tracking."}, "content_for_embedding": "This GET endpoint retrieves comprehensive information about registered software devices. It provides details such as Model, Series, Device Type, IP Address, Make, and other attributes crucial for inventory management, asset tracking, and populating device inventories. It offers a comprehensive view of software-defined assets.", "ontology_classification": {"features": ["unified_asset_repository", "inventory_data_collection", "software_inventory_discovery", "asset_search_and_filtering", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["Software Inventory", "Asset Management", "Retrieval"]}}, {"path": "/ux/common/cmdb/software/options/", "method": "GET", "details": {"operationId": "ux_common_cmdb_software_options_retrieve", "description": "This endpoint provides options related to software within the Configuration Management Database (CMDB). It allows users to retrieve a comprehensive list of selectable options, likely including but not limited to, software types, versions, or configurations that can be used to establish or update relationships between assets and their respective locations or departments within the CMDB. This data can facilitate precise and streamlined asset management by populating dropdown menus and ensuring adherence to defined asset management rules, as highlighted in the CMDB View context.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This GET endpoint leverages an adaptation of the Django REST Framework's ModelViewSet functionality to provide the software options. While the API specification currently indicates 'No response body' and no parameters, it is implied that the response would contain a structured list of these software options. For instance, this could include types of software, versions, or configurations that are valid for association with CMDB assets. Future updates may introduce parameters to filter these options, such as by model details or series, as suggested by other contexts related to device configurations. The data provided by this endpoint is crucial for maintaining accurate Configuration Item (CI) relations when modifications are made to user, requester, department, asset, or location details."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager", "IT Operations", "Developer"], "primary_use_case": "To provide a comprehensive list of software options (types, versions, configurations) for populating dropdown menus and facilitating the establishment or update of relationships between assets and their locations/departments within the Configuration Management Database (CMDB), ensuring accurate Configuration Item (CI) relations."}, "content_for_embedding": "This API endpoint, `GET /ux/common/cmdb/software/options/`, is designed to retrieve a comprehensive list of selectable software options, including types, versions, and configurations. This data is crucial for populating dropdown menus within user interfaces, enabling users to accurately establish and update relationships between assets and their associated locations or departments within the Configuration Management Database (CMDB). The endpoint supports streamlined asset management by providing the necessary options to maintain precise Configuration Item (CI) relations, especially when modifications occur to user, requester, department, asset, or location details. Although currently returning no response body in the specification, it is implied to provide a structured list of these software options, and future enhancements may include filtering capabilities.", "semantic_keywords": ["CMDB", "Software", "Dropdown options"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/software/upload-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_software_upload_csv_create", "description": "This endpoint facilitates the bulk upload of software configuration details from a CSV file. It allows users to import or update software records by providing a pre-configured CSV file. The process typically involves uploading the CSV, followed by validation of the records, and then proceeding with the import of valid entries. This aligns with the 'Import from CSV' functionality described in various user guides for asset and resource management, adapted for software-specific data.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is an adaptation of the DRF ModelViewSet, suggesting standard Django Rest Framework conventions for handling data. Users should ensure their CSV file adheres to the expected format for software configuration details. While the API itself does not have a response body for successful operations (indicating that processing might be asynchronous or status is checked elsewhere), the user guides consistently mention steps like 'Click Next -> Import -> Proceed with Valid Records' after uploading the CSV, implying a multi-step user interaction with validation and import. The process involves either dragging and dropping or browsing to upload the CSV file. It is crucial to add resource/asset configuration details to the default file before uploading it."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "System Administrators"], "primary_use_case": "Bulk import and update of software configuration details via CSV."}, "content_for_embedding": "This API allows for the bulk upload and update of software configuration details using a CSV file. It supports importing software records, validating entries, and processing valid data. The process involves uploading a pre-configured CSV, often through drag-and-drop or browsing, and follows a multi-step import workflow including validation and final import of records. This is crucial for managing software assets and configurations within a CMDB.", "semantic_keywords": ["CSV Import", "Software", "Asset management"], "ontology_classification": {"features": ["multiple_asset_addition_methods", "software_license_management", "bulk_actions_on_assets", "ci_relationship_management_(cmdb)", "software_inventory_discovery"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/cmdb/software/upload-relation-csv/", "method": "POST", "details": {"operationId": "ux_common_cmdb_software_upload_relation_csv_create", "description": "This endpoint facilitates the upload of a CSV file to manage software relations within the CMDB. It is specifically designed to allow users to import or update software relation details in bulk using a pre-formatted CSV file. The process typically involves uploading the edited CSV file, proceeding with validation and record importation. This endpoint is an adaptation of the DRF ModelViewSet, ensuring a structured approach to data handling. It plays a crucial role in maintaining up-to-date and accurate software asset relationships within the system.", "tags": ["CMDBSoftware"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "To use this endpoint, users should prepare a CSV file with the relevant software relation details. The system expects users to upload the same edited CSV file after initial download or preparation. The upload process is followed by steps to import and proceed with valid records. While the API specification does not detail specific request body parameters, based on context, the endpoint likely expects a CSV file upload. Users should ensure their CSV files adhere to the required format to enable successful processing and avoid invalid records. This API is commonly used in scenarios requiring bulk updates or initial data population for software relation management."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "CMDB Manager", "System Integrator"], "primary_use_case": "This API allows users to perform bulk import and update operations for software relation details within the Configuration Management Database (CMDB) by uploading a CSV file. It ensures the CMDB maintains accurate and up-to-date software asset relationships."}, "content_for_embedding": "This API endpoint facilitates the bulk management of software relationships within the CMDB through CSV file uploads. Users can import new software relation details or update existing ones by providing a pre-formatted CSV file. The process involves uploading the CSV, followed by validation and importation of records, ensuring a structured and efficient way to maintain accurate software asset relationships in the system. It is crucial for keeping the CMDB current with software asset data.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "software_license_management", "multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CSV Import", "CMDB Management", "Software"]}}, {"path": "/ux/common/contract/config/", "method": "GET", "details": {"operationId": "ux_common_contract_config_list", "description": "This endpoint retrieves a comprehensive list of all contract configurations within the current organization. It provides an organized view of all contracts stored in the inventory and their associated details, including critical information such as vendors, manufacturers, status, and contract names. Users can access a pre-configured list of contract categories such as Software, Hardware, Lease, and Service, which are dynamically displayed based on the types of contracts added to the system.", "summary": "Gets a list of contracts", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["ContractManagement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ContractList"}}}}, "description": ""}}, "additional_info": "This API supports pagination and sorting to manage the retrieved contract data. The 'items_per_page' and 'page' query parameters are required for specifying the pagination settings. Optional 'sort' and 'reverse' query parameters allow users to control the sorting order and key for the contract list. It's important to note that users cannot create new contract categories; only the predefined categories are available for selection. This endpoint is crucial for tracking and managing contract information effectively."}, "llm_generated": {"business_context": {"user_personas": ["Contract managers", "administrators", "procurement specialists", "users who need to track and manage contract information"], "primary_use_case": "Retrieving and viewing contract configurations for management and tracking."}, "content_for_embedding": "This API retrieves a paginated and sortable list of all contract configurations within the current organization. It provides a comprehensive view of contracts, including details like vendors, manufacturers, status, and contract names. Users can access contracts categorized as Software, Hardware, Lease, and Service, which are dynamically displayed based on system additions. This endpoint is essential for effective contract tracking and management.", "ontology_classification": {"features": ["contract_search_functionality", "contract_filtering_capabilities", "detailed_contract_data_storage", "predefined_contract_categorization", "multiple_data_display_views_(grid_&_card)"], "primary_module": "contract_management", "confidence_score": 1}, "semantic_keywords": ["Contract Management", "Retrieval", "Pagination"]}}, {"path": "/ux/common/contract/config/", "method": "POST", "details": {"operationId": "ux_common_contract_config_create", "description": "This endpoint is used to create and save a new contract for the current organization. It facilitates adding a new contract to the inventory, supporting various predefined categories such as Software, Hardware, Lease, or Service. This aligns with the Contract Management module's goal of streamlining the organization and visibility into each contract's lifecycle by allowing users to efficiently store important details.", "summary": "Creates a new contract ", "tags": ["ContractManagement"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateContractSample": {"value": {"contract_name": "Software contract", "contract_model": "software"}, "summary": "Create contract Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body for this POST operation is expected to contain at least the 'contract_name' and 'contract_model'. Although not explicitly detailed in the parameters section of the API spec, typical contract creation involves defining the contract's type (e.g., Software, Hardware), vendor, manufacturer, and initial status, as these are critical fields for contract tracking as mentioned in the user guide. This endpoint is distinct from operations that modify (Edit) or permanently delete existing contracts. There is no response body expected for this API call upon successful creation.", "parameters": [{"name": "contract_name", "in": "body", "description": "Inferred parameter: contract_name", "required": true, "schema": {"type": "string"}}, {"name": "contract_model", "in": "body", "description": "Inferred parameter: contract_model", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Contract Managers", "IT Administrators", "Procurement Officers", "Legal Department personnel"], "primary_use_case": "To enable organizations to create, add, and manage new contracts of various types (Software, Hardware, Lease, Service) to their inventory, thereby streamlining contract lifecycle management and improving visibility."}, "content_for_embedding": "This API creates and saves new contracts within an organization's inventory. It supports various contract types including Software, Hardware, Lease, and Service, allowing users to add essential details like contract name and model. This functionality is central to the Contract Management module, aiming to streamline contract organization and lifecycle visibility.", "ontology_classification": {"features": ["contract_creation", "multi-type_contract_support", "predefined_contract_categorization", "detailed_contract_data_storage", "contract_lifecycle_management"], "primary_module": "contract_management", "confidence_score": 1}, "semantic_keywords": ["Contract Management", "Add", "Contract categories"]}}, {"path": "/ux/common/contract/config/{id}/", "method": "GET", "details": {"operationId": "ux_common_contract_config_retrieve", "description": "This endpoint retrieves the detailed information for a specific contract identified by its unique `id` within the current organization. As part of the Contract Management module, which handles and tracks contractual agreements, this API enables users to access comprehensive contract information. The retrieved details are essential for tracking and managing contract information, including fields like contract name, type, vendor, manufacturer, and status.", "summary": "Gets a contract with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ContractManagement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContractList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier of the contract to be fetched. This endpoint provides quick access to critical contract information, similar to how the main contract page displays essential fields. It facilitates viewing details such as those found in the Contract Management module, which stores and monitors information like start/end dates, renewal terms, obligations, and costs."}, "llm_generated": {"business_context": {"user_personas": ["Users managing contracts", "Contract administrators", "IT Asset Managers"], "primary_use_case": "Retrieving detailed information for a specific contract to facilitate tracking and management of contractual agreements."}, "content_for_embedding": "This API retrieves comprehensive details of a specific contract using its unique ID. It provides essential information for contract tracking and management, including contract name, type, vendor, manufacturer, status, start/end dates, renewal terms, obligations, and costs. This functionality is similar to viewing detailed contract information on a main contract page, offering a comprehensive view for users managing contractual agreements, including associated details, license information, attachments, and activity logs.", "semantic_keywords": ["Contract Management", "Details retrieval", "Retrieval"], "ontology_classification": {"features": ["detailed_contract_view", "detailed_contract_data_storage", "activity_logging", "recent_activities_display", "attachment_management"], "primary_module": "contract_management", "confidence_score": 1}}}, {"path": "/ux/common/contract/config/{id}/", "method": "PUT", "details": {"operationId": "ux_common_contract_config_update", "description": "This endpoint is used to update an existing contract within the current organization. It enables users to modify details of an already added contract, such as Contract Name, Contract ID, Type, Vendor, Manufacturer, Status, Renewal Status, and Expiry Date. This functionality is crucial for managing and tracking contract information.", "summary": "Update the contract with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ContractManagement"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"UpdateContractSample": {"value": {"contract_id": "12345678e33339", "contract_name": "software edit"}, "summary": "Update Contract Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and identifies the specific contract to be updated. While the API specification provides an example usage with `contract_id` and `contract_name`, the full range of modifiable fields includes Contract Name, Contract ID, Type, Vendor, Manufacturer, Status, Renewal Status, and Expiry Date, as indicated by the user guide. This endpoint is primarily used for maintaining up-to-date contract records."}, "llm_generated": {"business_context": {"user_personas": ["Contract Managers", "Administrators", "IT Asset Managers"], "primary_use_case": "To update and maintain existing contract records within an organization."}, "content_for_embedding": "This API endpoint facilitates the modification of existing contract details, including Contract Name, Contract ID, Type, Vendor, Manufacturer, Status, Renewal Status, and Expiry Date. It is crucial for keeping contract information current and accurate, supporting the overall contract lifecycle management.", "semantic_keywords": ["Update", "Edit", "Contract Management"], "ontology_classification": {"features": ["contract_modification", "detailed_contract_data_storage", "contract_lifecycle_management"], "primary_module": "contract_management", "confidence_score": 1}}}, {"path": "/ux/common/contract/config/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_contract_config_destroy", "description": "This endpoint permanently deletes an existing contract from the inventory for the current organization. It removes the selected contract and its associated details, ensuring that it is no longer accessible within the system. The operation cannot be undone.", "summary": "Deletes the contract with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ContractManagement"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and uniquely identifies the contract to be deleted. Critical contract information typically displayed on the main page, such as 'Contract Name', 'Contract ID', 'Type', 'Vendor', 'Manufacturer', 'Status', 'Renewal Status', and 'Expiry Date', will become permanently inaccessible after deletion. This action is irreversible, similar to deleting a configuration profile or an asset where confirmation is usually required, meaning there is no 'undo' functionality for contract deletions. Ensure the correct contract 'id' is provided to prevent unintended data loss."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Contract Manager", "IT Asset Manager"], "primary_use_case": "Managing the lifecycle of contracts by enabling their permanent and irreversible removal from the system."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of an existing contract from the system's inventory. It removes the specified contract and all its associated details, including critical information like 'Contract Name', 'Contract ID', 'Type', 'Vendor', 'Manufacturer', 'Status', 'Renewal Status', and 'Expiry Date', making them permanently inaccessible. This action cannot be undone, emphasizing the need for careful verification of the 'id' path parameter to prevent unintended data loss, similar to deleting configuration profiles or assets.", "semantic_keywords": ["Delete", "Contract", "Irreversible"], "ontology_classification": {"features": ["contract_deletion"], "primary_module": "contract_management", "confidence_score": 1}}}, {"path": "/ux/common/contract/config/add-attachment/", "method": "POST", "details": {"operationId": "ux_common_contract_config_add_attachment_create", "description": "This API endpoint facilitates the secure uploading and addition of various file attachments to common contract configurations within the system. It enables privileged users to add files, supporting drag-and-drop or browsing for upload, with accepted formats including `png`, `jpeg`, `jpg`, `txt`, `doc`, `docx`, `CSV`, `xls`, `xlsx`, and `pdf`, and a maximum size limit of 20 MB per file. Attachments are categorized for better organization (e.g., Default, Procurement, Service, Retirement Documents), enhancing contract management workflows by allowing users to add relevant documents like emails or screenshots directly to records.", "tags": ["ContractManagement"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContractList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ContractList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ContractList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContractList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle document serialization, supporting a wide range of primitive and compound field types as described in the `request_body_description`. While many field types like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField` are well-supported, developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or tested. All other fields map to `DocumentField` and may not function as expected. The endpoint is commonly used for adding supporting documentation to service requests, audit logs, or change requests, allowing for a comprehensive view of related information."}, "llm_generated": {"business_context": {"user_personas": ["Privileged users", "Contract administrators", "Procurement specialists", "System administrators"], "primary_use_case": "This API facilitates the secure uploading and addition of various file attachments to common contract configurations, enhancing contract management workflows. It also supports adding documentation to service requests, audit logs, or change requests."}, "content_for_embedding": "This API endpoint allows privileged users to securely upload and add various file attachments to common contract configurations within the system. It supports drag-and-drop or browsing for upload, accepting formats like png, jpeg, jpg, txt, doc, docx, CSV, xls, xlsx, and pdf, with a maximum size limit of 20 MB per file. Attachments can be categorized for better organization (e.g., Default, Procurement, Service, Retirement Documents). This functionality enhances contract management workflows by enabling users to attach relevant documents such as emails or screenshots directly to records. The request body is designed for document serialization, supporting various field types, and the endpoint is commonly used for adding supporting documentation to service requests, audit logs, or change requests to provide a comprehensive view of related information.", "semantic_keywords": ["Attachments", "Contract Management", "Add"], "ontology_classification": {"features": ["attachment_management"], "primary_module": "contract_management", "confidence_score": 1}}}, {"path": "/ux/common/contract/config/ci-contract-map/", "method": "GET", "details": {"operationId": "ux_common_contract_config_ci_contract_map_retrieve", "description": "This endpoint retrieves the Configuration Item (CI) contract map, illustrating the relationships between configuration items. Specifically, it maps out how a selected CI utilizes or accesses an endpoint provided by another CI, indicating a dependency where the selected CI relies on the specified CI's endpoint for its functionality or data exchange. For example, a dashboard application might use a data endpoint from a database server to fetch and display real-time data, or a chatbot might use a messaging platform's endpoint to interact with users.", "summary": "Get ci contract relation", "tags": ["ContractManagement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContractList"}}}, "description": ""}}, "additional_info": "This endpoint is crucial for understanding CI dependencies, particularly when a CI 'Uses End Point From' another CI, meaning the selected CI relies on another CI's endpoint. It helps highlight how one CI is implemented to provide a specific endpoint using the features or capabilities of another specified CI, or how a CI consumes resources from another. While the API specification does not list explicit parameters, the context implies this mapping is for 'a contract', suggesting the CI or contract identifier would be implicitly handled or derived internally. No request body is required for this GET operation."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Architects", "Network Engineers", "Developers", "IT Operations personnel"], "primary_use_case": "To understand and visualize the dependencies and relationships between Configuration Items (CIs) within an IT environment, specifically how one CI utilizes or relies on an endpoint provided by another CI. This helps in impact analysis, troubleshooting, and system architecture understanding."}, "content_for_embedding": "This API retrieves the Configuration Item (CI) contract map, which details the intricate relationships and dependencies between various CIs. It specifically highlights instances where a selected CI consumes or accesses an endpoint provided by another CI, indicating a crucial reliance for its functionality or data exchange. This is vital for gaining insights into how different components of an IT infrastructure interact, enabling better dependency mapping, impact analysis, and troubleshooting of interconnected systems.", "semantic_keywords": ["CI relations", "Contract map", "CMDB"], "ontology_classification": {"features": ["contract_search_functionality", "contract_filtering_capabilities", "asset_integration/linking"], "primary_module": "contract_management", "confidence_score": 0.95}}}, {"path": "/ux/common/contract/config/ci-contract-map-id/", "method": "GET", "details": {"operationId": "ux_common_contract_config_ci_contract_map_id_retrieve", "description": "This endpoint is designed to retrieve a list of Configuration Item (CI) contract relation IDs associated with a specific contract. It helps in mapping and understanding the contractual relationships of CIs, which can include details like source, endpoint relationships, or how a CI utilizes or is utilized by others. This aligns with the broader Infinity system's capability to track and manage contract information for various IT assets and services.", "summary": "Get ci contract relation id list", "tags": ["ContractManagement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContractList"}}}, "description": ""}}, "additional_info": "While the current API specification does not list any parameters, typically, to retrieve contract map IDs for 'a contract', a contract identifier (e.g., contract ID or name) would be required, potentially as a query parameter or path variable. The context highly emphasizes 'Configuration Items' (CIs) and their relationships, particularly in terms of 'uses' or 'used by' other CIs, and how CIs might 'use endpoints from' other CIs. This suggests that the 'contract map IDs' likely define or refer to these intricate CI relationships under a contractual agreement. Developers should consult system documentation for how a specific contract is identified for this API call if no explicit parameters are documented."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Manager", "Contract Manager", "System Administrator", "Developer"], "primary_use_case": "To retrieve and understand the contractual relationships of Configuration Items (CIs) by listing their associated contract relation IDs."}, "content_for_embedding": "This API retrieves a list of Configuration Item (CI) contract relation IDs. It is used to map and understand the contractual relationships between CIs, including how CIs utilize or are utilized by others under a contract. This functionality supports tracking and managing contract information for IT assets and services within the Infinity system. While no parameters are explicitly listed, a contract identifier would typically be required to retrieve these IDs, which define intricate CI relationships under contractual agreements.", "semantic_keywords": ["Contract Management", "CI relations", "Contract map"], "ontology_classification": {"features": ["asset_integration/linking", "contract_search_functionality", "detailed_contract_data_storage"], "primary_module": "contract_management", "confidence_score": 0.95}}}, {"path": "/ux/common/contract/config/options/", "method": "GET", "details": {"operationId": "ux_common_contract_config_options_retrieve", "description": "This endpoint retrieves configuration options for the contract management module specific to the current organization. These options facilitate tracking and managing critical contract information, including details like vendors, manufacturers, contract status, and contract names. It enables users to customize and streamline their contract lifecycle management within the Infraon Infinity system.", "summary": "Gets options for the contract management", "tags": ["ContractManagement"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContractList"}}}, "description": ""}}, "additional_info": "This endpoint is part of the dedicated Contract Management module in Infraon Infinity, designed to centralize and organize all contractual agreements. The options returned help in efficiently storing and monitoring details such as contract types (including Lease and Service), start/end dates, renewal terms, obligations, compliance requirements, and associated costs. While no specific parameters are required for this GET request, the returned configuration options are crucial for operations like searching and filtering contracts by various fields such as Contract Name, Type, ID, Vendor, and Status, as mentioned in the user guide."}, "llm_generated": {"business_context": {"user_personas": ["Contract Managers", "Administrators", "Users involved in Contract Lifecycle Management"], "primary_use_case": "This API retrieves configuration options for the contract management module, enabling users to customize and streamline their contract lifecycle management, including tracking, managing, searching, and filtering contract information."}, "content_for_embedding": "This GET endpoint retrieves configuration options for the contract management module specific to the current organization. These options facilitate tracking and managing critical contract information, including details like vendors, manufacturers, contract status, and contract names. It enables users to customize and streamline their contract lifecycle management within the Infraon Infinity system. This endpoint is part of the dedicated Contract Management module in Infraon Infinity, designed to centralize and organize all contractual agreements. The options returned help in efficiently storing and monitoring details such as contract types (including Lease and Service), start/end dates, renewal terms, obligations, compliance requirements, and associated costs. While no specific parameters are required for this GET request, the returned configuration options are crucial for operations like searching and filtering contracts by various fields such as Contract Name, Type, ID, Vendor, and Status, as mentioned in the user guide.", "ontology_classification": {"features": ["contract_lifecycle_management", "detailed_contract_data_storage", "multi-type_contract_support", "contract_search_functionality", "contract_filtering_capabilities", "cost_and_billing_management"], "primary_module": "contract_management", "confidence_score": 0.95}, "semantic_keywords": ["Contract Management", "Configuration", "Retrieval"]}}, {"path": "/ux/common/department/department/", "method": "GET", "details": {"operationId": "ux_common_department_department_list", "description": "This endpoint is used to fetch a paginated list of departments within the current organization. Departments in Infraon are fundamental for logically grouping users, aligning teams to workflows, assigning tickets and tasks, and prioritizing work. They are crucial for efficient work assignment and team management, allowing users to be part of multiple departments simultaneously. The retrieval can be customized using pagination and sorting parameters.", "summary": "Gets a list of departments", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Department"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Department"}}}}, "description": ""}}, "additional_info": "Departments are created within Infraon to suit the organization's requirements. When creating departments, administrators define a 'Department Name', and can assign a 'Department Head' (managers or business owners who are decision-makers or high-level approvers) and a 'Prime User' (team leads responsible for work allocation and basic approval privileges). Users can view these details when fetching departments. For pagination, `items_per_page` specifies the number of departments returned per page, and `page` indicates the desired page number. Optional parameters `sort` (string) and `reverse` (boolean) allow for sorting the department list based on a specific key and in ascending or descending order, respectively."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Team Lead", "HR Manager", "System Integrator", "Developer"], "primary_use_case": "To retrieve and manage organizational departments for efficient user grouping, work assignment, and team management."}, "content_for_embedding": "This API retrieves a paginated and sortable list of departments within an organization. Departments are fundamental for logically grouping users, aligning teams to workflows, assigning tickets and tasks, and prioritizing work. They are crucial for efficient work assignment and team management, allowing users to be part of multiple departments simultaneously. The API supports pagination via `items_per_page` and `page` parameters, and sorting using `sort` and `reverse` parameters. This allows for flexible retrieval of departmental data, including details like Department Name, Department Head, and Prime User, which are defined during department creation.", "ontology_classification": {"features": ["user_management", "team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Pagination", "Retrieval", "Configuration"]}}, {"path": "/ux/common/department/department/", "method": "POST", "details": {"operationId": "ux_common_department_department_create", "description": "This endpoint facilitates the creation of a new department within the Infraon system. Departments are essential for logically grouping users, streamlining workflows, and efficiently assigning tickets and tasks, which is crucial for effective team management.\n\nUpon successful creation, the new department enables logical user organization, aligning teams to workflows, and ultimately enhancing task prioritization and overall work assignment efficiency. This includes defining a department name, selecting a department head who acts as a decision-maker or high-level approver, and assigning a prime user, typically a team lead responsible for work allocation and basic approvals.", "summary": "Creates a new department ", "tags": ["Department"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateDepartmentSample": {"value": {"dept_name": "Finance Department", "dept_head": ["Ramesh"], "description": "Finance", "prime_user": ["Akshatha"]}, "summary": "Create department Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body for this endpoint is used to define the new department's properties. It includes:\n*   `dept_name`: The name of the department (e.g., 'Finance Department', 'Incident Management', 'HR'). This is a mandatory field.\n*   `dept_head`: An array of users designated as the department head. These individuals are typically managers or business owners with decision-making authority or serve as high-level approvers.\n*   `prime_user`: An array of users designated as the prime user. These are usually team leads or senior members responsible for work allocation and possess basic approval privileges.\n*   `description`: A brief description of the department's function or purpose.\n\nWhile users can be part of multiple departments, this endpoint focuses on the creation of a single new department entry. The process aims to eliminate manual assignment, ensuring accurate and up-to-date departmental ownership, particularly in scenarios involving Configuration Items (CIs). Once created, departments can be edited or deleted via other respective API calls.", "parameters": [{"name": "dept_name", "in": "body", "description": "Inferred parameter: dept_name", "required": true, "schema": {"type": "string"}}, {"name": "dept_head", "in": "body", "description": "Inferred parameter: dept_head", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "prime_user", "in": "body", "description": "Inferred parameter: prime_user", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "HR Personnel"], "primary_use_case": "This API creates new departments to logically group users, streamline workflows, and facilitate efficient task and ticket assignment for effective team management within the Infraon system."}, "content_for_embedding": "This API creates new departments within the Infraon system. Departments are crucial for logically organizing users, streamlining workflows, and enabling efficient assignment of tickets and tasks, thereby enhancing team management. The API requires a department name, department head (decision-makers/high-level approvers), prime user (team leads/work allocators with basic approvals), and an optional description. It supports the creation of a single department entry, allowing for accurate and up-to-date departmental ownership, particularly in scenarios involving Configuration Items (CIs).", "semantic_keywords": ["Department Creation", "User Management", "Team Management"], "ontology_classification": {"features": ["user_management", "team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/department/department/{id}/", "method": "GET", "details": {"operationId": "ux_common_department_department_retrieve", "description": "This endpoint is used to retrieve detailed information about a specific department within the current organization, identified by its unique ID. Departments in Infraon are fundamental for logically grouping users, aligning teams to workflows, assigning tickets and tasks, and prioritizing work, ultimately enabling efficient work assignment and team management. This process supports the 'Department Rule' for automating department assignments for Configuration Items (CIs) by accurately linking departmental ownership, as described in the admin guide.", "summary": "Gets a department with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Department"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Department"}}}, "description": ""}}, "additional_info": "The `id` parameter, a required path parameter, represents the unique identifier for the department you wish to retrieve. Users can be part of multiple departments simultaneously. While this endpoint focuses on retrieval, departments typically have associated attributes such as a Department Head (managers or business owners who are decision-makers or high-level approvers) and a Prime User (team leads responsible for work allocation and basic approval privileges). This API call is essential for understanding the organizational structure and departmental rules governing user and asset assignments within Infraon."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "System Integrator"], "primary_use_case": "To enable efficient work assignment and team management by providing detailed information about organizational departments, supporting logical grouping of users and workflow alignment, and facilitating automated assignments for Configuration Items (CIs)."}, "content_for_embedding": "This API retrieves detailed information about a specific department using its unique ID. Departments are crucial in Infraon for logically grouping users, aligning teams to workflows, assigning tickets and tasks, and prioritizing work, thereby enabling efficient work assignment and team management. It also supports the 'Department Rule' for automating department assignments for Configuration Items (CIs).", "semantic_keywords": ["Details retrieval", "User Management", "Team Management"], "ontology_classification": {"features": ["team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/department/department/{id}/", "method": "PUT", "details": {"operationId": "ux_common_department_department_update", "description": "This endpoint allows for the modification of an existing department within the current organization, identified by a unique `id`. Departments in Infraon are essential for logically grouping users to align teams with workflows, assign tickets and tasks, and prioritize work efficiently. Editing a department enables administrators to update details such as the department's name, assigned Department Head, or Prime User, which are crucial for effective work assignment and team management. This process helps maintain accurate and up-to-date departmental structures as organizational needs evolve.", "summary": "Edits the department with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Department"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Department"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Department"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Department"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Department"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string that uniquely identifies the department to be edited. The request body, governed by a serializer for Documents, supports various primitive and compound field types as described in the `request_body_description`. It is important to note that updates to departments are vital for ensuring correct assignment of tickets and tasks, as well as for user management within Infraon. For example, updating the Department Head or Prime User can affect workflow approvals and work allocation. As per the user guides, existing departments can be edited using respective icons in the UI, which this API endpoint facilitates programmatically. Users can be part of multiple departments."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To enable administrators to modify existing department details, such as name, department head, or prime user, to ensure accurate user grouping, efficient work assignment, and effective team management within the organization."}, "content_for_embedding": "This API endpoint allows administrators to modify existing departments within Infraon. Departments are crucial for logically grouping users, aligning teams with workflows, and efficiently assigning tickets and tasks. Administrators can update key details such as the department's name, assigned Department Head, or Prime User. These updates are vital for maintaining accurate departmental structures, ensuring correct work assignment, and impacting workflow approvals and work allocation. The API facilitates programmatic editing of departments, mirroring the UI functionality for managing departmental structures.", "semantic_keywords": ["Update", "Department", "User Management"], "ontology_classification": {"features": ["user_management", "team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/department/department/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_department_department_destroy", "description": "This endpoint provides the functionality to delete an existing department within the current organization. Departments are crucial for logically grouping users, streamlining workflows, and assigning tickets and tasks efficiently within Infraon. Deleting a department can be done using its unique identifier (ID). This action helps in managing and updating organizational structures as departments can be freely added, edited, or deleted.", "summary": "Deletes the department with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Department"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` parameter is a mandatory path parameter, representing the unique identifier of the department to be deleted. Departments facilitate efficient work assignment and team management, and operations such as deleting them allow administrators to maintain an accurate and up-to-date organizational structure. Deleting a department is an irreversible action, similar to the deletion of an SLA profile, and should be performed with caution. Users can check the current list of departments within Infraon Configuration -> User Management -> Department."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "To manage and update organizational structures by deleting existing departments, which are crucial for grouping users, streamlining workflows, and assigning tasks."}, "content_for_embedding": "This API facilitates the irreversible deletion of an existing department by its unique identifier. Departments are essential for logically grouping users, optimizing workflows, and efficiently assigning tickets and tasks within an organization. This operation is a key part of maintaining an accurate and up-to-date organizational structure, impacting user management and work assignment.", "ontology_classification": {"features": ["team_&_department_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Delete", "Department", "User Management"]}}, {"path": "/ux/common/department/department/multidelete/", "method": "POST", "details": {"operationId": "ux_common_department_department_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of departments within the system. It enables users with appropriate privileges to remove multiple departments at once, streamlining administrative tasks. This function is typically accessible from pages where departments are listed, allowing for efficient management alongside options to add, view, and edit departments, as indicated by context from the Infinity user guide which mentions departments can be 'edited or deleted using the respective icons'.", "tags": ["Department"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Department"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Department"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Department"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Department"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various field types for document serialization, as detailed in the API specification's `request_body_description`. It supports primitive fields such as `StringField`, `IntField`, `BooleanField`, and `DateTimeField`, as well as compound fields like `ListField` and `DictField`. For references and embedded documents, nested serializers are autogenerated based on depth, ensuring proper serialization of complex data structures. While specific details about the required fields for department multi-deletion are not explicitly stated in the context, it's inferred that the request body will contain identifiers of the departments to be deleted. The API itself is a POST request, indicating that the data for deletion is sent in the request body. This endpoint is crucial for maintaining the integrity and relevance of department data, reflecting permissions related to 'Delete' privileges mentioned in the guide, which allows users to perform delete operations within selected modules."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User Manager"], "primary_use_case": "This API enables the efficient multi-deletion of departments within the system, streamlining administrative tasks related to user and department management."}, "content_for_embedding": "This API endpoint facilitates the multi-deletion of departments, allowing users with appropriate privileges to remove multiple department records simultaneously. It is crucial for maintaining data integrity and relevance by enabling efficient bulk removal of departments, typically from administrative interfaces where departments are listed and managed.", "semantic_keywords": ["Department", "Delete", "User Management"], "ontology_classification": {"features": ["user_management", "team_&_department_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/department/department/options/", "method": "GET", "details": {"operationId": "ux_common_department_department_options_retrieve", "description": "This API endpoint provides options related to departments, specifically allowing users to view or edit configurations within a department. It is designed to manage various departmental settings, including access privileges and service catalog items. For instance, it can be utilized to view services listed within a department's business catalogue or to perform edit operations on those services, depending on the user's assigned privileges (e.g., 'Edit' privilege allows viewing and modifying existing services).", "tags": ["Department"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Department"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for managing departmental data and access within the system. While the API specification currently lists no specific parameters, future enhancements might include parameters for filtering by department ID or type. Users with 'Edit' privileges will have comprehensive control over the department's configurations. It's relevant for internal and external users configuring self-service portals or administrative interfaces related to departments. Note that access requests, a common use case, may involve interaction with this department-related API through associated services."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Internal User", "External User"], "primary_use_case": "This API provides options for managing departmental settings, including viewing and editing configurations, access privileges, and service catalog items. It enables administrators and authorized users to configure self-service portals and administrative interfaces related to departments."}, "content_for_embedding": "This API endpoint retrieves options for managing departmental settings, including viewing and editing configurations, access privileges, and service catalog items. It is used by internal and external users to configure self-service portals and administrative interfaces related to departments, allowing for comprehensive control over departmental data and access.", "ontology_classification": {"features": ["team_&_department_management", "service_management_(catalogue_configuration)", "roles_&_privileges_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Department", "Configuration", "Service Catalog"]}}, {"path": "/ux/common/dgroup/device_group/", "method": "GET", "details": {"operationId": "ux_common_dgroup_device_group_list", "description": "This endpoint is used to fetch all the device groups in the current organization", "summary": "Gets a list of device groups", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Device Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/DeviceGroup"}}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "IT Operations Personnel", "Asset Managers"], "primary_use_case": "Managing and retrieving categorized groups of devices within an organization for IT operations and asset management."}, "content_for_embedding": "This API retrieves a paginated and sortable list of device groups within the current organization. Device groups are used to categorize and manage assets, providing a structured way to organize devices for IT operations and inventory tracking. This allows for streamlined management of devices based on various criteria such as end-user, requester, or owner technician, and supports the alignment of users, assets, and services within the organization.", "semantic_keywords": ["Device Group", "Asset management", "Pagination"], "ontology_classification": {"features": ["asset_search_and_filtering", "hierarchical_asset_categorization", "unified_asset_repository", "organization_management", "it_operations"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/dgroup/device_group/", "method": "POST", "details": {"operationId": "ux_common_dgroup_device_group_create", "description": "This endpoint is used to save a new device group for the current organization", "summary": "Creates a new device group ", "tags": ["Device Group"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateDeviceGroupSample": {"value": {"name": "location", "description": "location based device group", "filter": []}, "summary": "Create device group Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "parameters": [{"name": "name", "in": "body", "description": "Inferred parameter: name", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "filter", "in": "body", "description": "Inferred parameter: filter", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Asset Manager"], "primary_use_case": "To enable administrators and IT managers to logically categorize and organize devices within an organization's asset inventory for improved management, tracking, and reporting."}, "content_for_embedding": "This API creates a new device group within the organization's asset inventory. Device groups enable the logical categorization and organization of assets based on defined criteria such as name, description, and filters. This functionality is crucial for administrators to efficiently manage, track, and report on collections of devices, supporting various asset management and operational workflows.", "ontology_classification": {"features": ["hierarchical_asset_categorization", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Device Group", "Asset Management", "Classification"]}}, {"path": "/ux/common/dgroup/device_group/{id}/", "method": "GET", "details": {"operationId": "ux_common_dgroup_device_group_retrieve", "description": "This endpoint is used to fetch a device group details in the current organization", "summary": "Gets a Device group with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Device Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceGroup"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "Asset Managers", "Operations Teams"], "primary_use_case": "To enable users to retrieve comprehensive details of specific device groups within the organization for inventory management, operational monitoring, and asset oversight."}, "content_for_embedding": "This API endpoint allows for the retrieval of detailed information about a specific device group within the current organization. Users can fetch comprehensive data for a collection of devices by providing its unique identifier. This functionality is essential for managing device inventories, understanding group compositions, and facilitating operational oversight related to grouped assets.", "semantic_keywords": ["Device Group", "Details retrieval", "Asset Management"], "ontology_classification": {"features": ["asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/dgroup/device_group/{id}/", "method": "PUT", "details": {"operationId": "ux_common_dgroup_device_group_update", "description": "This endpoint is used to edit an existing device group for the current organization", "summary": "Edits the device group with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Device Group"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceGroup"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceGroup"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceGroup"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceGroup"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Asset Manager"], "primary_use_case": "This API enables users to modify and update existing device groups within an organization, facilitating the organization and management of IT assets by allowing changes to how devices are categorized and managed."}, "content_for_embedding": "This API endpoint is designed to edit an existing device group identified by its unique ID. It allows for the modification of the device group's properties and composition, which is essential for maintaining accurate and organized asset categorization within an organization.", "ontology_classification": {"features": ["customizable_asset_properties_and_fields", "hierarchical_asset_categorization"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Device Group", "Edit", "Asset Management"]}}, {"path": "/ux/common/dgroup/device_group/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_dgroup_device_group_destroy", "description": "This endpoint is used to delete an existing device group for the current organization", "summary": "Deletes the device group with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Device Group"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "This API is used to delete an existing device group, which is a logical grouping of devices within an organization's IT infrastructure. This helps in maintaining an organized and up-to-date inventory of IT assets."}, "content_for_embedding": "This API endpoint facilitates the deletion of an existing device group within an organization's IT infrastructure. It targets a specific device group using its unique identifier, enabling administrators and IT operations personnel to maintain accurate and organized asset categorization. This function is integral to the lifecycle management of device groupings, ensuring efficient management of IT assets.", "semantic_keywords": ["Device Group", "Delete", "Asset Management"], "ontology_classification": {"features": ["hierarchical_asset_categorization", "asset_lifecycle_management", "asset_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/dgroup/device_group/filter/", "method": "GET", "details": {"operationId": "ux_common_dgroup_device_group_filter_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Device Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceGroup"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Security Administrator"], "primary_use_case": "To filter and retrieve device groups for the purpose of viewing and managing associated users and their privileges."}, "content_for_embedding": "This API endpoint allows for the retrieval and filtering of device groups. Its primary purpose is to enable administrators and IT staff to view and manage users associated with these device groups. Access to this functionality is privilege-based, ensuring secure user and role management within the system.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Device Group", "User Privileges"]}}, {"path": "/ux/common/dgroup/device_group/options/", "method": "GET", "details": {"operationId": "ux_common_dgroup_device_group_options_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Device Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceGroup"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Security Administrator"], "primary_use_case": "To retrieve configuration options and settings that govern how users are viewed or edited, specifically within the context of device groups and their associated access privileges."}, "content_for_embedding": "This API retrieves configuration options for managing user access and permissions related to device groups. It provides details necessary for viewing or editing user properties, adhering to defined roles and privileges.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Device Group", "Configuration"]}}, {"path": "/ux/common/events/events/", "method": "GET", "details": {"operationId": "ux_common_events_events_retrieve", "description": "This endpoint retrieves a paginated list of all events within the current organization. Events represent any detected change or activity within the infrastructure and are crucial for active and passive monitoring of various IT items (e.g., laptops, desktops, software licensing, application performance, server performance). This endpoint provides a comprehensive overview of system events, which can be further categorized by severity (critical, major, minor) for easier comprehension, similar to the \"Events - This event summary widget\" described in the user guide. The retrieved event data can be used for various purposes, including event summary, event count, and event trend analysis.", "summary": "Gets a list of events", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The API supports pagination through the `items_per_page` and `page` query parameters, both of which are required. Optional parameters include `reverse` for changing the sorting order (boolean) and `sort` for specifying the sorting key (string). Events are a fundamental component of the event management module, designed to detect changes, observe anomalies, and raise alarms if necessary. The data provided by this endpoint is analogous to the 'Event Report' and 'Event Summary Report' mentioned in the user guides, offering statistical information about specific events over time. This endpoint is essential for monitoring and analyzing system activities across the organization."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "NOC users", "technicians", "system analysts"], "primary_use_case": "Monitoring and analysis of IT infrastructure events for proactive incident management and system health overview."}, "content_for_embedding": "This API endpoint retrieves a paginated list of all events within an organization. Events represent detected changes or activities in the IT infrastructure, crucial for active and passive monitoring of various IT items like laptops, desktops, software licensing, and application/server performance. The endpoint provides a comprehensive overview of system events, which can be categorized by severity (critical, major, minor). The retrieved event data supports event summary, event count, and event trend analysis, similar to 'Event Report' and 'Event Summary Report' functionalities. It supports pagination via `items_per_page` and `page` parameters, and allows sorting by `reverse` and `sort` parameters. This endpoint is fundamental for monitoring and analyzing system activities across the organization.", "semantic_keywords": ["Events", "Monitoring", "Report"], "ontology_classification": {"features": ["event_detection_and_monitoring", "event_listing_and_filtering", "event_data_export", "event_management_actions", "event_suppression", "event_association", "event_reports_(specific_&_summary)", "it_operations"], "primary_module": "event_management", "confidence_score": 1}}}, {"path": "/ux/common/events/events/", "method": "POST", "details": {"operationId": "ux_common_events_events_create", "description": "This API endpoint facilitate the management of 'events' related to user requests and operations within the system. It enables users to view details of various requests (e.g., access requests, catalog items, incidents, service requests, change requests) and also supports editing capabilities for these events. The endpoint is designed to allow users to interact with and manage previously submitted or created events, providing a central point for tracking and modifying their status or details.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint handles 'events' which are synonymous with user-submitted requests, incidents, and changes. While the original description mentioned 'viewing or editing users', the higher-ranked contexts strongly indicate its primary function revolves around the management of these events/requests. Specific functionalities might include quick edits (status, priority, urgency, severity, impact service, assignee) or detailed edits of request information. There is no response body for this endpoint, indicating actions performed are typically asynchronous or state-changing. Parameters and request body details are not specified in the provided JSON, but context suggests operations like 'Quick Edit' and 'Detailed Edit' might imply a need for specific event IDs or other identifiers in the request body."}, "llm_generated": {"business_context": {"user_personas": ["User", "Administrator", "Agent"], "primary_use_case": "To manage the lifecycle and details of user-submitted requests, incidents, and changes (referred to as \"events\") within the system, allowing for viewing and editing of their status and information."}, "content_for_embedding": "This API endpoint facilitates the management of \"events,\" which are synonymous with user-submitted requests, incidents, and change requests. It allows users to view detailed information about these requests and provides capabilities for editing their status and other attributes. Specific functionalities include quick edits (e.g., status, priority, assignee) and detailed modifications of request information. The endpoint serves as a central point for tracking and updating the state of previously submitted or created events/requests. Actions performed via this endpoint are typically asynchronous or state-changing, as indicated by the lack of a response body.", "ontology_classification": {"features": ["request_lifecycle_management", "request_monitoring_&_tracking", "detailed_request_information_display", "request_editing_&_quick_actions", "request_display_views_(panel_&_grid)", "customizable_statuses_&_views", "requester_interaction_history_display", "change_management_integration", "request_tagging", "request_ownership_&_assignment"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Request Update", "Request Management", "Events"]}}, {"path": "/ux/common/events/events/{eventid}/", "method": "GET", "details": {"operationId": "ux_common_events_events_retrieve_2", "description": "This endpoint retrieves detailed information about a specific event within the current organization, identified by its unique event ID. In Infraon, an 'event' signifies any change observed and detected within your organization's infrastructure, such as activities related to CI items (laptops, desktops), software licensing and performance, application performance, or server performance. The event management module's primary objective is to detect all such changes, observe for anomalies, and raise alarms if necessary, serving as Infraon's active and passive monitoring mechanism. This allows for comprehensive monitoring and analysis of system activities.", "summary": "Gets a event with the given event id", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `eventid` path parameter is a unique value required to identify and fetch the specific event. These events are crucial for security intelligence (SI) as they represent monitored, documented, and analyzed system activities. They are also integral to compliance regulations, such as PCI, which often mandate detailed audit logs. This API is commonly used to query specific event details, which can be viewed in event summaries, especially within dashboards providing visual breakdowns categorized by severity (critical, major, minor)."}, "llm_generated": {"business_context": {"user_personas": ["NOC users", "Technicians", "Administrators", "Security Analysts", "Compliance Officers"], "primary_use_case": "Retrieving detailed event information for monitoring, analysis, security intelligence, and compliance within an organization's infrastructure."}, "content_for_embedding": "This API retrieves detailed information about a specific event using its unique event ID. In Infraon, an 'event' signifies any observed and detected change within an organization's infrastructure, including activities related to CI items (laptops, desktops), software licensing and performance, application performance, or server performance. The event management module aims to detect these changes, observe anomalies, and raise alarms, serving as an active and passive monitoring mechanism for comprehensive system activity analysis. These events are crucial for security intelligence (SI) and compliance regulations (e.g., PCI), often requiring detailed audit logs. The API is commonly used to query specific event details, which are viewable in event summaries and dashboards, often categorized by severity (critical, major, minor).", "semantic_keywords": ["Events", "Monitoring", "Details retrieval", "Filter"], "ontology_classification": {"features": ["event_detection_and_monitoring", "event_listing_and_filtering", "threshold-based_anomaly_identification", "notification_and_incident_generation", "event_association", "event_suppression"], "primary_module": "event_management", "confidence_score": 0.95}}}, {"path": "/ux/common/events/events/{eventid}/", "method": "PUT", "details": {"operationId": "ux_common_events_events_update", "description": "This API endpoint allows for the viewing and detailed editing of specific 'event' records. It facilitates actions related to 'tickets', 'requests', 'changes', 'problems', or 'releases', which are collectively referred to as 'events'. Users can perform comprehensive edits, including details that go beyond quick edits, aligning with the functionality to 'Edit' a Request in detail (Context Rank 2). This endpoint is crucial for managing and updating the lifecycle of various operational items within the system.", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `eventid` is a mandatory path parameter and represents the unique identifier for the event (e.g., Ticket ID, Request ID, Change ID, Problem ID, Release ID as suggested by Context Rank 1). While the original description mentioned 'users to be viewed or edited', the context strongly indicates that this `PUT` method is primarily for editing existing records, specifically detailed edits. Quick edit actions or status changes might be handled by other endpoints. The API enables detailed modifications similar to the 'Detailed Edit' function described in Context Rank 2, which allows for comprehensive changes to the event's attributes."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Service Desk Agent", "Operations Manager"], "primary_use_case": "To enable detailed editing and updating of various operational event records such as tickets, requests, changes, problems, and releases, facilitating their lifecycle management."}, "content_for_embedding": "This API endpoint, `PUT /ux/common/events/events/{eventid}/`, is designed for comprehensive and detailed editing of existing operational records, referred to as 'events'. These events encompass various IT service management entities such as tickets, service requests, change requests, problem records, and release records. The `eventid` path parameter serves as a unique identifier for the specific record to be updated. Unlike quick edit functionalities, this endpoint supports in-depth modifications to an event's attributes, playing a crucial role in managing and advancing the lifecycle of these operational items within the system.", "ontology_classification": {"features": ["request_editing_&_quick_actions", "detailed_request_information_display", "request_lifecycle_management", "change_management_integration"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Update", "Detailed Edit", "Events"]}}, {"path": "/ux/common/events/events/{eventid}/", "method": "DELETE", "details": {"operationId": "ux_common_events_events_destroy", "description": "This API endpoint allows for the deletion of specific events from the system. It is a critical action for managing event records and, once initiated, will irreversibly remove the event and its associated details. The deletion targets a unique event identified by its ID, similar to how tickets, requests, or changes are managed within the system, where detailed edits and deletions are distinct operations. This action is similar to the 'Delete' functionality observed in other modules for requests, changes, or problems, emphasizing its irreversible nature. The Event Management module also handles problem reports, implying that events could originate from network monitoring systems, making their deletion a significant system management action.", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `eventid` path parameter is a mandatory string that uniquely identifies the event to be deleted. As highlighted in related documentation, deletion actions, whether for requests, tickets, or problems, are irreversible. Therefore, users should exercise caution when using this endpoint. There is no request body for this DELETE operation. The response body is also empty when the operation is successful. This endpoint is typically used to manage records that might have been processed, failed, or are no longer relevant, similar to how other system activities are summarized and managed."}, "llm_generated": {"business_context": {"user_personas": ["System administrators", "IT operations personnel", "Event managers"], "primary_use_case": "This API endpoint allows for the irreversible deletion of specific event records from the system, serving as a critical system management action for managing event data."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of specific event records from the system, identified by a unique `eventid`. It is a critical system management action, similar in finality to deleting tickets, requests, or problems. Events can originate from various sources, including network monitoring systems. Successful deletion results in no response body.", "semantic_keywords": ["Delete", "Events", "Irreversible"], "ontology_classification": {"features": ["event_management_actions"], "primary_module": "event_management", "confidence_score": 1}}}, {"path": "/ux/common/events/events/action/", "method": "GET", "details": {"operationId": "ux_common_events_events_action_retrieve", "description": "This `/ux/common/events/events/action/` API endpoint is designed to manage user-related actions, specifically allowing users to be viewed or edited. Based on the provided contexts, this includes functionalities pertinent to user requests, incident management, and change requests. It facilitates the ability for users to submit, view, and potentially edit older requests, such as access requests or catalog items. This endpoint also supports the viewing of user details and could be used in scenarios where quick or detailed edits are performed on user-associated entities like requests, incidents, or changes. It is particularly relevant for managing requesters, whether internal or external, and may allow for actions like 'Quick Edit' or 'Detailed Edit' on their associated requests or tasks.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates no request body or response body, the context strongly suggests that this endpoint is involved in actions related to viewing and editing user (or requester) details and their associated requests/incidents/changes. The term 'action' in the path implies a broader set of operations than just simple 'view' or 'edit'. For example, actions such as changing status, priority, urgency, severity, or assignee details could be triggered through this endpoint, as indicated by 'Quick Edit' options in the contexts. Users benefiting from this endpoint include Technicians, NOC Operators, and Requesters. It's crucial to understand that 'editing users' likely refers to editing the properties or status of their requests rather than direct user profile management. Further clarification on specific query parameters or request body structure for 'Quick Edit' versus 'Detailed Edit' operations would be beneficial for full implementation."}, "llm_generated": {"business_context": {"user_personas": ["Requesters", "Technicians", "NOC Operators"], "primary_use_case": "To enable users and technicians to view, edit, and manage actions related to user requests, incidents, and change requests."}, "content_for_embedding": "This API endpoint facilitates the management of user-related actions on requests, incidents, and change requests. It allows for viewing details, performing quick edits, and detailed edits on these associated entities. It supports actions such as changing status, priority, urgency, severity, or assignee details. The endpoint is crucial for managing items associated with internal and external requesters, providing capabilities for viewing history, filtering, and searching requests.", "semantic_keywords": ["Edit", "Detailed Edit", "Request Update", "Request Management", "Search", "Filter", "Delete", "Status"], "ontology_classification": {"features": ["request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "request_search_&_filtering", "requester_interaction_history_display", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "customizable_statuses_&_views"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/available-tags/", "method": "GET", "details": {"operationId": "ux_common_events_events_available_tags_retrieve", "description": "This API endpoint allows users to retrieve available tags within the system, specifically those related to 'events'. While the original description suggested user viewing or editing, the context indicates a focus on various types of requests and tickets which are often associated with events. The endpoint is designed to help users identify and categorize requests, incidents, service requests, and change requests by providing relevant tags. It assists in facilitating the submission and viewing of both current and historical requests, enabling better management and categorization of these items.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The primary purpose of this endpoint appears to be the retrieval of metadata (tags) that can be applied to different types of 'events' or requests within the Infraon system. This is crucial for organizing and searching through incidents, service requests, and change requests, as highlighted by mentions of 'ticket ID / Request ID' and 'Group Users and Requesters by Asset Data!' based on mapped asset tags. While the API specification does not list explicit parameters, the context suggests these tags are used for filtering or categorizing requests when users interact with the system, potentially for views like List View or Card View. Developers using this API would likely use the retrieved tags to enhance search capabilities or provide relevant filters in user interfaces where requests are managed or viewed."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator"], "primary_use_case": "To retrieve a list of available tags within the system, which are used to categorize and filter various types of requests and events, including incidents, service requests, and change requests. This facilitates better organization, search, and management of these items."}, "content_for_embedding": "This API endpoint allows users to retrieve available tags related to events, requests, incidents, service requests, and change requests. These tags are crucial for organizing, categorizing, and facilitating the submission and viewing of current and historical requests, enabling enhanced search capabilities and filtering in user interfaces.", "semantic_keywords": ["Tags", "Retrieval", "Classification"], "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/column-config/", "method": "GET", "details": {"operationId": "ux_common_events_events_column_config_retrieve", "description": "This API endpoint provides functionality to view or edit column configurations related to events within the UX common module. It allows for detailed management of columns, potentially including quick edit actions like status, priority, urgency, severity, impact service, and assignee, as well as more detailed editing of request details. This aligns with the broader system's ability to manage various entities, such as 'Requests' and 'Change Requests', where column configurations are essential for tailoring the user's view and interaction with data.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification states 'No response body', typically, a GET request for a column configuration would return the current configuration settings. The context suggests that 'Edit' privileges are required to modify these settings. This endpoint is crucial for customizing the display of event-related data, similar to how other modules and pages allow users to view and perform edit operations on their respective data based on privileges. It contributes to the system's flexibility in managing how information is presented and interacted with by users, particularly in relation to 'events' data."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To allow users to view and customize the display of event-related data by configuring columns."}, "content_for_embedding": "This API endpoint retrieves and allows for the editing of column configurations for events within the UX common module. It enables detailed management of columns, including quick edit actions for event attributes and more detailed editing of request details, crucial for tailoring the user's view and interaction with event data. This functionality is privilege-based and essential for customizing how event information is presented.", "ontology_classification": {"features": ["event_listing_and_filtering", "event_management_actions"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Events", "Configuration", "Column Configuration"]}}, {"path": "/ux/common/events/events/comments/{eventid}/", "method": "GET", "details": {"operationId": "ux_common_events_events_comments_retrieve", "description": "This API endpoint allows users to view and manage comments associated with a specific event. It provides the functionality for users and technicians to see existing comments on a request (identified as an 'event' in this context) and to add new comments. The endpoint is part of a broader system where events can be related to requests, changes, or problems, and offers a way to track communication related to these items.", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `eventid` path parameter is a unique value required to identify the specific event whose comments are being accessed. This endpoint facilitates communication tracking, aligning with the 'Comment' functionality described in the user guide, which enables users/technicians to view and add comments on requests. While the API specification mentions 'users to be viewed or edited', the context clearly indicates its primary purpose for comments on events/requests."}, "llm_generated": {"business_context": {"user_personas": ["user", "technician", "NOC user"], "primary_use_case": "This API allows users and technicians to view and manage comments associated with specific events, which can be requests, changes, or problems. Its primary purpose is to track communication and provide historical context for these items."}, "content_for_embedding": "This API endpoint facilitates the retrieval and management of comments linked to a specific event, identified by a unique event ID. Events in this context encompass requests, changes, or problems. It enables users and technicians to access existing comments and add new ones, thereby providing a centralized mechanism for tracking communication and maintaining a comprehensive history related to these operational items. The functionality aligns with the \"Comment\" feature described in the user guide, supporting communication tracking on various types of service management items.", "ontology_classification": {"features": ["communication_tab_(centralized_history)", "ticket_history_view", "ticket_detail_view_(via_id)", "lifecycle_communication_management"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Comments", "Events", "Details retrieval"]}}, {"path": "/ux/common/events/events/create_incident/", "method": "POST", "details": {"operationId": "ux_common_events_events_create_incident_create", "description": "This API endpoint facilitates the creation of incidents within the system. It is designed to allow problem reports to be generated, potentially by network monitoring systems or by users with appropriate permissions (e.g., Technicians or NOC Operators) on behalf of a requester. It enables the system to record and manage new incidents encountered in an IT or network environment.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for populating the Event Management module with new incidents. Incidents can be generated by automated systems or manually by authorized personnel. The API supports the core functionality of incident creation, which is a fundamental aspect of event management and troubleshooting workflows. While the current specification indicates 'No response body', it's expected that a successful incident creation would typically return a confirmation or the newly created incident's ID. The original description 'allows users to be viewed or edited' appears to be a mistranslation or placeholder from a different endpoint and is superseded by the context analysis."}, "llm_generated": {"business_context": {"user_personas": ["Network Monitoring Systems", "Technicians", "NOC Operators", "Authorized Personnel", "Requesters"], "primary_use_case": "To enable the creation and management of new incidents and problem reports within an IT or network environment, facilitating event management and troubleshooting workflows."}, "content_for_embedding": "This API creates new incidents in the system, serving as a method for submitting problem reports. It supports incident generation from automated network monitoring systems or manual input by authorized personnel like Technicians and NOC Operators, often on behalf of a requester. This endpoint is key for populating the Event Management module and facilitating incident management workflows, including the capture of details such as symptoms and attachments.", "ontology_classification": {"features": ["automated_ticket_creation_from_monitoring_systems_(api)", "new_ticket_creation_interface", "ticket_submission_methods", "notification_and_incident_generation", "ticket_attachments", "internal_notes", "requester_search_&_add", "reported_by_(on_behalf_of)", "ticket_followers_&_notifications"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Incident Creation", "Ticket Submission", "Event Management"]}}, {"path": "/ux/common/events/events/events_nbi/", "method": "POST", "details": {"operationId": "ux_common_events_events_events_nbi_create", "description": "This API endpoint provides functionalities for managing user accounts, specifically allowing them to be viewed or edited. It supports both internal and external users, including Technicians (Tech Support User/NOC Operator) and Requesters. Requesters can be granted access to a dedicated portal to submit and view incidents, service requests, and change requests, as well as access the Knowledge Base. The API enables the management of user details and their associated privileges, which can be configured by administrators.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for user management within the system. Requesters, upon being enabled with access, can utilize the Infraon Requester Portal for various self-service functions, such as raising incidents and service requests. The system also supports technicians creating requests on behalf of reuesters. Privileges for user actions (view, add, edit, delete, execute, export) are role-based and defined by administrators. While the current API specification does not detail specific parameters, it is implied that user IDs or other identifiers would be used for viewing and request bodies would contain user details for editing. Further details on user management and roles can be found in the Users module documentation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Technician", "Requester"], "primary_use_case": "To manage user accounts, including viewing, editing, and configuring user details and their associated role-based privileges within the system."}, "content_for_embedding": "This API endpoint facilitates comprehensive user account management within the system, enabling administrators to view, edit, and configure user details and their associated role-based privileges. It supports both internal users like Technicians and external Requesters. Requesters, once granted access through this management, can then utilize a dedicated portal for self-service functions such as submitting and viewing incidents, service requests, and change requests, as well as accessing the Knowledge Base. The API is crucial for defining and controlling user actions (view, add, edit, delete, execute, export) based on their assigned roles.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "User Privileges", "Access Control"]}}, {"path": "/ux/common/events/events/get-event-ticket-details/", "method": "GET", "details": {"operationId": "ux_common_events_events_get_event_ticket_details_retrieve", "description": "This API endpoint retrieves comprehensive details for a specific event ticket. It allows users to view information such as the ticket's creation time and date, along with other relevant details organized under tabs like 'Basic Details' and 'Communication'. This endpoint facilitates the display of a created ticket or request when a user clicks on a channel, and specifically when double-tapping on a ticket ID redirects to a detailed view.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for providing a detailed view of a ticket, similar to how double-tapping a ticket ID redirects to a comprehensive details page. While the API specification currently lists no parameters, in a real-world scenario, it would likely require a 'ticket ID' or 'event ID' to specify which ticket's details to retrieve. The fetched details are intended for display, allowing users to understand the full context of a ticket, including its status, priority, urgency, severity, impact, and assignee.\n\nUsage:\n- To view the creation timestamp and date of a ticket.\n- To access detailed information categorized under 'Basic Details' and 'Communication' tabs.\n- To provide a quick overview for 'Quick Edit' options or to enable full 'Detailed Edit' functionality for ticket attributes like status, priority, and assignee. Although this API is for viewing, the comprehensive details form the basis for subsequent editing actions.\n\nCommon Use Cases:\n- Integrating with user interfaces where clicking or double-tapping a ticket ID needs to display its full information.\n- Supporting internal systems that require detailed ticket data for reporting, auditing, or further processing."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Agent", "Developer"], "primary_use_case": "To retrieve and display comprehensive details of a specific event ticket, enabling users to view all relevant information for a complete understanding of the ticket's context."}, "content_for_embedding": "This API endpoint retrieves comprehensive details for a specific event ticket, including its creation time and date, and information organized under \"Basic Details\" and \"Communication\" tabs. It is designed to facilitate the display of a created ticket or request when a user interacts with a channel, such as double-tapping a ticket ID to redirect to a detailed view. The fetched details encompass status, priority, urgency, severity, impact, and assignee, providing a full context for display in user interfaces and for use by internal systems for reporting, auditing, or further processing, and as a basis for subsequent editing actions.", "semantic_keywords": ["Details retrieval", "Events", "Ticket"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "communication_tab_(centralized_history)", "ticket_state_&_status_management", "ticket_history_view", "quick_edit_(key_attributes)", "detailed_ticket_editing"], "primary_module": "ticket_management", "confidence_score": 0.95}}}, {"path": "/ux/common/events/events/get-top-process/", "method": "GET", "details": {"operationId": "ux_common_events_events_get_top_process_retrieve", "description": "This API endpoint provides a mechanism to view or edit user-related information, specifically processes or requests involving internal or external users. While the endpoint's path includes 'get-top-process', the core functionality, as indicated by context, is aligned with managing user-related actions, such as editing requests or viewing details. Users can be configured with access to a Requester Portal to manage incidents, service requests, and change requests. The endpoint supports actions analogous to 'Quick Edit' for status, priority, urgency, severity, impact, and assignee, as well as 'Detailed Edit' for comprehensive request details. It also supports viewing details of related change requests.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The primary focus of this endpoint appears to be on managing user requests and changes within the system. Although the path suggests 'top-process', the provided contexts indicate a strong correlation with user-centric request and change management, including actions like editing request details or observing associated change requests. There are no specific parameters or request body described in the API specification, so the exact mechanism for targeting a specific user or request for viewing/editing is not explicitly defined in the provided data. However, based on the contexts (Rank 1 and 2), the system facilitates user interaction with requests and changes, allowing for both quick and detailed modifications. Users with appropriate permissions are required to raise changes. The endpoint likely supports operations similar to those performed through a user interface for editing requests or viewing their associated change requests."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Administrators", "Technicians"], "primary_use_case": "This API endpoint allows users to view and edit user-related requests and changes within the system, including incidents, service requests, and change requests. It supports quick and detailed editing of request attributes like status, priority, and assignee, and enables viewing of associated change requests."}, "content_for_embedding": "This API endpoint facilitates the management of user-related requests and changes. It enables users to view and perform quick or detailed edits on incidents, service requests, and change requests. Key functionalities include modifying status, priority, urgency, severity, impact, and assignee for requests, as well as viewing details of related change requests. The API supports actions similar to those found in a Requester Portal, allowing for comprehensive user-centric request and change management.", "semantic_keywords": ["Request Management", "Ticket", "Change"], "ontology_classification": {"features": ["ticket_management.quick_edit_(key_attributes)", "ticket_management.detailed_ticket_editing", "ticket_management.view_linked_change_request", "ticket_management.ticket_history_view", "ticket_management.ticket_search_bar", "ticket_management.ticket_filters", "ticket_management.requester_self-service_portal", "ticket_management.ticket_state_&_status_management", "ticket_management.ticket_assignment_(individual/team/expertise)", "ticket_management.link_ticket_to_change_request_(add_change)", "ticket_management.ticket_submission_methods", "ticket_management.communication_tab_(centralized_history)", "ticket_management.ticket_attachments", "ticket_management.convert_ticket_to_knowledge_base_article"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/get_events_nbi_inci_detail/", "method": "POST", "details": {"operationId": "ux_common_events_events_get_events_nbi_inci_detail_create", "description": "This API endpoint is designed to retrieve and manage comprehensive details of events, specifically those related to NBI (NOC/Bounded Interface) and Inci (Incident) types. It allows users to view and analyze detailed event information, including event ID, creation time, asset details, and event statistics. The endpoint facilitates actions such as acknowledging events and provides insights into impacted services. While the summary in the provided JSON is blank, the context strongly suggests this endpoint is crucial for comprehensive event management, allowing for detailed analysis and interaction with events to resolve issues and understand system performance.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Events viewed through this endpoint can be double-tapped (or clicked, in a programmatic sense) to access comprehensive details pages that provide creation time and date. The communication tab and basic details are part of these event pages. Higher-ranked contexts further suggest that events can be filtered by dates, and actions like 'Analyse' and 'Acknowledge' are supported, allowing users to view 'Impact Services' event details or acknowledge events by NOC users or technicians. Event pages also provide access to login/logout history and detailed event data, including domain name, login type, machine name, and IP addresses, which can be enabled via Event Page settings for universal or specific asset events. The 'parameters' and 'request_body_description' fields being empty suggest that event details are likely retrieved based on an ID or filter passed through the path or a query string. This endpoint is central to incident and problem management workflows."}, "llm_generated": {"business_context": {"user_personas": ["NOC users", "Technicians", "IT Operations Personnel", "Administrators"], "primary_use_case": "To retrieve and manage comprehensive details of events, including NBI and incident types, allowing users to view, analyze, acknowledge, and understand impacted services. It is central to incident and problem management workflows."}, "content_for_embedding": "This API endpoint retrieves and manages comprehensive details for various event types, specifically NBI (NOC/Bounded Interface) and incident-related events. It enables users to view and analyze detailed event information such as event ID, creation time, asset details, and event statistics. The API supports actions like acknowledging events and provides insights into impacted services. It also allows for filtering events by dates and accessing detailed event pages with communication tabs, basic details, login/logout history, and detailed event data like domain name, login type, machine name, and IP addresses. This endpoint is crucial for comprehensive event management, analysis, and interaction within incident and problem management workflows.", "semantic_keywords": ["Events", "Event Management", "Details retrieval"], "ontology_classification": {"features": ["event_detection_and_monitoring", "notification_and_incident_generation", "event_listing_and_filtering", "event_management_actions", "event_association"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/list/", "method": "POST", "details": {"operationId": "ux_common_events_events_list_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support"], "primary_use_case": "To manage user accounts, including viewing and editing user details."}, "content_for_embedding": "This API endpoint facilitates the management of user accounts within the system. It allows administrators or authorized personnel to view a list of existing users and perform editing operations on their profiles. This includes functionalities like updating user details and potentially deleting user accounts, all subject to defined roles and privileges.", "semantic_keywords": ["User Management", "Edit", "User Privileges"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/options/", "method": "GET", "details": {"operationId": "ux_common_events_events_options_retrieve", "description": "This API endpoint provides options related to common events, specifically enabling users to view and edit requests. It supports the submission and viewing of older requests, such as access requests and catalog items, and facilitates the management of various request types including incidents, service requests, and change requests. This functionality aligns with capabilities found in requester portals, allowing both internal and external users, including technicians and NOC operators, to manage and track requests.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint contributes to the broader functionality of managing user requests, including the ability to perform quick edits (e.g., status, priority, urgency, severity, impact service, and assignee) or detailed edits of request details. It also supports actions like copying and deleting requests. The context suggests that 'View' and 'Edit' privileges are granular, meaning a user might have the ability to view but not edit, or view and edit specific modules/pages. Although the API specification doesn't list specific parameters, its purpose implies it provides configurable options or metadata relevant to displaying and interacting with event-related requests, rather than directly fetching or manipulating individual requests. Common use cases include populating dropdowns or configuration screens for managing requests in a user interface."}, "llm_generated": {"business_context": {"user_personas": ["Internal Users", "External Users", "Technicians", "NOC Operators", "Users managing requests", "Administrators configuring request management interfaces"], "primary_use_case": "To retrieve configuration options and metadata necessary for managing various types of user requests (incidents, service requests, change requests) within a requester portal, enabling the population of UI elements like dropdowns and supporting granular view and edit privileges."}, "content_for_embedding": "This API endpoint retrieves configuration options and metadata for managing common events and various request types, including incidents, service requests, and change requests. It supports populating user interface elements like dropdowns for quick edits (status, priority, urgency, severity, impact service, assignee) and enabling actions such as viewing, editing, copying, and deleting requests within a requester portal. It provides the necessary data for granular view and edit privileges, rather than directly manipulating individual requests.", "semantic_keywords": ["Request Management", "Dropdown options", "Configuration"], "ontology_classification": {"features": ["request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "request_classification_&_categorization", "request_ownership_&_assignment", "request_search_&_filtering", "request_tagging", "requester_interaction_history_display", "change_management_integration", "customizable_statuses_&_views", "request_lifecycle_management", "request_monitoring_&_tracking", "request_display_views_(panel_&_grid)"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/common/events/events/save-column-config/", "method": "POST", "details": {"operationId": "ux_common_events_events_save_column_config_create", "description": "This API endpoint allows users to save custom column configurations for events. While the original description broadly stated 'users to be viewed or edited,' the context suggests a focus on edit operations and user permissions within modules. Specifically, it enables users to save their preferred column layouts and settings, similar to how users can perform quick edits or detailed edits on requests, or manage data within specific modules if they have the appropriate 'Edit' privileges. This functionality likely falls under general UX customization, allowing users to tailor their display of events.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The primary function implied by the endpoint path '/ux/common/events/events/save-column-config/' is to persist user-specific display preferences related to columns in an events view. Although the provided contexts focus heavily on 'edit' permissions for modules and requests, the endpoint name strongly indicates a column configuration save action. Given that parameters and request body descriptions are empty in the provided spec, it implies that the necessary data for saving the column configuration (e.g., column order, visibility, width, sort preferences) is handled implicitly or through the session context, or that the request body schema is not yet documented. This interaction is common in applications where users can personalize their UI. The 'Edit' privilege, as highlighted in Contexts 2 and 8, is essential for users to perform such operations within any module, reinforcing the idea that this endpoint operates within the bounds of a user's permissions."}, "llm_generated": {"business_context": {"user_personas": ["End-user", "Administrator"], "primary_use_case": "Allows users to save their personalized column display settings for event views, enabling a customized user interface for data presentation."}, "content_for_embedding": "This API endpoint enables users to save their custom column configurations for event displays. This includes preferences like column order, visibility, and sorting, allowing users to tailor how event data is presented. It supports general UX customization and requires appropriate user privileges, similar to how users can manage data within specific modules if they have \"Edit\" permissions. The functionality is akin to \"Log Columns Customization\" where users adjust displayed columns to fit their needs.", "semantic_keywords": ["Column Configuration", "Events", "Customization"], "ontology_classification": {"features": ["event_listing_and_filtering", "customizable_column_selection_(ticket_list)"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/save-tag-to-events/", "method": "POST", "details": {"operationId": "ux_common_events_events_save_tag_to_events_create", "description": "This API endpoint facilitates the tagging of events within the system, specifically associating tags with tickets, requests, changes, problems, or releases. It allows for the modification of these events, enabling users to categorize and manage them efficiently. The tagging action is part of a broader set of quick edit functionalities for detailed event management, including status, priority, and assignee modifications. This endpoint's capabilities are aligned with managing and viewing comprehensive details of various operational events.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The primary function of this endpoint is to 'Tag' events, as indicated by context rank 4. While the original description states the API allows users to be viewed or edited, the more relevant contexts (especially ranks 1, 2, and 4) strongly suggest its purpose is related to managing and tagging 'events' such as tickets, requests, changes, problems, and releases. The summary in the API specification is empty. The 'description' provided in the specification seems generic compared to the insights from the guide documents. No parameters or request body details are provided in the specification or the contexts for this specific call, as the API operates on already identified events within the user interface. It's an internal UX endpoint likely triggered from a user interface action. Detailed event information can be viewed by double-tapping on ticket IDs, as per context rank 1. This endpoint is crucial for quick actions and efficient categorization of operational items."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Help Desk Agent", "ITSM User"], "primary_use_case": "To efficiently categorize and manage operational events (tickets, requests, changes, problems, releases) by applying predefined tags."}, "content_for_embedding": "This API endpoint facilitates the application of predefined tags to various operational events such as tickets, requests, changes, problems, and releases. It is a core component of quick edit functionalities, enabling users to categorize and manage these events efficiently within the system for improved organization and searchability.", "semantic_keywords": ["Tags", "Event Management", "Quick Edit"], "ontology_classification": {"features": ["ticket_tagging", "quick_edit_(key_attributes)", "request_tagging", "problem_tagging", "tag_management"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/suppressed-events/", "method": "GET", "details": {"operationId": "ux_common_events_events_suppressed_events_retrieve", "description": "This API endpoint primarily handles the retrieval and management of 'suppressed events' within the system. While the initial description mentions viewing or editing users, the path and relevant contexts strongly suggest it is focused on events, particularly those that may be suppressed or require specific handling. It allows for the display of events, potentially alongside associated tickets, requests, changes, or problems. Users can typically view details of these events, which may include creation time and date, and access more comprehensive information by navigating to an event-specific page.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The contexts indicate that 'events' can be generated by various means, including network monitoring systems. The ability to 'suppress' them suggests a mechanism for managing or filtering out certain event notifications. While the endpoint's base description mentions 'viewed or edited,' the specific path `/ux/common/events/events/suppressed-events/` points to a specialized function within event management rather than general user management. The API itself does not expect a request body and returns no response body, implying its primary function might be to trigger a UI change or an internal system state update related to suppressed events, or perhaps it's a legacy endpoint whose functionality has evolved beyond its initial description. Further details on how events are suppressed or managed would likely be found in the Event Management module documentation (as hinted by Context Rank 5 and Rank 8)."}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "Network Operations Center (NOC) personnel", "System Administrators", "Event Managers"], "primary_use_case": "To retrieve and manage events that have been suppressed, allowing users to view or understand why certain events are not generating notifications or tickets, thereby reducing noise in event streams."}, "content_for_embedding": "This API endpoint is designed for the retrieval and management of suppressed events within the system. It allows users to view details of events that have been tagged for suppression, meaning they are excluded from triggering notifications or tickets. This functionality is crucial for filtering out non-critical events and managing event noise, providing insights into why specific events are not generating alerts. It supports the display of these events, potentially alongside associated tickets, requests, changes, or problems, and is a key component of event management and monitoring.", "semantic_keywords": ["Event Suppression", "Events", "Event Management", "Retrieval", "Filtering", "Notifications", "Alerts"], "ontology_classification": {"features": ["event_suppression", "event_listing_and_filtering", "event_detection_and_monitoring", "notification_and_incident_generation"], "primary_module": "event_management", "confidence_score": 0.95}}}, {"path": "/ux/common/events/events/suppression-adaptive/", "method": "GET", "details": {"operationId": "ux_common_events_events_suppression_adaptive_retrieve", "description": "This API endpoint is designed to allow users to view and manage existing requests and requests, such as access requests or catalog items. It enables the creation, viewing, and potentially modification of various request types, aligning with functionalities for requesters and technicians as outlined in the provided user guides.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification shows no specific parameters or request body, the context suggests this endpoint is likely involved in submitting, viewing, and potentially editing change requests, service requests, or other incident types. Requesters can typically submit and view their own requests, while technicians or administrators might have permissions to manage these on behalf of requesters. The 'GET' method implies primarily retrieval, but potential 'editing' mentioned in the original description might involve state changes or accessing detailed edit capabilities through subsequent calls. This endpoint is crucial for managing user-submitted items within the system."}, "llm_generated": {"business_context": {"user_personas": ["users", "requesters", "technicians", "administrators"], "primary_use_case": "To view and manage the suppression of events within the system, allowing users to retrieve information about suppressed events and potentially manage their suppression status."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing existing event suppression rules or suppressed events. It allows users, requesters, technicians, and administrators to view and potentially modify the suppression status of various event types or incident types. The GET method primarily supports retrieval of these suppressed events or suppression configurations. This endpoint is crucial for managing and monitoring event flow within the system by controlling which events are suppressed from view or further processing.", "semantic_keywords": ["Event Suppression", "Events", "Retrieval"], "ontology_classification": {"features": ["event_suppression", "event_listing_and_filtering", "event_management_actions"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/update-event-assignee/", "method": "POST", "details": {"operationId": "ux_common_events_events_update_event_assignee_create", "description": "This API endpoint allows for the viewing and editing of user assignments for events, specifically focusing on event assignees. This functionality aligns with managing various roles such as requesters, reporters, change managers, and implementers, as described in the user guides. It explicitly supports 'Quick Edit' actions for event assignees and can also be used for 'Detailed Edit' operations, similar to how requests are managed. The primary function appears to be updating who is responsible for an event, potentially linking to the broader 'Change' module where users with appropriate permissions manage changes and their lifecycle.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification states 'parameters': [], the context suggests typical roles that might be assigned or edited include 'Requester', 'Reported by', 'Change Manager', and 'Change Implementer'. These roles are critical for managing various changes and requests within the system. The 'Edit' privilege allows users to view and perform edit operations within selected modules, implying that specific permissions are required to utilize this endpoint effectively. This endpoint is analogous to the 'Quick Edit' functionality described for requests, which allows modifications to the request assignee, among other attributes. For more detailed edits, a 'Detailed Edit' process might be implied. Users with appropriate permissions are essential for interacting with this API, as outlined in the user guides regarding 'Add' and 'Edit' privileges."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Change Manager", "Change Implementer", "Requester", "Reporter", "Users with Edit privileges"], "primary_use_case": "To update the assigned user or role for a specific event, enabling efficient management of event responsibilities and workflows."}, "content_for_embedding": "This API endpoint allows for the viewing and editing of user assignments for events, specifically focusing on event assignees. It supports both 'Quick Edit' and 'Detailed Edit' operations, similar to how requests are managed. The functionality is crucial for managing various roles such as requesters, reporters, change managers, and implementers, and is linked to the broader 'Change' module. Effective utilization requires appropriate user permissions and privileges.", "semantic_keywords": ["Update", "Events", "Assignee"], "ontology_classification": {"features": ["event_management_actions", "assignee_management", "quick_edit_(key_attributes)", "detailed_ticket_editing", "roles_&_privileges_management", "change_ownership_assignment"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/events/events/update-event-due-date/", "method": "POST", "details": {"operationId": "ux_common_events_events_update_event_due_date_create", "description": "This API endpoint allows for the updating of an event's due date. Primarily, it facilitates the extension of event due dates, a privilege typically reserved for managers, as indicated by the user guide. The endpoint is part of a broader module that manages events, which can include changes, problems, releases, and requests within an organization. It contributes to the 'Event Management' framework, designed to track and manage various organizational changes and issues. This contradicts the original description of 'viewed or edited' users; instead, it pertains to event attributes like the due date.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The primary use case for this endpoint is to extend the 'Due by' date for various organizational events, such as changes, problems, or releases. It is explicitly mentioned that only a manager has the privilege to extend the due date. This aligns with administrative capabilities for managing event timelines. While the API specification did not detail request body parameters, based on the context, the request body should likely include the event identifier and the new due date. This API is critical for managing the lifecycle of events and ensuring timely resolution or progress."}, "llm_generated": {"business_context": {"user_personas": ["Manager", "Administrator"], "primary_use_case": "To update and extend the due date for various organizational events, such as changes, problems, and releases, facilitating effective event timeline management and ensuring timely resolution."}, "content_for_embedding": "This API endpoint facilitates the updating and extension of due dates for various organizational events, including changes, problems, and releases. It is a critical component of the Event Management framework, enabling managers and administrators to manage event timelines and ensure timely resolution or progress.", "semantic_keywords": ["Events", "Update", "Due Date"], "ontology_classification": {"features": ["event_management_actions"], "primary_module": "event_management", "confidence_score": 0.95}}}, {"path": "/ux/common/events/events/update_incident_note/", "method": "POST", "details": {"operationId": "ux_common_events_events_update_incident_note_create", "description": "This API endpoint facilitates the update and addition of notes to existing incidents or tickets. It allows users to input necessary updates and notes into a ticket thread, saving the changes to reflect the updated incident. This functionality is crucial for tracking the progress of requests and maintaining comprehensive records, similar to how users update tickets and add notes by accessing the ticket thread and saving changes.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint directly relates to the process of updating tickets and adding notes, as described in the user guide (Contexts 1 and 2, specifically 'How can I update a ticket and add a note? Access the ticket thread, input the necessary updates and notes, and save the changes.'). While the API specification mentions 'allows users to be viewed or edited,' the context strongly implies a specific focus on updating incident/ticket notes. There is no explicit request body description or parameter details provided in the full API JSON specification, but based on the context, the request would likely involve identifying the incident/ticket and providing the note or update content. Upon a successful update, no response body is returned."}, "llm_generated": {"business_context": {"user_personas": ["Support Agents", "IT Staff", "Incident Managers"], "primary_use_case": "To enable users to update and add notes to existing incidents or tickets, ensuring comprehensive record-keeping and progress tracking."}, "content_for_embedding": "This API endpoint facilitates the update and addition of notes to existing incidents or tickets. It allows users to input necessary updates and notes into a ticket thread, saving the changes to reflect the updated incident. This functionality is crucial for tracking the progress of requests and maintaining comprehensive records, similar to how users update tickets and add notes by accessing the ticket thread and saving changes.", "ontology_classification": {"features": ["internal_notes", "detailed_ticket_editing", "ticket_history_view", "communication_tab_(centralized_history)"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Update", "Notes", "Ticket"]}}, {"path": "/ux/common/events/events/upsert_incident/", "method": "POST", "details": {"operationId": "ux_common_events_events_upsert_incident_create", "description": "This API endpoint facilitates the upsert (update or insert) of incidents within the system. It enables authorized users, such as Technicians (Tech Support User/NOC Operator) and Requesters, to create new incidents or modify existing ones. The functionality supports the comprehensive management of incident tickets, aligning with Infraon's ticket management capabilities where incidents can be raised, tracked, and updated. This includes scenarios where incidents are reported by users or raised on behalf of others.", "tags": ["Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for the Incident Management module, allowing for the recording and updating of tickets, which can originate from various sources (e.g., direct portal logging, email, helpline, or even network monitoring systems via standard APIs). While the API specification currently lists no specific parameters or request body details, typical incident upsert operations would involve fields such as requester information (who the incident is for), reporter information (who is reporting the incident), ticket priority, and status updates. It's designed to support seamless updates to incident details, including assignees and other ticket-related information, similar to the 'quick edit' and 'detailed edit' functionalities mentioned for requests/incidents."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Requester", "NOC Operator"], "primary_use_case": "To create, update, and manage incident tickets within the system."}, "content_for_embedding": "This API endpoint is designed for the upsert (update or insert) of incidents and incident tickets within the system. It allows authorized users, including Technicians and Requesters, to create new incidents or modify existing ones. The functionality supports comprehensive incident ticket management, enabling incidents to be raised, tracked, and updated. Incidents can be reported by users or on behalf of others. This endpoint is crucial for the Incident Management module, facilitating the recording and updating of tickets from various sources like direct portal logging, email, helpline, or network monitoring systems via APIs. Typical operations involve managing requester and reporter information, ticket priority, status updates, and assignees, similar to 'quick edit' and 'detailed edit' functionalities for requests/incidents.", "ontology_classification": {"features": ["ticket_submission_methods", "ticket_state_&_status_management", "detailed_ticket_editing", "quick_edit_(key_attributes)", "requester_search_&_add", "reported_by_(on_behalf_of)", "ticket_assignment_(individual/team/expertise)", "automated_ticket_creation_from_monitoring_systems_(api)", "email-to-ticket_conversion", "new_ticket_creation_interface", "ticket_tracking"], "primary_module": "ticket_management", "confidence_score": 1}, "semantic_keywords": ["Incident Creation", "Incident Update", "Ticket Submission"]}}, {"path": "/ux/common/fieldconfig/field-config/", "method": "GET", "details": {"operationId": "ux_common_fieldconfig_field_config_list", "description": "This endpoint retrieves a paginated list of field configurations for the current organization. These field configurations are integral to managing and customizing various configuration settings, similar to how 'Configuration Profiles' provide a template for network administrators to define device details and connection protocols. This API allows users to view and manage these predefined settings which can include details like device information and connection protocols.", "summary": "Gets a list of field configs", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Field Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/FieldConfigList"}}}}, "description": ""}}, "additional_info": "This API supports pagination to efficiently handle large sets of field configurations. The `items_per_page` parameter dictates the number of results returned per page, while the `page` parameter specifies the particular page number to retrieve. Sorting capabilities are also provided, allowing users to order the results based on a specified `sort` key in either ascending or descending order (controlled by the `reverse` boolean parameter). While the specific types of field configurations are not detailed in the provided contexts, similar 'Configuration Profiles' often include settings for network configuration parameters, security policies, access controls, and performance configurations. This endpoint would be crucial for administrators needing to manage and audit their defined configuration templates within the organization."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT administrators", "Configuration managers"], "primary_use_case": "To retrieve and manage paginated lists of field configurations, which act as templates for various organizational settings, including network device details and connection protocols. This is crucial for administrators to audit and manage predefined configuration templates."}, "content_for_embedding": "This API retrieves a paginated and sortable list of field configurations for the current organization. These configurations are vital for managing and customizing various settings, akin to \"Configuration Profiles\" used by network administrators to define device details and connection protocols. It enables users to view and manage these predefined settings, supporting efficient auditing and management of configuration templates.", "semantic_keywords": ["Configuration Profiles", "Network Configuration", "Pagination"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management", "configuration_retrieval", "pagination", "filtering"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/common/fieldconfig/field-config/", "method": "POST", "details": {"operationId": "ux_common_fieldconfig_field_config_create", "description": "This endpoint is used to create and save a new field configuration for the current organization. Based on the user guide documentation, this 'field_config' is analogous to a 'custom field configuration', which requires a descriptive name and an optional explanation. The configuration process involves defining contents and default values after the initial creation.", "summary": "Creates a new field_config ", "tags": ["Field Configuration"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateFieldConfigSample": {"value": {"field_config": "field_config1"}, "summary": "Create field_config Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The primary use case for this endpoint appears to be the initial creation of custom fields within the system. Users typically enter a descriptive name and an optional explanation for the new field configuration. After creation, further configuration such as setting 'Contents and default value' is possible, which can be done via other related endpoints or user interface actions not directly exposed via this POST endpoint. This field configuration is crucial for dynamic data handling within the application.", "parameters": [{"name": "field_config", "in": "body", "description": "Inferred parameter: field_config", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Power User"], "primary_use_case": "To create and save new custom field configurations within the system."}, "content_for_embedding": "This API creates a new custom field configuration within the system. It allows users, typically administrators, to define a descriptive name and an optional explanation for the field. This initial creation is a prerequisite for further configuration, such as setting contents and default values, which are handled by other processes. The endpoint is essential for enabling dynamic data handling and customization of asset properties within the application.", "semantic_keywords": ["Configuration", "Add", "Customization"], "ontology_classification": {"features": ["customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/fieldconfig/field-config/{id}/", "method": "GET", "details": {"operationId": "ux_common_fieldconfig_field_config_retrieve", "description": "This endpoint retrieves the detailed configuration for a specific field based on its unique identifier (`id`). It is designed to fetch 'field_config' data, which is essentially a type of business rule. The configuration details may include elements like vendors, manufacturer, status, contract name, profile name, OS type, series, and a general description, as seen in various configuration profiles within the system.", "summary": "Gets a field_config with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Field Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string that uniquely identifies the field configuration to be retrieved. This `field_config` is closely related to 'business_rule' details and supports the management of configuration profiles, similar to those described in the context documents for vendors, OS types, and general configuration settings. It's crucial for managing detailed settings within the organization, such as those impacting contract information or general system behavior. This API forms part of the UX common field configuration management within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Configurator", "Developer"], "primary_use_case": "Retrieving specific field configurations or business rules for system management and display."}, "content_for_embedding": "This API retrieves the detailed configuration for a specific field, identified by its unique ID. These field configurations are essentially business rules that define various system settings, including vendors, manufacturer, status, contract name, profile name, OS type, series, and a general description. It is a core component of the UX common field configuration management, enabling access to detailed settings crucial for managing system behavior and configuration profiles.", "semantic_keywords": ["Configuration Retrieval", "Business Rule Management", "Field Configuration"], "ontology_classification": {"features": ["business_rules_for_auto-assignment", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/fieldconfig/field-config/{id}/", "method": "PUT", "details": {"operationId": "ux_common_fieldconfig_field_config_update", "description": "This endpoint enables the modification of an existing `field_config` specific to the current organization, identified by its unique `id`. It allows authorized users to make changes to the content, settings, or configuration of a selected `field_config`, similar to editing a Configuration Item (CI) or a contract as described in various user guides. This `field_config` likely defines the structure and type for various data fields within the system, ensuring data consistency and proper representation.", "summary": "Edits the field_config with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Field Configuration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string that uniquely identifies the `field_config` to be edited. The request body is used to send the updated `field_config` data. It supports a wide range of primitive and compound data types, similar to a serializer for documents. Recognized primitive fields include `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, and `DateField`. Compound fields such as `ListField` and `DictField` are also supported, mapping to corresponding DRF fields with respect to nested field specification. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers if depth is greater than 0. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are also supported. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Configurator", "Developer"], "primary_use_case": "To modify the structure, content, and settings of existing data field configurations within the system."}, "content_for_embedding": "This API allows authorized users to modify an existing `field_config` identified by its unique ID. A `field_config` defines the structure and type for various data fields across the system, ensuring data consistency and proper representation. It supports a wide range of primitive data types such as StringField, IntField, BooleanField, and compound types like ListField and DictField. This functionality is similar to editing a Configuration Item (CI) or a contract.", "semantic_keywords": ["Field Configuration", "Edit", "Configuration"], "ontology_classification": {"features": ["general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/fieldconfig/field-config/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_fieldconfig_field_config_destroy", "description": "This endpoint is used to permanently delete an existing `field_config` by its unique `id` for the current organization. This action is irreversible and removes the selected configuration from the system. It aligns with the user guide's description of deleting configuration profiles, which involves selecting the profile and confirming the deletion.", "summary": "Deletes the field_config with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Field Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required to specify which `field_config` to delete. As noted in the user guides regarding similar deletions ('Configuration Profile' or 'baseline scheduler Profile'), typically a confirmation step (\"Click 'Yes' to delete...\") is involved on the UI, which this API call would trigger or be a part of. It's important to note that, like certain profile deletions, a `field_config` might not be deletable if it is currently associated with other ongoing processes or dependencies (e.g., 'Profile cannot be deleted if associated with a download job'). Developers should handle potential pre-condition failures or conflicts related to such associations."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "To permanently delete an existing field configuration by its unique ID, removing it from the system. This is an irreversible action for managing system configurations."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific field configuration, identified by its unique ID, for the current organization. This action removes the selected configuration from the system. Similar to other configuration profile deletions, a confirmation step is typically involved, and the deletion might fail if the field configuration is currently associated with ongoing processes or dependencies, such as download jobs.", "semantic_keywords": ["Delete", "Field Configuration", "Configuration Management"], "ontology_classification": {"features": ["network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/fieldconfig/field-config/field_permission/", "method": "POST", "details": {"operationId": "ux_common_fieldconfig_field_config_field_permission_create", "description": "This endpoint is used to retrieve the configured field permissions for a specific workflow status. These field permissions, also known as Field Constraints, define role-based privileges on incident components within the workflow. For example, fields can be configured to be hidden or made mandatory for specific statuses and roles, or the worklog can be made mandatory for certain roles and statuses. This allows for advanced configurations where, for an IT Support Operator role, while an incident status is 'Working (In Progress)', all closure-related fields (like Closure Note, Closed By, Close Type, Agreed Closure Date, and Actual) can be enforced or restricted based on the defined permissions.", "summary": "Get the configured field for the workflow", "tags": ["Field Configuration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to accommodate various primitive and compound field types for document serialization. Recognized primitive fields include StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, GeoJsonBaseField, and DateField. Compound fields like ListField and DictField are supported, mapping to corresponding DRF fields with respect to nested field specifications. ReferenceField is handled like a ForeignKey, and for nested serializers where depth is greater than 0, an autogenerated serializer is used. Otherwise, it defaults to `str(id)`. EmbeddedDocumentField also supports autogenerated nested serializers for non-zero depth. Generic fields such as GenericReferenceField and GenericEmbeddedDocumentField are handled by their own corresponding serializer fields. Fields like FileField, ImageField, and BinaryField are not well supported or are untested. All other fields are mapped to DocumentField. This API is essential for managing the granular control over data input and visibility throughout different stages and roles within a workflow."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Operator", "Developer"], "primary_use_case": "To define and retrieve role-based field permissions and constraints for various workflow statuses, enabling granular control over data input and visibility within incident management and other workflows."}, "content_for_embedding": "This API retrieves and manages configured field permissions, also known as Field Constraints, for specific workflow statuses. It defines role-based privileges on incident components, allowing fields to be hidden or made mandatory based on roles and statuses. This enables granular control over data input and visibility throughout different stages and roles within a workflow, such as enforcing or restricting closure-related fields for IT Support Operators during 'Working (In Progress)' incident status.", "ontology_classification": {"features": ["roles_&_privileges_management", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Field Configuration", "API Permissions", "User Privileges"]}}, {"path": "/ux/common/fieldconfig/field-config/options/", "method": "GET", "details": {"operationId": "ux_common_fieldconfig_field_config_options_retrieve", "description": "This endpoint retrieves the default options required for configuring fields within the system. It is integral to creating and managing configuration parameters and custom field configurations. This includes options for defining a parameter's label, value, and description, similar to how configuration parameters and custom fields are described in system guides. While the primary purpose is to get default options, these options are essential for subsequent steps like adding configuration parameters or completing custom field configurations.", "summary": "Get the options for the Field configuration", "tags": ["Field Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FieldConfigList"}}}, "description": ""}}, "additional_info": "This API provides the necessary default settings and types that govern how fields are configured, such as the initial options for 'Parameter', 'Value', and 'Description' when defining a configuration parameter. Based on the context, these options are used for various types of configurations, including comprehensive configuration profiles managed by network administrators. This endpoint does not require any parameters, providing a static set of default options. These options are fundamental for setting up custom fields, which can then have their contents and default values further defined via other processes (as hinted in context 4 and 5)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Configurator", "Developer"], "primary_use_case": "To retrieve the default options and settings required for configuring fields across the system, enabling the creation and management of configuration parameters and custom field configurations."}, "content_for_embedding": "This API endpoint retrieves the foundational default options for configuring fields within the system. These options include essential parameters like label, value, and description, which are critical for setting up and managing various configuration parameters and custom fields. The retrieved options are fundamental for subsequent system configuration and customization processes.", "semantic_keywords": ["Field Configuration", "Configuration Options", "System Customization"], "ontology_classification": {"features": ["infraon_configuration.general_settings", "infraon_configuration.configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/imacd/conversation/", "method": "GET", "details": {"operationId": "ux_common_imacd_conversation_retrieve", "description": "This API endpoint provides functionalities to view and edit processes within the IMACD (Install, Move, Add, Change, Dispose) module of the Infraon platform. It allows users to manage organizational changes smoothly by providing a structured way to handle system installations, coherent movements, planned inclusions, adaptations, and organized disposals. The endpoint is integral to the lifecycle management of assets and processes within the IMACD stages, enabling users to perform actions such as adding new processes (e.g., Installation, Move, Change), defining process names, and providing descriptions.", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The IMACD module, as described in the user guides, offers a well-organized path for handling various shifts, from setting up new systems to retiring outdated resources, ensuring smoother transitions and minimizing disruptions. While the current API definition does not specify parameters or request bodies for 'viewing' or 'editing' conversation processes, user guide contexts repeatedly mention 'Add process' functionality for Install, Move, and Change operations. Each of these operations involves entering details like 'Process Name' and 'Description' through call-out boxes in the UI, which implies that 'editing' would involve similar fields. The endpoint's utility is tied to managing these specific IMACD process lifecycles. There is no response body defined for this GET request, suggesting its primary role may be to initiate or manage the state of a 'conversation' related to these IMACD processes, rather than retrieve detailed data directly via this specific GET call."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "IT Managers", "Asset Managers", "Service Desk Agents"], "primary_use_case": "To manage the lifecycle of IT assets and organizational changes through the IMACD (Install, Move, Add, Change, Dispose) processes, enabling users to view, edit, and initiate conversations related to these processes."}, "content_for_embedding": "This API endpoint facilitates the viewing, editing, and management of processes within the IMACD (Install, Move, Add, Change, Dispose) module. It supports the lifecycle management of assets and organizational changes by enabling users to add new processes, define process names, and provide descriptions. The endpoint also plays a role in initiating or managing conversations related to these IMACD processes, allowing for comprehensive tracking and administration of installations, movements, additions, changes, and disposals.", "semantic_keywords": ["IMACD Process Management", "Lifecycle Management", "Process Conversation"], "ontology_classification": {"features": ["imacd_process_management", "process_creation", "process_identification_&_tracking", "process_status_&_priority_management", "assignee_management", "asset_association_&_classification", "process_deletion", "process_search_&_filtering", "multiple_view_options", "comprehensive_communication_&_notes", "real-time_activity_tracking"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}}}, {"path": "/ux/common/imacd/conversation/", "method": "POST", "details": {"operationId": "ux_common_imacd_conversation_create", "description": "This API endpoint facilitates the management and interaction with IMACD (Install, Move, Add, Change, Dispose) processes within the Infraon platform. It allows users to view or edit existing IMACD conversation details, which are integral to managing organizational changes smoothly. This includes capabilities to define and update processes for activities such as adding and installing new assets, moving assets, or making changes to existing IT infrastructure, as described in the IMACD module guides. The endpoint supports the saving of process details once all required information within the IMACD stages has been correctly filled.", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "The `/ux/common/imacd/conversation/` endpoint specifically targets the 'conversation' aspect of an IMACD process. While the primary action is POST, implying creation or submission of data, the description also mentions 'viewed or edited'. This suggests that the POST method might encompass actions like initiating a new IMACD process or submitting updates to an ongoing one. The context highlights that IMACD processes involve various fields such as 'Name', 'Process Name', and 'Description' which are crucial for defining the process. Although the API specification currently lists no specific request body parameters, based on typical IMACD workflows in the Infraon platform, a request body would likely contain attributes related to the IMACD process definition (e.g., process name, description, assigned user, location, etc.) for either creating a new conversation or updating an existing one. Success of the POST operation typically results in the creation or successful update of the IMACD process, as indicated by the guide's mention of 'The following IMACD process will be created successfully.' This endpoint is a core component for streamlining transformations from setting up new systems to retiring outdated resources by ensuring smoother transitions and minimizing disruptions."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Service desk agents", "Users responsible for IMACD processes"], "primary_use_case": "This API endpoint facilitates the management and interaction with IMACD (Install, Move, Add, Change, Dispose) processes within the Infraon platform. It allows users to create, view, and edit IMACD conversation details, streamlining organizational changes related to IT infrastructure."}, "content_for_embedding": "This API endpoint (`/ux/common/imacd/conversation/`) facilitates the creation, management, and interaction with IMACD (Install, Move, Add, Change, Dispose) processes within the Infraon platform. It allows users to initiate new IMACD processes or submit updates to existing ones, encompassing details such as process name, description, status, priority, assignee, asset details, shipment information, and communication logs. The API is crucial for streamlining organizational changes related to IT infrastructure by enabling the definition and update of processes for activities like adding new assets, moving assets, or making changes to existing IT infrastructure.", "semantic_keywords": ["IMACD Process Management", "Add", "Process Conversation"], "ontology_classification": {"features": ["imacd_process_management", "process_creation", "process_identification_&_tracking", "process_status_&_priority_management", "assignee_management", "asset_association_&_classification", "shipment_address_management", "comprehensive_communication_&_notes", "attachment_management", "real-time_activity_tracking", "gate_pass_management", "asset_count_display", "asset-specific_comments", "process_search_&_filtering", "multiple_view_options", "workflow_visualization_reference", "installation_workflow", "movement_workflow", "addition_workflow", "change_workflow", "disposal_workflow"], "primary_module": "imacd_(beta)", "confidence_score": 1}}}, {"path": "/ux/common/imacd/conversation/{id}/", "method": "GET", "details": {"operationId": "ux_common_imacd_conversation_retrieve_2", "description": "This API endpoint allows users to view or edit a specific IMACD (Install, Move, Add, Change, Destroy) conversation. The 'id' path parameter uniquely identifies the IMACD process, enabling retrieval of its details for display or subsequent modification. This aligns with the various IMACD process types (Installation, Move, Change, Destroy, Addition) and the ability to search and filter these processes as described in the Infraon user guide.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that corresponds to the unique IMACD ID associated with a process. This endpoint is typically used to retrieve the current state of an IMACD process before making changes, fitting within the larger workflow of managing IMACD stages and defining processes. While the current method is GET, which is for viewing, it is implied that editing capabilities would be exposed through other HTTP methods (e.g., PUT/PATCH) on the same resource.\n\nUse Cases:\n*   Retrieving details of a specific IMACD process for display in a user interface.\n*   Fetching process details prior to initiating an 'edit' operation for fields like Name, Description, Assignee, Location, etc.\n\nContexts indicate that IMACD processes can be 'Installation', 'Move', 'Change', 'Addition', or 'Destroy' processes, each with distinct fields and states. This endpoint provides access to the 'conversation' or state of any of these process types identified by its ID."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Asset Managers", "Users involved in asset lifecycle management"], "primary_use_case": "To retrieve and view the detailed information of a specific IMACD (Install, Move, Add, Change, Destroy) process, enabling users to understand its current state or prepare for subsequent modifications."}, "content_for_embedding": "This API endpoint facilitates the retrieval of comprehensive details for a specific IMACD (Install, Move, Add, Change, Destroy) process, identified by its unique ID. It provides access to all relevant information, including basic process details, current status, process type, priority, shipment and asset details, communication logs, attachments, and recent activities. This functionality is essential for displaying IMACD process information within user interfaces and for pre-populating data fields when initiating edit operations. The API supports various IMACD process types such as Installation, Move, Change, Addition, and Destroy, offering a centralized view of their respective states and conversations.", "semantic_keywords": ["IMACD Process Management", "Details retrieval", "Process Conversation"], "ontology_classification": {"features": ["imacd_process_management", "process_identification_&_tracking", "comprehensive_communication_&_notes", "real-time_activity_tracking"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}}}, {"path": "/ux/common/imacd/conversation/{id}/", "method": "PUT", "details": {"operationId": "ux_common_imacd_conversation_update", "description": "This API endpoint allows for the viewing and editing of an existing IMACD (Installation, Move, Add, Change, Destroy) conversation or process using a PUT method. It is part of the `/ux/common/imacd/conversation/{id}/` path, where `id` represents the unique identifier of the IMACD process. This endpoint is crucial for managing the lifecycle of assets within the Infraon platform's IMACD module, facilitating updates to processes after their initial creation, such as those initiated through 'Add process -> Install', 'Move', or 'Change' operations.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the IMACD conversation or process to be viewed or edited. While the API specification currently indicates 'No response body', successful operations would typically reflect the updated state. The various IMACD processes (Install, Move, Add, Change, Destroy) involve defining a 'Process Name' and 'Description', among other fields, which can be modified via this endpoint. This endpoint saves the details of the IMACD process once all fields are correctly filled, similar to how new processes are saved after creation. It's an integral part of managing ongoing IMACD tasks rather than initiating new ones."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "Service Desk Agents"], "primary_use_case": "To update and manage existing IMACD (Installation, Move, Add, Change, Destroy) processes or conversations, facilitating the modification of process details and lifecycle management of assets within the Infraon platform."}, "content_for_embedding": "This API endpoint, `PUT /ux/common/imacd/conversation/{id}/`, is designed for viewing and editing an existing IMACD (Installation, Move, Add, Change, Destroy) conversation or process. It uses a unique `id` to identify the specific IMACD process to be updated. This is crucial for managing the lifecycle of assets within the Infraon platform's IMACD module, allowing for modifications to processes after their initial creation, such as those initiated through 'Install', 'Move', or 'Change' operations. It enables updates to fields like 'Process Name' and 'Description', saving the modified details of the ongoing IMACD task rather than initiating new ones.", "semantic_keywords": ["IMACD Process Management", "Update", "Lifecycle Management"], "ontology_classification": {"features": ["imacd_process_management", "installation_workflow", "movement_workflow", "addition_workflow", "change_workflow", "process_identification_&_tracking"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}}}, {"path": "/ux/common/imacd/conversation/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_imacd_conversation_destroy", "description": "This API endpoint allows for the deletion of a specific IMACD (Install, Move, Add, Change, Destroy) conversation or process. The endpoint is identified by a unique conversation `id`. Deleting an IMACD process effectively removes it from the system, preventing it from being viewed or edited further, which is a key process within the Infraon platform's IMACD module.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the IMACD conversation or process to be deleted. While the original description mentioned \"viewed or edited\", the DELETE method specifically pertains to removal. The IMACD module in the Infraon platform manages distinct processes such as Installation, Movement, Addition, Change, and Destruction, each of which can be created and subsequently managed (including deletion via this API). There is no response body upon successful deletion, indicating a simple acknowledgment of the operation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "IMACD Process Manager"], "primary_use_case": "Deleting IMACD conversations or processes within the Infraon platform."}, "content_for_embedding": "This API allows for the deletion of a specific IMACD (Install, Move, Add, Change, Destroy) conversation or process in the Infraon platform. It uses a unique conversation ID to identify and remove the process, preventing further viewing or editing. This is a critical function within the IMACD module for managing the lifecycle of these processes.", "semantic_keywords": ["Delete", "IMACD Process Management", "Process Conversation"], "ontology_classification": {"features": ["process_deletion", "imacd_process_management"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}}}, {"path": "/ux/common/imacd/imacd/", "method": "GET", "details": {"operationId": "ux_common_imacd_imacd_retrieve", "description": "This endpoint provides a comprehensive list of IMACD (Install, Move, Add, Change, and Dispose) processes within the current organization. IMACD offers a structured approach to efficiently manage organizational changes by combining system installation, coherent movement, planned inclusions, adaptation, and organized disposal. The API allows for pagination and sorting of the retrieved process list, making it easier to manage and display. Each IMACD process includes details such as a description, status (e.g., New or Waiting for Approval), process type (e.g., Move, Add), and priority. This endpoint facilitates the retrieval of necessary information to monitor and manage the lifecycle of IT assets and resources.", "summary": "Gets a list of IMACD process", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint allows users to retrieve a paginated and sortable list of IMACD processes. The `items_per_page` and `page` query parameters are mandatory for pagination control. Optional parameters include `reverse` for sorting order (ascending/descending) and `sort` to specify the key for sorting (e.g., by Status, Process Type, or Priority). While the API specification does not detail specific sortable keys, the context suggests possible values such as 'Status', 'Process Type', 'Priority', 'Creation Time', 'Assignee', 'IMACD ID', and 'Process Name'. These processes can be further detailed to view information like Assignee, Asset Count, and process actions such as deletion. Note that the API response currently has 'No response body' indicated in the specification; however, based on the description, a list of IMACD process objects is expected in the response."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Asset Managers", "Operations Managers"], "primary_use_case": "To retrieve, monitor, and manage the lifecycle of IT assets and resources through IMACD (Install, Move, Add, Change, Dispose) processes, facilitating organizational change management."}, "content_for_embedding": "This API endpoint allows users to retrieve a comprehensive, paginated, and sortable list of IMACD (Install, Move, Add, Change, and Dispose) processes. It is designed to help organizations efficiently manage changes related to IT assets and resources throughout their lifecycle. Each IMACD process includes critical details such as description, current status (e.g., New, Waiting for Approval), process type (e.g., Move, Add), and priority. Users can control the number of items per page and navigate through different pages. Additionally, the list can be sorted by various criteria including Status, Process Type, Priority, Creation Time, Assignee, IMACD ID, and Process Name, and the sorting order can be reversed. This endpoint is crucial for monitoring and managing the entire lifecycle of IT assets and resources within an organization.", "ontology_classification": {"features": ["imacd_process_management", "process_search_&_filtering", "process_status_&_priority_management", "process_identification_&_tracking", "assignee_management", "asset_association_&_classification", "real-time_activity_tracking", "comprehensive_communication_&_notes", "attachment_management", "gate_pass_management", "workflow_visualization_reference", "shipment_address_management", "location_management"], "primary_module": "imacd_(beta)", "confidence_score": 1}, "semantic_keywords": ["IMACD Process Management", "Asset Management", "Pagination"]}}, {"path": "/ux/common/imacd/imacd/", "method": "POST", "details": {"operationId": "ux_common_imacd_imacd_create", "description": "This endpoint facilitates the creation of a new IMACD (Install, Move, Add, Change, Dispose) record within the system for the current organization. IMACD provides a structured approach to manage organizational changes, encompassing system installation, physical movement of IT assets and resources, planned additions of new IT components (like software and hardware), adaptations, and organized disposal of outdated resources. This process is crucial for ensuring smoother transitions, minimizing disruptions, and streamlining IT resource management. This specific POST request is used to save a comprehensive IMACD process, capturing various details related to the IT change, including the type of IMACD (e.g., 'imacd' as specified in the example), requester information, asset details, and various configuration and status parameters.", "summary": "Creates a new imacd ", "tags": ["IMACD"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateIMACDSample": {"value": {"summary": "VPN Issue", "description": "", "catalogue": "", "impact_service": "", "impact_service_name": "service1", "service_classification": "", "service_classification_name": "", "state": "Open", "state_id": 1, "status": "New", "status_id": 1, "urgency_id": 3, "urgency": "Low", "priority_id": 5, "priority": "Very Low", "impact": "Department", "impact_id": 3, "imacd_source": {"id": 1, "name": "Web"}, "resolution_type": "", "is_first_call": "", "imacd_type": {"id": 1, "name": "imacd", "prefix": "inci"}, "requester_id": "", "requester_name": "Test req", "requester_email": "testreq@gmail.com", "requester_phone": "7778889999", "reporter_name": "", "reporter_email": "", "reporter_phone": "", "watcher": "", "hold_config": {}, "support_group": "", "assignee": "", "escalation": {}, "tag": [], "assets": [], "config": {}, "reference": {}, "template_info": {}, "closure_info": {}, "approval_config": {}, "custom_field": [{}], "attachment": {}, "api_link": {}, "lock_config": {}, "field_service_config": {}, "closure_note": ""}, "summary": "Create IMACD Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The `imacd` process details in the request body are comprehensive. Key fields include `summary`, `description`, `imacd_type` (e.g., 'imacd' with a 'prefix' like 'inci'), `requester_id`, `requester_name`, and `requester_email`. The `state` and `status` fields reflect the current workflow stage (e.g., 'Open' and 'New'). Various other fields like `urgency`, `priority`, `impact`, `assets`, `custom_field`, and `attachment` allow for a detailed definition of the IMACD request. While the endpoint indicates 'No response body', a successful creation implies the IMACD process has been saved. As per the context, after filling all details, clicking 'Save' will successfully create the IMACD process, which could involve phases like 'Add', 'Move', or 'Destroy' based on the specific IMACD type being initiated.", "parameters": [{"name": "summary", "in": "body", "description": "Inferred parameter: summary", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "catalogue", "in": "body", "description": "Inferred parameter: catalogue", "required": true, "schema": {"type": "string"}}, {"name": "impact_service", "in": "body", "description": "Inferred parameter: impact_service", "required": true, "schema": {"type": "string"}}, {"name": "impact_service_name", "in": "body", "description": "Inferred parameter: impact_service_name", "required": true, "schema": {"type": "string"}}, {"name": "service_classification", "in": "body", "description": "Inferred parameter: service_classification", "required": true, "schema": {"type": "string"}}, {"name": "service_classification_name", "in": "body", "description": "Inferred parameter: service_classification_name", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}, {"name": "state_id", "in": "body", "description": "Inferred parameter: state_id", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "body", "description": "Inferred parameter: status", "required": true, "schema": {"type": "string"}}, {"name": "status_id", "in": "body", "description": "Inferred parameter: status_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency_id", "in": "body", "description": "Inferred parameter: urgency_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency", "in": "body", "description": "Inferred parameter: urgency", "required": true, "schema": {"type": "string"}}, {"name": "priority_id", "in": "body", "description": "Inferred parameter: priority_id", "required": true, "schema": {"type": "string"}}, {"name": "priority", "in": "body", "description": "Inferred parameter: priority", "required": true, "schema": {"type": "string"}}, {"name": "impact", "in": "body", "description": "Inferred parameter: impact", "required": true, "schema": {"type": "string"}}, {"name": "impact_id", "in": "body", "description": "Inferred parameter: impact_id", "required": true, "schema": {"type": "string"}}, {"name": "imacd_source", "in": "body", "description": "Inferred parameter: imacd_source", "required": true, "schema": {"type": "string"}}, {"name": "resolution_type", "in": "body", "description": "Inferred parameter: resolution_type", "required": true, "schema": {"type": "string"}}, {"name": "is_first_call", "in": "body", "description": "Inferred parameter: is_first_call", "required": true, "schema": {"type": "string"}}, {"name": "imacd_type", "in": "body", "description": "Inferred parameter: imacd_type", "required": true, "schema": {"type": "string"}}, {"name": "requester_id", "in": "body", "description": "Inferred parameter: requester_id", "required": true, "schema": {"type": "string"}}, {"name": "requester_name", "in": "body", "description": "Inferred parameter: requester_name", "required": true, "schema": {"type": "string"}}, {"name": "requester_email", "in": "body", "description": "Inferred parameter: requester_email", "required": true, "schema": {"type": "string"}}, {"name": "requester_phone", "in": "body", "description": "Inferred parameter: requester_phone", "required": true, "schema": {"type": "string"}}, {"name": "reporter_name", "in": "body", "description": "Inferred parameter: reporter_name", "required": true, "schema": {"type": "string"}}, {"name": "reporter_email", "in": "body", "description": "Inferred parameter: reporter_email", "required": true, "schema": {"type": "string"}}, {"name": "reporter_phone", "in": "body", "description": "Inferred parameter: reporter_phone", "required": true, "schema": {"type": "string"}}, {"name": "watcher", "in": "body", "description": "Inferred parameter: watcher", "required": true, "schema": {"type": "string"}}, {"name": "hold_config", "in": "body", "description": "Inferred parameter: hold_config", "required": true, "schema": {"type": "string"}}, {"name": "support_group", "in": "body", "description": "Inferred parameter: support_group", "required": true, "schema": {"type": "string"}}, {"name": "assignee", "in": "body", "description": "Inferred parameter: assignee", "required": true, "schema": {"type": "string"}}, {"name": "escalation", "in": "body", "description": "Inferred parameter: escalation", "required": true, "schema": {"type": "string"}}, {"name": "tag", "in": "body", "description": "Inferred parameter: tag", "required": true, "schema": {"type": "string"}}, {"name": "assets", "in": "body", "description": "Inferred parameter: assets", "required": true, "schema": {"type": "string"}}, {"name": "config", "in": "body", "description": "Inferred parameter: config", "required": true, "schema": {"type": "string"}}, {"name": "reference", "in": "body", "description": "Inferred parameter: reference", "required": true, "schema": {"type": "string"}}, {"name": "template_info", "in": "body", "description": "Inferred parameter: template_info", "required": true, "schema": {"type": "string"}}, {"name": "closure_info", "in": "body", "description": "Inferred parameter: closure_info", "required": true, "schema": {"type": "string"}}, {"name": "approval_config", "in": "body", "description": "Inferred parameter: approval_config", "required": true, "schema": {"type": "string"}}, {"name": "custom_field", "in": "body", "description": "Inferred parameter: custom_field", "required": true, "schema": {"type": "string"}}, {"name": "attachment", "in": "body", "description": "Inferred parameter: attachment", "required": true, "schema": {"type": "string"}}, {"name": "api_link", "in": "body", "description": "Inferred parameter: api_link", "required": true, "schema": {"type": "string"}}, {"name": "lock_config", "in": "body", "description": "Inferred parameter: lock_config", "required": true, "schema": {"type": "string"}}, {"name": "field_service_config", "in": "body", "description": "Inferred parameter: field_service_config", "required": true, "schema": {"type": "string"}}, {"name": "closure_note", "in": "body", "description": "Inferred parameter: closure_note", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "IT Managers", "Service Desk Agents", "IT Technicians", "Employees initiating IT changes"], "primary_use_case": "To create and manage structured IT changes (Install, Move, Add, Change, Dispose) within an organization, streamlining IT resource management and ensuring smoother transitions for IT components."}, "content_for_embedding": "This API facilitates the creation of new IMACD (Install, Move, Add, Change, Dispose) records. It allows for the comprehensive capture of details related to IT changes, including summary, description, IMACD type, requester information, current state and status, urgency, priority, impact, associated assets, and attachments. This endpoint is crucial for managing IT asset lifecycles and organizational changes, ensuring efficient and structured handling of installations, movements, additions, changes, and disposals of IT resources.", "semantic_keywords": ["IMACD Process Management", "Add", "Asset management"], "ontology_classification": {"features": ["imacd_process_management", "process_creation", "process_status_&_priority_management", "assignee_management", "asset_association_&_classification", "attachment_management", "comprehensive_communication_&_notes"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}}}, {"path": "/ux/common/imacd/imacd/{id}/", "method": "GET", "details": {"operationId": "ux_common_imacd_imacd_retrieve_2", "description": "This endpoint is used to retrieve comprehensive details for a specific IMACD (Install, Move, Add, Change, Dispose) process within the current organization. IMACD provides a structured way to manage organizational changes, encompassing system installation, coherent movement, planned inclusions, adaptation, and organized disposal. By providing a unique `IMACD ID`, users can fetch information such as the process name, status (e.g., New, Waiting for Approval), state, creation time, assignee, process type (e.g., Move, Add), and priority (low, medium, high, critical). This allows for detailed inquiry into ongoing or completed IMACD operations.", "summary": "Gets a imacd process with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `id` path parameter corresponds to the `IMACD ID` mentioned in the user guide and is a mandatory string that uniquely identifies the IMACD process. While this endpoint focuses on fetching details, the IMACD processes themselves can be managed (searched, filtered, added, deleted) through other related functionalities, as described in the Infinity User Guide. Details such as 'Asset Count' and 'Asset Details' might also be associated with an IMACD process, providing further context on the assets involved in the Install, Move, Add, Change, or Dispose operation."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Project managers", "Users involved in asset and organizational changes"], "primary_use_case": "To retrieve comprehensive details of a specific IMACD (Install, Move, Add, Change, Dispose) process within an organization, enabling detailed inquiry into ongoing or completed operations."}, "content_for_embedding": "This API retrieves comprehensive details for a specific IMACD (Install, Move, Add, Change, Dispose) process using its unique `IMACD ID`. It provides information such as the process name, status (e.g., New, Waiting for Approval), state, creation time, assignee, process type (e.g., Move, Add), priority (low, medium, high, critical), asset count, and asset details. This allows for detailed inquiry into ongoing or completed IMACD operations.", "semantic_keywords": ["IMACD Process Management", "Details retrieval", "IMACD"], "ontology_classification": {"features": ["process_identification_&_tracking", "process_status_&_priority_management", "assignee_management", "asset_association_&_classification", "asset_count_display", "process_search_&_filtering"], "primary_module": "imacd_(beta)", "confidence_score": 1}}}, {"path": "/ux/common/imacd/imacd/{id}/", "method": "PUT", "details": {"operationId": "ux_common_imacd_imacd_update", "description": "This endpoint is used to edit (update) an existing IMACD process for the current organization. IMACD stands for Install, Move, Add, Change, and Dispose, providing a structured way to manage organizational changes related to IT assets and resources. This includes updating details for system installations, asset movements, planned integrations of new IT components, adaptations, and organized disposal processes. The endpoint facilitates smoother transitions, minimizes disruptions, and streamlines changes by allowing modifications to an IMACD process identified by its unique ID. This aligns with the 'Save' functionality mentioned in the user guides, indicating that changes to an IMACD process are saved once filled correctly.", "summary": "Edits the imacd with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier for the IMACD process to be edited. While the API specification states 'No response body', successful updates typically mean the details of the IMACD process identified by `id` have been modified. This API is crucial for managing the lifecycle of IT equipment, including categories like laptops and desktops, as well as software applications and hardware upgrades, within an organization. It helps in maintaining accurate records of asset management activities, such as those that might appear in an IMACD grid or panel view. The `id` itself is the IMACD ID associated with the specific process."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Asset managers", "Operations teams", "Service desk agents"], "primary_use_case": "To enable organizations to modify and save changes to existing IMACD (Install, Move, Add, Change, Dispose) processes, ensuring accurate and up-to-date management of IT assets and resources throughout their lifecycle."}, "content_for_embedding": "This API endpoint allows for the modification and saving of existing IMACD (Install, Move, Add, Change, Dispose) processes within an organization. It is identified by a unique IMACD ID and supports updates to various details related to IT asset lifecycle management, including system installations, asset movements, new IT component integrations, adaptations, and disposal processes. The functionality aligns with the 'Save' action in user interfaces, ensuring that changes to an IMACD process, such as its description, status, process type, priority, associated assets, shipping details, communication logs, and attachments, are recorded and maintained for accurate asset management and streamlined organizational changes.", "ontology_classification": {"features": ["imacd_process_management", "change_workflow", "process_identification_&_tracking", "process_status_&_priority_management", "assignee_management", "asset_association_&_classification", "shipment_address_management", "asset-specific_comments", "comprehensive_communication_&_notes", "attachment_management", "gate_pass_management", "workflow_visualization_reference"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}, "semantic_keywords": ["Update", "IMACD", "Lifecycle Management"]}}, {"path": "/ux/common/imacd/imacd/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_imacd_imacd_destroy", "description": "This endpoint facilitates the deletion of an existing IMACD (Install, Move, Add, Change, Dispose) process within the current organization. IMACD provides a structured approach for managing organizational changes related to IT assets and processes, ensuring smooth transitions and minimizing disruptions. Deleting an IMACD process effectively removes its record and associated details, which is crucial for managing the lifecycle of IT resources, especially during the 'Dispose' or decommissioning stage.", "summary": "Deletes the imacd with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the IMACD process to be deleted. Deleting an IMACD process is an action that typically corresponds to 'Click to delete the process' as described in the user guide contexts. Such processes can pertain to various types like 'Move', 'Add', or the 'Dispose' (Decommissioning) phase, which involves the planned and secure retirement or removal of hardware and software assets. It's important to ensure that the IMACD process being deleted is no longer required, as this action is irreversible and effectively removes the record from the system. This API directly addresses the 'Delete' action mentioned in the 'Actions' section of the IMACD process guides."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "IT Operations Personnel", "Asset Managers"], "primary_use_case": "To permanently remove an IMACD process record, typically for IT asset decommissioning or cleanup, ensuring accurate lifecycle management."}, "content_for_embedding": "This API endpoint allows for the irreversible deletion of an existing IMACD (Install, Move, Add, Change, Dispose) process. It is primarily used to remove records associated with the disposal or decommissioning phase of IT assets, ensuring that outdated or retired hardware and software assets are properly removed from the system. The API requires a unique IMACD ID to identify the process for deletion. This functionality is crucial for maintaining an accurate IT asset lifecycle and supports actions like 'Click to delete the process' as described in user guides.", "ontology_classification": {"features": ["process_deletion", "imacd_process_management", "disposal_workflow"], "primary_module": "imacd_(beta)", "confidence_score": 1}, "semantic_keywords": ["Delete", "IMACD", "IMACD Process Management"]}}, {"path": "/ux/common/imacd/imacd/add-attachment/", "method": "POST", "details": {"operationId": "ux_common_imacd_imacd_add_attachment_create", "description": "This endpoint is used to add new attachments to an existing IMACD process. IMACD stands for Install, Move, Add, Change, and Dispose, a structured approach within the Infraon platform for managing organizational changes related to IT components. This specific endpoint facilitates the \"Add\" phase of IMACD by allowing the inclusion of documents or files aligned to a particular IMACD process, enhancing communication and record-keeping for activities such as planned integrations of new IT components (software applications, hardware upgrades). The attachments will be displayed on the default page, providing an overview of all aligned attachments for that process.", "summary": "Add attachments for the selected imacd process.", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is critical for users managing IT asset lifecycles within Infraon, specifically when new assets or components are being brought into the infrastructure. It allows for the attachment of supporting documentation, which is displayed alongside other process details. While the API specification does not detail request body parameters, based on context from the user guide, this endpoint aligns with the 'Attachments' section where users can 'Click to add new attachments'. It is part of the overall workflow where details are filled, saved, and then attachments, comments, or notes can be added to the IMACD process. The successful creation of an IMACD process (Addition, Installation, Move, Change stages) precedes the ability to add attachments to it."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Managers", "IT Administrators", "Users involved in IMACD processes"], "primary_use_case": "Facilitate the addition of supporting documentation and files to existing IMACD processes within the Infraon platform, enhancing record-keeping and communication for IT component lifecycle management."}, "content_for_embedding": "This API endpoint allows users to add new attachments, such as documents or files, to an existing IMACD (Install, Move, Add, Change, Dispose) process within the Infraon platform. It specifically supports the 'Add' phase of IMACD, enabling the inclusion of supporting documentation for IT component lifecycle management, including planned integrations of new IT components. These attachments are displayed on the default process page, providing a centralized overview and enhancing communication and record-keeping for IT-related changes. This is a crucial step for users managing IT asset lifecycles, as attachments can only be added after an IMACD process has been successfully created.", "ontology_classification": {"features": ["attachment_management", "imacd_process_management", "addition_workflow"], "primary_module": "imacd_(beta)", "confidence_score": 1}, "semantic_keywords": ["Attachments", "IMACD", "Add"]}}, {"path": "/ux/common/imacd/imacd/attachment/", "method": "GET", "details": {"operationId": "ux_common_imacd_imacd_attachment_retrieve", "description": "This endpoint is used to fetch all attachments (documents) aligned to a selected IMACD (Install, Move, Add, Change, Delete) process. It provides a default view of all associated attachments for the specific process being viewed. This can include various documents related to the process, similar to how attachments are displayed for a request in other systems. The attachments are crucial for understanding the full context and documentation of an IMACD stage.", "summary": "Gets attachments for the selected imacd process.", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint specifically focuses on attachments related to an IMACD process, distinct from general asset details or comments. There are no specific parameters or request body required for this GET request, as it likely operates within the context of an already selected IMACD process on the UI. While the original API specification states 'No response body', based on the context, this endpoint is expected to display or provide access to a list of attachment details or the attachments themselves, functioning as the 'Default Page' for attachments within the IMACD process flow. It complements functionalities like adding new attachments through other dedicated actions."}, "llm_generated": {"business_context": {"user_personas": ["IMACD Process Managers", "Administrators", "Support Staff", "Auditors"], "primary_use_case": "To retrieve and display all attachments associated with a specific IMACD (Install, Move, Add, Change, Delete) process, providing essential documentation and context for that stage."}, "content_for_embedding": "This GET API endpoint retrieves all documents and files attached to a selected IMACD (Install, Move, Add, Change, Delete) process. It serves as the default view for attachments within an IMACD stage, offering crucial context and documentation. The endpoint does not require any specific parameters as it operates within the context of an already identified IMACD process, and is expected to return details or access to the list of associated attachments.", "ontology_classification": {"features": ["attachment_management"], "primary_module": "imacd_(beta)", "confidence_score": 1}, "semantic_keywords": ["Attachments", "IMACD", "Retrieval"]}}, {"path": "/ux/common/imacd/imacd/gatepass-detail/{id}/", "method": "GET", "details": {"operationId": "ux_common_imacd_imacd_gatepass_detail_retrieve", "description": "API endpoint that allows Business Profile to be viewed or edited.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Logistics personnel", "Administrators", "IMACD process managers"], "primary_use_case": "Retrieving detailed information for a specific gate pass within the IMACD process."}, "content_for_embedding": "This API endpoint allows for the retrieval of comprehensive details of a specific gate pass by its unique identifier. It is part of the IMACD (Installation, Movement, Addition, Change, Disposal) module, enabling users to view all relevant information pertaining to a particular gate pass, such as its status, associated assets, and other logistical data.", "semantic_keywords": ["Gate Pass", "Details retrieval", "IMACD"], "ontology_classification": {"features": ["gate_pass_management"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/common/imacd/imacd/history/", "method": "GET", "details": {"operationId": "ux_common_imacd_imacd_history_retrieve", "description": "This endpoint retrieves the complete history for a selected IMACD (Installation, Movement, Addition, Change, or Deletion) process. It provides an audit trail ensuring full visibility into each IMACD's lifecycle, detailing when the IMACD ID was created, modified, or updated, and any changes in its status, location, or ownership. This history can track changes for reporting or troubleshooting purposes.", "summary": "Gets history for the selected imacd.", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "Developers can expect to find details similar to:\n- When the asset ID related to the IMACD process was created, modified, or updated.\n- Any changes in the asset's status, location, or ownership within the context of the IMACD.\n\nWhile the original specification does not list parameters, typical usage scenarios from the context suggest that the history might be searchable by:\n- IMACD name or ID.\n- User who made changes.\n\nAdditionally, filtering by a specified date range (e.g., Current Hour, Last 30 minutes, Last Hour) is a common requirement for viewing asset history. The asset history details are often available for download in CSV format for easier analysis. This endpoint is crucial for analyzing key information and understanding the complete lifecycle of IMACD processes."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Auditor", "Reporting Analyst"], "primary_use_case": "This API retrieves the comprehensive history of a selected IMACD (Installation, Movement, Addition, Change, or Deletion) process, serving as an audit trail for full visibility into its lifecycle. It details creation, modification, updates, and changes in status, location, or ownership, enabling effective reporting and troubleshooting."}, "content_for_embedding": "This GET endpoint, `ux_common_imacd_imacd_history_retrieve`, provides the complete history for a specific IMACD process. It functions as a crucial audit trail, offering full visibility into the IMACD's lifecycle by detailing all changes, including creation, modification, updates, and shifts in status, location, or ownership. This historical data is vital for reporting, troubleshooting, and understanding the complete journey of an IMACD. While the original specification doesn't list parameters, typical usage suggests search capabilities by IMACD name or ID, user who made changes, and filtering by date ranges (e.g., Current Hour, Last 30 minutes, Last Hour). The history details are also available for download in CSV format, facilitating further analysis. The documentation highlights features like Timeline View and Grid View for visualizing asset history, and the ability to search for required communication within the process.", "ontology_classification": {"features": ["imacd_process_management", "process_identification_&_tracking", "process_search_&_filtering", "multiple_view_options", "real-time_activity_tracking"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}, "semantic_keywords": ["IMACD", "Asset History", "Audit Trail"]}}, {"path": "/ux/common/imacd/imacd/options/", "method": "GET", "details": {"operationId": "ux_common_imacd_imacd_options_retrieve", "description": "This `/ux/common/imacd/imacd/options/` API endpoint provides functionalities related to managing Business Profiles. It allows users to view, edit, and potentially delete or clone existing Business Profiles. Such profiles are central to managing various settings and configurations within the system, including access methods (like SSH and Telnet), and they can be configured with specific details like profile name, description, and visibility (Public/Private). The endpoint supports the capability to update profile settings such as commands, visibility, and user tags.", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically deals with 'options' related to Business Profiles, which implies fetching configurable choices or attributes tied to these profiles. While the API specification did not list any parameters or a request body, the contexts indicate that Business Profiles can be edited or deleted, suggesting that operations involving specific profile identifiers or modified data would be handled either through other related endpoints, or implicitly within the context of this 'options' endpoint if it's primarily used for retrieving options related to existing profiles. The ability to 'View-only field' as mentioned in Context Rank 1 might indicate that some fields related to profiles are displayed but not editable. The 'Edit' action involves updating profile settings such as commands, visibility, and user tags, providing more granular control over the profile's behavior. The API is likely part of a module where Business Profiles can be added, edited, or deleted, as referenced in Context Rank 2 and further detailed in Context Rank 3 and 6."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel"], "primary_use_case": "To manage configuration profiles, including viewing, editing, cloning, and deleting Business Profiles, Authentication Profiles, and Authorization Profiles, which define access methods and settings for network devices."}, "content_for_embedding": "This API endpoint, `/ux/common/imacd/imacd/options/`, is designed for managing Business Profiles, which include Authentication and Authorization Profiles. It allows users to view, edit, clone, and delete these profiles. The endpoint specifically provides configurable options and attributes related to these profiles, which define settings such as access methods (SSH, Telnet), commands, visibility, and user tags for network devices. It supports searching, filtering, and bulk actions on these profiles, enabling network administrators to efficiently control device setup and access.", "semantic_keywords": ["Configuration Profiles", "IMACD", "Access Control"], "ontology_classification": {"features": ["addition_workflow", "change_workflow", "process_deletion", "process_search_&_filtering", "imacd_process_management"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/common/imacd/imacd/save-rich-text/", "method": "POST", "details": {"operationId": "ux_common_imacd_imacd_save_rich_text_create", "description": "This endpoint facilitates the saving of rich text data, specifically in the context of the IMACD (Install, Move, Add, Change, Destroy) module. It is primarily used to store comments or notes related to assets or processes within the IMACD workflow, such as adding comments about an asset (e.g., 'Handle with care') or saving details for the creation of an IMACD process. Upon successful saving, the associated IMACD process or details will be updated or created.", "summary": "Save rich text data", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is part of the user experience (UX) common services within the IMACD module. While the API specification indicates no specific request body description, it's highly probable that the rich text data (e.g., a comment or notes) will be sent within the request body. The 'Save' action in the user guide strongly implies that this endpoint is triggered when a user clicks 'Save' after inputting details within the IMACD interface, leading to the persistence of those details and the successful creation or update of an IMACD process (e.g., Addition, Move, Destroy)."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Administrator", "IMACD User"], "primary_use_case": "To enable users to save rich text data, such as comments or notes, associated with assets or processes within the IMACD workflow, leading to the creation or update of IMACD processes."}, "content_for_embedding": "This API endpoint allows users to save rich text data, including comments and notes, within the IMACD (Install, Move, Add, Change, Destroy) module. It is crucial for updating existing IMACD processes or creating new ones by persisting user-inputted details. For example, a user can add comments about an asset like 'Handle with care' or save specific details required for an IMACD process creation.", "semantic_keywords": ["Comments", "IMACD", "Content Management"], "ontology_classification": {"features": ["asset-specific_comments", "comprehensive_communication_&_notes", "process_creation", "imacd_process_management"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}}}, {"path": "/ux/common/imacd/imacd/verify-gatepass-asset/", "method": "POST", "details": {"operationId": "ux_common_imacd_imacd_verify_gatepass_asset_create", "description": "API endpoint that allows Business Profile to be viewed or edited.", "tags": ["IMACD"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "Asset Managers", "Administrators"], "primary_use_case": "To verify the status and validity of a gatepass asset within the IMACD process."}, "content_for_embedding": "This API endpoint is designed to verify the status of a gatepass asset. It is part of the IMACD (Installation, Movement, Addition, Change, Disposal) module, specifically related to gate pass management. This allows for programmatic checking of asset gatepass validity.", "ontology_classification": {"features": ["gate_pass_management"], "primary_module": "imacd_(beta)", "confidence_score": 1}, "semantic_keywords": ["IMACD", "Gate Pass", "Asset Verification"]}}, {"path": "/ux/common/kb/kb/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_list", "description": "This endpoint provides a comprehensive list of all active Knowledge Base (KB) articles available for the currently authenticated organization. A Knowledge Base serves as a central repository for information regarding products, services, and related topics, designed to facilitate self-service and reduce reliance on help desk interactions. The articles retrieved can be organized into 'Categories' as defined in the associated Service Catalog. This endpoint enables users to easily discover and access information relevant to common problems and solutions within the organization.", "summary": "Gets list of KB", "parameters": [{"name": "items_per_page", "required": false, "in": "query", "description": "Number of results to return per page.", "schema": {"type": "integer"}}, {"name": "offset", "required": false, "in": "query", "description": "The initial index from which to return the results.", "schema": {"type": "integer"}}], "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "properties": {"count": {"type": "integer", "example": 123}, "next": {"type": "string", "nullable": true, "format": "uri", "example": "http://api.example.org/accounts/?offset=400&items_per_page=100"}, "previous": {"type": "string", "nullable": true, "format": "uri", "example": "http://api.example.org/accounts/?offset=200&items_per_page=100"}, "results": {"type": "array", "items": {"count": 2, "next": null, "previous": null, "results": [{"kb_id": "105687373427397104616", "config": {"title": "Test KB", "kbtype": "article", "state": "Active", "status": "Approved", "department": "IT", "catalogue_service": "IT Services", "approver": 1, "reviewer": 1, "valid_till": "2021-06-25", "is_archive": false, "is_private": false, "is_security": false, "is_disabled_update": false, "show_contact": false, "email": null, "mobile": null, "tags": [], "users": [], "teams": [], "keywords": ["test", "IT"], "content": {"info": "This is a test KB", "attachments": []}, "faq": null, "known_error": null, "solution": null, "api_link_data": {"external_url": null, "description": null}}}, {"kb_id": "105687410610271163368", "config": {"title": "Test KB1", "kbtype": "article", "state": "Active", "status": "Approved", "department": "IT", "catalogue_service": "IT Services", "approver": 1, "reviewer": 1, "valid_till": "2021-06-25", "is_archive": false, "is_private": false, "is_security": false, "is_disabled_update": false, "show_contact": false, "email": null, "mobile": null, "tags": [], "users": [], "teams": [], "keywords": ["test", "IT"], "content": {"info": "This is a test KB", "attachments": []}, "faq": null, "known_error": null, "solution": null, "api_link_data": {"external_url": null, "description": null}}}]}}}}}}, "description": ""}}, "additional_info": "The listing of KBs is paginated. Use the `items_per_page` query parameter to control the number of KB articles returned per page, and the `offset` parameter to specify the starting index of the results. While this endpoint retrieves KB articles, the user guide indicates that individual KBs support various actions such as bookmarking for frequent access, marking articles as 'helpful,' rating and reviewing, adding comments, and 'liking' an article. Privileged users also have capabilities to 'Edit' or 'Delete' KBs, but these actions are not handled by this specific GET endpoint.\n\nThis API is primarily useful for populating user interfaces where a list of KBs is required for browsing and searching. It underpins the ability for users to proactively find solutions, contributing to the organization's self-service capabilities."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Support Agents", "Administrators"], "primary_use_case": "To enable users to discover and access a comprehensive list of active Knowledge Base (KB) articles for self-service and information retrieval, reducing reliance on help desk interactions."}, "content_for_embedding": "This API retrieves a paginated list of active Knowledge Base (KB) articles, including their titles, types (article, FAQ, known error, solution), status, and associated keywords. It supports self-service by allowing users to browse and search for information, solutions, and common problems within an organization. Articles are categorized based on the Service Catalog. While this GET endpoint focuses on listing, the retrieved KBs are designed to support various user interactions such as bookmarking, rating, commenting, and privileged user content management.", "semantic_keywords": ["Knowledge Base", "Self-service", "Pagination"], "ontology_classification": {"features": ["knowledge_access_&_utilization", "search_functionality", "seamless_navigation", "multiple_content_types_support", "content_tagging", "recent_articles_display", "article_sorting_options", "service_catalog_integration_for_categorization", "article_bookmarking", "helpful_marking", "article_rating_&_reviews", "article_commenting", "article_liking", "privileged_user_content_management"], "primary_module": "knowledge_base", "confidence_score": 0.95}}}, {"path": "/ux/common/kb/kb/", "method": "POST", "details": {"operationId": "ux_common_kb_kb_create", "description": "This endpoint is used to save a new Knowledge Base (KB) for the current organization. A KB serves as a central repository for information, articles, and guides related to products, services, and common topics, enabling self-service and reducing the need for direct contact with help desks. This API facilitates the creation of new KB articles, which will initially be in a 'Draft' state by default and can be 'Published' later. It allows for the inclusion of various details such as content, keywords, department, and assigned approvers and reviewers to streamline knowledge management.", "summary": "Creates a new KB  ", "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateKBSample": {"value": {"kbtype": "article", "title": "Test KB1", "keywords": ["test", "IT"], "content": {"info": "This is a test KB", "attachments": []}, "state": "Active", "status": "Approved", "department": "IT", "catalogue_service": "IT Services", "approvers": "Shyam M", "reviewers": "Samaresh M", "valid_till": "2021-06-25", "is_private": false, "approver": 1, "reviewer": 1}, "summary": "Create KB Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"status": "success", "id": "105687410610271163368", "message": "Message.msg_kb_created", "msg": "Knowledge Base Info created successfully"}, "examples": {"ResponseSample": {"value": {"status": "success", "id": "105687410610271163368", "message": "Message.msg_kb_created", "msg": "Knowledge Base Info created successfully"}, "summary": "Response Sample"}}}}, "description": ""}, "200": {"content": {"application/json": {"schema": {"status": "success", "id": "105687410610271163368", "message": "Message.msg_kb_updated", "msg": "Knowledge Base Info updated successfully"}, "examples": {"ResponseSample": {"value": {"status": "success", "id": "105687410610271163368", "message": "Message.msg_kb_created", "msg": "Knowledge Base Info created successfully"}, "summary": "Response Sample"}}}}, "description": ""}, "500": {"content": {"application/json": {"schema": {"status": "failed", "id": "-1", "message": "Error.err_kb_save_failed", "msg": "Failed to Save KB"}}}, "description": ""}}, "additional_info": "The default status of a newly created KB is 'Draft'; it must be explicitly 'Published' to become generally accessible. While the example usage shows various fields like 'kbtype', 'title', 'keywords', 'content', 'approvers', 'reviewers', and 'valid_till', the specific requirements for each field should be validated against the API's request body schema (which is not fully detailed in the provided JSON spec but inferred from the example usage). Privileged users can later edit or delete the created KB. Once published, KBs can be rated, commented on, and bookmarked.", "parameters": [{"name": "kbtype", "in": "body", "description": "Inferred parameter: kbtype", "required": true, "schema": {"type": "string"}}, {"name": "title", "in": "body", "description": "Inferred parameter: title", "required": true, "schema": {"type": "string"}}, {"name": "keywords", "in": "body", "description": "Inferred parameter: keywords", "required": true, "schema": {"type": "string"}}, {"name": "content", "in": "body", "description": "Inferred parameter: content", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "body", "description": "Inferred parameter: status", "required": true, "schema": {"type": "string"}}, {"name": "department", "in": "body", "description": "Inferred parameter: department", "required": true, "schema": {"type": "string"}}, {"name": "catalogue_service", "in": "body", "description": "Inferred parameter: catalogue_service", "required": true, "schema": {"type": "string"}}, {"name": "approvers", "in": "body", "description": "Inferred parameter: approvers", "required": true, "schema": {"type": "string"}}, {"name": "reviewers", "in": "body", "description": "Inferred parameter: reviewers", "required": true, "schema": {"type": "string"}}, {"name": "valid_till", "in": "body", "description": "Inferred parameter: valid_till", "required": true, "schema": {"type": "string"}}, {"name": "is_private", "in": "body", "description": "Inferred parameter: is_private", "required": true, "schema": {"type": "string"}}, {"name": "approver", "in": "body", "description": "Inferred parameter: approver", "required": true, "schema": {"type": "string"}}, {"name": "reviewer", "in": "body", "description": "Inferred parameter: reviewer", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Knowledge Base Authors/Managers", "Administrators", "End-users/Customers"], "primary_use_case": "To enable organizations to create, manage, and disseminate knowledge base articles and information for self-service and efficient knowledge management."}, "content_for_embedding": "This API endpoint facilitates the creation of new Knowledge Base (KB) articles. It allows for the submission of various details such as the KB type (e.g., article, FAQ, known error), title, keywords, content (including attachments), state (draft or published), status, department, service catalog association, and assigned approvers and reviewers. The primary goal is to establish a central repository for information, enabling self-service and reducing reliance on direct support.", "ontology_classification": {"features": ["article_authoring", "content_curation", "knowledge_access_&_utilization", "knowledge_sharing", "direct_kb_creation", "content_tagging", "content_archiving_&_deletion", "multiple_content_types_support", "privileged_user_content_management", "attachment_management", "draft/publish_workflow", "service_catalog_integration_for_categorization"], "primary_module": "knowledge_base", "confidence_score": 1}, "semantic_keywords": ["Knowledge Base", "Article Authoring", "Content Management"]}}, {"path": "/ux/common/kb/kb/{id}/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_retrieve", "description": "This endpoint retrieves the detailed information for a specific Knowledge Base (KB) article, identified by its unique ID, within the current organization. A KB is a self-service repository containing information about products, services, and related topics, designed to help users find solutions without contacting the help desk. The retrieved details can include the article's content, categories, and other metadata relevant to its purpose in enabling contactless, round-the-clock self-service.", "summary": "Gets a kb with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"id": "60d3a9321e54f93b4eca4292", "kb_id": "105687373427397104616", "display_id": "article00001", "created_by": "21", "organization": "105685081033968456680", "creation_time": "2021-06-23T21:35:46.899000+05:30", "last_update_time": null, "is_deleted": false, "config": {"title": "Test KB", "kbtype": "article", "state": "Active", "status": "Approved", "department": "IT", "catalogue_service": "IT Services", "approver": 1, "reviewer": 1, "valid_till": "2021-06-25", "is_archive": false, "is_private": false, "is_security": false, "is_disabled_update": false, "show_contact": false, "email": null, "mobile": null, "tags": [], "users": [], "teams": [], "keywords": ["test", "IT"], "content": {"info": "This is a test KB", "attachments": []}, "faq": null, "known_error": null, "solution": null, "api_link_data": {"external_url": null, "description": null}}}}}, "description": ""}}, "additional_info": "The `id` parameter is a required path parameter used to specify the unique identifier of the Knowledge Base article to be fetched. It is crucial for retrieving the correct KB details. This API is commonly used when a user needs to view a specific article from the Knowledge Base module, which facilitates searching for solutions to common problems."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Support Agents"], "primary_use_case": "To enable users to retrieve detailed information about specific Knowledge Base (KB) articles for self-service problem-solving and information access."}, "content_for_embedding": "This API endpoint allows for the retrieval of comprehensive, detailed information for a specific Knowledge Base (KB) article using its unique identifier. It supports self-service by providing access to article content, categories, and other metadata, enabling users to find solutions to common problems without requiring direct help desk intervention. The API facilitates contactless, round-the-clock access to a self-service repository of information.", "semantic_keywords": ["Knowledge Base", "Retrieval", "Self-service"], "ontology_classification": {"features": ["knowledge_access_&_utilization", "search_functionality", "user-friendly_content_presentation"], "primary_module": "knowledge_base", "confidence_score": 0.95}}}, {"path": "/ux/common/kb/kb/{id}/", "method": "PUT", "details": {"operationId": "ux_common_kb_kb_update", "description": "This `/ux/common/kb/kb/{id}/` endpoint is designed to allow privileged users to edit an existing Knowledge Base (KB) article within the system. A KB is described as a repository of information (e.g., about products, services, related topics) intended for self-service, making it easier for users to find solutions without contacting a help desk. The editing functionality is crucial for maintaining accurate and up-to-date knowledge articles. This action is one of several available on a KB, including commenting, liking, and viewing version history. Edited KBs, which default to 'Draft' status, can be changed to 'Published' status once ready.", "summary": "Edits the kb with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required and uniquely identifies the KB article to be edited. The request body for this PUT operation is a serializer for Documents, supporting various primitive fields such as `StringField`, `URLField`, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields like `ListField` and `DictField` are mapped to DRF fields, and `ReferenceField` is handled similarly to `ForeignKey`. Be aware that `EmbeddedDocumentField` also autogenerates a nested serializer for non-zero depth, but there's a note in the specification indicating this might be incorrect and should be fixed. Fields like `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested, and other unspecified fields may not work as expected."}, "llm_generated": {"business_context": {"user_personas": ["privileged users"], "primary_use_case": "To allow privileged users to edit and update existing Knowledge Base (KB) articles, ensuring the information remains accurate and current."}, "content_for_embedding": "This API endpoint allows privileged users to edit an existing Knowledge Base (KB) article identified by its unique ID. The PUT method is used to update the content of the KB article, which can include various primitive and compound fields. This functionality is essential for maintaining accurate and up-to-date knowledge articles within the system. Edited articles default to 'Draft' status and can be subsequently published. This API supports JSON, x-www-form-urlencoded, and multipart/form-data content types for the request body, which conforms to the KBList schema. The `id` path parameter is required. This action is part of a broader set of KB functionalities including commenting, liking, and viewing version history.", "ontology_classification": {"features": ["privileged_user_content_management", "draft/publish_workflow", "content_curation"], "primary_module": "knowledge_base", "confidence_score": 0.9}, "semantic_keywords": ["Edit", "Knowledge Base", "Update"]}}, {"path": "/ux/common/kb/kb/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_kb_kb_partial_update", "description": "This PATCH API endpoint is designed for managing and updating specific knowledge base (KB) articles. A Knowledge Base serves as a central repository for information, including articles and guides about products, services, and related topics, primarily intended for self-service to help users find solutions without needing to contact support. This endpoint facilitates the modification of an existing KB article, identified by its unique `id`.\n\nThe request body for this endpoint supports various document fields, including primitive types (StringField, IntField, BooleanField, DateTimeField, etc.) and compound fields like ListField and DictField. It also handles ReferenceField and EmbeddedDocumentField for nested data structures. This flexibility allows for comprehensive updates to different properties of a knowledge base article.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedKBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedKBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedKBList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter in the path is a mandatory string that uniquely identifies the knowledge base article to be updated. The serializer for the request body (`request_body_description`) indicates support for a wide range of data types, enabling updates to diverse content within a KB article.\n\nWhile many field types are well-supported, the documentation notes potential issues with `FileField`, `ImageField`, and `BinaryField`, indicating they are not well supported or untested. Developers should exercise caution when attempting to update these field types and may need alternative methods or workarounds.\n\nKey functionalities associated with Knowledge Base articles, as noted in the context, include: bookmarking, marking as helpful, rating, and commenting. While this specific PATCH endpoint is for updating the article content itself, these associated actions highlight the broader ecosystem of KB management."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Content Creator", "Knowledge Base Manager"], "primary_use_case": "To update existing knowledge base (KB) articles, allowing privileged users to modify content, correct information, or add new details to published or draft articles."}, "content_for_embedding": "This PATCH API endpoint allows for the modification of existing knowledge base (KB) articles, identified by a unique ID. It supports updates to various document fields, including primitive and compound types, enabling comprehensive content management for KB articles. This API is crucial for maintaining up-to-date and accurate information within the knowledge base, which serves as a self-service repository for users seeking solutions.", "ontology_classification": {"features": ["privileged_user_content_management", "article_authoring", "multiple_content_types_support"], "primary_module": "knowledge_base", "confidence_score": 0.95}, "semantic_keywords": ["Update", "Knowledge Base", "Content Management"]}}, {"path": "/ux/common/kb/kb/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_kb_kb_destroy", "description": "This endpoint is used to permanently delete an existing Knowledge Base (KB) for the current organization. A Knowledge Base serves as a self-service repository of information about products, services, and related topics, intended to help users find solutions without contacting the help desk. Deleting a KB is an irreversible action. Note that if a KB is associated with categories or services, those related entities may also be deleted upon KB removal.", "summary": "Deletes the KB with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"status": "success", "id": "", "message": "Message.msg_kb_deleted", "msg": "Knowledge Base Info deleted successfully"}}}, "description": ""}, "500": {"content": {"application/json": {"schema": {"status": "error", "id": "", "message": "Error.err_delete_kb", "msg": "Not able to delete this KB"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is mandatory and represents the unique identifier of the Knowledge Base to be deleted. Exercise caution when using this endpoint as deletions are permanent. While the context mentions bulk actions for indices, this specific endpoint targets a single KB deletion. Deleting a KB may impact reporting on incident reports and incident summaries if they were connected to articles within the deleted KB."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "Managing Knowledge Base content by enabling the permanent deletion of existing Knowledge Bases."}, "content_for_embedding": "This API endpoint allows for the permanent and irreversible deletion of a specific Knowledge Base (KB) identified by its unique ID. A Knowledge Base is a self-service repository of information. Deleting a KB is a critical action as it is irreversible and may also lead to the deletion of associated categories or services. It can also impact reporting related to incident reports and summaries if they were linked to articles within the deleted KB. This operation is typically performed by privileged users.", "ontology_classification": {"features": ["content_archiving_&_deletion", "privileged_user_content_management"], "primary_module": "knowledge_base", "confidence_score": 1}, "semantic_keywords": ["Delete", "Knowledge Base", "Irreversible"]}}, {"path": "/ux/common/kb/kb/add-attachment/", "method": "POST", "details": {"operationId": "ux_common_kb_kb_add_attachment_create", "description": "This endpoint facilitates the addition of new attachments to a selected knowledge base (KB) entry. Users can upload documents either by dragging and dropping them or by selecting them through a file browser. After uploading, the attachment can be categorized (e.g., 'default category', 'ticket screenshot', 'team docs', 'Procurement', 'Service', 'Retirement Documents') and described. This process is crucial for enriching KB articles with relevant supporting files.", "summary": "Add attachments for the selected kb.", "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to handle various primitive and compound field types for documents, such as StringField, URLField, IntField, BooleanField, and DateTimeField. Complex structures like ListField and DictField are also supported, mapping to corresponding DRF fields for nested data. ReferenceField and EmbeddedDocumentField are processed for nested serialization when the depth is greater than 0, otherwise, they are handled differently (ReferenceField as str(id), EmbeddedDocumentField skipped for zero depth). Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are managed by their own corresponding serializer fields. It's noted that fields such as FileField, ImageField, and BinaryField are not well supported or untested. The maximum file size for image attachments (PNG, JPG, JPEG) is 20 MB. This endpoint is commonly used when updating KB articles or adding supporting documentation related to tickets and assets."}, "llm_generated": {"business_context": {"user_personas": ["Knowledge Base Administrators", "Content Creators", "IT Support Staff"], "primary_use_case": "To allow users to add and categorize supporting documents and files as attachments to existing knowledge base articles, thereby enriching the content and providing comprehensive information. It also supports adding documentation related to tickets and assets."}, "content_for_embedding": "This API endpoint enables users to upload and attach various types of documents and files to a selected knowledge base (KB) entry. Users can add attachments via drag-and-drop or file browsing, categorize them (e.g., 'ticket screenshot', 'team docs'), and provide descriptions. This functionality is vital for enhancing KB articles with relevant supporting files and is also used for adding documentation related to tickets and assets. It supports various primitive and compound field types for documents, with a maximum image file size of 20 MB.", "semantic_keywords": ["Attachments", "Knowledge Base", "Add"], "ontology_classification": {"features": ["attachment_management"], "primary_module": "knowledge_base", "confidence_score": 1}}}, {"path": "/ux/common/kb/kb/attachment/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_attachment_retrieve", "description": "This endpoint retrieves all attachments associated with a specific Knowledge Base (KB) article. It is designed to show documents and files that have been affixed to the KB. This functionality aligns with typical Knowledge Base systems where KBs can have associated files for comprehensive information.", "summary": "Gets attachments for the selected kb.", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "This endpoint specifically targets attachments for 'Knowledge Bases' (KB) as indicated by the path '/ux/common/kb/kb/attachment/' and clarified by highly relevant contexts (e.g., Rank 1, 3, 6). While other contexts mention 'attachments' for requests, problems, or tickets, the specific path for this API endpoint points directly to KBs. Users should be aware that the 'selected kb' mentioned in the summary implies that a specific KB context, likely provided through a session or preceding interaction, is used to fetch these attachments."}, "llm_generated": {"business_context": {"user_personas": ["End-users accessing KB articles", "Knowledge Base administrators", "Content editors"], "primary_use_case": "Retrieving attachments associated with Knowledge Base articles to provide comprehensive information to users."}, "content_for_embedding": "This API retrieves all attachments for a specific Knowledge Base (KB) article. It allows users to access documents and files linked to KB entries, enhancing the comprehensiveness of the knowledge base content.", "semantic_keywords": ["Attachments", "Knowledge Base", "Retrieval"], "ontology_classification": {"features": ["attachment_management"], "primary_module": "knowledge_base", "confidence_score": 1}}}, {"path": "/ux/common/kb/kb/bookmarks/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_bookmarks_retrieve", "description": "This endpoint allows users to retrieve a list of all their bookmarked Knowledge Base (KB) articles. Bookmarking is a user action to save frequently accessed articles for easy access. These bookmarked articles are typically displayed in a dedicated panel within the application interface.", "summary": "Get the bookmarked KB's", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "KB articles can be bookmarked by users as part of a set of actions available on each KB, which also includes marking articles as 'helpful,' adding ratings and reviews, commenting, and liking. Bookmarked posts are designed to provide convenient, quick access to relevant information. This endpoint is crucial for populating the user's customized view of frequently utilized knowledge. There are no request parameters or request body required for this GET operation."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Support Agents"], "primary_use_case": "To allow users to retrieve a list of their bookmarked Knowledge Base (KB) articles for quick and easy access, populating a personalized view of frequently utilized knowledge."}, "content_for_embedding": "This API endpoint enables users to retrieve a comprehensive list of all their previously bookmarked Knowledge Base (KB) articles. The primary purpose is to provide convenient and quick access to frequently utilized information, allowing for the population of a user's customized view within the application interface. It supports user actions like saving articles for easy retrieval and is crucial for personalizing the knowledge access experience. No request parameters or body are required for this GET operation.", "semantic_keywords": ["Knowledge Base", "Bookmark", "Retrieval"], "ontology_classification": {"features": ["article_bookmarking", "knowledge_access_&_utilization"], "primary_module": "knowledge_base", "confidence_score": 0.95}}}, {"path": "/ux/common/kb/kb/bulk-create/", "method": "POST", "details": {"operationId": "ux_common_kb_kb_bulk_create_create", "description": "This is used to dump data from csv upload", "summary": "Get data from csv upload", "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Content Manager", "Data Entry Specialist"], "primary_use_case": "This API facilitates the bulk creation and import of data into the system, primarily through CSV file uploads. It enables users to efficiently populate databases, such as a knowledge base, with multiple records at once by uploading pre-formatted CSV files."}, "content_for_embedding": "This API allows for the bulk creation and import of data, primarily from CSV file uploads, into the system. It supports dumping data from CSV files, enabling users to efficiently add multiple records, such as knowledge base articles or requester details, by uploading a pre-filled CSV template. The process involves downloading a CSV template, populating it with relevant data, and then uploading the edited file for import and validation.", "semantic_keywords": ["CSV Import", "Knowledge Base", "Add"], "ontology_classification": {"features": ["direct_kb_creation", "content_curation", "attachment_management"], "primary_module": "knowledge_base", "confidence_score": 0.9}}}, {"path": "/ux/common/kb/kb/categories/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_categories_retrieve", "description": "This endpoint retrieves a pre-configured list of categories available for the Knowledge Base (KB). These categories are dynamically displayed and accessible to users, providing an organized view of information. Examples of such categories often include 'Software', 'Hardware', 'Lease', and 'Service', reflecting the types of contracts or articles within the system. The information in the knowledge base is grouped into 'Categories' defined in the 'Service Catalog'.", "summary": "Get the categories for the KB", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "Users cannot create new KB categories; only predefined categories are available for selection. These categories are generally displayed in a left navigation panel within the user interface. While the API specification does not list request parameters, the response will typically include a list of these predefined categories. This endpoint is crucial for populating category filters or navigation elements within applications consuming the KB."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Administrators", "Developers"], "primary_use_case": "To retrieve a predefined list of categories for the Knowledge Base (KB) to organize information, populate filters, and facilitate navigation for users."}, "content_for_embedding": "This API retrieves a predefined list of categories for the Knowledge Base (KB). These categories, such as 'Software', 'Hardware', 'Lease', and 'Service', are used to organize information, populate category filters, and enable navigation within applications consuming the KB. The categories are defined in the Service Catalog and are displayed to users, often in a left navigation panel, to provide an organized and accessible view of knowledge articles. Users cannot create new categories via this endpoint; it's solely for retrieving existing ones.", "ontology_classification": {"features": ["knowledge_access_&_utilization", "user-friendly_content_presentation", "seamless_navigation", "service_catalog_integration_for_categorization", "search_functionality"], "primary_module": "knowledge_base", "confidence_score": 0.95}, "semantic_keywords": ["Knowledge Base", "Service Catalog", "Retrieval"]}}, {"path": "/ux/common/kb/kb/comment/", "method": "POST", "details": {"operationId": "ux_common_kb_kb_comment_create", "description": "This endpoint allows users to add comments to a Knowledge Base (KB) article. A Knowledge Base serves as a central repository for information, enabling users to find solutions independently. Adding comments helps improve the KB by providing feedback or additional context. This action is one of several available on a KB, alongside bookmarking, marking as helpful, rating, liking, editing, or deleting. The comment is associated with the specific KB article to which it is added.", "summary": "Save the comment for a KB", "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is used to define the comment's content. It leverages a serializer that recognizes various primitive fields such as `StringField` for text, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields like `ListField` and `DictField` are also supported for more complex data structures. While specific request body parameters for the comment content are not detailed within the `parameters` field of the API specification, the `request_body_description` implies that the comment content will be passed via one of the recognized field types, likely a `StringField`. Be aware that certain fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. This endpoint is primarily for adding new comments to a KB article."}, "llm_generated": {"business_context": {"user_personas": ["users", "technicians"], "primary_use_case": "To enable users to add comments to Knowledge Base articles, facilitating feedback, additional context, and collaborative improvement of KB content."}, "content_for_embedding": "This API endpoint allows users to add new comments to specific Knowledge Base (KB) articles. It is a POST operation that saves user-generated feedback or additional context directly associated with a KB article. This functionality is part of a broader set of interactions available for KB articles, including bookmarking, rating, and liking. The comment content is expected to be passed in the request body, likely as a string.", "ontology_classification": {"features": ["article_commenting"], "primary_module": "knowledge_base", "confidence_score": 1}, "semantic_keywords": ["Comments", "Knowledge Base", "Add"]}}, {"path": "/ux/common/kb/kb/comments/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_comments_retrieve", "description": "This endpoint allows users to retrieve all comments associated with a specific Knowledge Base (KB) article. It provides a means to view the discussion and feedback history related to a KB, which is essential for understanding its evolution and user interactions. This functionality is analogous to how users can see comments on requests to add new comments, as described in the user guides. KBs, also referred to as articles, can also have actions like bookmarking, helpful markings, ratings, and likes, and this endpoint specifically addresses the retrieval of comments.", "summary": "Get the comments for a KB", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "This endpoint is primarily used by users or technicians to see existing comments on a Knowledge Base article. While this GET endpoint retrieves comments, the provided context indicates that users can also *add* new comments to KBs. This suggests there is likely a corresponding endpoint for adding comments (e.g., a POST request). The comments retrieved by this endpoint are part of the overall interaction history for a KB, similar to how communication history (including comments, emails, and SMS messages) is tracked for tickets."}, "llm_generated": {"business_context": {"user_personas": ["User", "Technician"], "primary_use_case": "To retrieve and view all comments associated with a specific Knowledge Base (KB) article, enabling users and technicians to understand the discussion, feedback, and interaction history related to the KB."}, "content_for_embedding": "This API retrieves all comments associated with a specific Knowledge Base (KB) article. It allows users and technicians to view the discussion, feedback, and interaction history of a KB, similar to how comments are tracked for requests and tickets. This endpoint is crucial for understanding the evolution and user engagement with KB articles.", "semantic_keywords": ["Comments", "Knowledge Base", "Retrieval"], "ontology_classification": {"features": ["article_commenting", "knowledge_access_&_utilization", "search_functionality", "user-friendly_content_presentation"], "primary_module": "knowledge_base", "confidence_score": 0.9}}}, {"path": "/ux/common/kb/kb/csv_data/", "method": "POST", "details": {"operationId": "ux_common_kb_kb_csv_data_create", "description": "This is used to get the options for csv upload", "summary": "Get the options for csv upload", "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Data Manager"], "primary_use_case": "This API retrieves the necessary options or schema for CSV file uploads, facilitating bulk data import into the system for various purposes like knowledge base content, configurations, or user data."}, "content_for_embedding": "This API is designed to provide the required options and structural details for uploading CSV files. It serves as a preparatory step for bulk data import operations, ensuring that the CSV data conforms to the system's expected format and requirements before ingestion. This functionality is crucial for efficient content population, configuration updates, and user data management across different modules.", "semantic_keywords": ["CSV Import", "Configuration", "Knowledge Base"], "ontology_classification": {"features": ["content_curation", "multiple_content_types_support"], "primary_module": "knowledge_base", "confidence_score": 0.9}}}, {"path": "/ux/common/kb/kb/delete-attachment/{id}/", "method": "PUT", "details": {"operationId": "ux_common_kb_kb_delete_attachment_update", "description": "This API endpoint facilitates the deletion of a specific attachment associated with a Knowledge Base (KB) entry. A Knowledge Base serves as a centralized repository for information, articles, and guides, primarily intended for self-service to help users find solutions without needing to contact support. Deleting an attachment is a crucial part of managing KB content, especially when the KB is created from resolved or closed tickets/problems, which often include various attachments. This endpoint allows privileged users to remove attachments, ensuring the KB remains accurate and relevant.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the attachment to be deleted. The system handles various field types for document serialization, as detailed in the `request_body_description`, although for a `DELETE` operation, a request body is typically not used for the primary action. The deletion action is similar to asset management where 'Delete' functionality allows permanent removal of items. While the general context of Knowledge Base creation and attachment viewing is mentioned, this specific endpoint focuses solely on the deletion of an existing attachment. Users should confirm the action before proceeding, as it permanently removes the attachment."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Content Manager", "Privileged User"], "primary_use_case": "To enable privileged users to delete specific attachments from Knowledge Base (KB) entries, thereby facilitating the management and curation of KB content and ensuring its accuracy and relevance."}, "content_for_embedding": "This API endpoint allows for the deletion of a specific attachment associated with a Knowledge Base (KB) entry. It is used by privileged users to manage and curate KB content, ensuring that the information remains accurate and relevant by removing outdated or irrelevant attachments.", "semantic_keywords": ["Delete", "Attachments", "Knowledge Base"], "ontology_classification": {"features": ["knowledge_base.content_archiving_&_deletion", "knowledge_base.attachment_management", "knowledge_base.privileged_user_content_management"], "primary_module": "knowledge_base", "confidence_score": 0.9}}}, {"path": "/ux/common/kb/kb/download_csv/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_download_csv_retrieve", "description": "This is used to download the csv file", "summary": "download the csv file", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Analyst", "User"], "primary_use_case": "To enable users to download or export knowledge base content in CSV format for offline access or further analysis."}, "content_for_embedding": "This API facilitates the download of Knowledge Base content in CSV format. It allows users to export details and job data as a separate CSV file, enabling offline access and further analysis of knowledge-related information.", "ontology_classification": {"features": ["knowledge_access_&_utilization"], "primary_module": "knowledge_base", "confidence_score": 1}, "semantic_keywords": ["Data Export", "CSV Export", "Knowledge Base"]}}, {"path": "/ux/common/kb/kb/feedback/", "method": "POST", "details": {"operationId": "ux_common_kb_kb_feedback_create", "description": "This endpoint facilitates the saving of feedback for a Knowledge Base (KB) article. This feedback mechanism is crucial for improving KB content, as highlighted in the user guide. It allows users to actively contribute to the quality of information by providing input when a KB is not beneficial, thereby helping to improve the article.", "summary": "Save the feedback for a KB", "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to accommodate various data types, with support for primitive fields like StringField, IntField, BooleanField, and DateTimeField, among others. Compound fields such as ListField and DictField are also supported, mapping to corresponding DRF fields for nested data. Specifically, fields like 'Rating' and 'Comment' (as suggested by the user guides for providing feedback) would be expected in the request body. The 'ReferenceField' is handled similarly to Django REST Framework's 'ForeignKey', supporting nested serializers for greater depth. While most common data types are well-supported, 'FileField', 'ImageField', and 'BinaryField' are noted as not being well-supported or tested, and should be used with caution."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Support Agents", "Content Reviewers"], "primary_use_case": "This API allows users to submit feedback for Knowledge Base (KB) articles, including ratings and comments, to facilitate continuous improvement of KB content and enhance information quality."}, "content_for_embedding": "This API endpoint is designed to save feedback provided by users for Knowledge Base (KB) articles. It supports the submission of ratings and comments, which are crucial for identifying areas of improvement in KB content. The mechanism enables users to actively contribute to the quality and relevance of information, especially when an article is deemed unhelpful, thereby aiding in the enhancement of the overall Knowledge Base.", "semantic_keywords": ["Knowledge Base", "Feedback", "Rating"], "ontology_classification": {"features": ["feedback_submission", "article_rating_&_reviews", "article_commenting", "helpful_marking"], "primary_module": "knowledge_base", "confidence_score": 0.95}}}, {"path": "/ux/common/kb/kb/history/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_history_retrieve", "description": "This endpoint provides access to the historical activity and changes related to a specific Knowledge Base (KB). It allows users to view the history of requests associated with the selected KB, which can include details about who created the requests and their current status ('Open', 'In Progress', 'Resolved'). The history can also show when a request was converted into a KB. This audit trail is crucial for tracking the lifecycle and evolution of KBs.", "summary": "Gets history for the selected kb.", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "This endpoint specifically focuses on the history 'for the selected kb'. While the provided contexts extensively mention 'history of requests created by the requester' and 'history of each asset', the most direct applications of this specific endpoint within the provided context are for tracking the history related to Requests (especially those converted to KBs) and potentially the version history of the KB itself. There are no parameters defined for this GET request in the provided API specification, suggesting it might retrieve the full history for the KB identified by the context of the current session or a globally unique KB ID. Typically, such history endpoints are used for auditing, troubleshooting, and understanding the progression of content within the system. Other contextual information about searching by name/ID, filtering by user or date range, or exporting history details might be handled by related endpoints or client-side filtering after retrieving this data."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Knowledge Manager", "Support Staff", "Auditor"], "primary_use_case": "To retrieve the historical activity and changes related to a specific Knowledge Base (KB), including details about associated requests and their conversion into KBs, serving as an audit trail for KB lifecycle and evolution."}, "content_for_embedding": "This API endpoint retrieves the complete history for a selected Knowledge Base (KB). It provides an audit trail of all activities and changes, including the lifecycle of requests associated with the KB, who created them, their status (Open, In Progress, Resolved), and specifically when a request was converted into a KB. This is essential for tracking the evolution and understanding the full context of a Knowledge Base within the system.", "semantic_keywords": ["Knowledge Base", "History", "Audit Trail", "Conversion"], "ontology_classification": {"features": ["version_history_tracking", "incident_to_kb_conversion"], "primary_module": "knowledge_base", "confidence_score": 0.9}}}, {"path": "/ux/common/kb/kb/options/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_options_retrieve", "description": "This endpoint, `/ux/common/kb/kb/options/`, is used to retrieve the default configuration options for Knowledge Base (KB) modules within the system. Understanding these options is crucial for administrators and privileged users who manage KB content. The configuration options are foundational for defining how KB articles are managed, potentially including settings related to actions such as bookmarking, marking helpful, rating, commenting, liking, and even editing or deleting KB articles, as well as managing their publication status (e.g., Draft to Published).", "summary": "Get the options for the KB configuration", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "This endpoint provides the foundational parameters necessary for configuring KB functionalities. While this specific endpoint does not require any parameters, the retrieved options are likely used to define the behavior and available actions for KB articles, as detailed in the user guide (e.g., actions associated with each KB entry like 'Bookmark', 'Helpful', 'Rating', 'Comment', 'Like', 'Edit or Delete', 'Version History', and 'Attachments'). It's important to note that these options define the framework for KB management, which may also include configuration parameters for fields like 'Label', 'Value', and 'Description' as mentioned in the context of adding configuration parameters."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "To retrieve the default configuration options for Knowledge Base (KB) modules, enabling administrators and privileged users to manage KB content and define behaviors for KB article actions and publication status."}, "content_for_embedding": "This API endpoint retrieves the default configuration options for Knowledge Base (KB) modules. These options are fundamental for administrators and privileged users to manage KB content, influencing actions such as bookmarking, marking helpful, rating, commenting, liking, editing, deleting, and controlling the publication status (e.g., Draft to Published) of KB articles. It provides the foundational parameters for configuring various Knowledge Base functionalities.", "ontology_classification": {"features": ["privileged_user_content_management", "draft/publish_workflow", "article_bookmarking", "helpful_marking", "article_rating_&_reviews", "article_commenting", "article_liking", "content_archiving_&_deletion", "version_history_tracking", "attachment_management"], "primary_module": "knowledge_base", "confidence_score": 0.95}, "semantic_keywords": ["Knowledge Base", "Configuration", "Retrieval"]}}, {"path": "/ux/common/kb/kb/ratings/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_ratings_retrieve", "description": "This endpoint is used to retrieve the ratings associated with a Knowledge Base (KB) article. It allows users to view feedback and ratings left by others for the KB content, which helps in identifying the highest rated articles. This functionality is part of the broader set of actions available on each KB, including bookmarking, marking as helpful, commenting, and liking.", "summary": "Get the ratings for the KB", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "Ratings provide crucial feedback on the helpfulness of a KB article. Users can add ratings and reviews if the article was beneficial, or provide feedback for improvement if not. While the API specification does not list explicit parameters for this GET request, the retrieved contexts suggest that the rating process can involve a default star rating and a selection of user experience aspects to rate for a service. This endpoint primarily serves to fetch existing rating data for a KB, complementing actions like 'Rating' described in the user guide. Privileged users can edit or delete KBs, which might influence the ratings associated with them."}, "llm_generated": {"business_context": {"user_personas": ["End-user", "Developer"], "primary_use_case": "Retrieve and display user ratings and feedback for Knowledge Base articles to help users identify valuable content."}, "content_for_embedding": "This API endpoint retrieves existing ratings and feedback for Knowledge Base (KB) articles. It enables users to view how helpful an article has been perceived by others, supporting the identification of high-quality content. The functionality complements other KB actions like bookmarking, marking as helpful, commenting, and liking. Ratings provide crucial feedback, and while this GET request fetches existing data, the broader rating process can involve star ratings and feedback on user experience aspects. This API is essential for understanding the performance and reception of KB content.", "semantic_keywords": ["Knowledge Base", "Rating", "Feedback"], "ontology_classification": {"features": ["article_rating_&_reviews", "helpful_marking", "feedback_submission"], "primary_module": "knowledge_base", "confidence_score": 1}}}, {"path": "/ux/common/kb/kb/recent/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_recent_retrieve", "description": "This endpoint retrieves a list of recently accessed or updated Knowledge Base (KB) articles, similar to how 'Recent Activities' sections track asset history or 'Recent Actions' highlight updates. It provides a quick overview of KBs that have undergone changes, such as creation, modification, or status updates, potentially including a change from 'Draft' to 'Published'. This is useful for users to quickly find KBs they have recently interacted with or that have been updated system-wide, ensuring full visibility into lifecycle events.", "summary": "Get the recent KB's", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "This endpoint focuses on recent KBs. While the context mentions various actions available on a KB (Bookmark, Helpful, Rating, Comment, Like, Edit or Delete, Version History, Attachments), this specific API is solely for retrieving the *recent* KBs themselves rather than performing those actions. It aligns with the concept of highlighting the most recent activities or actions, as seen in asset tracking and contract updates. Refer to other endpoints for specific KB actions or details beyond recency."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Knowledge Base users", "Information seekers"], "primary_use_case": "Providing users with a quick overview of recently accessed or updated Knowledge Base articles for efficient information retrieval and tracking of lifecycle events."}, "content_for_embedding": "This API retrieves a list of recently accessed or updated Knowledge Base (KB) articles. It provides users with a quick overview of KBs that have undergone changes, such as creation, modification, or status updates, including changes from 'Draft' to 'Published'. This is useful for quickly finding KBs that users have recently interacted with or that have been updated system-wide, ensuring full visibility into lifecycle events. It aligns with the concept of highlighting recent activities, similar to asset tracking or contract updates, and focuses solely on retrieving recent KBs rather than performing actions on them. Infraon's Knowledge Base module enables users to author, curate, use, share, and manage knowledge, with the main page displaying recent articles.", "semantic_keywords": ["Knowledge Base", "Recent", "Retrieval"], "ontology_classification": {"features": ["recent_articles_display", "knowledge_access_&_utilization"], "primary_module": "knowledge_base", "confidence_score": 1}}}, {"path": "/ux/common/kb/kb/related/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_related_retrieve", "description": "This endpoint is designed to retrieve \"related Knowledge Base (KB)\" articles. A Knowledge Base is a centralized repository of information, including articles and guides, intended for self-service to help users find solutions without needing to contact support. This API helps in surfacing content that is contextually relevant to a primary KB article, enhancing the self-service experience by offering additional helpful resources.", "summary": "Get the related KB's", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "Knowledge Base articles within Infraon can cover a wide range of topics, including products, services, and common issues. While this endpoint specifically retrieves 'related' KBs, the broader KB functionality allows users to interact with articles through actions such as bookmarking, rating, commenting, and liking. Users can also convert requests into KB articles, highlighting the dynamic nature of content generation within the system. This endpoint is crucial for improving user experience by offering an interconnected knowledge base system."}, "llm_generated": {"business_context": {"user_personas": ["End-users seeking information", "Support agents", "Knowledge Base administrators"], "primary_use_case": "To enhance self-service by providing contextually relevant Knowledge Base articles to users, thereby improving user experience and reducing the need for direct support."}, "content_for_embedding": "This API endpoint retrieves related Knowledge Base (KB) articles, which are part of a centralized repository of information designed for self-service. Its primary purpose is to enhance the user's self-service experience by surfacing contextually relevant articles and guides, helping users find solutions without needing to contact support. Knowledge Base articles in Infraon cover diverse topics, including products, services, and common issues. The broader Knowledge Base system supports various user interactions such as bookmarking, rating, commenting, and liking articles, as well as converting requests into KB articles. This endpoint is vital for creating an interconnected knowledge base system, enabling efficient knowledge management and empowering end-users to quickly find necessary information. The Infraon KB module facilitates authoring, curating, and managing knowledge, categorizing content into types like Articles, FAQs, Information, Known Errors, and Solutions, and offering features like version history, attachments, and content management by privileged users.", "semantic_keywords": ["Knowledge Base", "Self-service", "Retrieval"], "ontology_classification": {"features": ["knowledge_access_&_utilization", "search_functionality", "user-friendly_content_presentation"], "primary_module": "knowledge_base", "confidence_score": 1}}}, {"path": "/ux/common/kb/kb/team_user_map/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_team_user_map_retrieve", "description": "This endpoint is used to retrieve the list of users associated with a specific team within Infraon. In Infraon, users are grouped into teams, which can be categorized based on various criteria such as reporting managers, technical skills, support levels (L1, L2), or roles. Users can be assigned to multiple teams, and these teams are often linked to specific modules like Incident management, Service Requests, or asset management. This API helps in understanding the user composition of a team, which can be part of the Helpdesk/service or support team, typically responsible for handling tickets.", "summary": "Get user list", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "Teams can be managed (added, edited, deleted) through the Infraon UI. When selecting staff for a team, there are typically three options: by User Tags (groupings), directly selecting Users, or by Expertise. This endpoint specifically focuses on retrieving the users directly assigned to a team. The 'Users' module often provides more details on individual user management. While the current API specification does not list parameters, it's implied that a team identifier would eventually be required to get the user list for a *specific* team. This endpoint is crucial for auditing team compositions or understanding resource allocation within Infraon's team structure."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Helpdesk/Service Team Member", "Support Team Member"], "primary_use_case": "Retrieve the list of users associated with a specific team for auditing, resource allocation, and understanding team composition."}, "content_for_embedding": "This API retrieves the list of users belonging to a specific team within the Infraon platform. Teams in Infraon group users based on various criteria like reporting managers, technical skills, or roles, and can be associated with different modules such as Incident Management or Service Requests. This endpoint is essential for auditing team compositions, understanding resource allocation, and managing user assignments within Infraon's team structure. It provides insights into which users are directly assigned to a given team, supporting helpdesk and support operations.", "ontology_classification": {"features": ["user_management", "team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Team Management", "Retrieval"]}}, {"path": "/ux/common/kb/kb/upload-csv/", "method": "POST", "details": {"operationId": "ux_common_kb_kb_upload_csv_create", "description": "This is used to get the options for csv upload", "summary": "Get the options for csv upload", "tags": ["Knowledge Base"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/KBList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Data Manager", "System Integrator"], "primary_use_case": "Facilitating the bulk import of structured data into the system, particularly for populating or updating information within the Knowledge Base, by allowing users to upload CSV files."}, "content_for_embedding": "This API endpoint enables users to upload CSV (Comma Separated Values) files to the system. It is primarily used for bulk data import, allowing for the efficient population or update of various types of information, including configurations, requesters, or content within the Knowledge Base. The API supports different content types for the CSV upload, facilitating streamlined content curation and data management.", "semantic_keywords": ["CSV Import", "Content Management", "Knowledge Base"], "ontology_classification": {"features": ["content_curation", "multiple_content_types_support", "privileged_user_content_management"], "primary_module": "knowledge_base", "confidence_score": 0.9}}}, {"path": "/ux/common/kb/kb/user-list/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_user_list_retrieve", "description": "This GET endpoint retrieves detailed user information, returning it as a dictionary. Similar to enabling 'User. Read.All' permissions as described in the user guide (Contexts 1 & 2), this function allows access to a collection of user data. The returned dictionary will contain comprehensive details about the users. This API is essential for functionalities requiring a list of user information.", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters for this endpoint, its purpose aligns with reading user details. Users of this API should ensure they have the necessary 'User. Read.All' permissions enabled, as highlighted in the user guide, to successfully access the user information. This can be compared to 'View-only' fields for user names mentioned in Context 6, suggesting it provides a list of users associated with authorized profiles. For further learning about user management, refer to the 'Users module' as indicated in Context 7."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User Manager", "System Integrator"], "primary_use_case": "To retrieve a comprehensive list of detailed user information for administrative and management purposes."}, "content_for_embedding": "This GET endpoint retrieves a comprehensive list of detailed user information, providing read-only access to a collection of user data. It is essential for functionalities requiring a complete list of users and necessitates 'User. Read.All' permissions. The API supports user management by allowing access to user details, similar to viewing user names in a read-only context.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Retrieval", "User Privileges"]}}, {"path": "/ux/common/kb/kb/viewers/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_viewers_retrieve", "description": "This endpoint is used to retrieve a list of viewers for a specific Knowledge Base (KB) article. A Knowledge Base is a repository of information about products, services, and related topics, primarily intended for self-service to help users find solutions without contacting a help desk. This endpoint helps identify who has viewed a particular KB, providing insights into its reach and utility within the self-service ecosystem.", "summary": "Get the viewers for the KB", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "While the API specification currently shows no specific parameters, a common use case for this endpoint would be to provide a KB identifier (e.g., KB ID or slug) to specify which KB's viewers are to be retrieved. This could be integrated as a query parameter or a path parameter. Understanding who views a KB can help evaluate the effectiveness of an article, especially in conjunction with other metrics like helpfulness ratings, comments, and bookmarks which are also available for KBs. Privileged users also have actions like editing or deleting KBs, which might influence their viewership."}, "llm_generated": {"business_context": {"user_personas": ["Knowledge Base Administrators", "Content Curators", "Support Managers", "Users seeking self-service solutions"], "primary_use_case": "To retrieve a list of users who have viewed a specific Knowledge Base (KB) article, providing insights into the article's reach, utility, and overall effectiveness within a self-service support ecosystem."}, "content_for_embedding": "This API endpoint retrieves a list of viewers for a specific Knowledge Base (KB) article. It provides crucial insights into the reach and utility of KB articles within a self-service environment, helping to evaluate their effectiveness. While the current specification doesn't detail parameters, a common use case would involve providing a KB identifier to specify the article. This data can be combined with other metrics like helpfulness ratings, comments, and bookmarks to get a comprehensive understanding of KB article performance.", "ontology_classification": {"features": ["user_usage_monitoring", "knowledge_access_&_utilization"], "primary_module": "knowledge_base", "confidence_score": 0.95}, "semantic_keywords": ["Knowledge Base", "Viewers", "Insights"]}}, {"path": "/ux/common/kb/kb/views/", "method": "GET", "details": {"operationId": "ux_common_kb_kb_views_retrieve", "description": "This endpoint retrieves the view count for a Knowledge Base (KB) article. While the primary function is to get the view count, the concept of 'views' in the broader system often relates to how information is displayed and accessed. This could include how users navigate through daily activity summaries (like in 'Calendar Views' showing daily NCCM activity) or how data is categorized for display (e.g., Device Status Summary, Text Panel, Network Diagram within 'Views' widgets). The system often provides a 'seamless user experience' with 'faster navigation and reduced system load' through these view mechanisms.", "summary": "Get the view count for the KB", "tags": ["Knowledge Base"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/KBList"}}}, "description": ""}}, "additional_info": "The endpoint itself does not currently specify any parameters, implying it might retrieve a general or default KB view count unless a specific KB identifier is handled implicitly or will be added as a parameter in future iterations. The term 'view count' in the context of a KB suggests a metric of how many times a knowledge base article has been accessed or displayed, similar to how activity counts for 'Completed device count', 'Total node count', 'Download Success', or 'Download Fail' are displayed in other 'Calendar Views'."}, "llm_generated": {"business_context": {"user_personas": ["Knowledge Base administrators", "content managers", "data analysts", "developers"], "primary_use_case": "To track and retrieve the access count for Knowledge Base articles, providing insights into content popularity and user engagement. It also contributes to understanding how information is displayed and accessed for a seamless user experience."}, "content_for_embedding": "This API retrieves the view count for a Knowledge Base (KB) article. It provides a metric of how many times a KB article has been accessed or displayed, contributing to understanding content popularity and user engagement. The concept of 'views' in the system also relates to how information is presented and accessed, supporting a seamless user experience and faster navigation.", "ontology_classification": {"features": ["user_usage_monitoring", "seamless_navigation", "user-friendly_content_presentation"], "primary_module": "knowledge_base", "confidence_score": 0.9}, "semantic_keywords": ["Knowledge Base", "Retrieval", "Viewers"]}}, {"path": "/ux/common/leaves/leaveinfo/", "method": "GET", "details": {"operationId": "ux_common_leaves_leaveinfo_list", "description": "This endpoint retrieves a comprehensive list of all leaves available within the current organization. It provides details on various categories of leaves, similar to what is displayed on the 'Leaves' page in the Infinity platform, allowing for filtering information based on Leave Types or User, as described in the user guide. The returned data can support the display of leaves taken by the team for selected periods (Month/Week/Day) and allows for pagination through `items_per_page` and `offset` query parameters.", "summary": "Gets a list of leaves", "parameters": [{"name": "items_per_page", "required": false, "in": "query", "description": "Number of results to return per page.", "schema": {"type": "integer"}}, {"name": "offset", "required": false, "in": "query", "description": "The initial index from which to return the results.", "schema": {"type": "integer"}}], "tags": ["Leaves"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedLeavesListList"}}}, "description": ""}}, "additional_info": "The `items_per_page` parameter specifies the number of leave records to return per page, while the `offset` parameter defines the starting index for the results. This enables efficient retrieval of leave data. This endpoint is primarily for fetching existing leave information and does not support any actions like applying for leaves or configuring leave types. For configuring leaves or viewing 'My Leaves' (details for the logged-in user), refer to relevant documentation sections on 'Infraon Configuration -> User Management -> Leaves'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "HR Personnel"], "primary_use_case": "This API allows administrators or HR personnel to retrieve and filter a comprehensive list of all leaves within an organization, enabling them to monitor team leave data and view various categories of leaves."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of all leaves available within the current organization, providing details on various categories of leaves. It supports filtering of information based on Leave Types or User, similar to the display on the 'Leaves' page in the Infinity platform. Pagination is supported through `items_per_page` and `offset` query parameters, allowing for efficient retrieval and display of leaves taken by the team for selected periods (Month/Week/Day). This endpoint is specifically for fetching existing leave information and does not support actions such as applying for leaves or configuring leave types.", "ontology_classification": {"features": ["leave_management", "filtering_options"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Leaves", "Filter", "Pagination"]}}, {"path": "/ux/common/leaves/leaveinfo/", "method": "POST", "details": {"operationId": "ux_common_leaves_leaveinfo_create", "description": "This endpoint allows users to create and manage their leave requests within the system. It enables users to apply for leave of absence from work, forming part of the 'My Leave' functionality. The leave request is subsequently submitted to the reporting manager for approval and users can edit their requests if they are not yet approved. Note that the leave type must be pre-configured by an administrator, and a reason for the leave is a mandatory field.", "summary": "Creates a leave for user ", "tags": ["Leaves"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateLeaveSample": {"summary": "Create leave Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint is integral to the \"My Leave\" feature, allowing individual users to initiate new leave requests. Administrators or privileged users are responsible for configuring leave categories and allotting leave days. While the API specification does not detail parameters, based on context, a mandatory 'reason' for the leave will likely be required in the request body. Leave requests, once submitted, typically require managerial approval. Users retain the ability to modify their requests until they receive approval."}, "llm_generated": {"business_context": {"user_personas": ["Employee", "Reporting Manager", "Administrator"], "primary_use_case": "This API allows users to create, manage, and submit leave requests for approval by their reporting manager. It supports the \"My Leave\" functionality within the system, enabling employees to apply for time off and modify their requests before approval. Administrators are responsible for pre-configuring leave types."}, "content_for_embedding": "This API endpoint facilitates the creation and management of leave requests by individual users. It is a core component of the \"My Leave\" feature, allowing employees to apply for leave of absence. Once submitted, leave requests are routed to the reporting manager for approval. Users have the ability to edit their requests as long as they have not yet been approved. A mandatory reason for the leave is required, and the leave type must be pre-configured by an administrator.", "ontology_classification": {"features": ["ticket_submission_methods", "reporting_manager_approval_workflow", "ticket_state_&_status_management", "detailed_ticket_editing"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Leave Request", "Approval Workflow", "Employee Leave"]}}, {"path": "/ux/common/leaves/leaveinfo/{id}/", "method": "GET", "details": {"operationId": "ux_common_leaves_leaveinfo_retrieve", "description": "This endpoint is used to retrieve comprehensive details for a specific leave entry within the current organization. It provides an individual leave's information, similar to how other IDs (like Change ID or Problem ID) redirect to pages with extensive details, including creation time and date. This allows users to access specific leave records by their unique identifier.", "summary": "Gets a leave with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Leaves"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the leave whose details are to be retrieved. This endpoint focuses on fetching individual leave records, distinguishing it from broader views that display multiple categories of leaves or allow applications for leave. It's akin to viewing a 'Basic Details' tab for a specific leave record."}, "llm_generated": {"business_context": {"user_personas": ["Employee", "Administrator", "Manager"], "primary_use_case": "To retrieve comprehensive and specific details for an individual leave entry within an organization, enabling users to access and review specific leave records by their unique identifier for management, tracking, or auditing purposes."}, "content_for_embedding": "This API endpoint allows for the retrieval of comprehensive details for a specific leave entry using its unique identifier. It functions similarly to accessing a 'Basic Details' tab for a particular leave record, providing all relevant information about that individual leave. This is distinct from broader views or leave application processes, focusing solely on fetching the detailed information of a single, identified leave.", "ontology_classification": {"features": ["leave_management", "ticket_detail_view_(via_id)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Leaves", "Details retrieval", "Retrieval"]}}, {"path": "/ux/common/leaves/leaveinfo/{id}/", "method": "PUT", "details": {"operationId": "ux_common_leaves_leaveinfo_update", "description": "This endpoint allows users to modify an existing leave request within the organization. It is specifically designed to update details of a leave that has already been submitted, provided it has not yet been approved. Changes can include the leave date, leave type, and the mandatory reason for the leave.", "summary": "Edits the leave with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Leaves"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/LeavesList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the leave request to be edited. The request body, derived from the `Serializer for Documents` specification, supports various primitive fields such as StringField, URLField, EmailField, IntField, DateTimeField, and more. Compound fields like ListField and DictField are also supported. It's crucial that any updates adhere to organizational leave policies, including administrator-pre-configured leave types. While users can edit leave requests, this functionality is available only as long as the leave is not approved. The 'reason' field for the leave is mandatory during the edit process."}, "llm_generated": {"business_context": {"user_personas": ["Employee", "User"], "primary_use_case": "Allows users to modify existing leave requests, including date, type, and reason, before approval."}, "content_for_embedding": "This API endpoint facilitates the modification of an already submitted leave request. Users can update details such as the leave date, leave type, and the mandatory reason for the leave. This functionality is available only for leave requests that have not yet been approved. The unique identifier of the leave request is required as a path parameter.", "ontology_classification": {"features": ["leave_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Leave Request", "Update", "Edit"]}}, {"path": "/ux/common/leaves/leaveinfo/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_leaves_leaveinfo_partial_update", "description": "This API endpoint allows for viewing details of specific leaves within the system. It enables users to retrieve comprehensive information about a leave record, identified by its unique ID. This is particularly useful for filtering leave information based on various criteria like leave types or specific users, as indicated in the user guide. While the primary function is to 'view', the PATCH method suggests that it may also support updates to leave information, possibly for internal system adjustments or status changes, although the description explicitly states 'view'. The endpoint is part of a broader system for managing and displaying leave categories available within the organization.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Leaves"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedLeavesList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedLeavesList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedLeavesList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter, passed in the path, is a mandatory string that uniquely identifies the leave record whose information is to be retrieved or potentially updated. The request body, though not explicitly defined for this PATCH operation's specific fields, adheres to a serializer for Documents, supporting various primitive fields like StringField, URLField, IntField, DateTimeField, etc. Compound fields such as ListField and DictField are also supported, alongside specific handling for `ReferenceField` and `EmbeddedDocumentField`, with considerations for serializer depth. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested through this serializer. For complete information on the types of leaves and how they are displayed, refer to the 'Leaves' section of the Infinity User Guide, which details filtering by 'Leave Types or User' and the display of 'leaves taken by the team for the selected period (Month/Week/Day)'."}, "llm_generated": {"business_context": {"user_personas": ["Employee", "Administrator"], "primary_use_case": "This API allows for viewing and updating specific leave records within the system, enabling users and administrators to manage and retrieve detailed leave information."}, "content_for_embedding": "This API endpoint allows for viewing and partially updating specific leave records identified by a unique ID. It provides comprehensive information about a leave, supporting filtering by leave types or users. While primarily for viewing, the PATCH method indicates support for internal system adjustments or status changes to leave information. It is part of a broader system for managing and displaying organizational leave categories, including details like leave balance and types, and can be used by both employees to view their own leaves and administrators to configure and manage leaves for the organization, including viewing leaves taken by teams in a calendar view.", "ontology_classification": {"features": ["infraon_configuration.leave_management", "infraon_configuration.user_management", "ticket_management.ticket_detail_view_(via_id)", "ticket_management.detailed_ticket_editing", "report.granular_data_filtering", "workspace.detailed_record_view", "workspace.record_creation_&_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Leaves", "Details retrieval", "Update", "Filtering", "Leave Request", "Employee Leave", "User Management", "Configuration"]}}, {"path": "/ux/common/leaves/leaveinfo/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_leaves_leaveinfo_destroy", "description": "This endpoint is used to delete an existing leave for the current organization. It facilitates the removal of a specific leave record identified by its unique ID. This action permanently removes the leave details associated with that ID from the system.", "summary": "Deletes the leave with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Leaves"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter uniquely identifies the leave record to be deleted. Prior to deletion, the leave type must have been pre-configured by an administrator. While the prompt doesn't explicitly state, typically, only non-approved or pending leave requests can be deleted. Deleting a leave record is a permanent action and cannot be undone."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Employee"], "primary_use_case": "To permanently remove an existing leave record from the system."}, "content_for_embedding": "This API endpoint allows for the permanent deletion of a specific leave record from the system, identified by its unique ID. This action is irreversible and typically applies to non-approved or pending leave requests. Leave types must be pre-configured by an administrator. It is a core function for managing employee leave information within an organization.", "ontology_classification": {"features": ["leave_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Leaves", "Irreversible"]}}, {"path": "/ux/common/leaves/leaveinfo/get_config/", "method": "GET", "details": {"operationId": "ux_common_leaves_leaveinfo_get_config_retrieve", "description": "This API endpoint allows users to retrieve the system's leave configuration and available leave categories. It displays multiple categories of leaves available within the organization, which can be filtered by Leave Types or User. The right calendar view displays leaves taken by the team for a selected period (Month/Week/Day). This endpoint provides a read-only view, and no actions can be performed directly from this page, making it suitable for viewing the configured leave policies and team leave schedules.", "tags": ["Leaves"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}, "description": ""}}, "summary": "", "additional_info": "This is a GET endpoint designed for view-only purposes; users cannot apply for leaves or modify configurations through this API. Administrators or privileged users are responsible for configuring leaves, such as setting limits on the number of leave days applicable for each category, through a separate process (e.g., 'Infraon Configuration -> User Management -> Leave'). The data displayed is based on the organization's leave policy. There are no parameters or request body required for this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Employee", "HR Personnel", "Administrator"], "primary_use_case": "To retrieve and view an organization's leave configuration, available leave categories, and team leave schedules for understanding current leave policies and team availability."}, "content_for_embedding": "This API retrieves the system's configured leave policies, available leave categories, and team leave schedules. It provides a read-only view, allowing users to see organizational leave configurations and filter team leaves by type or user, and view them in a calendar format (Month/Week/Day). It does not allow for applying for leaves or modifying configurations; it's purely for viewing existing leave setup and team availability.", "semantic_keywords": ["Leaves", "Configuration retrieval", "Filter"], "ontology_classification": {"features": ["leave_management", "calendar_view", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/leaves/leaveinfo/get_options/", "method": "GET", "details": {"operationId": "ux_common_leaves_leaveinfo_get_options_retrieve", "description": "This API endpoint allows users to retrieve options and information related to leaves configured within the organization. It provides details about multiple categories of leaves available and supports filtering based on Leave Types or Users. The endpoint specifically helps in displaying leaves taken by the team for a selected period (Month/Week/Day) via a calendar view, as outlined in the user guide. No actions can be performed directly through this endpoint beyond viewing.", "tags": ["Leaves"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is primarily for viewing leave-related data. While the API specification does not list explicit parameters, the context suggests that filtering by 'Leave Types' or 'User' might be supported, implying these could be implicit query parameters. The information provided by this API can be displayed in a calendar view, showing leaves for a selected period (Month/Week/Day). Administrators or privileged users can configure leaves through other interfaces, but this specific endpoint is view-only."}, "llm_generated": {"business_context": {"user_personas": ["Users", "Employees", "Team Leads", "Managers", "HR Administrators"], "primary_use_case": "To enable users to retrieve and view organizational leave options and team leave schedules for planning and informational purposes."}, "content_for_embedding": "This API retrieves comprehensive leave information and options configured within an organization. It allows users to view various leave categories and details about leaves taken by the team, supporting filtering by leave types or specific users. The data is designed for display in a calendar view, showing leave schedules for selected periods (Month/Week/Day). This is a read-only endpoint, primarily for informational and planning purposes, enabling users to understand available leave types and monitor team leave patterns.", "semantic_keywords": ["Leaves", "Retrieval", "Filter"], "ontology_classification": {"features": ["leave_management", "calendar_view", "report_filtering_options"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/leaves/leaveinfo/my_leaves/", "method": "GET", "details": {"operationId": "ux_common_leaves_leaveinfo_my_leaves_retrieve", "description": "This API endpoint allows the logged-in user to view their own leave details, providing access to multiple categories of leaves available within the organization. While the system displays various leave types, it should be noted that this specific endpoint does not support actions like applying for leave or filtering information based on leave types or other users; it strictly focuses on the 'My Leaves' view. It serves as a read-only interface for an individual's personal leave information.", "tags": ["Leaves"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically displays details for the logged-in user's leaves ('My Leaves'). It does not provide functionalities to modify leave data, apply for new leaves, or view leave information for other team members. The display generally includes various categories of leaves relevant to the organization's policy. Users can view the type and other relevant details as configured by the organization's leave policy."}, "llm_generated": {"business_context": {"user_personas": ["employee"], "primary_use_case": "Allows a logged-in employee to view their personal leave details and available leave categories."}, "content_for_embedding": "This API endpoint provides a read-only interface for a logged-in user to view their personal leave details, including various categories of leaves available within the organization. It specifically focuses on displaying 'My Leaves' and does not support functionalities such as applying for new leaves, modifying existing leave data, or viewing leave information for other team members. The displayed information is based on the organization's configured leave policy.", "semantic_keywords": ["Leaves", "Employee Leave", "Details retrieval"], "ontology_classification": {"features": ["leave_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/leaves/leaveinfo/save_config/", "method": "POST", "details": {"operationId": "ux_common_leaves_leaveinfo_save_config_create", "description": "This API endpoint, `/ux/common/leaves/leaveinfo/save_config/`, is a POST request designed to configure and save leave-related settings within the system. It enables administrators or privileged users to define and allot the number of leave days applicable for each leave category. The process involves adding the number of days for respective leave types, based on the organization's leave policy. Once configured and saved, users can view these defined leaves and apply for them as needed. This endpoint is crucial for establishing the leave policies and making them accessible to users.", "tags": ["Leaves"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/LeavesList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LeavesList"}}}, "description": ""}}, "summary": "", "additional_info": "To configure leaves, users should generally navigate to 'Infraon Configuration -> User Management -> Leave' and click the 'Configure' button. The request body for this endpoint will likely involve a JSON structure mapping leave types to the number of days. While the `request_body_description` details the primitive and compound fields recognized by the serializer (e.g., `StringField`, `IntField`, `ListField`, `DictField`), the specific structure for saving leave configurations (e.g., a dictionary of leave types and their corresponding day counts) should conform to these types. For instance, a common structure might involve a dictionary where keys are leave type identifiers and values are integers representing the number of days. The system supports various data types, but the exact schema for the leave configuration input would need to be inferred from practical usage or further documentation."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "To enable administrators and privileged users to configure and save organizational leave policies, specifically by defining and allotting the number of leave days for various leave categories."}, "content_for_embedding": "This API endpoint facilitates the configuration and saving of organizational leave policies. It allows administrators and privileged users to define and allocate specific numbers of leave days for various leave categories, aligning with the company's leave policy. This setup is crucial for enabling users to view and apply for defined leave types within the system.", "semantic_keywords": ["Leaves", "Configuration", "User Management"], "ontology_classification": {"features": ["leave_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/live_chat/chat/", "method": "GET", "details": {"operationId": "ux_common_live_chat_chat_retrieve", "description": "This endpoint is used to fetch the chat configuration for the current organization. This configuration is crucial for enabling various communication channels, including integration with platforms like WhatsApp and chatbot functionalities. It helps define how requests are handled, whether initiated through web portals, mobile apps, email, or direct chat mechanisms.", "summary": "Gets a list of chat config", "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The chat configuration retrieved by this endpoint likely plays a role in setting up integrations such as \"Infraon-WhatsApp,\" which enables messaging via WhatsApp. While the API specification does not list any parameters, the fetched configuration influences how requests are created and routed from different sources (email, WhatsApp, chatbot). This endpoint is foundational for managing an organization's communication infrastructure within the platform."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Communication Manager"], "primary_use_case": "To fetch and manage the chat configuration for an organization, enabling various communication channels like WhatsApp and chatbot functionalities, and defining how requests are handled from different sources (web, mobile, email, direct chat)."}, "content_for_embedding": "This GET endpoint, `ux_common_live_chat_chat_retrieve`, is designed to fetch the live chat configuration for an organization. This configuration is vital for enabling and managing diverse communication channels, including integrations with platforms like WhatsApp and internal chatbot functionalities. It dictates how incoming requests are processed and routed, regardless of their origin (web portals, mobile applications, email, or direct chat). The retrieved configuration is foundational for setting up and maintaining the organization's communication infrastructure, such as the 'Infraon-WhatsApp' integration, which facilitates WhatsApp messaging. Although it doesn't take parameters, the output directly influences how requests are created and routed from various communication sources.", "semantic_keywords": ["Configuration", "Details retrieval", "API Integration"], "ontology_classification": {"features": ["general_settings", "notification_gateway_configuration", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/live_chat/chat/", "method": "POST", "details": {"operationId": "ux_common_live_chat_chat_create", "description": "This endpoint is used to update the chat configuration for the current organization. This is crucial for managing how an organization interacts with users across various communication channels such as web portals, mobile apps, email, WhatsApp, and chatbots. Updates to the chat configuration can affect how service requests, problems, or general communications are handled and sourced, allowing for flexible setup of communication methods. While the endpoint specifically updates the 'chat config', its broader impact relates to the organization's ability to integrate and manage diverse communication streams as hinted by the importance of chat in various contexts, including ITSM modules and service request creation.", "summary": "Updates the chat config", "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The current API specification indicates no request body or parameters, implying the configuration might be updated based on internal system state or pre-defined settings related to the authenticated organization. Given the frequent mentions of WhatsApp integration (Contexts 2, 3, 5, 7, 8, 10), it is highly probable that chat configurations updated via this endpoint could include settings related to WhatsApp Business Messaging, such as token management or source identification. However, the direct fields affected are not detailed in the provided contexts. It's important to understand that while 'chat config' is broad, it ties into how requests are received and processed from various sources, making the proper setup of these configurations critical for service workflows."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Service Desk Manager"], "primary_use_case": "To enable organizations to manage and update their chat configurations, facilitating seamless communication across various channels like web, mobile, email, WhatsApp, and chatbots, and impacting how service requests are handled."}, "content_for_embedding": "This API endpoint allows for the update of an organization's live chat configuration. This is critical for managing diverse communication streams, including web portals, mobile apps, email, WhatsApp, and chatbots. The configuration updates directly influence how service requests and general communications are processed, potentially including settings for WhatsApp Business Messaging like token management and source identification, thereby streamlining service workflows and communication methods.", "ontology_classification": {"features": ["notification_gateway_configuration", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Chat Configuration", "Update", "API Integration"]}}, {"path": "/ux/common/live_chat/chat/{id}/", "method": "GET", "details": {"operationId": "ux_common_live_chat_chat_retrieve_2", "description": "This endpoint allows retrieval of information related to a specific live chat session, identified by a unique `id`. While the direct output is described as having \"No response body\", the endpoint's purpose within the broader 'Live Chat API' ecosystem suggests it might be used to initiate or manage real-time communication flows, potentially in conjunction with integrated services like Infraon-WhatsApp. The `id` parameter is crucial for specifying which chat session to interact with.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter in the path is a required string. Based on the integrated contexts, this endpoint is likely part of a system that facilitates communication, possibly enabling users to report issues via WhatsApp chat, create tickets, or view ticket details, aligning with the functionalities of the Infraon-WhatsApp integration mentioned in the guides. Although the response body is stated as empty, the endpoint's role in a 'Live Chat API' implies it might trigger server-side actions or state changes visible through other mechanisms. The contexts frequently mention 'API Setup' and 'API permissions', indicating that proper configuration of related services (like Infraon-WhatsApp) is a prerequisite for this endpoint to function correctly."}, "llm_generated": {"business_context": {"user_personas": ["Customer Support Agents", "Administrators", "Developers"], "primary_use_case": "Manage and retrieve information about live chat sessions, particularly in the context of customer support and issue reporting via integrations like Infraon-WhatsApp."}, "content_for_embedding": "This API endpoint, GET /ux/common/live_chat/chat/{id}/, is designed for retrieving details of a specific live chat session using its unique `id`. Although it returns no direct response body, it is a crucial component of the Live Chat API ecosystem, particularly when integrated with services like Infraon-WhatsApp. Its primary function is to enable the management and initiation of real-time communication flows, allowing users to view chat session details, potentially leading to actions like reporting issues or viewing associated ticket information. It supports real-time communication and customer support workflows.", "ontology_classification": {"features": ["collaboration_chat_interface", "detailed_record_view", "ticket_detail_view_(via_id)"], "primary_module": "workspace", "confidence_score": 0.9}, "semantic_keywords": ["Live Chat", "Chat Session", "Details retrieval"]}}, {"path": "/ux/common/live_chat/chat/{id}/", "method": "PUT", "details": {"operationId": "ux_common_live_chat_chat_update", "description": "This `PUT` endpoint is part of the Live Chat API, specifically designed to update or manage a live chat session. The `id` path parameter uniquely identifies the chat session to be acted upon. While the direct details of the update action are not specified, the broader context of 'Live Chat API endpoints' and mentions of 'WhatsApp chat' suggest its role in real-time communication within an integrated IT support platform. This could involve updating chat status, pushing messages, or managing chat participants, especially in the context of Infraon-WhatsApp integration for IT support.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter for this endpoint is a required string that identifies the specific live chat session. Although no specific request body is described for this PUT operation, it is implied that an update to the chat session would typically involve sending data in the request body. Common use cases for such an endpoint within an integrated chat system include marking a chat as resolved, transferring a chat, or updating custom chat properties. The provided contexts heavily link 'Live Chat' functionality to the Infraon-WhatsApp integration, where users can report issues and get real-time updates via WhatsApp chat. Therefore, this endpoint likely plays a role in managing those chat interactions."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Agents", "Administrators"], "primary_use_case": "To update and manage live chat sessions within an integrated IT support platform, particularly those facilitated by Infraon-WhatsApp integration."}, "content_for_embedding": "This API endpoint allows for the update and management of live chat sessions. It is designed to handle real-time communication within an integrated IT support platform, enabling actions such as updating chat status, managing participants, marking chats as resolved, transferring chats, or updating custom chat properties. The functionality is closely tied to the Infraon-WhatsApp integration, facilitating IT support interactions via WhatsApp chat.", "semantic_keywords": ["Live Chat", "Update", "WhatsApp Integration"], "ontology_classification": {"features": ["collaboration_chat_interface", "record_lifecycle_&_status_management", "whatsapp_integration"], "primary_module": "workspace", "confidence_score": 0.9}}}, {"path": "/ux/common/live_chat/chat/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_live_chat_chat_destroy", "description": "This `DELETE` endpoint is part of the Live Chat API, specifically designed to terminate an existing live chat session. While the direct contexts provided focus heavily on the setup and integration of the Infraon-WhatsApp API, and how API setups are completed (referencing 'API Setup completed' from Rank 1 and 2), this specific endpoint handles the deletion of a live chat identified by a unique `id`. The broader context of Infraon-WhatsApp (Rank 9 and 10) highlights that users can report issues via WhatsApp chat, eliminating the need for other systems, which implies the existence of live chat functionalities that would eventually need to be closed or deleted.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the live chat session to be deleted. The API specification indicates there is 'No response body' after a successful deletion. Although the provided context primarily focuses on WhatsApp integration setup and overall API completion steps rather than specifics of deleting a chat, it reinforces the presence and importance of API-driven chat functionalities within the Infraon ecosystem. Developers should ensure the provided `id` corresponds to an active or existing live chat session that can be terminated."}, "llm_generated": {"business_context": {"primary_use_case": "To terminate an existing live chat session within the Infraon ecosystem."}, "content_for_embedding": "This API endpoint, `DELETE /ux/common/live_chat/chat/{id}/`, is designed to terminate an existing live chat session identified by a unique `id`. It is part of the Live Chat API within the Infraon ecosystem. Although the provided context heavily focuses on the setup and integration of the Infraon-WhatsApp API, implying that users can report issues via WhatsApp chat, this specific endpoint handles the deletion of a live chat session. Developers should ensure the provided `id` corresponds to an active or existing live chat session that can be terminated. A successful deletion results in no response body (204 No Content).", "semantic_keywords": ["Live Chat", "Chat Session", "Delete"], "ontology_classification": {"features": ["collaboration_chat_interface", "whatsapp_integration", "Delete"], "primary_module": "workspace", "confidence_score": 0.8}}}, {"path": "/ux/common/live_chat/chat/chat_status/", "method": "POST", "details": {"operationId": "ux_common_live_chat_chat_chat_status_create", "description": "This endpoint, part of the Live Chat API, is used to retrieve the current chat status. While the direct purpose from the provided context is not explicitly detailed, it is likely involved in managing the state of chat interactions, potentially within a broader system like the Infraon-WhatsApp integration. The Infraon-WhatsApp integration enables users to report issues and interact with IT support via WhatsApp chat, eliminating the need for various systems or time-consuming phone calls. This API call could be instrumental in checking the availability or active status of such chat channels within this integrated platform.", "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification indicates 'No response body'. However, given its function to check 'chat_status', a successful response would typically include an HTTP 200 status code. While the API currently doesn't specify parameters, understanding chat status is crucial for systems like Infraon-WhatsApp, which allows users to create tickets, create requests, view ticket details, and receive real-time updates on status changes via WhatsApp chat. For a robust integration, an API like this would ideally indicate whether a chat channel is open, closed, or engaged. Future enhancements might include parameters for specific chat IDs or user contexts to retrieve more granular status information."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "System Administrator", "IT Support Staff"], "primary_use_case": "This API retrieves the current status of chat interactions, specifically within integrated platforms like Infraon-WhatsApp, to ensure the availability and active state of chat channels for user support and issue reporting."}, "content_for_embedding": "This API endpoint, part of the Live Chat API, is designed to retrieve the current chat status. It is crucial for managing the state of chat interactions, particularly within the Infraon-WhatsApp integration, which facilitates user issue reporting and IT support via WhatsApp. The API helps in checking the availability and active status of these integrated chat channels.", "semantic_keywords": ["Live Chat", "Chat Session", "Status"], "ontology_classification": {"features": ["collaboration_chat_interface", "whatsapp_integration"], "primary_module": "workspace", "confidence_score": 0.9}}}, {"path": "/ux/common/live_chat/chat/chats/", "method": "POST", "details": {"operationId": "ux_common_live_chat_chat_chats_create", "description": "This API endpoint, `/ux/common/live_chat/chat/chats/`, is designed for initiating new live chat sessions, as indicated by the POST method. While the original description simply states 'Live Chat API endpoints,' the context suggests a strong integration with messaging platforms like WhatsApp through the 'Infraon-WhatsApp' integration. This implies it's a core component for creating new chat-based interactions, potentially allowing end-users or technicians to initiate requests or conversations through channels like web portals, mobile apps, email, WhatsApp, or chatbots. It plays a role in the system's broader 'Request Management' functionality, allowing for the creation of new user-initiated service requests via chat.", "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Given the path and method, this endpoint likely supports the creation of new chat instances within the live chat system. Although the API specification states 'No response body,' a successful POST request typically implies the creation of a new resource (a chat session in this case), and subsequent interactions might occur via other endpoints or webhook notifications. The strong correlation with 'Infraon-WhatsApp' integration suggests that this endpoint could be used for creating chats that directly correspond to WhatsApp messages or service requests initiated through the Infraon-WhatsApp platform. This could be part of the flow where users report issues via WhatsApp chat, eliminating the need to navigate different systems. Users can 'Create tickets' or 'Create requests' via chat as mentioned in the context."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Technicians"], "primary_use_case": "To initiate new live chat sessions, particularly those integrated with messaging platforms like WhatsApp, enabling end-users and technicians to create service requests or conversations through chat channels."}, "content_for_embedding": "This API endpoint, `/ux/common/live_chat/chat/chats/`, uses the POST method to initiate new live chat sessions. It is strongly integrated with \"Infraon-WhatsApp\", allowing for the creation of chat-based interactions. This functionality is a core component of the system's \"Request Management\" module, facilitating the creation of user-initiated service requests or tickets directly via chat through various channels like web portals, mobile apps, email, WhatsApp, or chatbots. A successful POST request implies the creation of a new chat instance, which can then be used for subsequent interactions or to generate service requests.", "ontology_classification": {"features": ["request_creation_&_channels", "whatsapp_integration", "collaboration_chat_interface", "ticket_submission_methods"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Live Chat", "WhatsApp Integration", "Request Management"]}}, {"path": "/ux/common/live_chat/chat/messages/", "method": "GET", "details": {"operationId": "ux_common_live_chat_chat_messages_retrieve", "description": "This `/ux/common/live_chat/chat/messages/` endpoint is part of the Live Chat API, designed to facilitate interaction within the system's communication channels. While the specific function of this GET endpoint is to retrieve \"messages\" related to live chat, the broader context of the system indicates that requests (which can include chat messages) can be initiated through various channels, notably via web portal, mobile app, email, or a technician using phone, WhatsApp, or chatbot. This suggests that the messages retrieved by this endpoint could originate from or be related to these diverse communication methods, potentially even integrating with external platforms like WhatsApp as highlighted in the integration guides.", "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The provided API specification for this GET endpoint indicates no parameters and no response body, which is unusual for a GET request designed to retrieve 'messages'. This suggests a potential incompleteness in the provided API spec or that this endpoint might be part of a larger, more complex live chat message retrieval system (e.g., retrieving streaming data, or requiring pre-configured session IDs not exposed as parameters). Given the context of request creation via WhatsApp and other channels, it's possible this endpoint retrieves messages from these integrated sources. Developers should consult further documentation or example usage patterns for how to effectively use this endpoint to fetch specific chat messages, especially considering the lack of parameters for filtering or pagination."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Support Agent", "Administrator"], "primary_use_case": "To retrieve live chat messages from various communication channels, including integrated platforms like WhatsApp, for display and processing within the system."}, "content_for_embedding": "This API endpoint retrieves live chat messages. These messages can originate from diverse communication channels such as web portals, mobile apps, email, phone, WhatsApp, or chatbots, indicating potential integration with external messaging platforms. The endpoint is part of a broader Live Chat API designed to facilitate system communication. While the current specification lacks parameters for filtering or pagination and a direct response body, it suggests a mechanism for fetching real-time or session-based chat data.", "semantic_keywords": ["Live Chat", "WhatsApp Integration", "Messages"], "ontology_classification": {"features": ["collaboration_chat_interface", "communication_tab", "whatsapp_integration"], "primary_module": "workspace", "confidence_score": 0.9}}}, {"path": "/ux/common/live_chat/chat/options/", "method": "GET", "details": {"operationId": "ux_common_live_chat_chat_options_retrieve", "description": "This endpoint retrieves a comprehensive list of configuration options specifically for live chat within the current organization. This includes settings related to how the live chat functionality operates, such as network settings, security policies, access controls, and performance configurations. The retrieved options are essential for defining the behavior and appearance of the chat interface, which can be utilized by end-users or technicians for communication, similar to how configuration profiles are used to customize device settings. This endpoint helps in summarizing and displaying key details for chat configuration.", "summary": "Gets a list of chat config options", "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This GET endpoint does not require any parameters or request body. The response provides the full set of chat configuration options available for the organization. While the retrieved contexts frequently discuss 'configuration' in the context of network devices (routers, switches, firewalls, etc.), this specific endpoint focuses on 'live chat' configurations, which are analogous in their purpose of defining operational parameters. It's crucial for customizing the live chat experience, whether it's for customer support via chatbot or direct agent interaction."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Technician", "End-user"], "primary_use_case": "Retrieving configuration options for live chat functionality to define its behavior and appearance."}, "content_for_embedding": "This API retrieves a comprehensive list of configuration options for live chat within an organization. These settings define how the live chat functionality operates, including network settings, security policies, access controls, and performance configurations. The retrieved options are crucial for customizing the behavior and appearance of the chat interface, used by end-users or technicians for communication. This GET endpoint provides the full set of chat configuration options and is analogous to configuration profiles used for device settings, helping to summarize and display key details for chat configuration.", "ontology_classification": {"features": ["chat_configuration"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Live Chat", "Chat Configuration", "Configuration Options"]}}, {"path": "/ux/common/live_chat/chat/start_chat/", "method": "POST", "details": {"operationId": "ux_common_live_chat_chat_start_chat_create", "description": "This `/ux/common/live_chat/chat/start_chat/` endpoint initiates a live chat session within the UX common module. While the direct functionality is to 'start_chat', the broader context suggests it's part of an API setup, potentially for integrations like Infraon-WhatsApp. The setup process for such APIs often involves selecting a 'Quick Start' option and clicking a 'Start Using the API' tab, indicating this endpoint likely plays a role in the initial activation or commencement of chat services through the API. The endpoint uses the POST method and does not return a response body, signifying it's a one-way trigger or action.", "tags": ["chat"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided contexts, this API endpoint is integral to setting up and using chat functionalities, particularly in the context of `Infraon-WhatsApp` integration. Developers should be aware that triggering this endpoint might be a step in a multi-stage API setup process, as suggested by sequences like 'STEP 3.7' and 'STEP 6' in the guide documents. No request parameters or body are specified, meaning it's a straightforward trigger. The absence of a response body indicates that successful initiation is likely inferred by a 200 OK status code without further data."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Integrator", "Administrator"], "primary_use_case": "To initiate a live chat session, specifically for integrations such as Infraon-WhatsApp, as part of a multi-stage API setup process."}, "content_for_embedding": "This API endpoint, `/ux/common/live_chat/chat/start_chat/`, uses the POST method to initiate a live chat session. It acts as a one-way trigger without a response body, signifying its role in the initial activation or commencement of chat services. The endpoint is integral to setting up and using chat functionalities, particularly in the context of Infraon-WhatsApp integration, and is part of a multi-stage API setup process, as indicated by documentation steps like \"Select WhatsApp > Quick Start\" and \"Start Using the API\".", "ontology_classification": {"features": ["whatsapp_integration", "collaboration_chat_interface", "api_registration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.95}, "semantic_keywords": ["Live Chat", "WhatsApp Integration", "API Integration"]}}, {"path": "/ux/common/marketplace/genai/", "method": "GET", "details": {"operationId": "ux_common_marketplace_genai_retrieve", "description": "API endpoint for GenAI configuration management", "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To retrieve and manage configuration settings for GenAI functionalities within the system."}, "content_for_embedding": "This API endpoint is designed for the retrieval and management of configuration settings specifically pertaining to GenAI resources. It enables users to view, search, and filter various parameters and values that define the behavior and operation of AI-powered functionalities, ensuring proper configuration and control within the platform.", "ontology_classification": {"features": ["platform_account_configuration", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration", "Configuration retrieval", "Configuration Management"]}}, {"path": "/ux/common/marketplace/genai/", "method": "POST", "details": {"operationId": "ux_common_marketplace_genai_create", "description": "API endpoint for GenAI configuration management", "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "IT Operations Staff"], "primary_use_case": "To enable the creation and management of configurations for Generative AI (GenAI) functionalities within the system."}, "content_for_embedding": "This API endpoint facilitates the creation and management of Generative AI (GenAI) configurations. It allows users to add new GenAI configurations and parameters, integrating GenAI capabilities into the system by defining their operational settings.", "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["GenAI", "Configuration", "Add"]}}, {"path": "/ux/common/marketplace/genai/{id}/", "method": "GET", "details": {"operationId": "ux_common_marketplace_genai_retrieve_2", "description": "API endpoint for GenAI configuration management", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To retrieve specific configuration details for GenAI resources."}, "content_for_embedding": "This API endpoint allows for the retrieval of specific GenAI configuration details. It is used to manage and view the settings of GenAI resources within the system, providing insights into their operational parameters and setup.", "semantic_keywords": ["Configuration", "Retrieval", "GenAI"], "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/genai/{id}/", "method": "PUT", "details": {"operationId": "ux_common_marketplace_genai_update", "description": "API endpoint for GenAI configuration management", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To update existing GenAI (Generative AI) configurations within the system."}, "content_for_embedding": "This API endpoint allows for the management and updating of GenAI (Generative AI) configurations. It enables users to modify specific GenAI settings identified by a unique ID, facilitating the customization and fine-tuning of AI models and their operational parameters within the platform. This is a PUT operation, indicating that it is used to update an existing configuration.", "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["GenAI", "Configuration", "Update"]}}, {"path": "/ux/common/marketplace/genai/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_marketplace_genai_destroy", "description": "API endpoint for GenAI configuration management", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To manage GenAI configurations by allowing their deletion from the system."}, "content_for_embedding": "This API allows for the deletion of a specific GenAI configuration by its unique identifier. It is used for managing GenAI configurations within the system.", "semantic_keywords": ["GenAI", "Configuration", "Delete"], "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/genai/key/", "method": "POST", "details": {"operationId": "ux_common_marketplace_genai_key_create", "description": "Create a new API key", "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "System Integrator"], "primary_use_case": "This API creates a new API key, enabling secure authentication and access for applications or users to interact with GenAI services."}, "content_for_embedding": "This API facilitates the creation of new API keys, which are essential for authenticating and authorizing access to GenAI services. It is a POST request to generate a unique credential for secure communication and integration.", "semantic_keywords": ["API Key", "API Registration", "Authentication Token"], "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/genai/key/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_marketplace_genai_key_destroy", "description": "API endpoint for GenAI configuration management", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows for the removal of specific GenAI configuration keys, enabling administrators to manage and clean up GenAI-related settings within the system."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific GenAI configuration key identified by its unique ID. It is a crucial component of the GenAI configuration management system, allowing users to maintain and clean up GenAI-related settings. This functionality is analogous to managing other system configurations, such as account settings, resource configurations, and general parameters, which can be added, edited, and deleted.", "semantic_keywords": ["Configuration", "Delete", "GenAI"], "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/genai/keys/", "method": "GET", "details": {"operationId": "ux_common_marketplace_genai_keys_retrieve", "description": "List all GenAI API keys", "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "IT Operations", "Security Analyst"], "primary_use_case": "To retrieve a list of existing GenAI API keys for management or integration purposes."}, "content_for_embedding": "This API allows users to retrieve a comprehensive list of all configured GenAI API keys. It provides a mechanism to view existing credentials, which is crucial for managing access to Generative AI services. This operation is part of the overall API key management lifecycle, including creation, saving, and managing tokens as referenced in the documentation.", "semantic_keywords": ["API Key", "API Registration", "GenAI"], "ontology_classification": {"features": ["api_registration", "device_credential_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/genai/options/", "method": "GET", "details": {"operationId": "ux_common_marketplace_genai_options_retrieve", "description": "Get options for GenAI configuration", "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To retrieve available configuration options for Generative AI (GenAI) functionalities within the system, enabling administrators and developers to set up and customize GenAI features."}, "content_for_embedding": "This API retrieves available configuration options for Generative AI (GenAI) functionalities within the system. It allows administrators and developers to understand and set up various parameters related to GenAI, such as enabling/disabling features, setting up models, or defining operational behaviors.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["GenAI", "Configuration", "Retrieval"]}}, {"path": "/ux/common/marketplace/genai/provider/", "method": "POST", "details": {"operationId": "ux_common_marketplace_genai_provider_create", "description": "Create or update provider configuration", "tags": ["GenAI"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To enable the system to connect to and utilize Generative AI services by configuring their respective providers."}, "content_for_embedding": "This API allows for the creation and updating of configuration settings for Generative AI (GenAI) providers. It enables administrators or developers to integrate and manage external GenAI services by defining their specific configurations within the platform.", "ontology_classification": {"features": ["api_registration", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["GenAI", "Configuration", "API Registration"]}}, {"path": "/ux/common/marketplace/marketplace/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_retrieve", "description": "This GET API endpoint provides functionality related to the marketplace, allowing users to view and manage various requests and catalog items. Specifically, it enables users to view submitted and older requests, such as access requests or catalog items. Depending on user privileges, it may also support editing existing information or services within the marketplace, aligning with concepts like the 'Edit' privilege for modules like 'Business Catalogue'.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the primary function appears to be viewing, the mention of 'edited' in the original description, coupled with the 'Edit' privilege context, suggests potential read/write capabilities if the marketplace configuration allows. This API seems to be a central point for user interaction with catalog items and service requests within the marketplace environment."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Administrators"], "primary_use_case": "This API allows users to view and potentially manage various requests and catalog items within a marketplace environment. It serves as a central point for user interaction with these elements, enabling them to see submitted requests, older requests, and catalog items, with the possibility of editing based on their privileges."}, "content_for_embedding": "This GET API endpoint provides functionality for users to view and manage requests and catalog items within a marketplace. It enables the viewing of submitted and older requests, such as access requests or catalog items. Depending on user privileges, it may also support editing existing information or services. This API is a central point for user interaction with catalog items and service requests in the marketplace.", "ontology_classification": {"features": ["request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_monitoring_&_tracking", "request_search_&_filtering"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Request Management", "Service Catalog", "View"]}}, {"path": "/ux/common/marketplace/marketplace/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_create", "description": "This API endpoint provides functionalities for managing marketplace requests and items. It allows users to view and submit new or older requests, such as access requests or catalog items, and enables the viewing and editing of services listed within the marketplace. The specific view/edit privileges are controlled by user roles, similar to how 'View' and 'Edit' privileges in modules like the 'Business Catalogue' determine a user's ability to see and modify services.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint handles operations related to the submission, viewing, and modification of items and requests within the marketplace, including catalog items and access requests. While the API specification currently lists no specific parameters or request body, its functionality suggests it interacts with various marketplace entities. The ability to 'edit' implies that users with appropriate privileges can modify existing marketplace entries or submitted requests, aligning with the 'Edit' privilege described in the context where a user can perform edit operations within a selected module. Users require specific 'View' and 'Edit' privileges, typically governed by their role, to interact with the marketplace effectively. The endpoint's use case is primarily centered around user interaction with the marketplace for submitting and managing requests and catalog items."}, "llm_generated": {"business_context": {"user_personas": ["User", "Administrator"], "primary_use_case": "To enable users to manage marketplace requests and items, including submission, viewing, and editing of catalog items and access requests."}, "content_for_embedding": "This API endpoint is designed for managing marketplace requests and items. It allows users to submit new requests, view existing requests and catalog items, and modify services available within the marketplace. User access and modification capabilities are governed by defined roles and privileges.", "semantic_keywords": ["Request Management", "Edit", "View"], "ontology_classification": {"features": ["request_creation_&_channels", "request_display_views_(panel_&_grid)", "request_editing_&_quick_actions", "detailed_request_information_display"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/common/marketplace/marketplace/{id}/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_retrieve_2", "description": "This GET API endpoint allows for the retrieval of marketplace information, specifically enabling users to view or edit details associated with a particular marketplace ID. It is primarily used to interact with marketplace configurations, similar to how app registrations and APIs can be viewed, edited, or deleted within the system's administrative and service management interfaces. The 'id' path parameter is crucial for specifying the target marketplace.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that identifies the specific marketplace being accessed. While the API specification mentions 'users to be viewed or edited,' the context suggests the endpoint primarily concerns the viewing and potential editing of marketplace configurations, akin to 'Edit App registration' or 'APIs can be edited or deleted.' This implies that the 'edit' functionality, if present, would modify marketplace attributes rather than user profiles within the marketplace. This endpoint does not return a response body, indicating its primary function might be to initiate or facilitate a state change or an internal process rather than returning data directly to the caller. For more details on editing privileges in general, refer to sections regarding 'Edit' privilege in the Infinity User Guide, which allow users to view and perform edit operations within selected modules/pages."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Developer"], "primary_use_case": "To retrieve and potentially modify configuration details for a specific marketplace within the system."}, "content_for_embedding": "This API endpoint allows for the retrieval and potential editing of specific marketplace configurations identified by a unique ID. It provides access to view or modify details related to a particular marketplace, similar to managing app registrations or other API configurations within the system. The API uses an 'id' path parameter to specify the target marketplace.", "semantic_keywords": ["Marketplace", "Configuration", "Details retrieval"], "ontology_classification": {"features": ["platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/{id}/", "method": "PUT", "details": {"operationId": "ux_common_marketplace_marketplace_update", "description": "This API endpoint allows for the viewing and editing of marketplace configurations, specifically targeting app registrations. It provides functionality to update an existing marketplace item identified by a unique ID. Based on insights from the user guide, editing operations enable users to view and modify configurations within the selected module or page, similar to how 'Edit App registration' is performed in the OAuth consent screen.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is a mandatory string that uniquely identifies the marketplace item (e.g., an app registration) to be viewed or edited. This endpoint is crucial for managing and updating app registration details, allowing for flexibility in the configurations. While specific request body details are not provided in the specification, PUT requests typically involve sending the full updated resource in the body."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To enable administrators and developers to manage and update application registration details and configurations within the marketplace."}, "content_for_embedding": "This API endpoint facilitates the viewing and updating of marketplace configurations, specifically focusing on app registrations. It enables modification of existing marketplace items identified by a unique ID, allowing for flexible management of app registration details.", "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Update", "Configuration", "API Registration"]}}, {"path": "/ux/common/marketplace/marketplace/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_marketplace_marketplace_destroy", "description": "This API endpoint allows for the deletion of a specific marketplace instance. While the original description mentioned viewing or editing users, the DELETE method combined with the most relevant context (Rank 4, which states 'APIs can be edited or deleted using the respective icons') strongly indicates its purpose is to remove an API or marketplace registration. The `id` path parameter identifies the specific marketplace instance to be deleted.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the marketplace instance to be deleted. As per context 4 and 6, APIs (and by extension marketplace instances) can be both edited and deleted. Context 1 and 2 mention 'Edit App registration', which implies that applications or marketplace integrations are subject to such operations. Upon successful deletion, there will be no response body."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Developer"], "primary_use_case": "This API is used to remove or unregister a specific marketplace integration or API registration from the system."}, "content_for_embedding": "This API endpoint facilitates the permanent removal of a registered marketplace instance or API integration. It uses a unique identifier (`id`) to target the specific instance for deletion. This is crucial for maintaining a clean and accurate record of active integrations and for security purposes, allowing administrators to revoke access or remove outdated connections. The operation is irreversible and results in no response body upon successful completion. This API is part of the system's configuration management, specifically for managing API registrations and marketplace integrations.", "semantic_keywords": ["Delete", "API Registration", "Marketplace"], "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/apikey/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_apikey_retrieve", "description": "This GET endpoint is part of the API Key management system within the marketplace, specifically designed to allow users to view their API key configuration. It provides insights into how API keys are set up, including authentication types such as 'API Key' (which utilizes a key-value pair in headers or query parameters), 'Basic Auth' (username and password), 'Custom Auth' (token details, key, and request type), or 'No Auth'. This endpoint is fundamental for understanding current API access controls and can be part of a workflow where API configurations are either viewed or later edited.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the description mentions that users can be 'viewed or edited', this specific GET endpoint is primarily for viewing. Editing capabilities would likely reside in a PUT or POST method. The concept of 'API Key' setup and different authentication types (Auth Key, Auth Value, Add Key to Header/Query) are central to understanding the output of this endpoint. This aligns with the processes described for adding and managing APIs, where authentication parameters are critical. There is no specific request body for this GET request, and the response is noted as 'No response body'; however, it is implied that the API key details themselves would be part of the response or accessible through the UI that this API serves. Users should refer to API Permissions and OAuth consent screen configurations for related setup."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "API Manager"], "primary_use_case": "This API allows users to view their API key configurations within the marketplace, providing insights into how API keys are set up and supporting API access control understanding and management workflows."}, "content_for_embedding": "This GET endpoint is designed for retrieving API key configurations within a marketplace environment. It provides details on various authentication types, including API Key (key-value pairs in headers/query parameters), Basic Auth (username/password), Custom Auth (token details, key, request type), and No Auth. This API is crucial for understanding current API access controls and serves as a foundational component for workflows involving the viewing and potential editing of API configurations. While this specific endpoint is for viewing, it is part of a broader API key management system. The response implicitly contains API key details, which are essential for managing API access and authentication parameters.", "semantic_keywords": ["API Key", "Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["api_registration", "platform_account_configuration", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/app_details/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_app_details_retrieve", "description": "This API endpoint provides functionalities related to the 'app_details' within the marketplace, specifically allowing for the viewing and editing of application registration details. It aligns with processes navigated via 'APIs & Services -> OAuth consent screen, configuration page', where users would 'Edit App registration' to continue. While the original description broadly stated 'users can be viewed or edited', the context clarifies this refers to managing application registrations within the marketplace context, enabling operations like viewing existing app details and making modifications.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is typically accessed after navigating through the administrative UI to the 'APIs & Services -> OAuth consent screen, configuration page'. The primary action indicated by the context is the 'Edit App registration', suggesting its use case involves modifying existing application settings. The API is a GET method, implying it's used to retrieve current app details before any editing action is performed through a subsequent call (not described here). The initial API description stating 'users to be viewed or edited' is refined by the context to specifically refer to 'App registration' details in the marketplace, not user accounts themselves."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To retrieve and view application registration details within the marketplace, serving as a prerequisite for any subsequent editing actions."}, "content_for_embedding": "This API endpoint is designed to retrieve and display specific application registration details within the marketplace environment. It allows users, typically administrators or developers, to view existing application settings, which is a necessary step before any modifications can be made. The endpoint is accessed through the administrative UI, specifically within the \"APIs & Services -> OAuth consent screen, configuration page\", where users would manage their application registrations.", "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["API Registration", "Details retrieval", "Marketplace"]}}, {"path": "/ux/common/marketplace/marketplace/app_status/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_app_status_retrieve", "description": "This API endpoint allows users to view and manage (edit) the status of applications within the marketplace. This is particularly relevant for scenarios involving app registration and configuration. While the specific details on *what* status is being viewed or edited are not explicitly detailed in the provided contexts, the strong emphasis on 'Edit App registration' (Context Rank 1 & 2) suggests this endpoint facilitates the modification of an app's registration status. The general ability to 'view' or 'edit' users mentioned in the original description should be interpreted in the context of app management and registration within the marketplace.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is likely accessed after navigating through an 'APIs & Services -> OAuth consent screen, configuration page' interface, as suggested by Context Rank 1 and 2. The primary operation appears to be related to the 'Edit App registration' workflow. There are no specific parameters or request body details provided in the API specification for this GET method, implying the app status being viewed or edited might be determined by user context or other system settings not exposed via direct parameters in this specific call. The response body is stated as 'No response body', which is unusual for a GET request intended to 'view' something. This might imply the 'viewing' aspect refers to the state of an app already being displayed in a UI before an edit action is performed, or the status is conveyed through a header or other indirect mechanism. Further details on how the app status is identified for viewing or editing would be beneficial but are not present in the provided contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Application Manager"], "primary_use_case": "This API allows users to view and manage the status of applications within the marketplace, particularly focusing on app registration and configuration."}, "content_for_embedding": "This API endpoint is used to retrieve and manage the status of applications registered within the marketplace. It provides functionality to view the current status and is relevant for workflows involving app registration and configuration settings.", "ontology_classification": {"features": ["api_registration", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["API Registration", "App Status", "Marketplace"]}}, {"path": "/ux/common/marketplace/marketplace/app_sync_schedule/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_app_sync_schedule_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Administrator"], "primary_use_case": "To manage user accounts, allowing administrators to view and modify user details and privileges within the system, specifically in the context of the marketplace."}, "content_for_embedding": "This API endpoint is designed for managing user accounts, enabling administrators to view and edit user information. It supports operations such as inviting new users, modifying existing user details, and deleting user accounts. Access to this functionality is privilege-based, ensuring that only authorized personnel can perform these administrative tasks. The API operates within the marketplace context, allowing for granular control over user access and roles relevant to marketplace applications.", "semantic_keywords": ["User Management", "Marketplace", "Edit"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/azure_config/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_azure_config_retrieve", "description": "This API endpoint is designed to retrieve configuration details related to Azure services within the marketplace. It is specifically relevant for operations concerning Azure Active Directory synchronization and Azure Bot setup, as described in the user guides. This endpoint helps in understanding how various Azure components, such as user/requester accounts from Azure Active Directory and Azure Bot instances, are integrated and managed within the system. While the original description mentioned users being 'viewed or edited', the context strongly suggests its primary purpose is related to the configuration and integration aspects of Azure services rather than direct user management.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint likely provides information necessary for configuring Azure services, such as when integrating Azure Active Directory to sync user accounts with Infraon, or during the setup of an Azure Bot. The related guide contexts detail steps like 'CREATE A RESOURCE' for Azure Bots, 'Register your app' for Azure Active Directory, and managing 'App Registrations' and 'OAuth consent screen' within the Azure portal. Although the API specification states 'No response body' and 'parameters' are empty, the context implies this GET request would be used to retrieve existing Azure configuration settings, which can then be used for reference or subsequent editing operations, aligning with the general 'viewed or edited' function mentioned in the original description if interpreted broadly for configuration objects."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Integrators", "Developers"], "primary_use_case": "To retrieve configuration details for Azure services, specifically for integrating Azure Active Directory and setting up Azure Bots within the marketplace. This enables understanding and managing the integration of Azure components."}, "content_for_embedding": "This API endpoint retrieves configuration details for Azure services within the marketplace. It is crucial for operations involving Azure Active Directory synchronization and Azure Bot setup, providing insights into how Azure components like user accounts from Azure Active Directory and Azure Bot instances are integrated and managed. The endpoint supports understanding existing Azure configuration settings, which can be used for reference or subsequent operations related to Azure service integration.", "semantic_keywords": ["Azure Active Directory", "Bot Configuration", "Configuration retrieval"], "ontology_classification": {"features": ["azure_active_directory_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/azure_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_azure_settings_retrieve", "description": "This API endpoint provides functionalities for managing Azure settings within the marketplace. It allows for the configuration and viewing of Azure-related details, specifically in the context of integrating Azure services like Azure Active Directory for user and requester account synchronization within Infraon. This includes steps for creating Azure Bots, managing API permissions, and configuring app registrations, which are crucial for establishing connectivity and enabling user functionalities between Azure and the system.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily used in conjunction with setting up and managing Azure integrations. Key processes it relates to include: 1. Registering applications in Azure Active Directory (Azure AD App Registrations). 2. Configuring OAuth consent screens for API access. 3. Setting up Azure Bot services. While the current specification indicates 'No response body' for GET requests, future enhancements might include returning configuration details or status. Developers should refer to the 'Azure Active Directory' and 'Create Azure Bot' sections in the Infinity User Guide for detailed configuration steps that this endpoint facilitates."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Professional", "Developer"], "primary_use_case": "To enable and manage the integration of Microsoft Azure services, including Azure Active Directory for user synchronization and Azure Bot services, within the Infraon marketplace platform."}, "content_for_embedding": "This API endpoint is designed for managing Azure settings within the Infraon marketplace. It facilitates the integration of Azure services, specifically Azure Active Directory for synchronizing user and requester accounts, and enables the configuration of Azure Bots and app registrations. This is crucial for establishing connectivity, managing API permissions, and enabling user functionalities between Azure and the Infraon system. It supports processes like Azure AD App Registrations and OAuth consent screen setup.", "ontology_classification": {"features": ["azure_active_directory_integration", "platform_account_configuration", "api_registration", "user_management"], "primary_module": "marketplace_(beta)", "confidence_score": 1}, "semantic_keywords": ["Azure Active Directory", "API Integration", "Configuration"]}}, {"path": "/ux/common/marketplace/marketplace/bmc_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_bmc_settings_retrieve", "description": "This API endpoint provides functionalities to view and edit user-related settings within the BMC marketplace. Building upon the core functionality of viewing and performing edit operations, it allows privileged users to manage user access and configurations, similar to how 'Edit' privileges enable viewing and modifying services within a module like 'Business Catalogue'. This endpoint is analogous to the 'OAuth consent screen' configuration page or managing 'App registration' as mentioned in the user guide, highlighting its role in administrative setup.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'Edit' privilege, as described in Context Rank 2, is crucial for understanding this endpoint's capabilities; it grants permission to view and modify selected modules/pages. While the API specification does not list specific parameters, the retrieved contexts suggest this endpoint would be utilized by users with appropriate administrative privileges. Common use cases would involve modifying user permissions, adjusting user details, or configuring user access settings for the marketplace. Further details on specific user-related APIs for reading and enabling permissions can be found under 'User. Read.All' as suggested in Context Rank 7."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "To enable privileged users and administrators to view and manage user-related settings, access, and configurations within the BMC marketplace."}, "content_for_embedding": "This API allows privileged users to view and edit user-related settings and configurations within the BMC marketplace. It enables administrators to manage user access, permissions, and details, similar to an administrative setup for app registration or OAuth consent. The endpoint supports retrieving and modifying user configurations and access settings.", "semantic_keywords": ["User Management", "Configuration", "User Privileges"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/bmc_sync_schedule/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_bmc_sync_schedule_create", "description": "This API endpoint facilitates the management of user-related data within the marketplace, specifically concerning BMC (Business Management Console) sync schedules. It allows for the viewing and editing of user configurations related to these synchronization processes. Building upon its core function, this endpoint enables administrators and privileged users to integrate and manage user capabilities, such as submitting and viewing older requests or catalog items, aligning with broader marketplace functionalities.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Given the 'POST' method, this endpoint likely accepts data to update or create user-related sync schedules. While the API specification does not detail request parameters or a request body, relevant contexts suggest the ability to 'view' and 'edit' implies operations on user privileges and access. For instance, 'Edit' privileges typically allow users to view and modify existing services or configurations within a module. The endpoint may be used to adjust how users interact with and manage their marketplace requests and associated data. It might also involve settings related to user visibility and access control for synchronized data, similar to how other marketplace components handle 'Private' visibility or 'User and User group dropdown' selections for certain actions."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "To manage and update user-related data, configurations, and synchronization schedules within the marketplace, enabling administrators to control user capabilities and access."}, "content_for_embedding": "This API endpoint facilitates the management of user-related data within the marketplace, specifically concerning BMC (Business Management Console) sync schedules. It allows for the viewing and editing of user configurations related to these synchronization processes. Building upon its core function, this endpoint enables administrators and privileged users to integrate and manage user capabilities, such as submitting and viewing older requests or catalog items, aligning with broader marketplace functionalities. Given the 'POST' method, this endpoint likely accepts data to update or create user-related sync schedules. While the API specification does not detail request parameters or a request body, relevant contexts suggest the ability to 'view' and 'edit' implies operations on user privileges and access. For instance, 'Edit' privileges typically allow users to view and modify existing services or configurations within a module. The endpoint may be used to adjust how users interact with and manage their marketplace requests and associated data. It might also involve settings related to user visibility and access control for synchronized data, similar to how other marketplace components handle 'Private' visibility or 'User and User group dropdown' selections for certain actions.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "platform_account_configuration", "general_settings", "network_configuration_management_(nccm)", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Configuration", "Sync Schedule Management", "Access Control"]}}, {"path": "/ux/common/marketplace/marketplace/disable_sync/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_disable_sync_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Developer"], "primary_use_case": "To disable synchronization processes within the marketplace, enabling control over data flow and integration states."}, "content_for_embedding": "This API endpoint facilitates the disabling of synchronization processes within the marketplace module. It provides administrators and system integrators with the capability to manage data flow and control the operational status of integrations within the marketplace.", "semantic_keywords": ["Disable", "Sync Schedule Management", "Marketplace"], "ontology_classification": {"features": ["api_registration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.8}}}, {"path": "/ux/common/marketplace/marketplace/download-teams-manifest/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_download_teams_manifest_create", "description": "This API endpoint facilitates the download of a 'MANIFEST' file essential for integrating Infraon with Microsoft Teams. This manifest file enables users to add Infraon integration within their Microsoft Teams environment, aligning with the process of enabling a new channel for enhanced collaboration.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is a crucial step in setting up Infraon within Microsoft Teams, as detailed in various user guides. After downloading the manifest, users are instructed to navigate to 'APPS' within Microsoft Teams to complete the integration. While the API specification did not include details on parameters or request/response bodies, the primary purpose, as inferred from the high-ranked contexts, is to provide the necessary manifest file for the Teams integration. Users should ensure they agree to the 'Terms of Service' before proceeding with the integration steps facilitated by this download."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Professional", "System Integrator"], "primary_use_case": "Enabling seamless integration of Infraon with Microsoft Teams by providing the necessary manifest file for channel setup."}, "content_for_embedding": "This API endpoint allows users to download a manifest file required to integrate Infraon with Microsoft Teams. This manifest file is crucial for adding Infraon as a new channel within the Microsoft Teams environment, facilitating enhanced collaboration. The download is a prerequisite step before configuring the integration within Microsoft Teams' \"APPS\" section, as outlined in the integration setup guides.", "ontology_classification": {"features": ["microsoft_teams_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}, "semantic_keywords": ["API Integration", "Microsoft Teams Integration", "Download"]}}, {"path": "/ux/common/marketplace/marketplace/google-access-token/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_google_access_token_create", "description": "This API endpoint facilitates the process of obtaining or updating Google access tokens. It is crucial for managing user permissions related to Google services, particularly for viewing or editing user information within directories. The process involves configuring OAuth consent screens and managing authorization scopes such as `https://www.googleapis.com/auth/admin.directory.user.readonly` and `https://www.googleapis.com/auth/cloud-platform`. This endpoint supports the backend operations necessary for applications to interact with Google APIs based on the configured permissions.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The operation of this endpoint is tightly coupled with Google OAuth consent screen configurations, which typically involve navigating through API & Services settings to edit app registrations. Developers should manage authorization scopes carefully, potentially adding or removing scopes as needed, to control the level of access (e.g., read-only or full user management). This endpoint implicitly requires proper handling of authentication types and refresh tokens as part of a broader security protocol. While the API specification refers to editing users, the retrieved contexts emphasize the setup of OAuth and scopes which are prerequisites for such operations."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator"], "primary_use_case": "To obtain and update Google access tokens, enabling secure management of user permissions and interaction with Google services, particularly for viewing and editing user information within directories."}, "content_for_embedding": "This API endpoint obtains or updates Google access tokens, essential for managing user permissions for Google services, including viewing or editing user information in directories. It involves configuring Google OAuth consent screens and managing authorization scopes like 'https://www.googleapis.com/auth/admin.directory.user.readonly' and 'https://www.googleapis.com/auth/cloud-platform'. This process is critical for applications to securely interact with Google APIs, requiring careful handling of authentication types and refresh tokens. The setup includes navigating Google Cloud Console to APIs & Services -> OAuth consent screen, editing app registrations, and adding/removing necessary scopes.", "ontology_classification": {"features": ["google_workspace_integration", "api_registration", "user_management"], "primary_module": "marketplace_(beta)", "confidence_score": 0.9}, "semantic_keywords": ["Authentication Token", "API Integration", "User Management"]}}, {"path": "/ux/common/marketplace/marketplace/google-auth-update/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_google_auth_update_create", "description": "This API endpoint is designed to facilitate the update of Google authentication settings, specifically concerning the scopes required for managing Google Directory users. It enables the configuration or modification of access levels, potentially involving the 'admin.directory.user.readonly' and 'cloud-platform' scopes. This process is integral to managing user permissions and access within the system via Google's OAuth consent screen.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of a broader process for configuring Google authentication, which includes navigating to APIs & Services -> OAuth consent screen and editing the App registration. Users may also need to select specific authorization scopes, such as 'admin.directory.user' or 'admin.directory.user.readonly', within the OAuth consent screen configuration to define the level of access granted to Google services. While the API specification does not detail request parameters or a response body, the context suggests its role in updating authorization details. For more information on the required scopes and authorization flow, refer to the Authorization guide."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "This API updates Google authentication settings, specifically managing OAuth scopes for Google Directory users to control access levels and user permissions within the system."}, "content_for_embedding": "This API endpoint facilitates the update of Google authentication settings, specifically concerning the scopes required for managing Google Directory users. It enables the configuration or modification of access levels, potentially involving 'admin.directory.user.readonly' and 'cloud-platform' scopes. This process is integral to managing user permissions and access within the system via Google's OAuth consent screen. This endpoint is part of a broader process for configuring Google authentication, which includes navigating to APIs & Services -> OAuth consent screen and editing the App registration. Users may also need to select specific authorization scopes, such as 'admin.directory.user' or 'admin.directory.user.readonly', within the OAuth consent screen configuration to define the level of access granted to Google services. The relevant documentation highlights the steps for requesting minimum OAuth scopes, signing into Google Cloud Console, navigating to APIs & Services -> OAuth consent screen, editing app registration, and adding/removing scopes.", "semantic_keywords": ["Google Authentication", "API Permissions", "API Integration"], "ontology_classification": {"features": ["google_workspace_integration", "api_registration", "platform_account_configuration", "user_management"], "primary_module": "marketplace_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/google-client-data/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_google_client_data_retrieve", "description": "This API endpoint provides Google client data, specifically allowing for the viewing and editing of user-related information. It interacts with Google APIs, potentially leveraging scopes such as `https://www.googleapis.com/auth/admin.directory.user.readonly` and `https://www.googleapis.com/auth/cloud-platform` for authorization. This functionality is likely part of a broader system for managing user access and permissions within a Google ecosystem.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint's functionality appears to be closely tied to OAuth consent screen configurations and potentially user management within Google's Admin Directory. Authorization scopes like `admin.directory.user.readonly` suggest read-only access to user data, while other contexts imply broader user management capabilities for viewing and editing. Users leveraging this endpoint may need to ensure proper OAuth scopes are added and configured as per Google's Authorization guide (referenced in the contexts). The API's purpose seems to encompass enabling user-related operations within a marketplace context, possibly allowing administrators or privileged users to view or modify user profiles or associated data."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Privileged users", "Developers"], "primary_use_case": "To manage user access and profiles within a Google ecosystem, specifically for viewing and editing Google client user data in a marketplace context."}, "content_for_embedding": "This API retrieves and allows editing of Google client user data, integrating with Google APIs and requiring specific OAuth scopes like `https://www.googleapis.com/auth/admin.directory.user.readonly` and `https://www.googleapis.com/auth/cloud-platform`. It's designed for managing user access and profiles within a Google ecosystem, particularly in a marketplace environment. It supports administrators and privileged users in viewing and modifying user-related information, and is closely tied to OAuth consent screen configurations and Google Admin Directory.", "ontology_classification": {"features": ["google_workspace_integration", "user_management"], "primary_module": "marketplace_(beta)", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Google Authentication", "Marketplace"]}}, {"path": "/ux/common/marketplace/marketplace/google_signin/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_google_signin_create", "description": "This API endpoint facilitates the Google Sign-In process, specifically for the marketplace. It allows users to authenticate and access the system using their existing Google credentials, ensuring a secure and convenient login experience. This method eliminates the need for separate login details, streamlining user access to the Infraon portal.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to the OAuth consent flow, which involves configuring OAuth consent screens and managing authorization scopes. While this specific endpoint handles the sign-in, related processes involve setting up scopes like `https://www.googleapis.com/auth/admin.directory.user.readonly` and `https://www.googleapis.com/auth/cloud-platform` to grant necessary permissions. Users should ensure their Google account is properly authorized by clicking 'Allow' to complete the integration. This process is part of a larger authorization guide that details the steps for authentication and permission management."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Administrators"], "primary_use_case": "Enables users to securely authenticate and access the Infraon portal using their Google credentials via the marketplace, streamlining the login process and integrating with Google services."}, "content_for_embedding": "This API endpoint facilitates the Google Sign-In process for the marketplace, allowing users to authenticate and access the Infraon portal using their existing Google credentials. It is integral to the OAuth consent flow, managing authorization scopes and ensuring a secure and convenient login experience as part of Google Workspace integration.", "ontology_classification": {"features": ["google_workspace_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}, "semantic_keywords": ["Google Authentication", "User Authentication", "Marketplace"]}}, {"path": "/ux/common/marketplace/marketplace/google_workspace_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_google_workspace_settings_retrieve", "description": "This GET API endpoint retrieves or allows for the viewing and editing of Google Workspace settings related to user management within the marketplace module. It is crucial for integrating Google Workspace with the system, specifically concerning user synchronization and management within the application. The functionality is tied to the necessary authorization scopes, particularly for managing user directories within Google Workspace.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "To ensure proper functioning and data synchronization, the integration requires specific OAuth scopes, such as `https://www.googleapis.com/auth/admin.directory.user.readonly` and `https://www.googleapis.com/auth/cloud-platform`. These scopes facilitate read and potentially write operations on Google Workspace user directories. Developers should refer to the Authorization guide for detailed instructions on configuring these scopes and enabling the necessary API permissions within the Google Cloud Console. This involves navigating to 'APIs & Services -> OAuth consent screen' and correctly adding or removing required scopes."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Developer"], "primary_use_case": "This API retrieves and allows for the viewing and editing of Google Workspace settings, crucial for user synchronization and management within the marketplace module. It enables administrators to integrate and manage Google Workspace user directories within the system."}, "content_for_embedding": "This GET API endpoint retrieves, views, and allows editing of Google Workspace settings for user management within the marketplace module. It is essential for integrating Google Workspace, enabling user synchronization and directory management. The API requires specific OAuth scopes like `https://www.googleapis.com/auth/admin.directory.user.readonly` and `https://www.googleapis.com/auth/cloud-platform` for proper functioning and data synchronization. This is a privilege-based feature, accessible to administrators for checking and editing account configuration settings, and managing users.", "ontology_classification": {"features": ["google_workspace_integration", "user_management", "platform_account_configuration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}, "semantic_keywords": ["Google Authentication", "User Management", "Configuration"]}}, {"path": "/ux/common/marketplace/marketplace/jira_options/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_jira_options_retrieve", "description": "This API endpoint is designed to retrieve and manage configuration options related to JIRA integration within the Marketplace section of the application. It allows users to view or edit the settings necessary for connecting and interacting with JIRA, specifically those options accessible after navigating to the 'Marketplace' tab and selecting 'JIRA' integration.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral for setting up JIRA connectivity within the application. While the current specification indicates no specific parameters, the broader context suggests its use in managing JIRA integration, potentially including credential management. Users would typically access functionalities related to this endpoint after logging in to the JIRA admin account webpage to generate an API token, which might be a prerequisite for configuring the integration via the application's UI that interacts with this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Personnel"], "primary_use_case": "To allow users to retrieve and manage configuration settings for JIRA integration within the application's Marketplace section."}, "content_for_embedding": "This API endpoint retrieves and manages configuration options for JIRA integration within the application's Marketplace. It allows users to view or edit settings required for connecting and interacting with JIRA, facilitating the setup of JIRA connectivity. Users typically access this functionality after logging into their JIRA admin account to generate an API token for configuration.", "ontology_classification": {"features": ["jira_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.9}, "semantic_keywords": ["JIRA Integration", "Configuration", "API Integration"]}}, {"path": "/ux/common/marketplace/marketplace/jira_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_jira_settings_retrieve", "description": "This API endpoint provides read and write access to JIRA settings specifically within the marketplace integration. It allows for the configuration and management of JIRA credentials necessary for the integration, including JIRA Admin Email, JIRA API Token, and JIRA Site Name. The functionality supports the initial setup and ongoing management of the JIRA integration, which is typically accessed via the 'Marketplace' tab.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for establishing and maintaining the connection between the system and JIRA. After installing the JIRA integration from the Marketplace, users need to provide their JIRA credentials for configuration. Specifically, generating an API Token from the JIRA admin account (by navigating to Security settings) is a prerequisite for this configuration. The gathered credentials are then used to verify and activate the integration. While the current specification indicates 'no response body' for a GET request, it is implied that the endpoint is involved in both viewing and potentially updating these settings."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Integration Specialist"], "primary_use_case": "To configure and manage JIRA integration settings, including credentials (JIRA Admin Email, JIRA API Token, and JIRA Site Name), to establish and maintain the connection between the system and JIRA."}, "content_for_embedding": "This API endpoint provides read and write access to JIRA settings specifically within the marketplace integration. It allows for the configuration and management of JIRA credentials necessary for the integration, including JIRA Admin Email, JIRA API Token, and JIRA Site Name. The functionality supports the initial setup and ongoing management of the JIRA integration, which is typically accessed via the 'Marketplace' tab. This endpoint is crucial for establishing and maintaining the connection between the system and JIRA. After installing the JIRA integration from the Marketplace, users need to provide their JIRA credentials for configuration. Specifically, generating an API Token from the JIRA admin account (by navigating to Security settings) is a prerequisite for this configuration. The gathered credentials are then used to verify and activate the integration.", "ontology_classification": {"features": ["jira_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}, "semantic_keywords": ["JIRA Integration", "Configuration", "API Integration"]}}, {"path": "/ux/common/marketplace/marketplace/ldap_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_ldap_settings_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Staff"], "primary_use_case": "This API endpoint is used to retrieve the current LDAP (Lightweight Directory Access Protocol) settings within the Marketplace module. It enables administrators to view the configuration details for integrating with an external LDAP directory, which is essential for user authentication and managing user roles and privileges within the system."}, "content_for_embedding": "This API endpoint retrieves the current LDAP (Lightweight Directory Access Protocol) settings for the Marketplace module. It allows administrators to view the configuration details of the LDAP integration, which is fundamental for managing user authentication, roles, and privileges by connecting to an external LDAP directory. This GET request provides insight into the existing LDAP setup for user access within the system.", "ontology_classification": {"features": ["ldap_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}, "semantic_keywords": ["LDAP Integration", "User Authentication", "Configuration retrieval"]}}, {"path": "/ux/common/marketplace/marketplace/microsoft-access-token/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_microsoft_access_token_create", "description": "This API endpoint is designed to manage Microsoft Access Tokens within the marketplace. It facilitates operations related to viewing and editing user access and authentication configurations. This includes managing authentication types, configuring security scopes (public/private access), and handling refresh tokens, as indicated by the context regarding OAuth consent screens and authentication protocols. It extends beyond simple user viewing/editing to encompass the underlying access token management.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint likely interacts with the OAuth consent screen configuration, as suggested by the higher-ranked contexts. Users might need to navigate to 'APIs & Services -> OAuth consent screen' to manage related settings for app registrations. The process may involve choosing authentication types (e.g., API Key, Basic Auth, Custom Auth, No Auth), selecting whether to issue refresh tokens, and defining security scopes (Public for unrestricted access, Private for authorized users only) as outlined in the provided guides. While the API specification currently lists no specific parameters or request body, the contexts imply that successful interaction might depend on pre-configured security parameters and authentication setup within the application."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To manage Microsoft Access Tokens, user access, and authentication configurations within the marketplace, including authentication types, security scopes, and refresh tokens."}, "content_for_embedding": "This API endpoint is designed to manage Microsoft Access Tokens within the marketplace. It facilitates operations related to viewing and editing user access and authentication configurations, including authentication types, security scopes (public/private access), and handling refresh tokens. It interacts with OAuth consent screen configurations and may require pre-configured security parameters and authentication setup. It allows for generating permanent token numbers and is a privilege-based feature, meaning user access (view, add, edit, delete, execute, export) is dependent on administrator-granted privileges. It also relates to checking and editing account configuration settings.", "ontology_classification": {"features": ["azure_active_directory_integration", "user_configuration", "roles_&_privileges_management", "platform_account_configuration", "api_registration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.95}, "semantic_keywords": ["Authentication Token", "User Authentication", "API Integration"]}}, {"path": "/ux/common/marketplace/marketplace/ms_signin/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_ms_signin_create", "description": "This API endpoint facilitates the sign-in process within the marketplace. While the original description broadly states it allows users to be 'viewed or edited,' the context suggests a focus on the user sign-in flow. Based on relevant documentation, this API likely handles a part of the user authentication process, potentially involving app registration configurations or managing user access within the 'marketplace' ecosystem for viewing and editing purposes, similar to how APIs themselves can be edited for parameters and authentication types.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The context provided, particularly Ranks 1 and 2, hint that this endpoint might be related to the 'OAuth consent screen' and 'Edit App registration' processes within an 'APIs & Services' section. This suggests it could be used for configuring or initiating user access for applications. While the API specification shows no explicit parameters or request body, its role in enabling users to be 'viewed or edited' in a sign-in context implies an interaction with user identity or application permissions. Contexts 3, 6, and 7 also emphasize the ability to edit or view entities (like APIs or catalogue items) which reinforces the stated functionality, possibly by linking user roles to editing privileges after a sign-in. Given the path `/ux/common/marketplace/marketplace/ms_signin/`, further details on security scopes and authentication types (like those mentioned in Ranks 3, 7, and 9) are likely relevant for proper usage, even if not directly exposed as parameters in this specification snippet."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Administrators", "Developers"], "primary_use_case": "Facilitate user sign-in and manage user access and permissions within a marketplace environment, including app registration and linking user roles to privileges."}, "content_for_embedding": "This API endpoint manages user sign-in and authentication within a marketplace environment. It handles user access, app registration configurations, and links user roles to editing privileges. It is crucial for controlling what users can view or edit post-sign-in, involving security scopes and API key authentication.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "api_registration", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Authentication", "API Registration", "User Management"]}}, {"path": "/ux/common/marketplace/marketplace/options/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_options_retrieve", "description": "This API endpoint, `/ux/common/marketplace/marketplace/options/`, is designed to manage user access and operations within the marketplace. It facilitates capabilities such as viewing and editing module-specific functionalities available to a user. This includes general views of services, adding new services, and performing edit operations within selected modules or pages. It is particularly relevant for managing user privileges related to marketplace requests and catalog items, ensuring users can submit, view, and potentially modify these entries based on their assigned permissions.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API definition (GET method, no request body, no parameters) suggests its primary use is for retrieving options or configurations related to marketplace functions which users can then act upon. While the description mentions editing, the GET method strongly implies this endpoint *retrieves* information relevant to editing rather than performing the edit itself. For instance, it might return a list of editable items or the current state of user privileges. Users might need 'Edit' privileges to perform operations within a selected module or page, allowing them to view and modify existing services, as highlighted in the user guide contexts within the 'Business Catalogue' module example. Further clarification or a different HTTP method (e.g., PUT or POST) would be expected to actually perform an edit operation. This endpoint could be used in conjunction with other APIs to manage overall user access and submitted requests within the marketplace."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "user"], "primary_use_case": "This API retrieves options and configurations related to user access and privileges within the marketplace, enabling users to understand and potentially perform actions based on their assigned permissions."}, "content_for_embedding": "This API endpoint retrieves options and configurations related to user access, operations, and privileges within the marketplace. It provides information necessary for viewing and potentially enabling editing of module-specific functionalities and managing user permissions for marketplace requests and catalog items. As a GET request, it serves to retrieve the current state of user privileges or a list of editable items, rather than performing modifications directly. It is crucial for understanding what actions users can perform based on their assigned roles and privileges within the marketplace environment.", "semantic_keywords": ["User Privileges", "Access Control", "Configuration Options"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/rc_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_rc_settings_retrieve", "description": "This API endpoint, `/ux/common/marketplace/marketplace/rc_settings/`, is designed to allow users to view and edit settings related to the Marketplace. It is specifically linked to functionalities enabling the viewing and modification of registered application settings, echoing the 'Edit App registration' and 'OAuth consent screen, configuration page' mentions in the provided context. The endpoint's primary purpose is to provide control over the Marketplace's foundational configurations, allowing users with appropriate privileges to both inspect current settings and apply necessary updates. This aligns with the concept of 'Edit' privileges enabling view and modify operations within a selected module or page, as described in context rank 3.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided contexts, particularly ranks 1, 2, and 3, this endpoint appears to be part of a larger workflow for managing API and service configurations within a 'Marketplace' or similar platform. The operation described ('GET') suggests retrieval of settings, but the original description states 'viewed or edited', hinting at a potential underlying mechanism that might support editing actions, possibly through other associated endpoints or if the 'GET' itself is a precursor for a subsequent 'PUT' or 'PATCH' operation. However, given the 'GET' method, this specific endpoint's primary role is retrieval. The context highlights that users might navigate to 'APIs & Services -> OAuth consent screen, configuration page' and then 'Edit App registration', suggesting this endpoint could be involved in fetching the current state of these registration settings. It's crucial for users to have 'Edit' privileges to perform modifications, as detailed in context rank 3. There is no request body for this GET request, and the response body is described as 'No response body', which is unusual for a GET request designed to view settings; typically, a GET request returns the data being viewed. This might imply that interaction is handled through UI elements or the response format is non-standard JSON and not explicitly documented here."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Users with privileges to manage application registrations and platform configurations"], "primary_use_case": "To enable users to view and inspect configuration settings for applications registered within the Marketplace, specifically related to API registration and OAuth consent screens."}, "content_for_embedding": "This API retrieves configuration settings for registered applications within the Marketplace. It allows users to view details related to API registration and OAuth consent screens, providing insight into the current state of platform-level account configurations.", "semantic_keywords": ["Configuration", "Retrieval", "View", "Marketplace", "API Registration"], "ontology_classification": {"features": ["api_registration", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/requester_mobile_no/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_requester_mobile_no_retrieve", "description": "This API endpoint, specifically designed for the marketplace, allows for the retrieval and modification of a requester's mobile number. While the initial description broadly mentions viewing or editing users, the context suggests a focus on 'requesters' and 'mobile' details, aligning with typical user management within a marketplace or service portal. This aligns with the ability to edit user details as mentioned in several contexts (Ranks 5, 7, 8, 9).", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint appears to be part of a larger user management system. Although the API specification lists no parameters or request body, given its 'GET' method and purpose, it likely expects a requester identifier (e.g., ID or username) either implicitly through context or via a path parameter not explicitly listed in the 'parameters' field but implied by the path structure. The ability to edit is highlighted, with references to 'Detailed Edit' actions and 'respective icons' in other API management contexts (Ranks 5, 7, 8). The path '/ux/common/marketplace/marketplace/requester_mobile_no/' suggests a specific focus on mobile numbers for requesters within the marketplace module. The lack of specific parameters in the API JSON makes it difficult to ascertain exact input requirements, but it can be inferred that a requester's identifier would be needed to retrieve or modify their mobile number. This is consistent with viewing and editing user or requester details found in contexts (Ranks 9, 10)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Agent"], "primary_use_case": "This API allows for the retrieval and modification of a requester's mobile number within a marketplace or service portal, facilitating user data management."}, "content_for_embedding": "This API endpoint is designed for the marketplace to retrieve and modify a requester's mobile number. It is part of a larger user management system, focusing on updating specific user contact details. The API supports viewing and editing user information, specifically mobile numbers for requesters within the marketplace module.", "semantic_keywords": ["User Management", "Details retrieval", "Update"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/roles/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_roles_retrieve", "description": "This `/ux/common/marketplace/marketplace/roles/` endpoint is a backend API that enables the viewing and editing of user roles within the system. It is designed to support administrative functions where specific privileges can be assigned or modified. For instance, the 'Edit' privilege allows users to view and perform edit operations within a selected module or page, such as the 'Business Catalogue', enabling them to modify existing services. Similarly, the 'View' privilege grants read-only access to a module.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically manages user roles and their associated privileges. The concept of 'privileges' like 'View', 'Add', and 'Edit' is crucial to understanding its functionality, as elaborated in the Infinity User Guide. These privileges determine the scope of actions a user can undertake within various modules (e.g., 'Business Catalogue'). While the current API specification does not list specific parameters, it is implied that interactions with this endpoint would involve mechanisms to identify the user and the role/privilege being viewed or edited. Developers should refer to the 'Roles & Privileges' module mentioned in the admin guide for detailed instructions on managing roles."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To manage and view user roles and their associated privileges within the system."}, "content_for_embedding": "This API endpoint allows administrators to view and manage user roles and their associated privileges within the system. It supports administrative functions for assigning, modifying, viewing, and potentially adding or deleting specific user privileges like 'View', 'Add', and 'Edit' across various modules such as the 'Business Catalogue'. This endpoint is crucial for granular control over user permissions, as detailed in the 'Roles & Privileges' module of the admin guide.", "semantic_keywords": ["User Management", "User Privileges", "Access Control"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/save_bmc_config/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_bmc_config_create", "description": "This API endpoint facilitates the viewing and editing of user configurations within the Business Management Console (BMC). Drawing from relevant user guides, specifically the 'Edit' privilege context, this endpoint allows users with appropriate permissions to view and modify configurations. For instance, similar to how a user with 'Edit' privilege can view and modify existing services in the 'Business Catalogue' module, this API supports similar operations for BMC configurations.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the primary function is to view and edit, the endpoint name 'save_bmc_config' suggests a focus on persisting changes made to the BMC configuration. The provided contexts emphasize the importance of user privileges for both viewing and editing capabilities. Given the API specification indicates no parameters or request body description, and 'No response body', further details on how configuration data is passed for saving or retrieved for viewing are needed for comprehensive use. This lack of detail in the spec suggests these might be handled implicitly or via session/state, which is not typical for REST APIs. Users should confirm the expected input/output format for successful operation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "Privileged User"], "primary_use_case": "To enable administrators and privileged users to view, edit, and save user configurations within the Business Management Console (BMC), ensuring proper access control for configuration management."}, "content_for_embedding": "This API endpoint is designed for managing user configurations within the Business Management Console (BMC). It allows users with appropriate permissions, such as network administrators, to view, edit, and persist changes to configurations. The functionality is similar to managing services in a Business Catalogue, emphasizing privilege-based access for operations like adding, editing, or deleting configuration parameters and profiles. The primary function suggested by the endpoint name 'save_bmc_config' is to save or update these configurations.", "semantic_keywords": ["Configuration", "User Privileges", "Edit"], "ontology_classification": {"features": ["roles_&_privileges_management", "network_configuration_management_(nccm)", "advanced_resource_configuration_(aiops)", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/save_config_app/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_config_app_create", "description": "This API endpoint, `save_config_app`, is designed for managing application configurations within the marketplace. While its original description states it allows users to be 'viewed or edited', the contextual information strongly suggests its primary function is to facilitate the *editing* of application registrations and configurations. This includes operations related to managing and saving app configurations, particularly in the context of OAuth consent screens and API permissions.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is likely used after navigating to the 'APIs & Services -> OAuth consent screen, configuration page' and clicking on 'Edit App registration' as described in the user guide (Context Rank 1, 2). It plays a crucial role in saving changes made to application settings. Although the API specification lists no parameters or request body, it is implicitly understood that the configuration data to be saved would be part of the request. Users require 'Edit' privileges to perform operations via this endpoint. This API is distinct from 'User' related APIs (Context Rank 5) and focuses on application configuration rather than user management."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "This API is used for saving and managing application configurations within a marketplace, specifically for editing app registrations, OAuth consent screens, and API permissions."}, "content_for_embedding": "This API endpoint, `save_config_app`, is designed for managing and saving application configurations within the marketplace. Its primary function is to facilitate the editing of application registrations and configurations, including operations related to OAuth consent screens and API permissions. It is used to save changes made to application settings, typically after navigating to the OAuth consent screen configuration page and clicking \"Edit App registration\". Users require \"Edit\" privileges to use this endpoint.", "ontology_classification": {"features": ["api_registration", "platform_account_configuration", "roles_&_privileges_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration", "API Registration", "Edit"]}}, {"path": "/ux/common/marketplace/marketplace/save_jira_config/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_jira_config_create", "description": "This API endpoint is designed to save the configuration settings for the JIRA integration within the marketplace. It is a crucial step in setting up the connection between the system and JIRA, requiring credentials like JIRA Admin Email, JIRA API Token, and JIRA Site Name. This process is part of configuring the Infraon JIRA integration, which involves adding credentials after installation. The endpoint facilitates the persistence of these integration settings.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "To successfully use this endpoint, users should have already generated an API token from their JIRA admin account. This process involves logging into the JIRA admin account webpage, finding the user account menu, selecting 'Manage Account', and then navigating to 'Security' to generate the API token. After entering all credentials, it is recommended to 'Verify' the configuration to activate the integration. This endpoint is typically invoked after selecting 'JIRA' from the Marketplace tab and proceeding with the installation and credential configuration steps."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Personnel"], "primary_use_case": "To save and persist the configuration settings for the JIRA integration, enabling connectivity between the system and JIRA."}, "content_for_embedding": "This API endpoint is used to save the configuration settings for the JIRA integration within the marketplace. It facilitates the persistence of crucial credentials like JIRA Admin Email, JIRA API Token, and JIRA Site Name, which are necessary for setting up and activating the Infraon JIRA integration after installation. Users are expected to have generated an API token from their JIRA admin account prior to using this endpoint.", "semantic_keywords": ["JIRA Integration", "Configuration", "API Integration"], "ontology_classification": {"features": ["jira_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}}}, {"path": "/ux/common/marketplace/marketplace/save_ldap_config/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_ldap_config_create", "description": "This API endpoint facilitates the saving of LDAP (Lightweight Directory Access Protocol) configuration settings within the Marketplace module. It is a crucial step in integrating LDAP with the system, enabling users to be viewed or edited based on their LDAP credentials. This involves entering critical details such as LDAP URL/IP Address, Port, User Name, Password, Base DN, Advance Search settings, and Role mapping. Once configured, these settings allow for the verification and mapping of user data from LDAP to Infraon Infinity.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the LDAP integration process, which can be initiated by navigating to the 'Marketplace' tab and selecting 'LDAP' integration, followed by clicking 'Install'. The process requires users to fill in various LDAP credentials and configuration details as prompted. It's essential to 'Verify' the credentials after inputting them to ensure proper connection. Mapping of user data from LDAP to Infraon Infinity is done in the Requester tab by aligning adjacent fields with related fields."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Personnel"], "primary_use_case": "This API saves LDAP configuration settings to integrate LDAP with the system, enabling user authentication, viewing, editing, and data mapping from LDAP to Infraon Infinity. It streamlines user management by allowing direct addition of end-users from LDAP."}, "content_for_embedding": "This API endpoint, `save_ldap_config`, is used to save LDAP (Lightweight Directory Access Protocol) configuration settings within the Marketplace module. It is a critical step for integrating LDAP with the system, allowing users to be viewed or edited based on their LDAP credentials. The configuration involves providing details such as LDAP URL/IP Address, Port, User Name, Password, Base DN, Advance Search settings, and Role mapping. Once configured, these settings facilitate the verification and mapping of user data from LDAP to Infraon Infinity. This process is initiated from the 'Marketplace' tab by selecting 'LDAP' integration and clicking 'Install'. Users are required to fill in various LDAP credentials and configuration details, which must be verified to ensure proper connection. User data mapping from LDAP to Infraon Infinity is performed in the Requester tab by aligning adjacent fields. This integration streamlines user management by enabling direct addition of end-users from LDAP to the Infraon portal, eliminating manual data entry and improving visibility of requester details.", "ontology_classification": {"features": ["ldap_integration", "user_management", "platform_account_configuration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.95}, "semantic_keywords": ["LDAP Integration", "Configuration", "User Management"]}}, {"path": "/ux/common/marketplace/marketplace/save_map/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_map_create", "description": "This API endpoint facilitates the saving of 'map' configurations related to marketplace functionalities. While the specific nature of the 'map' is not detailed, the endpoint supports actions related to user management, allowing users to be viewed or edited. This aligns with broader system capabilities for managing user permissions and operations, such as editing app registrations or managing privileges within modules.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The endpoint `save_map` suggests a configuration or persistence operation. The original description's mention of 'users to be viewed or edited' is highly relevant. Contexts consistently highlight the ability to 'view' and 'edit' user-related entities, such as app registrations or privileges within specific modules (e.g., 'Business Catalogue'). Although the API specification lists no parameters or request body, implying the 'map' configuration might be implicitly derived or handled, future enhancements could involve explicit request details for mapping configurations. This functionality is likely tied into user management or system configuration screens where such 'maps' are defined or updated."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "This API saves configuration maps related to marketplace functionalities, specifically supporting user management operations such as viewing and editing user permissions and app registrations."}, "content_for_embedding": "This API endpoint facilitates the saving of \"map\" configurations within marketplace functionalities. It supports user management operations, including the ability to view or edit users, app registrations, and privileges within various modules. This functionality is integral to system configuration and managing user permissions within the platform.", "semantic_keywords": ["Configuration", "User Management", "Save"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/save_ring_central_config/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_ring_central_config_create", "description": "This API endpoint is designed to save the configuration settings for the Ring Central integration within the Infraon Marketplace. It facilitates the persistence of user-defined configurations related to the Ring Central service, which is accessible via the Marketplace tab in the Infraon account's left panel. While the original description mentioned viewing or editing users, the context strongly indicates its focus on Ring Central integration settings. This endpoint is crucial for maintaining and updating the integration's operational parameters.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "To access the Ring Central integration configuration, users typically navigate to the 'Marketplace' tab on the left panel after logging into their Infraon account, and then select 'Ring Central' integration. Although the endpoint path suggests 'save_ring_central_config', the initial description broadly mentioned viewing or editing users, which might imply a relationship with user privileges or how users interact with the Ring Central integration. However, given the specific endpoint name and the strong relevance of context mentioning 'Ring Central' integration and 'save_ring_central_config', the primary function is related to configuration saving for that specific integration. No specific parameters or request body details were provided in the API spec or extracted contexts, so it is assumed the configuration data is passed in the request body in an unspecified format."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT personnel", "Integration Managers", "Users responsible for setting up and maintaining third-party integrations"], "primary_use_case": "To save and persist configuration settings for the Ring Central integration within the Infraon Marketplace, enabling users to manage the operational parameters of this third-party service."}, "content_for_embedding": "This API endpoint is used to save and update the configuration settings for the Ring Central integration, accessible via the Marketplace tab in the Infraon account. It ensures the persistence of user-defined parameters for the Ring Central service, which is crucial for maintaining its operational functionality within the Infraon platform. This includes saving credentials and other integration-specific settings after installation or modification.", "ontology_classification": {"features": ["ring_central_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}, "semantic_keywords": ["Ring Central Integration", "Configuration", "Save"]}}, {"path": "/ux/common/marketplace/marketplace/save_servicenow_config/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_servicenow_config_create", "description": "This API endpoint is designed to save configuration settings related to ServiceNow within the marketplace. While the original description broadly mentioned viewing or editing users, the context suggests this endpoint is likely involved in saving configurations that dictate user privileges and operations, specifically within the ServiceNow integration part of the marketplace. This aligns with the 'save_servicenow_config' path and the 'POST' method, indicating a modification or creation of configuration.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The available contexts frequently mention 'Edit' privileges and operations, particularly regarding modules like 'Business Catalogue' and general edit actions. This suggests that the configuration saved via this endpoint might define what users can view, edit, or perform within ServiceNow-related modules accessible through the marketplace. Although the API specification states 'No response body', successful saving of configuration would typically be indicated by a status code. No specific parameters or request body details were provided in the API spec, so the exact configuration data structure to be saved is not described here."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "This API saves configuration settings for ServiceNow integration within the marketplace, specifically managing user privileges and operational access within ServiceNow-related modules."}, "content_for_embedding": "This API endpoint is used to save and update configuration settings for the ServiceNow integration within the marketplace. It is crucial for defining and managing user privileges, roles, and operational access within ServiceNow modules accessible through the marketplace. This includes setting up what users can view, edit, add, delete, execute, and export, aligning with privilege-based features and configuration profiles.", "ontology_classification": {"features": ["servicenow_integration", "roles_&_privileges_management", "user_management", "platform_account_configuration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.95}, "semantic_keywords": ["ServiceNow Integration", "Configuration", "User Privileges"]}}, {"path": "/ux/common/marketplace/marketplace/save_sync_time_count/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_sync_time_count_create", "description": "This API endpoint, `/ux/common/marketplace/marketplace/save_sync_time_count/`, facilitates the viewing and editing of user-related data within the marketplace. It appears to be associated with functionalities that allow users to manage and access information related to their requests, potentially including older requests or catalog items, as suggested by Context Rank 1. While the path includes 'save_sync_time_count', the primary function described here is user data management, especially regarding submission and viewing of requests, aligning with the concept of users being 'viewed or edited'.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Given the path's `save_sync_time_count` component and the description relating to user viewing/editing and requests (Context Rank 1), this endpoint may also be involved in saving synchronization or count data related to user activities or requests within the marketplace. Although the current API specification does not list any parameters or request body details, typically, user-related APIs would involve identifiers (e.g., user IDs) and potentially request payloads for editing operations. Further details about specific parameters or request body schema for user views or edits are not available from the provided context. The context does not provide specific usage notes or common use cases directly for this endpoint, but broadly hints at user interaction within a marketplace for submitting and viewing requests."}, "llm_generated": {"business_context": {"user_personas": ["Users", "Administrators", "Technicians"], "primary_use_case": "Managing and synchronizing user and request-related data within a marketplace environment."}, "content_for_embedding": "This API endpoint, `/ux/common/marketplace/marketplace/save_sync_time_count/`, is designed for managing user-related data and requests within a marketplace. It allows for viewing and editing user information, and managing and accessing details related to user requests, including older requests or catalog items. While the path suggests saving synchronization or count data, the core functionality described involves user data management and request handling. This includes the ability to categorize users and requesters, and to track activities or requests. The API supports the submission and viewing of requests, and may involve saving synchronization or count data related to these user activities or requests within the marketplace.", "ontology_classification": {"features": ["request_editing_&_quick_actions", "detailed_request_information_display", "request_monitoring_&_tracking", "requester_interaction_history_display", "user_management"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Request Management", "User Management", "Sync Schedule Management"]}}, {"path": "/ux/common/marketplace/marketplace/save_tenable_config/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_tenable_config_create", "description": "This API endpoint, `/ux/common/marketplace/marketplace/save_tenable_config/`, facilitates the saving of Tenable configurations. While the original description broadly referred to viewing or editing users, the context strongly indicates that 'edit' privileges within the system allow users to view and perform edit operations within selected modules or pages, such as the Business Catalogue module. This suggests this endpoint is likely involved in saving configurations after they have been edited, focusing on the changes made to the configuration rather than merely viewing or general user management. The term 'save_tenable_config' in the path implies a specific function related to applying or storing changes to Tenable-related settings.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided contexts, the core functionality revolves around 'edit' privileges, which enable users to view and modify existing configurations within the system. For instance, in modules like 'Business Catalogue', an 'Edit' privilege allows users to view and edit services. Though the API definition states 'No response body', successful execution would imply the Tenable configuration has been saved based on the input provided (which is not explicitly defined in the `request_body_description` but implicitly required for a 'save' operation). Developers should ensure they understand the scope of 'edit' operations within the specific module relevant to Tenable configurations before utilizing this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "Developer"], "primary_use_case": "This API endpoint is used to save configurations related to Tenable, allowing users with appropriate edit privileges to apply changes to Tenable-specific settings within the system."}, "content_for_embedding": "This API endpoint, `/ux/common/marketplace/marketplace/save_tenable_config/`, facilitates the saving of Tenable configurations. It is designed for users with \"edit\" privileges to modify and store changes to Tenable-related settings. The core functionality involves applying or storing updated configurations, rather than just viewing or general user management. Successful execution implies the Tenable configuration has been saved based on the provided input.", "ontology_classification": {"features": ["platform_account_configuration", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration", "Save", "Tenable"]}}, {"path": "/ux/common/marketplace/marketplace/save_whatsapp_map/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_save_whatsapp_map_create", "description": "This API endpoint, `/ux/common/marketplace/marketplace/save_whatsapp_map/`, is used to save or update the mapping configuration for the 'Infraon-WhatsApp' integration within the Marketplace. It is a critical step in enabling API permissions and setting up the WhatsApp integration, specifically after an app has been created and the 'WhatsApp > Set up' or 'WhatsApp > Quick Start' options have been accessed. This process involves saving the configured settings that allow the system to establish and maintain the connection for WhatsApp functionalities.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the 'Infraon-WhatsApp' integration setup flow. It is invoked as part of a multi-step process for configuring WhatsApp capabilities within the Infinity platform. Steps typically include selecting the 'Infraon-WhatsApp' integration from the Marketplace tab and proceeding with API setup. While the API specification states 'No response body', successful execution implies the configuration mapping has been saved, enabling further WhatsApp-related functionalities such as creating tickets, requests, and viewing ticket details via WhatsApp chat. The context suggests that prompts for credentials like Name, Phone Number, Phone Number ID, WhatsApp Business Account ID, and Permanent Access Token are part of the overall configuration process; this specific API call likely persists these settings after they are entered by the user. The API does not have explicit parameters defined in the specification, suggesting it might utilize data from a request body or preceding UI interactions."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Personnel"], "primary_use_case": "Saving and updating the mapping configuration for the Infraon-WhatsApp integration to enable API permissions and WhatsApp functionalities."}, "content_for_embedding": "This API endpoint is crucial for configuring the 'Infraon-WhatsApp' integration within the Marketplace. It allows administrators to save or update the necessary mapping configurations and API permissions after the initial app creation and setup steps. Successful execution of this API enables various WhatsApp functionalities, including ticket creation and viewing, by persisting essential credentials like Phone Number ID, WhatsApp Business Account ID, and Permanent Access Token.", "semantic_keywords": ["WhatsApp Integration", "Configuration", "Save"], "ontology_classification": {"features": ["whatsapp_integration"], "primary_module": "marketplace_(beta)", "confidence_score": 1}}}, {"path": "/ux/common/marketplace/marketplace/sn_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_sn_settings_retrieve", "description": "This API endpoint allows for viewing and potentially editing user settings related to the marketplace via the `/ux/common/marketplace/marketplace/sn_settings/` path. While the primary function is related to user settings, context suggests a broader interaction with user-related APIs and permissions for viewing and editing. This aligns with functionalities often seen in user management modules where users can be viewed, added, and edited, similar to how device credentials can be managed.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current specification indicates a GET method with no parameters or request body. For detailed user management operations, developers should be aware of companion APIs that handle 'User' related permissions, such as 'User. Read.All', and consider how these interact with viewing or editing user settings. The ability to 'edit' users suggests potential update operations, even if this specific GET endpoint is for viewing. This endpoint would likely be integrated into an administrative or user management interface. Further details on managing users, including adding, editing, or deleting, can typically be found in the Users module of the application, as highlighted in related documentation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "To view and potentially edit user settings within a marketplace context, facilitating user management operations."}, "content_for_embedding": "This API endpoint allows for the retrieval of user settings specifically related to the marketplace. It supports viewing and potentially editing these settings, aligning with broader user management functionalities such as viewing, adding, and editing users, similar to how device credentials are managed. This endpoint is typically integrated into administrative or user management interfaces to manage user-specific configurations.", "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "User Configuration", "Marketplace"]}}, {"path": "/ux/common/marketplace/marketplace/team_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_team_settings_retrieve", "description": "This API endpoint allows users to view and manage team settings within the marketplace. It facilitates the viewing and editing of information related to teams, which are groups of users categorized for various purposes like reporting managers, technical skills, or support levels (L1, L2). This includes the ability to add new teams, as well as modify and delete existing ones, similar to how roles can be edited and deleted. While the primary focus is on team management, it also implicitly relates to user permissions and access, as users are assigned to multiple teams, and teams are assigned to specific modules.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is a GET request, primarily used for retrieving team-related information. Although the API documentation mentions 'users to be viewed or edited', the contextual information strongly indicates that the focus is on 'teams' composed of users and their associated settings within the marketplace. The 'Edit' privilege mentioned in the context allows viewing and performing edit operations within a selected module/page. Therefore, this endpoint likely supports administrative or privileged users in managing team configurations. Common use cases include listing all defined teams, viewing the details of a specific team, and preparing for modifications to existing teams. While the endpoint description mentions 'editing,' for a GET method, this refers to retrieving data that is editable, rather than executing an edit operation directly through this specific GET request."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Privileged User"], "primary_use_case": "To view, manage, add, modify, and delete team settings and associated user permissions within the marketplace."}, "content_for_embedding": "This API endpoint is a GET request designed for retrieving and managing team settings within a marketplace environment. It allows for viewing, adding, modifying, and deleting information related to teams, which are groups of users categorized by various attributes like reporting managers, technical skills, or support levels. The endpoint implicitly handles user permissions and access, as users are assigned to multiple teams, and teams are linked to specific modules. While the description mentions \"editing,\" for a GET method, this refers to retrieving data that is editable, rather than performing an edit operation directly. Common use cases include listing all defined teams, viewing details of a specific team, and preparing for modifications.", "semantic_keywords": ["Team Management", "User Management", "Retrieval"], "ontology_classification": {"features": ["team_&_department_management", "user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/tenable_settings/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_tenable_settings_retrieve", "description": "This API endpoint allows for the management of Tenable settings within the marketplace, specifically enabling the viewing and editing of these settings. While the original description mentioned 'users', the context heavily points to 'Tenable settings' as the subject of this endpoint, implying that user access to specific Tenable configurations - such as permissions for viewing or editing within modules like 'Business Catalogue' - can be viewed or configured. It facilitates operations similar to those found in user permission management for modules like 'User. Read.All' within API scopes, allowing administrators to control access levels (view/edit) for marketplace-related Tenable configurations.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint likely pertains to managing Tenable-specific configurations or integrations within a marketplace module, rather than directly managing individual system users. The 'edit' privilege, as highlighted in the contexts, allows users to view and perform edit operations within the selected module/page. This suggests that the endpoint is used to apply or modify these settings. Although no parameters or request body are specified in the API definition, successful calls imply that the operation is performed based on internal state or predefined parameters. Future updates might introduce specific parameters related to Tenable setting IDs or modification payloads. This API would be crucial for administrators setting up or fine-tuning marketplace integrations involving Tenable."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To allow administrators to manage and configure Tenable integration settings and associated user access permissions within the marketplace."}, "content_for_embedding": "This API endpoint allows administrators to view and edit Tenable-specific settings and configurations within the marketplace module. It enables the management of user access levels and permissions for these Tenable configurations, ensuring that administrators can control who can view or modify the integration settings. This is crucial for fine-tuning and setting up marketplace integrations involving Tenable.", "semantic_keywords": ["Tenable", "Configuration", "User Privileges"], "ontology_classification": {"features": ["general_settings", "roles_&_privileges_management", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/marketplace/marketplace/uninstall-app/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_uninstall_app_create", "description": "This API endpoint facilitates the uninstallation of applications from the marketplace. While the original description mentioned 'users to be viewed or edited,' the context strongly suggests its primary purpose is related to app management within a marketplace environment, likely for uninstalling apps as indicated by the path. The endpoint is part of the `/ux/common/marketplace/marketplace/` path, directly implying its functionality within the marketplace ecosystem. It does not require a request body and returns no response body.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The provided contexts heavily focus on editing applications, managing API permissions, and user privileges (add, edit, delete) related to modules and services. However, these contexts do not directly elaborate on the 'uninstall-app' functionality itself. Contexts describing 'Edit App registration' (Rank 1, 2) or 'APIs can be edited or deleted using the respective icons' (Rank 6, 10) suggest broader app management capabilities, but none directly address the uninstallation process or its specific parameters/flow. Therefore, no specific additional information regarding the 'uninstall-app' operation can be derived from the provided contexts beyond its general purpose as inferred from the endpoint path."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "Facilitates the uninstallation of applications from the marketplace."}, "content_for_embedding": "This API endpoint allows for the uninstallation of applications within a marketplace environment. It is a POST request and does not require a request body or return a response body. Its primary function is app management, specifically the removal of applications from the marketplace.", "semantic_keywords": ["Delete", "Marketplace", "Application Control"], "ontology_classification": {"features": [], "primary_module": "marketplace_(beta)", "confidence_score": 1}}}, {"path": "/ux/common/marketplace/marketplace/update_config/", "method": "POST", "details": {"operationId": "ux_common_marketplace_marketplace_update_config_create", "description": "This API endpoint facilitates the viewing and editing of configurations within the marketplace, specifically related to user management and application registration. It allows users to view existing configurations and perform edit operations, such as updating app registrations or modifying privileges within various modules like the Business Catalogue. This aligns with the 'Edit' privilege described in the documentation, enabling users to view and perform edit actions within a selected module or page.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is particularly relevant for managing and updating app registration details, as indicated by the context regarding navigating to APIs & Services -> OAuth consent screen configuration page and clicking 'Edit App registration'. While the API specification currently lists no parameters or request body, typical usage would involve providing configuration details to be updated. This API provides the capability to edit user-related settings, aligning with broader API permission concepts like 'User.Read.All' for managing user APIs. It permits detailed edits rather than quick edit actions."}, "llm_generated": {"business_context": {"primary_use_case": "To enable administrators and authorized users to view and modify various configurations within the marketplace, including user management settings, application registrations, and associated privileges."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of configurations within the marketplace, specifically related to user management and application registration. It allows users to update existing app registrations and modify privileges within various modules. This aligns with the 'Edit' privilege and supports detailed configuration changes, including managing OAuth consent screen configurations and user-related settings.", "ontology_classification": {"features": ["api_registration", "user_management", "roles_&_privileges_management", "platform_account_configuration", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Configuration", "User Management", "API Registration"]}}, {"path": "/ux/common/marketplace/marketplace/whats_app_config/", "method": "GET", "details": {"operationId": "ux_common_marketplace_marketplace_whats_app_config_retrieve", "description": "This GET API endpoint is part of the WhatsApp configuration within the marketplace section, allowing for the retrieval of configuration details that enable user viewing and editing functionalities related to WhatsApp. While the endpoint's direct purpose is to allow users to be viewed or edited, it integrates with the broader system's privilege management, specifically allowing users with 'Edit' privileges to view and perform edit operations within a selected module/page. This is consistent with how other APIs can be configured and managed, including enabling permissions and editing app registrations as seen in the OAuth consent screen configurations.", "tags": ["Marketplace"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification indicates no parameters are required and there is no response body. However, based on the context, the 'Edit' privilege is crucial for interaction with this endpoint, suggesting that the ability to 'view and perform edit operations' applies to the retrieved WhatsApp configuration settings. Other APIs in the system can be edited or deleted using respective icons, implying that this GET endpoint likely precedes an edit operation accessible elsewhere, possibly through a UI that leverages this endpoint to display current settings. Enabling API permissions, as described in the context, is a prerequisite for utilizing such endpoints."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with edit privileges"], "primary_use_case": "To retrieve WhatsApp configuration details for viewing and to facilitate subsequent editing operations within the marketplace section of the platform."}, "content_for_embedding": "This GET API endpoint retrieves WhatsApp configuration details, such as credentials (Name, Phone Number, Phone Number ID, WhatsApp Business Account ID, and Permanent Access Token), within the Marketplace section. It allows for viewing these settings and is intended to precede potential edit operations. Access to this endpoint is privilege-based, requiring specific \"Edit\" permissions granted by an administrator. It is an integral part of the Infraon-WhatsApp integration setup, enabling users to check and manage account configuration settings related to WhatsApp.", "semantic_keywords": ["WhatsApp Integration", "Configuration Retrieval", "API Permissions"], "ontology_classification": {"features": ["whatsapp_integration", "platform_account_configuration"], "primary_module": "marketplace_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/3api/", "method": "GET", "details": {"operationId": "ux_common_messenger_3api_list", "description": "This `/ux/common/messenger/3api/` endpoint is designed to manage user-related information within the system. It enables both viewing and editing capabilities for existing users. This includes, but is not limited to, managing 'requesters' (users who request services), 'reporters' (users who raise changes on behalf of requesters), and 'change managers' or 'implementers'. The endpoint likely facilitates the administration of user profiles, permissions, and roles, which are critical for various system functionalities such as service request creation, incident management, and change management workflows, as referenced in the provided user and admin guides.", "tags": ["APIViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/APIList"}}}}, "description": ""}}, "summary": "", "additional_info": "The context suggests that users managed via this API can be internal or external, including roles like 'Technicians' (Tech Support User/NOC Operator) and 'Requesters' with access to specific portals. The API's functionality for editing users might relate to 'Quick Edit' actions for status, priority, or assigning users to requests, or more 'Detailed Edit' actions for comprehensive profile modifications. While the API specification does not list explicit parameters, it's inferred that user identification (e.g., user ID or name) would be required for specific view or edit operations. Further details on specific user attributes or editable fields would likely be found in related documentation concerning 'Users module' or 'requester' management."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "technician", "requester", "reporter", "change manager", "implementer"], "primary_use_case": "This API manages user-related information, including profiles, permissions, and roles, enabling administrators to view and edit existing users within the system. It supports various user types like requesters, reporters, change managers, implementers, and technicians, and is crucial for workflows such as service request creation, incident management, and change management."}, "content_for_embedding": "This API endpoint, `/ux/common/messenger/3api/`, is used for comprehensive user management within the system. It allows administrators and authorized users to view and edit existing user profiles, permissions, and roles. This includes various user types such as requesters, reporters, change managers, implementers, and technicians. The functionality supports both quick and detailed editing of user attributes. This endpoint is integral for managing user access and roles across different modules like service request creation, incident management, and change management workflows, as detailed in the user and admin guides. It facilitates the administration of internal and external users, ensuring proper access and functionality within the Infraon system.", "semantic_keywords": ["User Management", "Edit", "User Roles"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/messenger/3api/", "method": "POST", "details": {"operationId": "ux_common_messenger_3api_create", "description": "This `/ux/common/messenger/3api/` endpoint serves as a central hub for managing user-related data, enabling both the viewing and editing of user profiles and associated documents. It plays a crucial role in systems where user interactions, such as creating requests (e.g., via web portal, mobile app, email, or technician input), reporting issues, or managing changes, are essential. The API supports a wide range of common primitive data types for document serialization, including strings, numbers, booleans, dates, and various ID fields. It also handles compound fields like lists and dictionaries, and specifically addresses nested serialization for `ReferenceField` and `EmbeddedDocumentField`, crucial for representing complex user data structures within the system.", "tags": ["APIViewSet"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/APIList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/APIList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/APIList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/APIList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the extensive support for various data types, from basic `StringField` to advanced `GeoJsonBaseField`. Developers should pay particular attention to how `ReferenceField` and `EmbeddedDocumentField` are handled; for `ReferenceField`, it behaves like a `ForeignKey` in DRF, generating a nested serializer for depth greater than 0, otherwise providing an ID. For `EmbeddedDocumentField`, nested serializers are also autogenerated for non-zero depth, but it is noted that this mechanism might need further review. Generic fields such as `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled with their corresponding serializer fields. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, and their use may lead to incorrect behavior. This endpoint is central to functionalities described in the user guides, such as adding and managing 'Requesters' (users initiating services) and 'Reporters' (users raising changes on behalf of requesters), aligning with the system's focus on user roles and activities."}, "llm_generated": {"business_context": {"user_personas": ["User", "Requester", "Reporter", "Administrator", "Developer"], "primary_use_case": "This API serves as a central hub for managing user-related data, including user profiles and associated documents. It enables viewing and editing of user information and supports functionalities related to user interactions such as creating requests, reporting issues, and managing changes within a system."}, "content_for_embedding": "This API endpoint, `/ux/common/messenger/3api/`, is a central hub for managing user-related data, including user profiles and associated documents. It facilitates viewing and editing of user information and supports various user interactions like creating requests, reporting issues, and managing changes. The API handles diverse primitive and compound data types, with specific attention to nested serialization for `ReferenceField` and `EmbeddedDocumentField` to represent complex user data structures. It is crucial for managing user roles such as \"Requesters\" (users initiating services) and \"Reporters\" (users raising changes on behalf of requesters), aligning with system functionalities focused on user roles and activities. The API also supports generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField`. While robust for many data types, `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested.", "semantic_keywords": ["User Management", "User Roles", "Add"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/3api/{id}/", "method": "GET", "details": {"operationId": "ux_common_messenger_3api_retrieve", "description": "This API endpoint provides functionalities to view and edit individual user or requester profiles. It is part of the `/ux/common/messenger/3api/` suite and targets a specific user identified by an `id` in the path. This functionality is crucial for managing user details, similar to how app registrations can be edited via the OAuth consent screen. The `Messenger Audit` context suggests this endpoint could interact with notification logs related to users.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["APIViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/APIList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the user or requester to be viewed or edited. While the contexts mention 'Edit App registration' and 'Users module' for learning more about users, the core function here is focused on individual user profiles. The endpoint may be used for managing 'requesters' as described in several contexts, which are typically end-users or technicians. The `Quick Edit` and `Detailed Edit` concepts from relevant guides imply potential granular control over user attributes, though the specific attributes editable through this API are not detailed in the provided specification."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User", "Requester"], "primary_use_case": "To view and edit individual user or requester profiles."}, "content_for_embedding": "This API endpoint allows for the retrieval and modification of individual user or requester profiles. It enables viewing detailed user information and performing edits, including quick and detailed updates to profile settings. The functionality supports managing user details and is relevant for administrators overseeing user access and privileges, potentially interacting with notification logs related to users.", "ontology_classification": {"features": ["user_management", "messenger_audit", "roles_&_privileges_management", "quick_edit_(key_attributes)", "detailed_ticket_editing", "detailed_record_view", "requester_interaction_history_display"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Edit", "View"]}}, {"path": "/ux/common/messenger/3api/{id}/", "method": "PUT", "details": {"operationId": "ux_common_messenger_3api_update", "description": "This `PUT` API endpoint, located at `/ux/common/messenger/3api/{id}/`, is designed for managing user data. It allows for both viewing and updating specific user details within the system. The endpoint plays a crucial role in user management, potentially linking to functionalities such as editing app registrations or managing requester information, as suggested by the context documents. It processes various primitive and compound data types for user properties, supporting a wide range of user attributes.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["APIViewSet"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/APIList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/APIList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/APIList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/APIList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the user to be viewed or edited. The request body for this endpoint extensively supports various field types for document serialization, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and more specialized fields like `ObjectIdField` and `GeoPointField`. Compound fields like `ListField` and `DictField` are also supported. It's important to note that `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on the depth. Fields such as `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested. When editing user details, developers should ensure the request body adheres to the specified serializer primitive and compound field types. This endpoint is central to functionalities hinted at in the provided context, such as managing 'requesters' and 'app registrations', which often involves editing user profiles and permissions. For deeper insights into user roles or management, consult the 'Users module' as mentioned in the admin guide (Context Rank 3)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Authorized User", "Developer"], "primary_use_case": "To manage user profiles and permissions, including viewing and updating specific user and requester details within the system."}, "content_for_embedding": "This API endpoint facilitates the viewing and updating of specific user and requester details. As a PUT operation, it takes a user ID to identify the target user for modifications. It supports various data types for user properties and is integral to user management functionalities such as editing user profiles, app registrations, and managing requester information and permissions.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Update", "Requester Management"]}}, {"path": "/ux/common/messenger/3api/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_messenger_3api_partial_update", "description": "This PATCH API endpoint facilitates the modification of user profiles within the messaging system. It allows for the updating of various user attributes, leveraging a robust serializer for different primitive and compound data types. The endpoint specifically targets a user by their unique `id` and is part of the common messenger API, suggesting its utility in managing user interactions and settings.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["APIViewSet"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedAPIList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedAPIList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedAPIList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/APIList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter uniquely identifies the user to be updated. The request body for this `PATCH` operation should contain the fields to be modified, adhering to the specified primitive and compound field types detailed in the 'Serializer for Documents' section (e.g., `StringField`, `BooleanField`, `DateTimeField`, `ListField`, `DictField`).\n\nWhile the primary purpose is editing, the initial description also mentions viewing. For detailed viewing, a GET method might be more appropriate if available. The API leverages specific handling for `ReferenceField` (like DRF's `ForeignKey`) and `EmbeddedDocumentField`, with nested serialization depending on the serializer depth. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled individually.\n\nFields like `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested', and their use should be approached with caution. Other unsupported fields will default to `DocumentField` and may not function as expected.\n\nAlthough the context mentions 'Edit App registration' and 'Edit actions' related to 'Request', these seem to broadly refer to editing functionality rather than specific user profile edits. The administrative guide mentions 'Users module', reinforcing the idea of user management, which aligns with this API endpoint's function. This endpoint is crucial for maintaining up-to-date user information within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To enable the modification and updating of user profiles and their associated attributes within a messaging system, ensuring accurate and up-to-date user information."}, "content_for_embedding": "This PATCH API endpoint facilitates the modification and updating of user profiles and their attributes within a messaging system. It targets a specific user by their unique ID and is crucial for maintaining accurate and up-to-date user information and settings. This functionality supports both administrative management of user data and individual users updating their own profile details, including various primitive and compound data types.", "semantic_keywords": ["User Management", "Update", "Edit"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/3api/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_messenger_3api_destroy", "description": "This `/ux/common/messenger/3api/{id}/` endpoint facilitates the deletion of messenger-related items. While the original description mentioned viewing or editing users, the method `DELETE` and highly relevant context (Rank 6: \"To delete the Request. This action is irreversible.\") strongly indicates its primary function is deletion. The `id` in the path parameter is a unique identifier for the item being deleted. Contexts around 'Messenger Audit' (Rank 8) suggest this API might relate to notifications and messages within the system, further clarifying its scope beyond general 'users'. This endpoint is crucial for maintaining data hygiene by allowing irreversible removal of specific messenger entities.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["APIViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the messenger entity to be deleted. As the method is DELETE, there is no request body, and the response body is explicitly stated as 'No response body'. It is important to note that this action is irreversible, as highlighted in the relevant context. Developers should exercise caution when using this endpoint. While contexts mention 'users' and 'requesters', the specificity of the path `/ux/common/messenger/3api/{id}/` suggests this deletion pertains to message-related requests or records rather than direct user accounts. For general user management, refer to the 'Users module' as indicated in Context Rank 3. For editing requests, a 'Detailed Edit' option is mentioned in Context Rank 6, implying this delete endpoint is not for modifying existing data but permanently removing it."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Staff"], "primary_use_case": "This API facilitates the irreversible deletion of specific messenger-related items, such as notifications or communication records, from the system. It is crucial for maintaining data hygiene by permanently removing these entities."}, "content_for_embedding": "This API endpoint, `/ux/common/messenger/3api/{id}/`, is designed for the irreversible deletion of individual messenger-related items. The `id` path parameter uniquely identifies the specific item to be removed. While the original description might have been ambiguous, the DELETE method and strong contextual clues from \"Messenger Audit\" (acting as a Notification Log) confirm its purpose is to permanently remove message-related requests or records, not general user accounts. This action is final and contributes to data hygiene by allowing the removal of specific communication entities within the system.", "semantic_keywords": ["Delete", "Notifications", "Request Management"], "ontology_classification": {"features": ["request_management_actions_(delete,_copy,_merge)", "internal_&_external_communication", "request_monitoring_&_tracking"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/beep/", "method": "GET", "details": {"operationId": "ux_common_messenger_beep_retrieve", "description": "This API endpoint, `/ux/common/messenger/beep/`, is part of the Messenger functionality, likely responsible for triggering or handling 'beep' notifications. While the original description was generic, context from the guides (Rank 2) indicates a 'Messenger Audit' which displays notifications triggered and received, including types like Email, Slack, WhatsApp, and SMS. This endpoint likely plays a role in the system's ability to trigger or acknowledge these internal system notifications, rather than directly viewing or editing users as initially implied. The 'beep' might signify an alert or a new message/notification event within the system's messaging ecosystem.", "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification shows no parameters defined and no request body. The response is described as 'No response body', suggesting this might be a simple trigger or an internal system endpoint for acknowledging or logging notification events. Given the 'Messenger Audit' context, this endpoint could be related to the internal mechanisms that log or display the complete list of notifications within Infraon. Further details on specific notification types (Email, Slack, WhatsApp, SMS) are available via the 'Messenger Audit' in the system, implying a broader notification framework that this endpoint might be part of."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "System Integrator"], "primary_use_case": "To trigger or acknowledge internal system notifications within the Infraon platform's messaging and notification framework."}, "content_for_embedding": "This API endpoint is responsible for triggering or acknowledging internal system 'beep' notifications within the Infraon platform's messaging and notification framework. It likely plays a role in the backend mechanisms that log and display notifications, as indicated by its connection to the 'Messenger Audit' which tracks triggered and received notifications across various channels like Email, Slack, WhatsApp, and SMS. This endpoint acts as a simple trigger or an internal logging mechanism for notification events, without requiring complex parameters or returning a response body.", "ontology_classification": {"features": ["messenger_audit", "notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Notifications", "Alerts", "Events"]}}, {"path": "/ux/common/messenger/beep/", "method": "POST", "details": {"operationId": "ux_common_messenger_beep_create", "description": "This `/ux/common/messenger/beep/` API endpoint is likely used to trigger or manage notifications within the Infraon system, acting as a component of the 'Messenger Audit' or notification log functionality. While the initial description broadly stated 'users to be viewed or edited,' the gathered context suggests it's more specifically related to message-based interactions. Given the path contains 'messenger' and 'beep', it could be involved in sending various types of notifications (Email, Slack, WhatsApp, SMS) or perhaps triggering a 'beep' sound/notification as part of a service request or system alert process. Notifications can be triggered by end-users or technicians and are often linked to service request creation, where message subject lines become summaries and message bodies become descriptions.", "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification indicates 'No response body' and an empty 'parameters' array. This suggests that the 'beep' action might be an internal trigger or primarily rely on predefined system configurations rather than dynamic input parameters or a direct response payload. Based on the context, this endpoint could be implicitly used when requests are created via various channels (web portal, mobile app, email, phone, WhatsApp, chatbot) or when the system generates configuration alarms/notifications. Further details on how specific notification types (Email, Slack, WhatsApp, SMS) are initiated or what constitutes a 'beep' would require additional documentation beyond the provided contexts. The concept of 'Messenger Audit' as a notification log (Context Rank 2) strongly links this endpoint to the system's notification capabilities."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Technicians", "Administrators", "Developers"], "primary_use_case": "This API endpoint is used to trigger or manage various types of notifications (e.g., email, Slack, WhatsApp, SMS) and system alerts within the Infraon system, often linked to service requests or system events, and its activity is logged in the Messenger Audit."}, "content_for_embedding": "This API endpoint, `/ux/common/messenger/beep/`, serves as a core component for triggering and managing notifications and system alerts within the Infraon platform. It facilitates the sending of diverse notification types, including Email, Slack, WhatsApp, and SMS, and can be activated by end-users, technicians, or system events such as service request creation or configuration alarms. The endpoint's operations are closely integrated with the 'Messenger Audit' functionality, which acts as a comprehensive log for all triggered and received communications, ensuring traceability and oversight of the system's intelligent notification capabilities. While it may primarily function as an internal trigger relying on predefined configurations, its role is central to Infraon's communication and alert infrastructure.", "ontology_classification": {"features": ["messenger_audit", "notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Notifications", "Alerts", "Communication"]}}, {"path": "/ux/common/messenger/beep/{id}/", "method": "GET", "details": {"operationId": "ux_common_messenger_beep_retrieve_2", "description": "This API endpoint allows for viewing and potentially editing messages within the '/ux/common/messenger' system. It serves as a mechanism within the Messenger Audit, which acts as a notification log to display a complete list of triggered and received notifications. Users can view, reply to, or forward messages using this endpoint.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is a required string, likely representing a unique message identifier. This endpoint is crucial for auditing and managing communications within the system, such as those originating from web portals, mobile apps, email, WhatsApp, or chatbots. It is part of the larger 'Messenger Audit' functionality described in the user guide, which provides filtering options for various notification types like Email, Slack, WhatsApp, and SMS."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Support Staff", "End Users"], "primary_use_case": "This API allows users to view, reply to, and forward specific messages within the Messenger Audit system, which functions as a comprehensive notification log. It is crucial for auditing and managing all system communications."}, "content_for_embedding": "This API endpoint, `/ux/common/messenger/beep/{id}/`, is a GET request designed to retrieve and potentially modify individual messages within the `/ux/common/messenger` system. It serves as a core component of the 'Messenger Audit', acting as a detailed notification log. Users can access, view, reply to, or forward specific notifications, identified by a unique 'id', that have been triggered or received through various communication channels such as web portals, mobile applications, email, WhatsApp, and chatbots. This endpoint is vital for auditing and managing all system-wide communications, offering a historical record of notifications that can be filtered by type (e.g., Email, Slack, WhatsApp, SMS).", "semantic_keywords": ["Notifications", "Communication", "Audit"], "ontology_classification": {"features": ["messenger_audit", "audit_log", "ticket_detail_view_(via_id)", "quick_edit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/beep/{id}/", "method": "PUT", "details": {"operationId": "ux_common_messenger_beep_update", "description": "This API endpoint facilitates the management and interaction with internal messenger 'beep' notifications or messages. It allows for the modification or viewing of a specific 'beep' message identified by its unique `id`. Although the original description broadly refers to 'users', the context strongly suggests this endpoint is more specifically for managing notifications within the Infraon system, akin to a 'Messenger Audit' or 'Notification Log' where messages can be viewed, replied to, or forwarded. This aligns with the concept of editing or viewing message content.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the 'beep' notification or message. The 'beep' functionality likely refers to a specific type of internal system notification or chime. Based on context, particularly 'Messenger Audit', this endpoint is probably used to manage the complete list of notifications triggered and received within Infraon, supporting actions like viewing or editing the content of these notifications. Note that the response body is explicitly stated as 'No response body', implying the operation's success or failure is indicated by HTTP status codes alone. While the original description states 'users to be viewed or edited', the context points more towards notifications or messages, specifically within a messenger or audit log functionality."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support"], "primary_use_case": "To manage (modify or view) internal messenger \"beep\" notifications or messages within the Infraon system's Messenger Audit/Notification Log."}, "content_for_embedding": "This API endpoint facilitates the modification or viewing of a specific internal messenger \"beep\" notification or message, identified by its unique ID. It is integral to the Infraon system's Messenger Audit and Notification Log functionalities, allowing users to manage triggered and received notifications.", "ontology_classification": {"features": ["messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Notifications", "Update", "Audit"]}}, {"path": "/ux/common/messenger/beep/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_messenger_beep_partial_update", "description": "This PATCH API endpoint is used to update or edit a specific messenger 'beep' message. While the initial description broadly refers to 'users being viewed or edited', the context strongly suggests this endpoint pertains to messages or notifications within the Messenger Audit system. It allows for modifications to individual messages, similar to how one might view, reply to, or forward messages in a notification log.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the 'beep' message to be updated. Although the request body description is empty, a PATCH operation typically implies sending specific fields to be modified (e.g., message content, status). Based on context from other messenger functionalities (like updating tickets or adding notes to message threads), common use cases for this endpoint could involve marking a message as read/unread, adding a reply, or making minor edits to the message content itself. It is crucial to understand what message attributes can be updated via the request body, which is not specified in the provided JSON but implied by the PATCH method."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Staff", "End-users managing notifications"], "primary_use_case": "To update or edit existing messenger notifications or \"beep\" messages within the Messenger Audit system. This includes functionalities like marking messages as read/unread, adding replies, or making minor edits to the message content."}, "content_for_embedding": "This PATCH API endpoint is designed to update or edit a specific messenger \"beep\" message. It is part of the Messenger Audit system, which functions as a notification log displaying all triggered and received notifications within Infraon. The API allows for modifications to individual messages, similar to how users can view, reply to, or forward messages in a notification log. The `id` path parameter uniquely identifies the \"beep\" message to be updated. Common use cases include marking a message as read/unread, adding a reply, or making minor edits to the message content itself.", "semantic_keywords": ["Notifications", "Messages", "Update"], "ontology_classification": {"features": ["messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/messenger/beep/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_messenger_beep_destroy", "description": "This API endpoint facilitates the deletion of a specific 'beep' message within the user experience (UX) common messenger system. This is relevant to the system's overall messaging and notification capabilities, which include various communication channels like email, Slack, WhatsApp, and SMS, as indicated by the 'Messenger Audit' feature context. The deletion targets a unique message identified by its 'id'.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the 'beep' message to be deleted. Given the context of a 'messenger' and 'notifications', this endpoint likely handles the removal of system-generated alerts or specific user-to-user messages. The 'Messenger Audit' context implies that notifications are logged, and this DELETE operation would remove a specific entry from that log or its corresponding message. There is no request body for this endpoint, and no response body is returned upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System User"], "primary_use_case": "To remove specific 'beep' messages or notifications from the system's messenger and notification logs."}, "content_for_embedding": "This API endpoint allows for the deletion of individual 'beep' messages, which are part of the system's overall messaging and notification framework. These messages are logged within the 'Messenger Audit' feature, which tracks notifications across various channels like email, Slack, WhatsApp, and SMS. The API targets a unique message ID to remove a specific entry from this notification log, ensuring clean-up and management of system-generated alerts or user-to-user communications.", "semantic_keywords": ["Delete", "Notifications", "Messenger Audit"], "ontology_classification": {"features": ["messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/beep/get-sound-files/", "method": "GET", "details": {"operationId": "ux_common_messenger_beep_get_sound_files_retrieve", "description": "This API endpoint is designed to retrieve sound files, likely associated with notification 'beeps' within the Infraon system's messenger functionality. Given the context of 'Messenger Audit' acting as a 'Notification Log' and displaying triggered notifications, this endpoint probably provides audio cues for various notification types such as Email, Slack, WhatsApp, or SMS. It is part of the system's intelligent notification system, where sound files could indicate new messages or alerts.", "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification states 'No response body', it's highly probable that this endpoint, being a 'GET' request to 'get-sound-files', would return the requested sound file or a list of available sound files in a specific format (e.g., audio/mpeg, audio/wav). The current description indicates it 'allows users to be viewed or edited,' which seems contradictory to a 'get-sound-files' endpoint. Based on context, the primary purpose is related to notification sounds, not user management. Users can view, reply to, or forward messages, and these actions or new notifications might be accompanied by sounds retrieved via this endpoint. No specific parameters are mentioned for filtering or selecting sound files in the provided specification or contexts."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "System Integrator"], "primary_use_case": "To provide audio cues (sound files/beeps) for various notification types within the Infraon system's messenger functionality, enhancing the user experience by providing auditory alerts for new messages or triggered notifications."}, "content_for_embedding": "This API endpoint is designed to retrieve sound files, specifically 'beeps,' which are used as audio cues for notifications within the Infraon system's messenger functionality. It supports the intelligent notification system by providing distinct sounds for various notification types, such as Email, Slack, WhatsApp, or SMS, and is relevant to the 'Messenger Audit' feature which logs triggered notifications.", "semantic_keywords": ["Notifications", "Sound files", "Messenger Audit"], "ontology_classification": {"features": ["messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/beep/get-suppressed-messages/", "method": "GET", "details": {"operationId": "ux_common_messenger_beep_get_suppressed_messages_retrieve", "description": "This API endpoint allows users to retrieve messages that have been marked as 'suppressed' within the Messenger Audit system. It functions as part of the Notification Log, displaying messages that were triggered and received within Infraon but are currently suppressed. This is analogous to a 'Trash' or filtered view of notifications, providing a way to review communication that might have been hidden from the main view.", "tags": ["BeepViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The Messenger Audit acts as the Notification Log, displaying a complete list of triggered and received notifications. While the endpoint specifically targets suppressed messages, the broader Messenger Audit supports filtering by notification type (e.g., Email, Slack, WhatsApp, SMS) and allows users to view, reply to, or forward messages using integrated icons. This endpoint likely forms part of a larger functionality to manage the visibility and status of these communications. There are no request parameters or body for this GET request, and the response body is not provided, suggesting the response might be a list of suppressed messages directly."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Notification Auditor"], "primary_use_case": "To retrieve and review messages that have been marked as suppressed within the Messenger Audit system, functioning as a filtered view of the Notification Log."}, "content_for_embedding": "This API endpoint allows users to retrieve messages that have been marked as 'suppressed' within the Messenger Audit system. It acts as a filtered view of the Notification Log, displaying communications that were triggered and received but are currently hidden. This is analogous to a 'Trash' view for notifications, enabling review of hidden or filtered messages. The Messenger Audit serves as the comprehensive Notification Log, and this endpoint specifically targets suppressed messages within it. It supports the broader functionality of managing communication visibility and status within Infraon's notification system.", "ontology_classification": {"features": ["messenger_audit", "event_suppression", "log_search_module"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Messenger Audit", "Event Suppression", "Notifications"]}}, {"path": "/ux/common/messenger/sms/", "method": "GET", "details": {"operationId": "ux_common_messenger_sms_list", "description": "This API endpoint provides functionality related to SMS communication within the system. While the original description mentioned 'allowing users to be viewed or edited', the context clarifies its primary purpose revolves around SMS content and notification. Specifically, this endpoint allows for the display of SMS communication logs and potentially facilitates the selection of users to be notified via SMS. It integrates with the broader messaging system where requests can be initiated via various channels, including SMS.", "tags": ["SMSviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/SMSList"}}}}, "description": ""}}, "summary": "", "additional_info": "The contexts suggest that this endpoint is part of a larger messaging and notification framework. The 'GET' method implies it's primarily for retrieving or displaying SMS-related data, such as communication logs. Contexts indicate features like adding SMS content and selecting users for notification, which might be handled by other related endpoints or as part of a larger process. For sending SMS, the system typically requires configuration of an SMS gateway, including URLs, status codes, and request parameters (as highlighted in Contexts 5 and 7). Related functionalities include ticket creation, where SMS can be used for notifications, and general user management. Context 2 mentions 'Add the SMS content (Text), and select the user to be notified', implying a potential role in preparing or triggering SMS notifications."}, "llm_generated": {"business_context": {"user_personas": ["System administrators", "Support staff", "Users who need to review SMS communication history or manage SMS-based notifications"], "primary_use_case": "To retrieve and display historical SMS communication logs and facilitate the selection of users for SMS notifications within a comprehensive messaging and notification system."}, "content_for_embedding": "This API endpoint retrieves and displays SMS communication logs within the system. It is a GET operation, primarily used for viewing historical SMS content and notification details. The endpoint is part of a broader messaging and notification framework, integrating with SMS gateway configurations and user notification processes. It allows users to view SMS communication history and potentially select users for SMS notifications, aligning with the 'Messenger Audit' functionality for tracking communications.", "semantic_keywords": ["SMS", "Notifications", "Communication Logs"], "ontology_classification": {"features": ["messenger_audit", "notification_gateway_configuration", "notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/sms/", "method": "POST", "details": {"operationId": "ux_common_messenger_sms_create", "description": "This API endpoint facilitates the management and distribution of SMS communications within the system. It allows for the creation and sending of SMS content to selected users/requesters, often in the context of creating tickets, sending notifications, or providing updates related to service requests or assets. The endpoint supports integration with SMS gateways, where an SMS gateway URL, status code, and request parameters can be configured. It is designed to simplify communication workflows, such as automatically notifying users about ticket creation or status changes. The system handles various data types for document serialization, as detailed in the request body description. This endpoint plays a crucial role in ensuring accurate and comprehensive notification delivery, reducing manual errors, and enhancing user experience.", "tags": ["SMSviewset"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/SMSList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/SMSList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to serialize various document fields, including common primitive types like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others such as `URLField`, `EmailField`, and `UUIDField`. Compound fields like `ListField` and `DictField` are supported. Special handling is noted for `ReferenceField` (similar to DRF's `ForeignKey`) and `EmbeddedDocumentField`. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. Most other fields will map to `DocumentField` and may not behave as expected. When using this endpoint for sending SMS, ensure that the SMS gateway is properly configured with its URL, status code, and necessary request parameters (key-value pairs). The content of the SMS ('Text') and the recipient ('user to be notified') are essential components. This endpoint is particularly relevant for automating notifications when a ticket is created or for general communication purposes within the system, such as displaying SMS communication or allowing technicians to send messages."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Communication Manager"], "primary_use_case": "To send SMS notifications and manage SMS communications, particularly for automated alerts related to service requests and ticket updates."}, "content_for_embedding": "This API sends SMS communications and notifications to users and requesters. It supports automated notifications for events like ticket creation and status changes. The endpoint requires configuration of an SMS gateway, including URL, status code, and request parameters. It handles various data types for content serialization, specifically using 'gateway_sms_recipients' for mobile numbers and 'gateway_sms_message' for the message content. This API is crucial for efficient and accurate notification delivery within the system.", "ontology_classification": {"features": ["direct_email/sms_sending", "ticket_escalation_&_notification", "lifecycle_communication_management"], "primary_module": "ticket_management", "confidence_score": 1}, "semantic_keywords": ["SMS", "Notifications", "Communication"]}}, {"path": "/ux/common/messenger/sms/{id}/", "method": "GET", "details": {"operationId": "ux_common_messenger_sms_retrieve", "description": "This API endpoint allows users to view or edit details related to an SMS message, specifically interacting with specific SMS instances identified by a unique `id`. Although the initial description broadly mentions 'users to be viewed or edited', combined with the path `/ux/common/messenger/sms/{id}/`, it strongly suggests functionality for managing individual SMS message entities. Relevant contexts indicate that SMS functionalities involve sending and receiving messages, configuring SMS gateways, and potentially linking SMS notifications to events like ticket creation or updates, as well as associating SMS content with specific users to be notified. This endpoint likely forms part of a system where SMS communications are managed and tracked.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SMSviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string, likely representing a unique identifier for a specific SMS message or SMS configuration instance. While the definition for this endpoint is quite generic, surrounding contexts highlight topics such as configuring SMS gateways (URL, status code, request parameters), adding SMS content, and associating SMS with users for notification. Other relevant contextual information also mentions 'Mobile Number & SMS', 'SMS content (Text)', and 'selected user' for notification. This endpoint could be used to retrieve details about a specific sent SMS, check its status, or modify properties related to its configuration if the 'edit' functionality implies configuration rather than message content modification directly."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Support Staff", "Communication Managers"], "primary_use_case": "To retrieve and manage details of individual SMS messages and their associated configurations, primarily for communication tracking and notification system management."}, "content_for_embedding": "This API endpoint facilitates the retrieval of detailed information for a specific SMS message or SMS configuration instance, identified by a unique ID. It allows users to view and potentially prepare for editing aspects related to SMS communication, such as message content, status, and associated configurations. The functionality is integral to managing individual SMS entities within a broader system that handles sending, receiving, and tracking SMS notifications, including the setup of SMS gateways and linking SMS content to user notifications.", "ontology_classification": {"features": ["messenger_audit", "notification_gateway_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["SMS", "Notifications", "Retrieval"]}}, {"path": "/ux/common/messenger/sms/{id}/", "method": "PUT", "details": {"operationId": "ux_common_messenger_sms_update", "description": "This API endpoint facilitates the viewing and editing of SMS messages, specifically within the '/ux/common/messenger/sms/{id}/' path. It allows for detailed management of individual SMS communications, including their content and notification recipients. The endpoint's functionality is particularly relevant for systems where SMS content needs to be managed or updated, such as for user notifications, service requests, or system alerts. The interaction emphasizes the management of SMS content (Text) and the selection of the user to be notified, as indicated by the various contexts related to SMS configuration and messaging within the Infinity User Guide.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SMSviewset"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/SMSList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/SMSList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the SMS message to be viewed or edited. The request body, designed for document serialization, supports various primitive fields including StringField, URLField, EmailField, IntField, BooleanField, DateTimeField, and more. Compound fields like ListField and DictField are also supported, mapping to DRF fields. ReferenceField and EmbeddedDocumentField are handled with nested serializers if depth is greater than 0. Generic fields (GenericReferenceField, GenericEmbeddedDocumentField) are also supported. Fields like FileField, ImageField, and BinaryField are not well-supported or untested. This endpoint connects to the broader SMS messaging functionality, which can include configuration of SMS gateways (URL, status codes, request parameters) as detailed in the Infinity User Guide. This API can be instrumental in configuring notifications, such as those sent to users regarding requests or important updates. While the primary function is editing/viewing SMS, it is implied to be part of a larger messaging infrastructure given the contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "System Integrator"], "primary_use_case": "Managing and updating SMS communications for notifications and alerts."}, "content_for_embedding": "This API allows for the viewing and editing of individual SMS messages identified by a unique ID. It is crucial for managing SMS content and notification recipients within a broader messaging infrastructure. This includes updating SMS for user notifications, service requests, or system alerts, and is part of the system's overall notification configuration, specifically related to SMS gateway management.", "ontology_classification": {"features": ["notification_gateway_configuration", "notification_trigger_configuration", "messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["SMS", "Notifications", "Update"]}}, {"path": "/ux/common/messenger/sms/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_messenger_sms_partial_update", "description": "This PATCH API endpoint is used to update or view details for a specific user within the system, particularly concerning their SMS messaging capabilities and associated configurations. It allows for modifications to user profiles as they relate to sending or receiving SMS notifications, interacting with ticketing systems via SMS, and managing SMS content for selected users. The endpoint utilizes a flexible document serializer to handle various data types, supporting common fields like String, URL, Email, and various numerical and temporal types. It also accounts for compound fields like ListField and DictField, and special handling for ReferenceField and Generic fields for more complex nested data structures related to user attributes.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SMSviewset"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedSMSList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedSMSList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedSMSList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SMSList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` in the path refers to the unique identifier of the user whose SMS configuration or general profile is being viewed or edited. This endpoint is crucial for managing user-specific SMS notifications, such as those related to service requests or ticket updates. For instance, an administrator can use this to update the SMS content sent to a selected user or configure how a user interacts with the ticketing system via SMS (e.g., creating or updating tickets). \n\nThe request body for this PATCH operation supports a wide range of primitive and compound data types as detailed in the 'request_body_description'. Developers should note that `ReferenceField` behaves like `ForeignKey` in Django Rest Framework, with nested serializer auto-generation based on depth. While many field types are well-supported, `FileField`, `ImageField`, and `BinaryField` are noted as either not well supported or untested. It is also mentioned that `EmbeddedDocumentField` handling for non-zero depth is prone to errors and might need to be fixed in the future. Prior configurations for SMS gateways (URL, status codes, request parameters) are managed elsewhere but directly influence how users interact with the messaging system facilitated by this endpoint. For detailed user management, refer to the Users module information mentioned in the admin guide."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "User"], "primary_use_case": "To update and manage user-specific SMS messaging capabilities, configurations, and their interaction with ticketing systems via SMS."}, "content_for_embedding": "This PATCH API endpoint is designed to update or view details for a specific user, focusing on their SMS messaging capabilities and associated configurations. It enables modifications to user profiles concerning sending/receiving SMS notifications, interacting with ticketing systems via SMS, and managing SMS content. The endpoint supports various data types, including primitive and compound fields, and handles complex nested data structures. The `id` in the path refers to the unique user identifier. This API is crucial for managing user-specific SMS notifications related to service requests or ticket updates, allowing administrators to update SMS content or configure user interaction with ticketing systems via SMS.", "ontology_classification": {"features": ["notification_gateway_configuration", "user_management", "direct_email/sms_sending"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["SMS", "User Management", "Notifications"]}}, {"path": "/ux/common/messenger/sms/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_messenger_sms_destroy", "description": "This API endpoint allows for the deletion of an SMS message or a related SMS configuration, identified by its unique `id`. Although the original description suggests viewing or editing users, the method `DELETE` combined with the path `messenger/sms/{id}/`, and the context which heavily discusses SMS gateways, content, and the ability to add and save SMS configurations, strongly implies this endpoint is for removal of SMS-related entities. Specifically, the action likely targets pre-configured SMS gateways or content created by users/technicians, making it a critical part of managing SMS communication settings within the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SMSviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter included in the path is a mandatory string identifier for the specific SMS entity (message or configuration) to be deleted. While the exact format of the `id` is not specified in the contexts, it is crucial for targeting the correct item. The contexts highlight various aspects of SMS management, including the ability to add SMS content and configure SMS gateways (URL, status code, request parameters). Therefore, this `DELETE` endpoint is likely used to remove these SMS configurations or sent messages when no longer needed. There is no response body expected for a successful deletion, as indicated by `response_description`."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Technician", "IT Support Staff"], "primary_use_case": "To enable users to remove unwanted or outdated SMS messages or configurations, ensuring efficient management of SMS communication settings within the system."}, "content_for_embedding": "This API endpoint facilitates the deletion of specific SMS messages or pre-configured SMS gateway settings. It is identified by a unique `id` and is crucial for maintaining and cleaning up SMS communication configurations, including SMS gateways, content, and related parameters. This allows for the removal of outdated or incorrect SMS configurations and messages, ensuring streamlined SMS notification management.", "ontology_classification": {"features": ["notification_gateway_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["SMS", "Delete", "Configuration"]}}, {"path": "/ux/common/messenger/suppressed/", "method": "GET", "details": {"operationId": "ux_common_messenger_suppressed_retrieve", "description": "This GET endpoint allows administrators to view and manage 'suppressed' users within the system. It enables curation of end-user functionalities as per organizational needs, such as controlling who can access certain features or submit specific types of requests. While the endpoint's direct purpose is to manage suppressed users, its functionality aligns with broader user management capabilities, allowing admins to refine access and permissions for both internal and external requesters.", "tags": ["Suppressedviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically focuses on users who have been 'suppressed', implying a state where their access or visibility might be restricted. Administrators can leverage this to refine user access and enable/disable functionalities based on organizational requirements. There are no explicit parameters defined for this GET request, suggesting it might retrieve a list of all suppressed users. For more comprehensive user management, refer to the Users module mentioned in other documentation (Context Rank 9). While the current API specification indicates 'No response body', typically such a GET endpoint would return a list or details of the suppressed users. This suggests either the response is implicit in the UI or further API calls are needed once a user is identified."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "Allow administrators to view and manage users whose access or functionalities have been restricted within the system."}, "content_for_embedding": "This API endpoint allows administrators to retrieve a list of 'suppressed' users. Suppressed users have restricted access or visibility to certain features or functionalities within the system. Administrators use this endpoint to manage and refine user access and permissions, ensuring compliance with organizational needs and controlling who can perform specific actions or access particular features. It is a key component of broader user management capabilities, enabling the curation of end-user functionalities for both internal and external requesters.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Access Control", "User Privileges"]}}, {"path": "/ux/common/messenger/suppressed/", "method": "POST", "details": {"operationId": "ux_common_messenger_suppressed_create", "description": "This POST endpoint, `/ux/common/messenger/suppressed/`, is a suppressed interface or access point to the endpoint CI that allows for the viewing and editing of user functionalities. This allows administrators to manage and curate end-user capabilities based on the organization's specific requirements. While it is a suppressed endpoint, its primary function is to provide control over what users can access or modify.", "tags": ["Suppressedviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint does not expect a request body and returns no response body, indicating that its actions might involve internal system state changes or trigger background processes. It likely plays a role in configuring user access and permissions, similar to how user functionalities are curated based on organizational needs, as mentioned in the admin guide. Developers should note that despite being 'suppressed', it has a direct impact on end-user experiences and administrative control over user features."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To manage and curate end-user functionalities, access, and permissions within the system, primarily for administrative control."}, "content_for_embedding": "This POST endpoint, `/ux/common/messenger/suppressed/`, is a suppressed interface designed for administrators to view and edit user functionalities, manage end-user capabilities, and control access and permissions. Despite being a suppressed endpoint, it directly impacts end-user experiences and administrative control over features. It does not expect a request body and returns no response body, suggesting internal system state changes or background processes are triggered.", "semantic_keywords": ["User Privileges", "Access Control", "Configuration"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/suppressed/{id}/", "method": "GET", "details": {"operationId": "ux_common_messenger_suppressed_retrieve_2", "description": "This `/ux/common/messenger/suppressed/{id}/` endpoint allows for viewing or editing details of a suppressed user. The path parameter `id` is required to specify the particular user. This functionality is related to user management, providing granular control over user profiles and permissions as discussed in the 'Users module' of the Admin Guide and the Infinity User Guide, which highlights managing internal and external users, their access levels, and commands they can or cannot execute, such as 'deny commands' or 'permit commands'.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Suppressedviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter identifies the suppressed user. While the current description mentions 'viewed or edited', the `GET` method strictly implies retrieval of information for the specified suppressed user (`id`). Further actions like editing (`PUT` or `PATCH`) would typically be handled by separate endpoints or methods. Relevant details about user roles, permissions, and what information is displayed for users can be found in the provided user guides, particularly regarding user profiles, default actions, and command permissions. For comprehensive user management, developers should refer to the 'Users module' documentation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Security Analyst"], "primary_use_case": "To retrieve detailed information about a specific suppressed user, including their profile, access levels, and permissions, for user management and auditing purposes."}, "content_for_embedding": "This API retrieves detailed information for a specific suppressed user, identified by their unique ID. It provides insights into user profiles, access levels, and permissions, supporting comprehensive user management within the system. This is a read-only operation, focusing on viewing user details rather than modification.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "detailed_record_view"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "User Privileges", "Details retrieval"]}}, {"path": "/ux/common/messenger/suppressed/{id}/", "method": "PUT", "details": {"operationId": "ux_common_messenger_suppressed_update", "description": "This PUT endpoint, part of the UX common messenger module, allows for the viewing and editing of 'suppressed' users. This functionality is closely related to the 'Users' module, as indicated in the admin guide. It enables administrators to manage user profiles, including setting permissions and viewing commands that users can or cannot execute, such as 'shutdown' or 'reload' (as per Context Rank 2). Given its 'suppressed' nature, it likely pertains to users who may have restricted access or require specific management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Suppressedviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' in the path refers to the unique identifier for the suppressed user being viewed or edited. While the current description mentions viewing or editing, the PUT method typically implies an update operation. Further details on the specific properties of a 'suppressed' user and the exact fields that can be updated would be found within the 'Users' module documentation (Context Rank 1). It's crucial for developers to understand the concept of 'suppressed' users within the system's user management framework for proper utilization of this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To allow administrators to manage and update profiles and permissions for 'suppressed' users within the system, including their command execution rights."}, "content_for_embedding": "This API endpoint allows administrators to update and manage profiles of 'suppressed' users. This includes setting permissions and defining which commands users can or cannot execute. The PUT method is used for updating existing suppressed user records identified by their unique ID. This functionality is a core part of user management and access control within the system, specifically for users with restricted access.", "semantic_keywords": ["User Management", "Update", "User Privileges"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/messenger/suppressed/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_messenger_suppressed_partial_update", "description": "This PATCH endpoint is part of the messenger's common UX module, specifically dealing with `suppressed` user accounts. It enables administrators or authorized users to modify or view properties of an individual suppressed user. The `id` in the path refers to the unique identifier of the suppressed user whose details are to be updated or retrieved. This functionality is crucial for managing user permissions and access within the system, as hinted by references to 'Users module' and 'pre-defined privileges across all modules' from the relevant guide documents.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Suppressedviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the suppressed user. While the current specification indicates 'No response body', it's expected that a successful PATCH operation would confirm the update. This endpoint is analogous to the 'Edit and delete action icons are available for each list item or card' mentioned in the user management context (Rank 9), suggesting it pertains to administrative control over user statuses. Further details on user management and permissions can be found in the Users module of the application, as referenced in the admin guide (Rank 1)."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "authorized users"], "primary_use_case": "To modify or view properties of individual suppressed user accounts, enabling administrators to manage user permissions and access within the system."}, "content_for_embedding": "This PATCH endpoint is designed for administrators and authorized users to modify or view the properties of a specific suppressed user, identified by a unique ID. It plays a crucial role in managing user permissions and access within the system. The functionality is analogous to editing or deleting user profiles, as highlighted in user management contexts and relevant administration guides. While a successful operation currently yields no response body, it confirms the update of the suppressed user's details. The API is privilege-based, requiring appropriate administrative rights for its use. The term \"suppressed\" here refers to user accounts with restricted access or notification capabilities, distinct from event suppression.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "User Privileges", "Update"]}}, {"path": "/ux/common/messenger/suppressed/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_messenger_suppressed_destroy", "description": "This endpoint allows for the deletion of a specific suppressed messenger user. It functions as a management tool within the user administration system, enabling administrators to remove users from the suppressed list. The system identifies the user to be deleted via a unique 'id' provided in the path. This operation complements other user management functionalities, such as viewing or editing user details, as highlighted in the broader context of user modules and profiles.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Suppressedviewset"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a mandatory string that uniquely identifies the suppressed user to be removed. This operation is part of the comprehensive user management features available within the system, alongside functionalities to view, edit, and manage user permissions and access, as often seen in 'Users' modules. No request body is required, and the response does not include a body, indicating a successful deletion by status code. For more details on overall user management, refer to the 'Users' module documentation mentioned in related guides."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "IT support", "help desk"], "primary_use_case": "This API allows administrators to delete specific suppressed messenger users from the user administration system, facilitating user management and cleanup of the suppressed list."}, "content_for_embedding": "This API endpoint performs a DELETE operation to remove a specific suppressed messenger user from the system. It is a core component of the user administration system, enabling administrators to manage and clean up the list of suppressed users by their unique ID. This functionality is crucial for maintaining an accurate and controlled user base within the platform.", "semantic_keywords": ["Delete", "User Management", "Suppressed User"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/syslog/", "method": "GET", "details": {"operationId": "ux_common_messenger_syslog_list", "description": "This API endpoint, located at `/ux/common/messenger/syslog/`, is designed to retrieve information related to Messenger Audit, which serves as a comprehensive Notification Log. It displays a complete list of notifications triggered and received within the Infraon system. Users can leverage this endpoint to view, reply to, or forward messages.", "tags": ["SyslogViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/SyslogList"}}}}, "description": ""}}, "summary": "", "additional_info": "The Messenger Audit functionality, accessible via this API, allows for filtering notifications based on type, including Email, Slack, WhatsApp, and SMS. While the current specification indicates no parameters, a typical usage scenario might involve querying by notification type or date range, which could be implemented in future versions. This endpoint is crucial for auditing communication flows within the Infroan system and managing user interactions with various notification channels."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "End User"], "primary_use_case": "To retrieve and audit communication logs and notifications within the Infraon system."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of notifications and communication logs from the Infraon system, functioning as a Messenger Audit and Notification Log. It allows users to view, reply to, or forward messages and supports filtering by notification type, including Email, Slack, WhatsApp, and SMS. This endpoint is crucial for auditing communication flows.", "ontology_classification": {"features": ["messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Messenger Audit", "Notifications", "Communication Logs"]}}, {"path": "/ux/common/messenger/syslog/", "method": "POST", "details": {"operationId": "ux_common_messenger_syslog_create", "description": "This `POST` endpoint, `/ux/common/messenger/syslog/`, facilitates the management and auditing of notifications within Infraon. It acts as a 'Messenger Audit' or 'Notification Log' allowing users to view, edit, and interact with the complete list of notifications\u2014such as Email, Slack, WhatsApp, and SMS\u2014that have been triggered and received. The endpoint supports detailed manipulation of these notification records, enabling actions like viewing message content, replying, or forwarding messages. The underlying data model allows for a flexible structure as described by the `request_body_description`, supporting various field types to store comprehensive log data.", "tags": ["SyslogViewSet"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SyslogList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/SyslogList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/SyslogList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SyslogList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the serializer's support for a wide array of primitive field types including `StringField`, `IntField`, `DateTimeField`, `BooleanField`, and more, accommodating diverse data for system logs and messenger events. Compound fields like `ListField` and `DictField` are also supported, mapping to DRF fields with respect to nested field specification. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported, and other unlisted fields may not work as expected. This endpoint is crucial for auditing communication events and ensuring proper access control within the Log Management module. Users can filter notifications based on type using the left panel. The endpoint's ability to 'view or edit' users (from the original description) seems to be a slight misinterpretation, as the primary context points towards notification/message auditing and management rather than direct user profile modification."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Support", "System Auditors"], "primary_use_case": "Managing and auditing communication logs and notifications within Infraon, allowing users to view, interact with, and filter notification records."}, "content_for_embedding": "This API endpoint, `/ux/common/messenger/syslog/`, is used for managing and auditing notifications and communication logs within the Infraon system. It functions as a 'Messenger Audit' or 'Notification Log', providing a comprehensive list of triggered and received notifications across various channels like Email, Slack, WhatsApp, and SMS. Users can view message content, reply to, or forward these notification records. The endpoint supports a flexible data model for comprehensive log data and is crucial for auditing communication events within the Log Management module. It allows filtering notifications by type.", "ontology_classification": {"features": ["messenger_audit", "audit_log"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Notifications", "Messenger Audit", "Communication Logs"]}}, {"path": "/ux/common/messenger/syslog/{id}/", "method": "GET", "details": {"operationId": "ux_common_messenger_syslog_retrieve", "description": "This API endpoint provides access to detailed information about a specific system log entry related to Messenger Audit, which functions as a Notification Log. It allows users to view a complete list of notifications triggered and received within Infraon. While the original description generally mentions 'viewed or edited', the context from 'Messenger Audit' strongly indicates this is primarily a 'view' operation for historical notification data, similar to an audit trail.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SyslogViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SyslogList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the specific system log entry (notification message) to be retrieved. While the original API description mentions users can be 'viewed or edited', Context Rank 1 highly suggests this endpoint is for viewing notification logs, implying that editing functionality might be limited or nonexistent for historical audit data. The user guide also highlights filtering options for notifications based on type (Email, Slack, WhatsApp, SMS)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Staff", "Auditor"], "primary_use_case": "This API allows users to retrieve detailed information about a specific system log entry, functioning as a notification log within the Messenger Audit system. Its primary use is for auditing and viewing historical notification data."}, "content_for_embedding": "This API retrieves a specific system log entry, which serves as a notification log, identified by its unique ID. It is part of the Messenger Audit functionality within Infraon, enabling users to view detailed historical notification data, including communications sent via email, Slack, WhatsApp, and SMS. This operation is primarily read-only, focusing on auditing past notifications and system communications.", "semantic_keywords": ["Notifications", "Details retrieval", "Messenger Audit", "Communication Logs", "View"], "ontology_classification": {"features": ["messenger_audit", "audit_log"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/messenger/syslog/{id}/", "method": "PUT", "details": {"operationId": "ux_common_messenger_syslog_update", "description": "This API endpoint allows for the viewing and editing of individual syslog entries related to messenger notifications. It is part of the 'Messenger Audit' feature, which acts as a notification log, displaying a complete list of triggered and received notifications within Infraon. Users can filter notifications by type (Email, Slack, WhatsApp, SMS) and perform actions like viewing, replying to, or forwarding messages. This PUT method specifically facilitates updates to an existing syslog record using its unique identifier.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SyslogViewSet"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SyslogList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/SyslogList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/SyslogList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SyslogList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string representing the unique identifier of the syslog entry to be viewed or edited. The request body for this endpoint, if provided, must adhere to the documented serializer structure for 'Documents'. This serializer supports various primitive fields (StringField, IntField, DateTimeField, etc.) and handles compound fields like ListField and DictField. ReferenceField and Generic fields are also supported, with nested serializers auto-generated for non-zero depth. Fields like FileField, ImageField, and BinaryField are noted as not well supported or untested, and their use may lead to unexpected behavior."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Support Staff", "Auditors"], "primary_use_case": "To update and manage individual syslog entries for messenger notifications as part of the Messenger Audit feature."}, "content_for_embedding": "This API updates a specific syslog entry identified by its unique ID. It is a core component of the 'Messenger Audit' feature within Infraon's notification system, allowing for the modification of logged messenger notifications (Email, Slack, WhatsApp, SMS). This enables administrators to manage and correct historical communication records.", "ontology_classification": {"features": ["messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Messenger Audit", "Notifications", "Update"]}}, {"path": "/ux/common/messenger/syslog/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_messenger_syslog_partial_update", "description": "This PATCH API endpoint is used to update or view specific syslog entries related to the Messenger Audit, which functions as the system's Notification Log. It allows for the modification of individual notification records identified by a unique `id`. The Messenger Audit displays a complete list of notifications triggered and received within Infraon, including types such as Email, Slack, WhatsApp, and SMS. Users can interact with messages (view, reply, forward) via icons. This endpoint enables precise updates to these message logs, providing granular control over notification data.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SyslogViewSet"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PatchedSyslogList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PatchedSyslogList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PatchedSyslogList"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SyslogList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the syslog entry to be updated or viewed. The request body supports a variety of primitive and compound field types for data definition, as detailed in the `request_body_description`. Fields like `StringField`, `IntField`, `BooleanField`, and `DateTimeField` are recognized. Compound fields such as `ListField` and `DictField` are also supported, mapping to corresponding DRF (Django REST Framework) fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers if depth is greater than 0. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are supported. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well-supported or untested. This endpoint is crucial for managing the audit trail of system notifications, often used by technicians or users with sufficient permissions within the system."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "Users with sufficient permissions"], "primary_use_case": "To update and view specific syslog entries that serve as the system's Notification Log (Messenger Audit)."}, "content_for_embedding": "This API allows for the modification and viewing of individual syslog entries within the Messenger Audit, which functions as the system's Notification Log. It supports updates to notification records such as Email, Slack, WhatsApp, and SMS, identified by a unique ID, providing granular control over the audit trail of system notifications.", "ontology_classification": {"features": ["messenger_audit"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Notifications", "Messenger Audit", "Update"]}}, {"path": "/ux/common/messenger/syslog/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_messenger_syslog_destroy", "description": "This API endpoint allows for the deletion of a specific system log entry related to the Messenger Audit (Notification Log). The Messenger Audit displays a complete list of notifications triggered and received within Infraon, including types such as Email, Slack, WhatsApp, and SMS. This DELETE operation is intended to remove individual log entries, which is an irreversible action.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["SyslogViewSet"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the syslog entry to be deleted. Messenger Audit logs can be filtered by notification type in the user interface. While the original description mentioned 'viewed or edited', for a DELETE endpoint, the primary action is removal. Based on context, deletion is an irreversible action. No response body is returned upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "System Auditor"], "primary_use_case": "To remove specific system log entries related to the Messenger Audit (Notification Log), ensuring data hygiene and compliance."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of individual system log entries from the Messenger Audit, which functions as a comprehensive notification log within Infraon. These logs track various notification types, including Email, Slack, WhatsApp, and SMS. The API requires a unique log ID for deletion and does not return a response body upon successful removal.", "semantic_keywords": ["Delete", "Messenger Audit", "Communication Logs"], "ontology_classification": {"features": ["messenger_audit", "audit_log"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/org/location/", "method": "GET", "details": {"operationId": "ux_common_org_location_list", "description": "This endpoint retrieves a comprehensive list of all organization locations currently configured within the system. This includes the head office, branch offices, and other specified addresses. The location information is critical for aligning users, assets, and services efficiently across various organizational sites. The head office address is automatically added based on the registration details, and multiple branch offices can be added manually or through bulk import.", "summary": "Gets a list of organization locations", "tags": ["Organization Location"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/OrganizationLocation"}}}}, "description": ""}}, "additional_info": "Locations can be configured through the 'Infraon Configuration -> Organization -> Address Book' section in the UI. While this API fetches existing locations, detailed addresses for product and service delivery are vital. This endpoint supports the accurate tracking and management of resources by providing a central list of organizational sites."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Staff", "Asset Manager", "Service Delivery Personnel"], "primary_use_case": "To retrieve a comprehensive list of all configured organization locations, including head office and branch offices, to facilitate the alignment of users, assets, and services, and for accurate resource tracking and management."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of all organization locations, such as head offices and branch offices, currently configured within the system. This location information is crucial for aligning users, assets, and services efficiently across various organizational sites and supports the accurate tracking and management of resources. Locations are typically configured via the 'Infraon Configuration -> Organization -> Address Book' section in the UI. The API provides a central list of these organizational sites.", "semantic_keywords": ["Organization", "Location", "Retrieval"], "ontology_classification": {"features": ["organization_management", "location_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/org/location/", "method": "POST", "details": {"operationId": "ux_common_org_location_create", "description": "This endpoint facilitates the creation of new location records for an organization. It is designed to save information regarding branch offices and vendor locations. The primary purpose of recording this location data is to accurately align users, assets, and services across various physical sites, simplifying management and reporting within the organization's infrastructure. While the default or Head Office address is typically set during initial registration, this endpoint allows for the addition of multiple supplementary branch offices.", "summary": "Creates a new location ", "tags": ["Organization Location"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateOrganizationLocationSample": {"value": {"location_name": "JP Nagar", "country": "India", "address": "3rd floor", "state": "Karnataka", "city": "Bangalore", "area": "JP Nagar", "subarea": "3rd phase", "pincode": "574221", "description": "Branch office address"}, "summary": "Create Organization Location Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint is part of the 'Address Book' functionality, where organizations manage all their location details. Location information is crucial for various operational aspects, including the alignment of user access, asset tracking, and service delivery. Developers should ensure that 'location_name', 'country', 'address', 'state', 'city', 'area', 'subarea', 'pincode', and 'description' are provided in the request body, as demonstrated in the example usage, to accurately record the new location. It is vital to provide detailed and accurate addresses, as they may be used for product and service delivery. This endpoint contributes to streamlined location-based reporting and organized asset management.", "parameters": [{"name": "location_name", "in": "body", "description": "Inferred parameter: location_name", "required": true, "schema": {"type": "string"}}, {"name": "country", "in": "body", "description": "Inferred parameter: country", "required": true, "schema": {"type": "string"}}, {"name": "address", "in": "body", "description": "Inferred parameter: address", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}, {"name": "city", "in": "body", "description": "Inferred parameter: city", "required": true, "schema": {"type": "string"}}, {"name": "area", "in": "body", "description": "Inferred parameter: area", "required": true, "schema": {"type": "string"}}, {"name": "subarea", "in": "body", "description": "Inferred parameter: subarea", "required": true, "schema": {"type": "string"}}, {"name": "pincode", "in": "body", "description": "Inferred parameter: pincode", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Developer"], "primary_use_case": "This API is used to create and manage new location records for an organization, including branch offices and vendor locations, to facilitate the alignment of users, assets, and services across various physical sites."}, "content_for_embedding": "This API endpoint allows for the creation of new organizational location records, such as branch offices and vendor sites. It is a core component of the \"Address Book\" functionality, enabling organizations to accurately record and manage physical addresses. The primary goal is to streamline the alignment of users, assets, and services based on their physical locations, improving overall management and reporting within the organizational infrastructure. Essential details like location name, country, address, state, city, area, subarea, pincode, and description are required for accurate record-keeping.", "semantic_keywords": ["Organization Location", "Address Book", "Location Management"], "ontology_classification": {"features": ["organization_management", "location_management", "record_creation_&_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/org/location/{id}/", "method": "GET", "details": {"operationId": "ux_common_org_location_retrieve", "description": "This endpoint is used to fetch the detailed information of a specific organization location, identified by its unique ID, within the current organization. Location information, such as head office, branch offices, and other addresses, is crucial for simplifying the alignment of users, assets, and services across various physical locations. It is derived from the 'Address Book' where organizational addresses are managed.", "summary": "Gets a organization location with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Organization Location"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "additional_info": "The default or Head Office address for the organization is typically added during the initial registration process. Multiple branch offices and even vendor locations can also be recorded and retrieved using this functionality. This allows for precise management of assets and services by associating them with their physical locations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Asset Manager"], "primary_use_case": "To retrieve detailed information about specific organizational locations (head office, branch offices, vendor locations) to enable precise alignment of users, assets, and services with their physical addresses."}, "content_for_embedding": "This API endpoint is designed to fetch comprehensive details of a specific organization location, identified by its unique ID. This includes information for head offices, branch offices, and vendor locations, all managed within the system's 'Address Book'. The retrieved location data is essential for accurately associating users, assets, and services with their respective physical sites, thereby streamlining operational management. This functionality supports the viewing and management of various organizational and branch locations.", "semantic_keywords": ["Organization Location", "Location Management", "Retrieval"], "ontology_classification": {"features": ["organization_management", "location_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/org/location/{id}/", "method": "PUT", "details": {"operationId": "ux_common_org_location_update", "description": "This endpoint is used to edit and update an existing organization location, such as a head office, branch office, or other addresses, for the current organization within the system. Accurately managing location information is crucial as it simplifies and ensures the proper alignment of users, assets, and services across various operational sites.", "summary": "Edits the organization location with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Organization Location"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "additional_info": "The default Head Office address is typically added during the initial registration process. This API allows for the modification of multiple branch offices or vendor locations. The `id` path parameter is required and identifies the specific organization location to be edited. The request body serializes the updated organization location querysets. Maintaining accurate and detailed addresses is vital, as this information may be used for product and service delivery."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "System Integrator"], "primary_use_case": "To enable the editing and updating of existing organization locations, including head offices, branch offices, and vendor locations, ensuring accurate management of address information for proper alignment of users, assets, and services within the system."}, "content_for_embedding": "This API endpoint facilitates the modification and update of existing organizational locations, such as main offices, branch offices, or other addresses. It is crucial for maintaining accurate location data, which is essential for correctly associating users, assets, and services with their respective operational sites. The API requires a specific organization location ID for modification and accepts updated location details in the request body. This ensures that all address information, vital for product and service delivery, remains current and precise.", "ontology_classification": {"features": ["organization_management", "location_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Organization Location", "Update", "Location Management"]}}, {"path": "/ux/common/org/location/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_org_location_destroy", "description": "This endpoint permanently deletes an existing organization location. Organization locations, managed via the Address Book (Infraon Configuration -> Organization -> Address Book), include branch offices and vendor locations. The default or Head Office address is initially set during registration. Deleting a location impacts the alignment of users, assets, and services associated with it.\n\nNote: Deletion actions are irreversible and should be performed with caution, as detailed and accurate addresses are vital for product and service delivery.", "summary": "Deletes the organization location with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Organization Location"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the organization location to be deleted. Location information plays a crucial role in aligning users, assets, and services, and is used for location-based reporting. While locations can be added individually or in bulk via CSV, this API provides a direct method for individual deletion. No request body is required for this DELETE operation, and the API returns no response body upon successful deletion, only an HTTP status code indicating success or failure. Deleting a location may have cascading effects on related configurations and data, similar to how other system deletions (e.g., category deletions) can impact services."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Configuration Manager"], "primary_use_case": "To permanently delete an existing organization location, which is crucial for managing organizational data and ensuring accurate alignment of users, assets, and services."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of an organization location, identified by its unique ID. These locations, such as branch offices and vendor sites, are managed through the Address Book within Infraon Configuration. Deleting a location is an irreversible action with cascading effects on associated users, assets, and services, emphasizing the need for caution. The API requires no request body and returns a 204 status upon successful deletion, indicating no content.", "semantic_keywords": ["Delete", "Organization Location", "Address Book"], "ontology_classification": {"features": ["organization_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/org/location/create-csv/", "method": "POST", "details": {"operationId": "ux_common_org_location_create_csv_create", "description": "This API endpoint facilitates the creation of a CSV file for organization location data. Its primary purpose is to serialize organization location querysets into a downloadable CSV format. While the initial description suggests viewing or editing users, the path and request body description more accurately indicate its role in handling organization location data for export, providing a familiar starting point for end-users seeking to manage and export this data.", "tags": ["Organization Location"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is specifically designed to handle organization location data, allowing for the generation of a CSV output. The request body serializes organization location querysets, which implies that the data to be converted into CSV is derived from these querysets. This functionality aligns with common user needs to export data for further analysis or record-keeping, similar to sharing results via CSV as mentioned in context rank 6. No specific parameters are listed in the API specification, however, the request body is implied to contain the data needed for the serialization."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User (with export privileges)"], "primary_use_case": "To export organization location data into a downloadable CSV format for reporting and record-keeping purposes."}, "content_for_embedding": "This API endpoint facilitates the creation and download of a CSV file containing organization location data. It serializes organization location querysets into a CSV format, enabling users to export and manage this specific data for further analysis or record-keeping.", "ontology_classification": {"features": ["report_export_capabilities", "location_report"], "primary_module": "report", "confidence_score": 0.95}, "semantic_keywords": ["CSV Export", "Data Export", "Organization Location"]}}, {"path": "/ux/common/org/location/csv_cols/", "method": "POST", "details": {"operationId": "ux_common_org_location_csv_cols_create", "description": "This API endpoint facilitates the management of organization location data, specifically enabling the viewing and editing of user-related information, often through CSV operations. It supports submitting and viewing requests, and handling bulk operations for user data similar to how requester details are managed via CSV.", "tags": ["Organization Location"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint serializes organization location querysets, suggesting it processes structured location data. Given the context, particularly from ranks 3 and 7, this endpoint likely supports operations that involve uploading or downloading data via CSV files, such as importing new user/requester details or exporting existing ones for analysis or reporting. The original description states it allows users to be viewed or edited. This aligns with the 'Upload' and 'Edit' privileges mentioned in contexts 6 and 10, implying the API handles both read and write operations related to user data within organizational locations, potentially through a CSV interface."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Data Manager"], "primary_use_case": "To manage the structure and content of organization location data and user-related information through CSV operations, including viewing, editing, importing, and exporting data."}, "content_for_embedding": "This API endpoint is designed for the comprehensive management of organization location data and associated user information, primarily through CSV-based operations. It allows for the viewing, editing, and handling of bulk data, facilitating both the import of new user/requester details and the export of existing data for analysis or reporting. The endpoint specifically manages the CSV columns, implying configuration and serialization of structured location and user data for efficient data exchange.", "ontology_classification": {"features": ["organization_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Organization Location", "User Management", "Configuration"]}}, {"path": "/ux/common/org/location/download_csv/", "method": "GET", "details": {"operationId": "ux_common_org_location_download_csv_retrieve", "description": "This API endpoint facilitates the download of a Comma Separated Values (CSV) file containing organizational location data. It is specifically designed to allow users with 'Download' privileges to export and perform export operations for viewing or offline analysis, sharing, and integration with other tools within the modules they have access to. The endpoint supports exporting data related to organizational locations, similar to how logs can be exported from the Log Management module in various formats.", "tags": ["Organization Location"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "summary": "", "additional_info": "The 'Download' privilege is crucial for accessing this functionality, allowing users to export data within selected modules or pages. It aligns with the general capability of downloading various data types, such as logs from the Log Management module. This feature is commonly used for viewing or editing organizational location data externally. While the current specification shows no specific parameters, future enhancements might include filters for location data."}, "llm_generated": {"business_context": {"user_personas": ["Users with 'Download' privileges", "Administrators", "Data analysts"], "primary_use_case": "Exporting organizational location data in CSV format for offline analysis, sharing, and integration with other tools."}, "content_for_embedding": "This API endpoint allows users with appropriate privileges to download organizational location data as a CSV file. It facilitates export operations for viewing, offline analysis, sharing, and integration with other tools, similar to how logs can be exported. This feature is commonly used for external viewing or editing of organizational location data.", "semantic_keywords": ["Data Export", "CSV Export", "Organization Location"], "ontology_classification": {"features": ["report_export_capabilities", "location_report", "location_management", "organization_management"], "primary_module": "report", "confidence_score": 0.9}}}, {"path": "/ux/common/org/location/location_details/", "method": "GET", "details": {"operationId": "ux_common_org_location_location_details_retrieve", "description": "This API endpoint is designed to manage and view location details within the system. It enables users to retrieve specific location information and perform edit operations on existing location details. This functionality is crucial for administrators to add and maintain accurate geographical data.", "tags": ["Organization Location"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on 'Location details' as indicated by the most relevant context (Rank 1). The broader original description stating 'allows users to be viewed or edited' is refined to specifically target location management based on the path and the most relevant context. No specific parameters or request body details were provided for this endpoint, so developers should refer to the API's schema for expected input and output."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "Managing and viewing location details within the system, including retrieval and editing, to maintain accurate geographical data."}, "content_for_embedding": "This API endpoint allows users to retrieve and edit specific location details within the system. It is essential for administrators to manage and maintain accurate geographical data related to organizational locations. The endpoint path `/ux/common/org/location/location_details/` clearly indicates its focus on location details management.", "ontology_classification": {"features": ["location_management", "multiple_view_options", "process_creation", "process_deletion", "process_search_&_filtering", "organization_management", "location_report"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}, "semantic_keywords": ["Location Management", "Location Details", "Organization Location"]}}, {"path": "/ux/common/org/location/team_location/", "method": "GET", "details": {"operationId": "ux_common_org_location_team_location_retrieve", "description": "This API endpoint enables the viewing and editing of user-related information, specifically revolving around their team locations. It is designed to manage users, who can be internal or external, including roles like requesters, technicians, and those with advanced permissions. Key functionalities include managing user profiles, assigning users to teams, and facilitating their involvement in various processes such as incident management, service requests, and change requests. This endpoint supports a comprehensive overview of user associations within organizational team structures.", "tags": ["Organization Location"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for managing user roles and their hierarchical or functional grouping into teams. Teams can be categorized based on various criteria such as reporting managers, technical skills, support levels (L1, L2), or specific roles. It allows for the assignment of users to multiple teams, and teams themselves can be assigned to different modules (e.g., incident management, service requests). Users can be updated or viewed, which is essential for maintaining an accurate directory of personnel and their responsibilities within the system. Requesters, in particular, can be granted access to a Requester Portal to submit and track their own incidents and requests. This endpoint facilitates the management of user associations with specific locations within organizational teams."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Technician", "Requester", "Internal User", "External User"], "primary_use_case": "This API endpoint is used for viewing and editing user-related information, specifically focusing on their team locations and organizational associations. It enables the management of user profiles, roles, and their assignment to various teams, facilitating their involvement in different processes like incident management, service requests, and change requests within the organizational structure."}, "content_for_embedding": "This API endpoint enables the viewing and editing of user-related information, specifically revolving around their team locations. It is designed to manage users, who can be internal or external, including roles like requesters, technicians, and those with advanced permissions. Key functionalities include managing user profiles, assigning users to teams, and facilitating their involvement in various processes such as incident management, service requests, and change requests. This endpoint supports a comprehensive overview of user associations within organizational team structures. This endpoint is crucial for managing user roles and their hierarchical or functional grouping into teams. Teams can be categorized based on various criteria such as reporting managers, technical skills, support levels (L1, L2), or specific roles. It allows for the assignment of users to multiple teams, and teams themselves can be assigned to different modules (e.g., incident management, service requests). Users can be updated or viewed, which is essential for maintaining an accurate directory of personnel and their responsibilities within the system. Requesters, in particular, can be granted access to a Requester Portal to submit and track their own incidents and requests. This endpoint facilitates the management of user associations with specific locations within organizational teams.", "ontology_classification": {"features": ["user_management", "team_&_department_management", "organization_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Team Management", "Organization Location"]}}, {"path": "/ux/common/org/location/upload-csv/", "method": "POST", "details": {"operationId": "ux_common_org_location_upload_csv_create", "description": "This API endpoint facilitates the upload of CSV files containing organization location data. It allows privileged users to add and update organization location details in bulk, and the system can process CSV files with a maximum size of 20 MB. This functionality is essential for efficiently managing and importing requester and location information, similar to how attachments are handled.", "tags": ["Organization Location"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OrganizationLocation"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically supports the upload of CSV files for organization location data. While the original description mentioned users being 'viewed or edited', the context clarifies it's about uploading data for 'view and perform add operations' within a module. The `request_body_description` indicates it 'Serializes organization location querysets', implying the input CSV should contain data structured to match the organizational location schema for bulk operations. The 'Upload' privilege is required to utilize this endpoint. Accepted formats for uploads, as per context, generally include CSV, among others, with a maximum size of 20 MB."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Personnel", "Data Manager", "Privileged User"], "primary_use_case": "To enable privileged users to bulk upload and update organization location data via CSV files, streamlining the management of organizational location information."}, "content_for_embedding": "This API endpoint allows privileged users to upload CSV files containing organization location data for bulk addition and updating. It supports CSV files up to 20 MB and functions similarly to attachment uploads. The input CSV must conform to the organizational location schema, and 'Upload' privilege is required for its use. This is crucial for efficient management and import of organization location details.", "ontology_classification": {"features": ["organization_management", "roles_&_privileges_management", "attachment_management", "location_management", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CSV Import", "Organization Location", "Add", "Update", "Bulk Configuration", "Location Management", "User Privileges", "Attachments"]}}, {"path": "/ux/common/partner/partner/", "method": "GET", "details": {"operationId": "ux_common_partner_partner_list", "description": "This endpoint provides the capability to retrieve a paginated list of all partners associated with the current organization. It is designed to enable users to easily track and manage partner information, similar to how contract details are managed. The retrieval process supports pagination through `items_per_page` and `page` parameters, and allows for flexible sorting using `sort` and `reverse` parameters. This functionality is crucial for configurations where other Configuration Items (CIs) might leverage a partner's endpoint for specific purposes, highlighting a reliance for functionality or data exchange.", "summary": "Gets a list of partners", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Partner"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Partner"}}}}, "description": ""}}, "additional_info": "This endpoint is typically used to provide a comprehensive overview of the partner landscape, similar to how vendors are displayed on a main screen. It helps in scenarios where a selected Configuration Item (CI) relies on or accesses an endpoint provided by a partner for its functionality or data exchange. The `items_per_page` and `page` query parameters are mandatory for controlling the dataset size and navigating through results. Optional sorting can be applied using the `sort` parameter for the key to sort by and `reverse` for descending order. For example, a dashboard application might use this endpoint to display a list of partners it interacts with, or to feed data to other systems that depend on partner information."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "System Integrator"], "primary_use_case": "To retrieve, track, and manage a paginated list of partners associated with the current organization, facilitating partner information display and integration with other Configuration Items (CIs)."}, "content_for_embedding": "This API retrieves a paginated and sortable list of partners associated with the current organization. It enables users to track and manage partner information, similar to how contract details or vendors are managed. The endpoint supports pagination using `items_per_page` and `page` parameters, and sorting via `sort` and `reverse` parameters. It is crucial for configurations where other Configuration Items (CIs) leverage partner endpoints, and is useful for dashboard applications displaying partner landscapes or feeding partner data to other systems.", "ontology_classification": {"features": ["contract_search_functionality", "contract_filtering_capabilities", "vendor_integration"], "primary_module": "contract_management", "confidence_score": 0.9}, "semantic_keywords": ["Partner", "Pagination", "Vendor Management"]}}, {"path": "/ux/common/partner/partner/", "method": "POST", "details": {"operationId": "ux_common_partner_partner_create", "description": "This endpoint is designed to create and save a new partner for the current organization. It acts as a specific endpoint to achieve the purpose of registering new partners, leveraging the organization's existing configuration to establish new partner entities. This functionality highlights a relationship where the selected partner entity is implemented using the features or capabilities of the specified organizational CI (Configuration Item).", "summary": "Creates a new partner ", "tags": ["Partner"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreatePartnerSample": {"value": {"partner_name": "Sadaf", "business_email": "dsadaf72323@gmail.com", "phone": "7411556607", "address": "zxcvbnm"}, "summary": "Create Partner Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint requires a POST request and expects a request body containing the new partner's details, such as `partner_name`, `business_email`, `phone`, and `address`. There is no response body expected upon successful creation. This API is commonly used when an organization needs to onboard new partners efficiently, akin to how an application might use an endpoint to interact with a messaging platform.\n\nWhile the contexts primarily discuss general CI (Configuration Item) relationships and endpoint implementation, they reinforce the concept of an endpoint's role in fulfilling a specific function for a 'using CI' (in this case, the organization) and how endpoints are established. The example usage provided in the API specification clearly outlines the required format for the request body.", "parameters": [{"name": "partner_name", "in": "body", "description": "Inferred parameter: partner_name", "required": true, "schema": {"type": "string"}}, {"name": "business_email", "in": "body", "description": "Inferred parameter: business_email", "required": true, "schema": {"type": "string"}}, {"name": "phone", "in": "body", "description": "Inferred parameter: phone", "required": true, "schema": {"type": "string"}}, {"name": "address", "in": "body", "description": "Inferred parameter: address", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Partnership Manager", "Sales Team"], "primary_use_case": "This API is used to onboard and register new partner entities for an organization, allowing the organization to establish and manage relationships with external partners."}, "content_for_embedding": "This API endpoint facilitates the creation and saving of new partner entities for an organization. It is specifically designed for registering new partners by leveraging the organization's existing configuration to establish these new partner entities. The functionality highlights the relationship where a selected partner is implemented using the features or capabilities of a specified organizational Configuration Item (CI). It requires a POST request with details like partner_name, business_email, phone, and address in the request body, and expects no response body upon successful creation. This is crucial for efficiently onboarding new partners.", "ontology_classification": {"features": ["organization_management", "vendor_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Partner", "Add", "Organization"]}}, {"path": "/ux/common/partner/partner/{id}/", "method": "GET", "details": {"operationId": "ux_common_partner_partner_retrieve", "description": "This endpoint provides the capability to retrieve specific details of a partner within the current organization by using their unique identifier (ID). It serves as a crucial component for accessing partner information, leveraging or interacting with another Configuration Item (CI) as an endpoint to achieve a specific purpose, such as a chatbot interacting with users via a messaging platform's endpoint. This aligns with the concept of a selected CI utilizing an endpoint provided by another CI for its functionality, enabling the system to fulfill a particular function for the using CI.", "summary": "Gets a partner with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Partner"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Partner"}}}, "description": ""}}, "additional_info": "The `id` parameter is a required path parameter, representing the unique identifier of the partner. While the API specification defines it as a string, it implicitly refers to the partner's unique ID. This endpoint is fundamental for any functionality that requires specific partner data within the current organizational context, similar to how a dashboard application utilizes a data endpoint from a database for its functionality."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Support Staff"], "primary_use_case": "To retrieve specific details of a partner within the current organization using their unique identifier."}, "content_for_embedding": "This API retrieves specific details of a partner within the current organization using their unique identifier (ID). It is fundamental for accessing partner information and enabling system functionalities that require specific partner data, similar to how a dashboard application utilizes a data endpoint from a database for its functionality.", "ontology_classification": {"features": ["vendor_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Partner", "Details retrieval", "ID"]}}, {"path": "/ux/common/partner/partner/{id}/", "method": "PUT", "details": {"operationId": "ux_common_partner_partner_update", "description": "This endpoint is designed to modify the details of an existing partner within the current organization. It acts similarly to an 'Edit' function found in user interfaces, allowing users to make changes to already added partner information. This is critical for maintaining up-to-date records and ensuring the accuracy of partner data, analogous to modifying an existing contract as described in guiding documentation. The process involves identifying the specific partner via a unique ID.", "summary": "Edits the partner with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Partner"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Partner"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Partner"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Partner"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Partner"}}}, "description": ""}}, "additional_info": "The `id` parameter in the path is a mandatory string that uniquely identifies the partner to be edited. The request body for this PUT operation expects a JSON payload. The serializer supports a variety of primitive field types, including StringField, IntField, BooleanField, DateTimeField, and more, for updating partner attributes. Compound fields like ListField and DictField are also supported, mapping to corresponding DRF (Django Rest Framework) fields. Special handling is noted for ReferenceField and EmbeddedDocumentField, where nested serializers may be autogenerated depending on the depth. Developers should be aware of fields like FileField, ImageField, and BinaryField, which are not well-supported or tested, and their use may lead to incorrect behavior. This endpoint embodies the 'Edited by the selected user' concept, where a specific user is responsible for making modifications to the chosen Configuration Item (CI), in this case, a partner."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Data Manager", "Partner Relationship Manager"], "primary_use_case": "To modify and update the details of an existing partner within the current organization, ensuring accurate and up-to-date partner information."}, "content_for_embedding": "This API endpoint allows for the modification of an existing partner's details by their unique ID. It functions as an 'Edit' capability, enabling users to update various partner attributes, including primitive and compound field types. It is crucial for maintaining accurate partner records and is analogous to modifying a contract or a Configuration Item (CI).", "semantic_keywords": ["Partner", "Update", "Configuration"], "ontology_classification": {"features": ["vendor_management", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/partner/partner/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_partner_partner_destroy", "description": "This endpoint permanently deletes an existing partner associated with the current organization. It removes the partner with the specified ID. While the summary states 'Deletes the partner with given id' and the original description specifies 'This endpoint is used to delete an existing partner for the current organization', this operation is irreversible, similar to how deleting an SLA profile is irreversible according to Context Rank 9. The successful deletion implies that the partner and any associated entities are removed from the system, consistent with how services are deleted when a category is deleted (Context Rank 2) and contracts are permanently deleted along with their associated details (Context Rank 5 and 10).", "summary": "Deletes the partner with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Partner"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is mandatory and must correspond to the unique identifier of the partner to be deleted. Similar to how contracts are removed entirely, this operation aims for complete removal. It is important to note that, as specified in Context Rank 3, certain entities like 'users cannot be deleted' through this type of general deletion functionality; however, this specific endpoint targets 'partners'. No response body is returned upon successful deletion, indicating a simple confirmation of the action."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Manager"], "primary_use_case": "To permanently remove a partner and all associated data from the system."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of an existing partner within the current organization. It requires the unique identifier (ID) of the partner to be deleted. The operation ensures complete removal of the partner and any linked entities from the system, similar to how contracts or SLA profiles are irreversibly deleted. A successful deletion results in no response body.", "ontology_classification": {"features": ["vendor_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Partner", "Irreversible"]}}, {"path": "/ux/common/partner/partner/filter/", "method": "GET", "details": {"operationId": "ux_common_partner_partner_filter_retrieve", "description": "This API endpoint facilitates the viewing and editing of user-related information, specifically for partners. It allows authorized users to perform actions such as submitting and viewing older requests (like access requests or catalog items), and potentially managing existing requests in detail. The functionality extends to quick edit actions for status, priority, urgency, severity, impact service, and request assignee, as well as detailed editing of request information.", "tags": ["Partner"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Partner"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint is designed to allow administrators or authorized personnel to manage user-related requests and information. While the core functionality is 'view' and 'edit', the context suggests a broader scope related to managing 'requests' and 'users' within a partner context. Users with 'View' privilege can only see the information, while those with 'Edit' privilege can modify it. The terms 'users' and 'requests' appear to be intertwined in the functionality of this endpoint, implying that user data might be tied to specific requests they initiate or are involved with."}, "llm_generated": {"business_context": {"primary_use_case": "To enable administrators and authorized personnel to view, filter, and manage user-related requests and information specifically for partners, including quick and detailed editing of request attributes."}, "content_for_embedding": "This API allows authorized users, including administrators and partners, to view, filter, and edit user-related requests and associated information. It supports quick edits for request attributes like status, priority, and assignee, as well as detailed editing of request information. The functionality includes viewing request history, filtering by various criteria, and managing requests within a partner context.", "semantic_keywords": ["Request Management", "User Management", "Filter"], "ontology_classification": {"features": ["request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_search_&_filtering", "request_tagging", "requester_interaction_history_display", "change_management_integration", "request_monitoring_&_tracking", "request_ownership_&_assignment", "request_lifecycle_management", "request_classification_&_categorization"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/common/penalty/penalty/", "method": "GET", "details": {"operationId": "ux_common_penalty_penalty_list", "description": "This endpoint is used to fetch all the penalty in the current organization", "summary": "Gets a list of penalty", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Penalty"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PenaltyConfiguration"}}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "SLA Managers", "Compliance Officers", "IT Managers"], "primary_use_case": "To retrieve and view the defined penalty configurations within an organization, likely for compliance, reporting, or operational oversight related to service level agreements."}, "content_for_embedding": "This API allows users to retrieve a comprehensive list of penalty configurations defined within the current organization. It supports pagination and sorting by various keys, enabling efficient viewing and management of penalty-related settings, which are typically associated with Service Level Agreements (SLAs).", "ontology_classification": {"features": ["sla_metric_configuration", "sla_profile_definition"], "primary_module": "sla_management", "confidence_score": 0.9}, "semantic_keywords": ["Penalty", "SLA", "Configuration"]}}, {"path": "/ux/common/penalty/penalty/", "method": "POST", "details": {"operationId": "ux_common_penalty_penalty_create", "description": "This endpoint is used to save a new penalty configuration for the current organization", "summary": "Creates a penalty configuration", "tags": ["Penalty"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreatePenaltyConfiguration": {"summary": "Create Penalty Configuration"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Service Manager", "Configuration Manager"], "primary_use_case": "To define and save new penalty configurations for an organization, likely for enforcing service level agreements or operational compliance."}, "content_for_embedding": "This API endpoint is used to create and save new penalty configurations for the current organization. These configurations are crucial for defining rules and parameters related to penalties, often in the context of Service Level Agreements (SLAs) or other compliance metrics. It allows authorized users to establish how penalties are managed and applied within the system.", "semantic_keywords": ["Penalty", "Configuration", "SLA"], "ontology_classification": {"features": ["sla_metric_configuration", "sla_profile_definition"], "primary_module": "sla_management", "confidence_score": 0.9}}}, {"path": "/ux/common/penalty/penalty/{id}/", "method": "GET", "details": {"operationId": "ux_common_penalty_penalty_retrieve", "description": "This endpoint is used to fetch a penalty details in the current organization", "summary": "Gets a penalty with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Penalty"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PenaltyConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Compliance Officer", "System Integrator", "Privileged User"], "primary_use_case": "To retrieve specific penalty configuration details for auditing, review, or integration purposes within the organization's platform."}, "content_for_embedding": "This API endpoint allows for the retrieval of detailed information about a specific penalty within the current organization. It uses a GET request and requires a unique penalty ID as a path parameter. The response provides the full penalty configuration. This is useful for auditing existing penalty settings, integrating penalty data with other systems, or displaying individual penalty details to authorized users.", "semantic_keywords": ["Penalty", "Details retrieval", "Configuration"], "ontology_classification": {"features": ["platform_account_configuration", "general_settings", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/penalty/penalty/{id}/", "method": "PUT", "details": {"operationId": "ux_common_penalty_penalty_update", "description": "This endpoint is used to edit an existing partner for the current organization", "summary": "Edits the partner with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Penalty"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PenaltyConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PenaltyConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PenaltyConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PenaltyConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "To update an existing partner's penalty configuration within an organization."}, "content_for_embedding": "This API allows for the modification of an existing partner's penalty configuration within the current organization. It requires the partner's unique identifier (ID) and the updated penalty configuration details. Access to this feature is privilege-based, typically for administrators or authorized users managing organizational and vendor-related settings.", "semantic_keywords": ["Penalty", "Partner", "Configuration"], "ontology_classification": {"features": ["platform_account_configuration", "vendor_management", "organization_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/penalty/penalty/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_penalty_penalty_destroy", "description": "This endpoint is used to delete an existing partner for the current organization", "summary": "Deletes the partner with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Penalty"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "This API is used to delete an existing partner record within the system."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific partner record from the system, identified by its unique ID. This operation is privilege-based, meaning only users with appropriate administrative permissions can execute it, ensuring data integrity and security.", "ontology_classification": {"features": ["vendor_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Partner", "Vendor Management"]}}, {"path": "/ux/common/penalty/penalty/calculate-sample-penalty/", "method": "GET", "details": {"operationId": "ux_common_penalty_penalty_calculate_sample_penalty_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Penalty"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PenaltyConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Developer"], "primary_use_case": "To retrieve and review the configuration settings for penalties within the system, which can be used for auditing, understanding penalty logic, or for testing purposes."}, "content_for_embedding": "This API retrieves a sample penalty configuration, providing details on how penalties are structured and applied within the system, likely in relation to Service Level Agreements (SLAs).", "semantic_keywords": ["Penalty", "SLA", "Configuration retrieval"], "ontology_classification": {"features": ["sla_metric_configuration", "sla_profile_definition", "service_level_target_configuration"], "primary_module": "sla_management", "confidence_score": 0.9}}}, {"path": "/ux/common/penalty/penalty/options/", "method": "GET", "details": {"operationId": "ux_common_penalty_penalty_options_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Penalty"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PenaltyConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To retrieve configuration options related to penalties, likely for user management, roles, and privileges, enabling administrators to view or edit user-related penalty settings."}, "content_for_embedding": "This API endpoint is designed to retrieve configuration options and settings related to penalties. It supports the viewing and potential editing of user-specific penalty configurations, which are often tied to user roles and privileges within the system. This allows for the management of how users are affected by or interact with penalty-related features.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "configuration_options", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Penalty", "User Management", "Configuration"]}}, {"path": "/ux/common/predicted_events/predicted_events/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_retrieve", "description": "This endpoint is used to fetch a paginated list of predicted events within the current organization. These events are crucial for identifying patterns in log events and provide a visual breakdown by severity (critical, major, minor) for easier comprehension. The API supports pagination and sorting to efficiently retrieve event data.", "summary": "Gets a list of events", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The retrieved events are part of various event summary and reporting functionalities, including Event Count, Event Trend, and Aging Summary widgets. The API uses standard pagination parameters: `items_per_page` to control the number of events returned per page and `page` to specify the desired page number. Optional parameters `reverse` and `sort` allow for custom sorting of the event list based on different keys and in ascending or descending order. Events are typically sorted by time, and they include details like Issue, Date, Node, Resource, and Event ID. This endpoint is distinct from event reports which provide statistical information over a selected interval, but the data retrieved here contributes to such reports."}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "System Administrators", "NOC Engineers", "SREs", "Developers"], "primary_use_case": "To provide a paginated and sortable list of predicted events, including severity breakdown, for identifying patterns in log events and supporting event summary and reporting functionalities like event count, event trend, and aging summary. This helps users monitor and analyze potential issues based on historical data and predictions."}, "content_for_embedding": "This API retrieves a paginated and sortable list of predicted events within an organization. It provides crucial data for identifying patterns in log events, offering a visual breakdown by severity (critical, major, minor). The events include details such as Issue, Date, Node, Resource, and Event ID. This data supports various event summary and reporting functionalities, including Event Count, Event Trend, and Aging Summary widgets. It is distinct from event reports but contributes to them. The API also relates to anomaly events, event suppression, and event association, providing data that can be filtered and used for in-depth analysis of ongoing anomalies and historical trends.", "ontology_classification": {"features": ["event_detection_and_monitoring", "event_listing_and_filtering", "aiops_anomaly_event_detection", "event_suppression", "event_association"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Predicted Events", "Monitoring", "Anomaly"]}}, {"path": "/ux/common/predicted_events/predicted_events/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_create", "description": "This API endpoint facilitates the management of 'predicted events' within the system. While the original description globally refers to 'users to be viewed or edited', the context strongly suggests a focus on the lifecycle and details of predicted events, which are likely generated by network monitoring systems. These events can be configured within the Event Management module. This endpoint likely supports operations related to how these predicted events are handled, viewed, or possibly modified after their prediction, similar to how other system entities (like requests or changes) can be managed.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "Given the 'POST' method and the `predicted_events/predicted_events/` path, this endpoint is highly likely used for creating new predicted events or for performing actions that trigger a state change or an update to predicted events. The lack of `parameters` and `request_body_description` in the provided specification implies that the request body for this POST operation is crucial for defining the predicted event details or the action to be taken. Developers should refer to the system's event management module documentation (specifically relating to event configuration and interaction with network monitoring systems) to understand the expected request body structure and parameters for creating or manipulating these predicted events. Access to this feature may be privilege-based, requiring specific administrator-assigned roles."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator"], "primary_use_case": "To create, update, and manage predicted events within the system, often generated by network monitoring systems and configurable via the Event Management module."}, "content_for_embedding": "This API endpoint is used for the management of 'predicted events'. It supports the creation, modification, and handling of these events, which are typically generated by network monitoring systems. These events are configurable within the Event Management module, and the API facilitates operations related to their lifecycle and details. Access may be privilege-based.", "semantic_keywords": ["Predicted Events", "Event Management", "Anomaly"], "ontology_classification": {"features": ["event_management_actions", "aiops_anomaly_event_detection", "event_suppression"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/predicted_events/predicted_events/{eventid}/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_retrieve_2", "description": "This endpoint allows users to retrieve detailed information about a specific event within the current organization by providing its unique event ID. This is crucial for security intelligence (SI) and log management, enabling monitoring, documenting, and analyzing system events. Events can be created by network monitoring systems and may relate to infrastructure changes, audit trails, and system signals.", "summary": "Gets a event with the given event id", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `eventid` path parameter is a unique identifier (string) and is required to fetch the event. This endpoint is particularly useful for tracking the progress of requests, understanding the nature of system events, and performing event-specific analysis. Events often include details like Issue, Date, Node, Resource, Acknowledgement status, Event Type, EMS Name, and Vendor. This API can be integrated into broader log management processes, given that system events are crucial for security intelligence and compliance regulations like PCI, which mandates specific requirements for audit logs."}, "llm_generated": {"business_context": {"user_personas": ["Security analysts", "IT operations personnel", "System administrators", "Compliance officers"], "primary_use_case": "To retrieve detailed information about specific system events, particularly predicted events, for security intelligence, log management, monitoring, and analysis."}, "content_for_embedding": "This API retrieves detailed information for a specific predicted event using its unique event ID. It is crucial for security intelligence and log management, enabling monitoring, documenting, and analyzing system events. Events can originate from network monitoring systems and relate to infrastructure changes, audit trails, and system signals. The endpoint supports tracking request progress, understanding event nature, and performing event-specific analysis. Event details often include Issue, Date, Node, Resource, Acknowledgement status, Event Type, EMS Name, and Vendor. It integrates with broader log management processes and supports compliance requirements like PCI for audit logs. Predicted events are often linked to anomaly detection and can be filtered by attributes like anomaly, suppression, or association.", "ontology_classification": {"features": ["event_listing_and_filtering", "event_detection_and_monitoring", "aiops_anomaly_event_detection"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Predicted Events", "Event Details", "Monitoring"]}}, {"path": "/ux/common/predicted_events/predicted_events/{eventid}/", "method": "PUT", "details": {"operationId": "ux_common_predicted_events_predicted_events_update", "description": "This API endpoint allows for the viewing and editing of predicted events within the system. These predicted events are typically generated by network monitoring systems that are configured to send problem reports to the system via standard APIs. In the Event Management module, users can configure and manage these events. The PUT method specifically enables updates or modifications to an existing predicted event identified by its unique `eventid`.", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `eventid` is a mandatory path parameter, a unique string value used to identify the specific predicted event to be updated. While the original API specification states 'users to be viewed or edited,' the context (especially Rank 1) strongly indicates that the focus is on 'events' that are created by network monitoring systems. The editing capabilities align with general system features allowing administrators to manage configurations and specific event details, similar to privilege-based actions mentioned (view, add, edit, delete) for other system elements. There is no response body for this operation, indicating it's a 'fire and forget' update or that the success/failure is communicated via HTTP status codes."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Engineer"], "primary_use_case": "To update or modify existing predicted events within the system, which are typically generated by network monitoring systems."}, "content_for_embedding": "This API endpoint facilitates the viewing and updating of predicted events. These events originate from network monitoring systems and are managed within the Event Management module. Specifically, the PUT method allows for modifications to an existing predicted event identified by its unique event ID. This functionality enables administrators to manage and configure specific details of these predicted events.", "semantic_keywords": ["Predicted Events", "Update", "Event Details"], "ontology_classification": {"features": ["event_management_actions"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/predicted_events/predicted_events/{eventid}/", "method": "DELETE", "details": {"operationId": "ux_common_predicted_events_predicted_events_destroy", "description": "This API endpoint allows for the deletion of a specific predicted event from the system. Predicted events can originate from network monitoring systems that send problem reports through standard APIs and are managed within the Event Management module. This operation is privilege-based, meaning a user must have explicit administrator-granted privileges (defined under roles and privileges) to perform a deletion. Deleting an event using this endpoint is an irreversible action.", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `eventid` path parameter is a unique identifier required to specify which predicted event is to be deleted. As highlighted in the context, features like deletion are privilege-based, ensuring that only authorized users can perform such actions. While the original description mentioned 'users to be viewed or edited,' the method verb `DELETE` combined with the highest-ranked contexts strongly indicates the primary function is indeed deletion of 'predicted events' which are a type of problem report. There is no request body, and the response is empty on successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Event Manager"], "primary_use_case": "This API allows administrators to delete specific predicted events, which are often problem reports originating from network monitoring systems, from the system. This is an irreversible action requiring specific privileges."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of a specific predicted event from the system. These predicted events are typically problem reports generated by network monitoring systems and are managed within the Event Management module. The operation is privilege-based, requiring explicit administrator-granted permissions.", "ontology_classification": {"features": ["event_management_actions"], "primary_module": "event_management", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Predicted Events", "Event Management"]}}, {"path": "/ux/common/predicted_events/predicted_events/action/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_action_retrieve", "description": "This API endpoint provides functionalities for viewing and performing quick actions on predicted events. It allows users to manage predicted events, similar to how 'Quick Edit' and 'Edit' actions are applied to requests, enabling modifications to status, priority, urgency, and other key attributes. This endpoint is crucial for quick management of event details.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current specification indicates a GET method with no response body, which suggests its primary use might be for triggering actions or initiating specific workflows related to predicted events rather than retrieving data. However, the original description mentioning 'viewed or edited' implies potential retrieval or modification capabilities. Given the context of 'Quick Actions' for 'Requests' and the 'predicted_events' path, this endpoint likely facilitates immediate actions on predicted events. No specific parameters or request body details are provided in the specification, so more context would be needed for detailed usage. Common use cases can include triggering status updates or assigning predicted events for further processing."}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "Event Managers", "Administrators"], "primary_use_case": "To enable users to view and perform quick actions, such as modifying status, priority, and urgency, on predicted events, facilitating immediate management and workflow initiation."}, "content_for_embedding": "This API endpoint is designed for managing and performing quick actions on predicted events. It allows users to view and modify key attributes like status, priority, and urgency of predicted events. The primary use case involves triggering actions or initiating specific workflows related to predicted events, rather than just data retrieval. It facilitates immediate actions and quick management of event details, similar to \"Quick Edit\" functionalities for requests.", "ontology_classification": {"features": ["event_management_actions", "aiops_anomaly_event_detection", "event_suppression"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Predicted Events", "Event Management", "Actions"]}}, {"path": "/ux/common/predicted_events/predicted_events/available-tags/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_available_tags_retrieve", "description": "This API endpoint provides access to available tags related to predicted events. While the initial description mentioned viewing or editing users, the supporting context heavily implies this endpoint is crucial for functionalities related to event management, incident/request tracking, and user privilege management within the system. It is likely used to retrieve predefined tags that can be associated with predicted events, potentially influencing how these events are categorized, filtered, or managed.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Given the path `/ux/common/predicted_events/predicted_events/available-tags/` and the context focusing on 'Event Management module' and 'tickets/requests/changes/problems/releases', this endpoint would typically return a list of tags. These tags could be utilized for various purposes, such as filtering, categorizing, or searching for predicted events, incidents, or requests. Although the API specification states there are no parameters, it's notable that managing events and requests often involves user roles and privileges (Context Rank 2). While not explicitly stated for this endpoint, it's common for such tag retrieval to be influenced by a user's permissions or the specific system configuration for event management. Users with appropriate privileges (as defined under roles and privileges) would likely access and utilize these tags when working with predicted events, as implied by the event management and privilege-based features mentioned in the contexts."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Event managers", "Incident responders", "Service desk agents"], "primary_use_case": "To retrieve a list of predefined tags that can be associated with predicted events, incidents, or requests for categorization, filtering, and management purposes."}, "content_for_embedding": "This API endpoint provides access to available tags specifically related to predicted events. These tags are essential for categorizing, filtering, and searching predicted events, and are also applicable to incidents and requests. The tags are managed within the system's Tag Management module, and their accessibility and utility can be influenced by user roles and privileges.", "semantic_keywords": ["Tags", "Predicted Events", "Event Management"], "ontology_classification": {"features": ["event_listing_and_filtering", "tag_management"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/predicted_events/predicted_events/column-config/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_column_config_retrieve", "description": "This API endpoint allows users to define and configure column settings for predicted events, specifically within 'Grid View' contexts. Users with appropriate privileges can access, view, and modify these configurations. This is critical for customizing the display and manageability of predicted event data within the system's user interface, aiding in data analysis and effective network job management.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint inherently supports the 'viewing' and 'editing' of column configurations for predicted events, aligning with the concept of 'privilege-based features' where user roles dictate their ability to 'access, view, add, edit, delete, execute, and export' settings. While the API specification does not detail specific parameters, it implies that the configuration is tied to predicted events. The ability to 'edit' configurations directly relates to the broader system functionality of detailed editing seen in other modules, enabling users to tailor how predicted events are presented. It's likely that roles and privileges defined by an administrator will govern access to this configuration. No request or response body details are provided, suggesting it might involve direct manipulation or retrieval of column configurations, possibly through URL parameters or a predefined system state."}, "llm_generated": {"business_context": {"user_personas": ["Users who view and manage predicted events", "Administrators"], "primary_use_case": "To allow users to customize the display and manageability of predicted event data by configuring column settings in grid views, enhancing data analysis and network job management."}, "content_for_embedding": "This API endpoint enables users to define and configure column settings for predicted events within 'Grid View' contexts. It allows for customization of the display and manageability of predicted event data in the system's user interface, aiding in data analysis and effective network job management. Access and modification are governed by user privileges, allowing administrators to control who can view and edit these configurations.", "ontology_classification": {"features": ["event_listing_and_filtering", "roles_&_privileges_management"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Predicted Events", "Column Configuration", "Customization"]}}, {"path": "/ux/common/predicted_events/predicted_events/comments/{eventid}/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_comments_retrieve", "description": "This API endpoint allows users to retrieve comments associated with a specific predicted event. It enables technicians and users to view existing comments on a request or event by providing a unique event identifier. This functionality is crucial for tracking communication and insights related to events, particularly in systems where comments are integral to understanding an event's history and ongoing interactions.", "parameters": [{"in": "path", "name": "eventid", "schema": {"type": "string"}, "description": "A unique value identifying this events.", "required": true}], "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `eventid` path parameter is a required string that uniquely identifies the event for which comments are to be retrieved. While this endpoint primarily focuses on viewing comments, related functionalities in the system allow for adding new comments to requests. This API is typically used in grid views or event management modules where a detailed history of events, including comments, is necessary for users to understand and interact with the event timeline."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "Users"], "primary_use_case": "To retrieve comments associated with predicted events or requests, enabling users and technicians to track communication and understand event history."}, "content_for_embedding": "This API retrieves comments associated with a specific predicted event, identified by a unique event ID. It allows technicians and users to view existing comments, which is crucial for tracking communication and understanding the history and ongoing interactions related to events within event management modules or grid views.", "semantic_keywords": ["Comments", "Predicted Events", "History"], "ontology_classification": {"features": ["communication_tab_(centralized_history)", "ticket_history_view", "ticket_detail_view_(via_id)"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/predicted_events/predicted_events/create_incident/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_create_incident_create", "description": "This API endpoint facilitates the creation of incidents, often triggered by network monitoring systems or manual reports, as part of an event management workflow. It allows for the integration of problem reports directly into the system, enabling configuration within the Event Management module.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body defined, context suggests incident creation involves details like 'reported by' (the user reporting the service on behalf of the requester) and potentially 'requester' information (the user requesting the service). Network monitoring systems are a primary source for automated incident creation via this API. The system aims to track progress, potentially via a ticket URL, and supports setting priority for created incidents."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "NOC Users", "Developers", "Automated Monitoring Systems"], "primary_use_case": "To automate the creation of incidents within an event management workflow, integrating problem reports from sources like network monitoring systems into the system for tracking and resolution."}, "content_for_embedding": "This API endpoint facilitates the creation of incidents, often triggered by network monitoring systems or manual reports, as part of an event management workflow. It allows for the integration of problem reports directly into the system, enabling configuration within the Event Management module. Incident creation involves details like 'reported by' (the user reporting the service on behalf of the requester) and potentially 'requester' information (the user requesting the service). The system aims to track progress, potentially via a ticket URL, and supports setting priority for created incidents.", "ontology_classification": {"features": ["automated_ticket_creation_from_monitoring_systems_(api)", "ticket_submission_methods", "ticket_url_for_tracking", "reported_by_(on_behalf_of)", "requester_search_&_add", "ticket_state_&_status_management", "ticket_tracking"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident Creation", "Ticket Submission", "Event Management"]}}, {"path": "/ux/common/predicted_events/predicted_events/events_nbi/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_events_nbi_create", "description": "This API endpoint facilitates the management and viewing of 'predicted events' within the system. Predicted events are typically generated by network monitoring systems and can be configured and managed within the Event Management module. This endpoint allows users with appropriate privileges to access, view, add, edit, or delete these predicted events, similar to how user privileges are managed for accessing daily activity summaries. The endpoint likely supports operations related to problem reports sent to the system through standard APIs, offering comprehensive details on each event, and enabling actions such as analysis and acknowledgment.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This is a privilege-based feature; users can only perform actions (access, view, add, edit, delete, execute, export) on predicted events if their administrator has granted the necessary privileges, as defined under roles and privileges. Although the API specification indicates 'No response body', successful operations might implicitly indicate success or provide a status code. Given the context of events being 'created by network monitoring systems' and 'problem reports', common use cases for this API would include automated event ingestion, manual event management by support personnel, and integration with other network operations tools. The API is designed for managing network-related events, offering a detailed report of selected parameters, and supporting the tracking of issues and changes within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Personnel", "Technician"], "primary_use_case": "To manage and view predicted events generated by network monitoring systems, enabling proactive issue resolution and integration with network operations tools."}, "content_for_embedding": "This API endpoint manages predicted events, which are typically generated by network monitoring systems. It allows users with appropriate privileges to access, view, add, edit, or delete these events. It supports automated event ingestion, manual management, and integration with other network operations tools, providing detailed reports and enabling actions like analysis and acknowledgment for network-related issues.", "ontology_classification": {"features": ["event_detection_and_monitoring", "threshold-based_anomaly_identification", "notification_and_incident_generation", "event_listing_and_filtering", "event_management_actions", "event_data_export", "aiops_anomaly_event_detection", "event_suppression"], "primary_module": "event_management", "confidence_score": 1}, "semantic_keywords": ["Predicted Events", "Event Management", "Monitoring"]}}, {"path": "/ux/common/predicted_events/predicted_events/get-event-ticket-details/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_get_event_ticket_details_retrieve", "description": "This API endpoint provides comprehensive details for a specific event ticket. When a user double-taps on a ticket ID (which could be a Ticket ID, Request ID, Change ID, Problem ID, or Release ID), this endpoint redirects to a page displaying all relevant information, including the ticket's creation time and date. It enables users to view full ticket details and potentially perform quick edits, depending on the user's permissions and the system's configuration. The information displayed covers various aspects such as basic details, communication, and potentially links to view past interactions.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for tracking the progress of requests and managing service tickets. While the API specification did not list explicit parameters, based on the context, it implicitly requires a 'ticket ID' (or equivalent ID like Request ID, Change ID, Problem ID, Release ID) to retrieve the specific ticket details. The context also suggests the possibility of 'Quick Edit' options being associated with viewing ticket details, allowing for modifications to status, priority, urgency, severity, impact, impact service, and assignee without needing to navigate to a separate detailed edit interface. Developers should anticipate that appropriate permissions are required to access and potentially edit these ticket details, consistent with the 'users to be viewed or edited' part of the original summary."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "IT Support Staff", "Administrators", "End-users (with appropriate permissions)"], "primary_use_case": "Retrieving and managing comprehensive details for various service tickets, requests, changes, and problems."}, "content_for_embedding": "This API endpoint is designed to retrieve comprehensive details for a specific event ticket, which can include a Ticket ID, Request ID, Change ID, Problem ID, or Release ID. Upon a user's interaction (e.g., double-tap), it redirects to a page displaying all relevant information, such as creation time and date, basic details, communication history, and links to past interactions. It also supports quick edits of key attributes like status, priority, urgency, severity, impact, impact service, and assignee, depending on user permissions. This endpoint is crucial for tracking the progress of requests and managing service tickets, providing a centralized view and facilitating efficient modifications without navigating to separate interfaces.", "semantic_keywords": ["Ticket Details", "Quick Edit", "Details retrieval"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "quick_edit_(key_attributes)", "ticket_tracking", "ticket_history_view", "past_interactions_display_(requester_history)", "communication_tab_(centralized_history)"], "primary_module": "ticket_management", "confidence_score": 0.95}}}, {"path": "/ux/common/predicted_events/predicted_events/get_events_nbi_inci_detail/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_get_events_nbi_inci_detail_create", "description": "This API endpoint, `/ux/common/predicted_events/predicted_events/get_events_nbi_inci_detail/`, is designed to retrieve and manage predicted event details that may originate from network monitoring systems or other sources. It allows for detailed viewing and potentially editing of these predicted events. The functionality aligns with the Event Management module, enabling users to analyze, acknowledge, and access comprehensive details about each event, including associated assets and historical data. While the original description mentioned 'users to be viewed or edited', the context strongly suggests it pertains to event management, specifically focusing on predicted events.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Events handled by this API can be created by network monitoring systems and can be configured within the Event Management module. Key actions associated with events as described in the user guide include 'Analyse' (to view impact services and event details, including asset data and performance statistics) and 'Acknowledge' (for NOC users or technicians to confirm and add comments). Access to this feature is privilege-based, meaning users can view, add, edit, delete, execute, and export only if granted the necessary permissions by an administrator. Although the API specification lists no parameters or request body, the strong contextual information implies that event IDs or filters for event details would likely be part of a robust interaction, perhaps implicitly handled or through future enhancements. The response for this endpoint has no body described currently."}, "llm_generated": {"business_context": {"user_personas": ["NOC users", "Technicians", "Event Analysts"], "primary_use_case": "To retrieve, view, analyze, and acknowledge predicted event details originating from network monitoring systems within the Event Management module."}, "content_for_embedding": "This API endpoint retrieves and manages predicted event details, potentially from network monitoring systems. It enables detailed viewing, analysis, and acknowledgment of these events, aligning with the Event Management module. Users can access comprehensive event details, including associated assets and historical data. Key actions include analyzing event impact and acknowledging events with comments.", "semantic_keywords": ["Predicted Events", "Event Management", "Anomaly"], "ontology_classification": {"features": ["aiops_anomaly_event_detection", "event_detection_and_monitoring", "event_listing_and_filtering", "event_management_actions"], "primary_module": "event_management", "confidence_score": 0.95}}}, {"path": "/ux/common/predicted_events/predicted_events/options/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_options_retrieve", "description": "This API endpoint provides options related to predicted events, likely used for configuration or selection purposes within the UX. While the original description broadly refers to viewing or editing 'users', the context suggests a more nuanced interaction potentially related to user permissions, request management, or event configurations. Given the path `/ux/common/predicted_events/predicted_events/options/`, it's highly probable that this endpoint is used to retrieve available options or settings for managing predicted events or their associated entities (such as users or requests) based on user privileges, as highlighted by the calendar view feature and user/requester management contexts. This includes capabilities related to roles and privileges, allowing users to access, view, add, edit, delete, execute, and export data if they have the necessary permissions.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The endpoint does not expect any request body or parameters and does not return a response body, indicating it might trigger an internal state change or configuration update on the server side related to predicted event options, or simply provide the default options for predicted events with no explicit response. The context emphasizes that user access (view, edit, delete, etc.) is privilege-based, defined under roles and privileges. Therefore, the successful operation of this endpoint is contingent on the calling user possessing the appropriate administrative or designated privileges as described in the 'infinity_user_guide_extracted.txt' and 'admin_guide_extracted.txt'. This endpoint might be part of the mechanism to manage who (users/requesters) can view, edit, or interact with predicted events or related 'requests' (e.g., change requests). The user guides extensively discuss 'Quick Edit' and 'Detailed Edit' actions for requests, which implies a granular control over editable fields might be configured or referenced via such 'options' endpoints."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To retrieve or configure options related to predicted events, specifically concerning how user privileges affect access and management of these events within the UX."}, "content_for_embedding": "This API endpoint, `/ux/common/predicted_events/predicted_events/options/`, is a GET request that provides configuration or selection options for predicted events within the user experience. It is crucial for managing how users interact with predicted events, as access and capabilities (view, add, edit, delete, execute, export) are strictly privilege-based, defined under roles and privileges. Although it returns no response body, it implies an internal state change or configuration update on the server side, or provides default options. The API is closely tied to AIOps configurations for prediction and forecasting, and its operation is contingent on the calling user possessing appropriate administrative or designated privileges, as detailed in user guides for managing predicted events and related requests.", "ontology_classification": {"features": ["roles_&_privileges_management", "advanced_resource_configuration_(aiops)", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Predicted Events", "Configuration Options", "User Privileges"]}}, {"path": "/ux/common/predicted_events/predicted_events/save-column-config/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_save_column_config_create", "description": "This API endpoint allows users to save column configurations for predicted events, primarily within a Grid View. It enables users to customize the display of predicted event data, potentially allowing for viewing, editing, or reordering of columns. This functionality is often tied to user-specific or role-based privileges, allowing administrators to define who can access, view, add, or edit these configurations.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically targets user-defined preferences for viewing 'predicted events', which can be related to network jobs or system-generated events. The 'save-column-config' part of the path suggests that this API is used to persist display settings, similar to how tickets or change requests might have editable fields for status, priority, or assignee. While the original description mentioned 'users to be viewed or edited,' the context strongly implies a focus on saving configuration settings for how event data columns are presented. There is no explicit request body or parameters defined in the provided API spec, suggesting the configuration data might be passed as a complex object that is not explicitly detailed at this level. The saving action is irreversible for the configuration once submitted."}, "llm_generated": {"business_context": {"user_personas": ["User", "Administrator"], "primary_use_case": "This API allows users to save their preferred column configurations for displaying predicted events in a Grid View, enabling personalized data presentation. It also incorporates privilege-based access control for these configurations."}, "content_for_embedding": "This API endpoint is designed to save user-defined column configurations for predicted events, primarily within a Grid View. It allows users to customize the display of predicted event data by enabling them to view, edit, or reorder columns. The functionality is privilege-based, meaning administrators can define who has access to manage these configurations. This endpoint persists display settings for predicted events, similar to how other configurable data might be managed. The saving action is irreversible once submitted. Users can customize and arrange columns effortlessly with drag-and-drop actions for optimal efficiency and organization.", "ontology_classification": {"features": ["roles_&_privileges_management", "general_settings", "event_listing_and_filtering", "customizable_column_selection_(ticket_list)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Column Configuration", "Predicted Events", "Customization"]}}, {"path": "/ux/common/predicted_events/predicted_events/save-tag-to-events/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_save_tag_to_events_create", "description": "This API endpoint facilitates the process of saving or applying tags to predicted events within the system. While the initial description broadly covers 'viewing or editing users,' the contexts clarify its true purpose lies within event management, specifically tagging events. In the Event Management module, users can configure and manage events, and this endpoint plays a crucial role in categorizing these predicted events by associating them with specific tags. This aligns with the 'Tag' action mentioned in the advanced resource configuration within the user guide, which allows selecting a tag from a dropdown and submitting it to apply to resources or events. This functionality helps in organizing and analyzing events effectively, making it easier to filter and manage them.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided contexts, 'Tag' is a key action available for various entities, and this endpoint specifically enables the application of tags to 'predicted_events'. This is crucial for event organization and analytics, aiding in filtering and managing events as described in the Event Management module (Context Rank 2). Although the API specification doesn't detail request parameters, it's highly implied that the request body will contain the event IDs and the tag(s) to be applied. The operation does not return a response body, indicating a simple success/failure through HTTP status codes. This feature is particularly useful for quickly categorizing new or recurring predicted events without manual intervention for each event."}, "llm_generated": {"business_context": {"user_personas": ["Event Managers", "System Administrators", "Analysts"], "primary_use_case": "To categorize and organize predicted events within the system by applying predefined tags, facilitating easier filtering, analysis, and management of events."}, "content_for_embedding": "This API endpoint allows users to apply or save tags to predicted events. This functionality is crucial for event management, enabling the categorization, organization, and analysis of predicted events. By associating events with specific tags, users can efficiently filter and manage them. The operation does not return a response body, indicating a success/failure via HTTP status codes. This feature streamlines the process of categorizing new or recurring predicted events.", "ontology_classification": {"features": ["event_management_actions", "event_listing_and_filtering", "event_association", "tag_management"], "primary_module": "event_management", "confidence_score": 0.95}, "semantic_keywords": ["Tags", "Predicted Events", "Event Management"]}}, {"path": "/ux/common/predicted_events/predicted_events/suppressed-events/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_suppressed_events_retrieve", "description": "This API endpoint allows users to retrieve information about suppressed predicted events. These events are often reported by network monitoring systems and can be configured within the Event Management module. While the original summary suggested user viewing/editing, the context strongly indicates this endpoint is specifically for managing and viewing 'suppressed events' that originate from network monitoring, providing a detailed report of selected event parameters. This feature is privilege-based, meaning access, viewing, and configuration are dependent on administrator-assigned roles and privileges.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint provides access to 'predicted events' which, based on the context, are likely generated by network monitoring systems. The ability to view these events is tied to the user's roles and privileges, as defined by an administrator. Users should check their assigned privileges to ensure they have the necessary permissions to access and configure event-related information. The system focuses on effective network job management, and events play a crucial role in real-time monitoring and responses to potential threats."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Technician", "Users with assigned privileges"], "primary_use_case": "To retrieve and view information about suppressed predicted events originating from network monitoring systems, aiding in network job management and real-time threat monitoring."}, "content_for_embedding": "This API retrieves information on suppressed predicted events, which are typically generated by network monitoring systems. These events are configured within the Event Management module and are excluded from notifications like ticket creation or alerts. Access to view and manage these events is privilege-based, requiring administrator-assigned roles. The system supports effective network job management, real-time monitoring, and response to potential threats. Suppressed event counts can be viewed in dashboard widgets and reports, and their configuration involves settings like Seasonal Event Suppression in the Advanced Resource Configuration (ARC) module.", "ontology_classification": {"features": ["event_suppression", "event_listing_and_filtering", "event_detection_and_monitoring"], "primary_module": "event_management", "confidence_score": 1}, "semantic_keywords": ["Event Suppression", "Predicted Events", "Retrieval"]}}, {"path": "/ux/common/predicted_events/predicted_events/suppression-adaptive/", "method": "GET", "details": {"operationId": "ux_common_predicted_events_predicted_events_suppression_adaptive_retrieve", "description": "This API endpoint facilitates the management of 'predicted events' within the system, specifically concerning 'suppression-adaptive' functionalities. While the original description broadly mentioned viewing or editing users, the context suggests a deeper involvement with event management and potentially system-generated problem reports. It likely allows for the configuration, viewing, and possibly editing of events related to network monitoring systems or the management of event suppressions.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification indicates no parameters or request body for this GET method, and no response body. This suggests it might trigger a process, confirm a state, or be a placeholder for future functionality related to 'suppression-adaptive' events. Higher-ranked contexts point towards 'Event Management Modules' and the creation of events by 'network monitoring systems'. Future enhancements might include parameters for filtering, editing, or suppressing specific events. The 'suppression-adaptive' naming implies dynamic event suppression based on system conditions. Note that the original description's mention of 'users' might be a generic placeholder, as the context points more towards 'events' and 'requesters/reporters' in the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Operations Center (NOC) Personnel", "IT Technician", "System Engineer"], "primary_use_case": "This API is used to manage and retrieve information about predicted events, specifically those subject to adaptive suppression, to reduce noise from network monitoring systems and provide insights into recurring event patterns."}, "content_for_embedding": "This API endpoint facilitates the management of 'predicted events' within the system, specifically concerning 'suppression-adaptive' functionalities. It allows for the configuration, viewing, and possibly editing of events related to network monitoring systems or the management of event suppressions. The API might trigger a process, confirm a state, or be a placeholder for future functionality related to 'suppression-adaptive' events. Higher-ranked contexts point towards 'Event Management Modules' and the creation of events by 'network monitoring systems'. The 'suppression-adaptive' naming implies dynamic event suppression based on system conditions. Relevant documentation highlights 'Adaptive Event Suppression Summary' and 'Suppressed Events Count', indicating its role in summarizing and displaying automatically suppressed events to reduce noise in the event stream. It's a view-only interface for recurring downtime patterns across selected assets and resources, allowing analysis of suppression candidates.", "ontology_classification": {"features": ["event_suppression", "event_detection_and_monitoring", "event_listing_and_filtering"], "primary_module": "event_management", "confidence_score": 1}, "semantic_keywords": ["Event Suppression", "Predicted Events", "Events"]}}, {"path": "/ux/common/predicted_events/predicted_events/update-event-assignee/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_update_event_assignee_create", "description": "This API endpoint facilitates the update of an assignee for a predicted event within the system. While the original description broadly refers to 'users to be viewed or edited,' the context strongly indicates its specific role in managing event-related assignments. This aligns with the concept of 'Quick Edit' functionality, enabling modifications such as changing the Request assignee as mentioned in Context Rank 3. This functionality is crucial for managing workflows within event management or similar modules where event assignments need dynamic updates.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided contexts, this endpoint is likely used to change the individual responsible for a specific event or request. Context Rank 3 highlights 'Quick Edit' actions including the 'Request assignee,' suggesting that this API could be part of a broader quick-edit functionality available for event or request management. Although the API specification lists no parameters or request body description, it's highly probable that this endpoint would require an event identifier and a new assignee's ID or relevant details in the request body to perform the update. This aligns with the concept of managing event configurations and assignments within the 'Event Management module' mentioned in Context Rank 2, and the broader user management features for 'requesters' or 'reporters' from Context Rank 1. Without specific parameter details, developers should anticipate needing to provide event identification and assignee information, likely via the request body in a POST operation."}, "llm_generated": {"business_context": {"user_personas": ["Event Managers", "IT Administrators", "Help Desk Agents", "Technicians"], "primary_use_case": "To dynamically update the assignee for predicted events, enabling efficient workflow management and reassignment of responsibilities within event or request management systems."}, "content_for_embedding": "This API endpoint facilitates the update of an assignee for a predicted event within the system. It supports quick edit functionality, allowing for dynamic changes to event assignments. This is crucial for managing workflows in event management or similar modules, enabling the modification of who is responsible for a specific event or request, such as changing a Request assignee.", "semantic_keywords": ["Update", "Assignee", "Predicted Events"], "ontology_classification": {"features": ["event_management_actions", "assignee_management", "quick_edit_(key_attributes)"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/predicted_events/predicted_events/update-event-due-date/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_update_event_due_date_create", "description": "This API endpoint, `/ux/common/predicted_events/predicted_events/update-event-due-date/`, is designed to manage and update the due date of predicted events within the system. While the original description broadly referred to users being viewed or edited, the context clearly indicates its role in managing 'events' and specifically 'due dates'. It aligns with functionalities observed in ticket, request, change, problem, and release management where due dates are critical parameters for issues or items. This operation is typically a POST request, signifying data submission to modify an existing event's due date. The ability to modify due dates is often a privilege-based feature, with managers typically having the authority to extend them.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided contexts, particularly 'Context Rank 7' which states '*Due by - Only a manager has the privilege to extend the due date*', it is highly probable that updating an event's due date via this API requires specific user privileges, most likely manager-level permissions. While the API specification does not detail request body parameters, common practice for such an endpoint would involve providing the event's identifier (e.g., event ID, ticket ID, problem ID) and the new due date. The endpoint receives no response body, indicating a successful update might be inferred from a 2xx HTTP status code rather than a detailed payload. This API is crucial for managing timelines of predicted events, similar to how due dates are managed for tickets and changes in ITSM workflows."}, "llm_generated": {"business_context": {"user_personas": ["Manager", "IT Operations", "Service Desk Agent", "Administrator"], "primary_use_case": "Manages and updates due dates for predicted events, aligning with similar functionalities in IT Service Management (ITSM) for tickets, requests, changes, and problems."}, "content_for_embedding": "This API endpoint facilitates the modification of due dates for predicted events within the system. It is a POST request, requiring specific user privileges, typically manager-level, to update an event's identifier with a new due date. The functionality is analogous to managing due dates for various ITSM items such as tickets, requests, changes, and problems, where timely updates are crucial for workflow management. A successful update is indicated by a 2xx HTTP status code, as no response body is returned.", "semantic_keywords": ["Due Date", "Update", "Predicted Events"], "ontology_classification": {"features": ["event_management_actions", "roles_&_privileges_management"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/predicted_events/predicted_events/update_incident_note/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_update_incident_note_create", "description": "This API endpoint allows users to update an incident note. It is specifically designed to facilitate modifications to existing notes within a ticket or request, enabling users to add updates and save changes. This functionality is crucial for tracking the progress of requests and providing comprehensive details on incidents.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of a broader system for managing tickets, requests, changes, and problems within an IT Service Management (ITSM) context, as indicated by various guide documents. While the endpoint's direct purpose is to update an incident note, it ties into the ability to update tickets and add notes, allowing users to 'Access the ticket thread, input the necessary updates and notes, and save the changes' (Context Rank 6, 7). This aligns with the system's focus on tracking requests and providing updates. The API is a POST method and does not return a response body upon successful execution. There are no explicit parameters defined in the API specification, implying relevant data for the update is expected within the request body."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Incident Managers", "Help Desk Agents", "Administrators"], "primary_use_case": "This API allows users to update existing incident notes within a ticket or request, which is crucial for tracking the progress of requests and providing comprehensive details in an IT Service Management (ITSM) context."}, "content_for_embedding": "This API endpoint facilitates the modification of existing incident notes associated with a ticket or request. It enables users to add updates and save changes, contributing to the comprehensive tracking of request progress and incident details within an IT Service Management (ITSM) system. The API uses a POST method and expects relevant data within the request body, without returning a response body upon successful execution. It is integral to managing tickets, requests, changes, and problems by allowing users to update ticket threads and add notes.", "ontology_classification": {"features": ["internal_notes", "detailed_ticket_editing", "ticket_tracking"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Incident Update", "Notes", "Ticket"]}}, {"path": "/ux/common/predicted_events/predicted_events/upsert_incident/", "method": "POST", "details": {"operationId": "ux_common_predicted_events_predicted_events_upsert_incident_create", "description": "This API endpoint, `/ux/common/predicted_events/predicted_events/upsert_incident/`, is designed for the management of predicted events, specifically for creating or updating incident records within the system. While the original description mentioned viewing/editing users, the context strongly indicates its role in an incident management system where incidents can be reported by users or generated automatically by network monitoring systems. It allows for the 'upsert' (update or insert) of incident data, contributing to the Event Management module to configure and manage these events, which often relate to ticket creation and status updates.", "tags": ["Predicted Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint likely plays a crucial role in the Event Management module, as highlighted in Context Rank 1, enabling the system to receive and process incident reports. These incidents can either be manually reported by users (or on behalf of requesters, as detailed in several contexts regarding ticket creation) or automatically generated through integrations with network monitoring systems. While the API specification does not detail request parameters or a request body, it is logically inferred from the contexts that the endpoint would require data pertaining to the incident, such as incident details, reporter information (name, email), and possibly priority, similar to how tickets are created and updated in the system. The endpoint facilitates the ongoing management of incidents, potentially influencing ticket status and communication within the system. The response body is noted as 'No response body', suggesting a success/failure status might be conveyed via HTTP status codes."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "Technicians", "NOC Users", "Automated Systems"], "primary_use_case": "To manage and update incident records generated from predicted events, often leading to ticket creation and status updates."}, "content_for_embedding": "This API endpoint, `/ux/common/predicted_events/predicted_events/upsert_incident/`, is used to create or update incident records within the system. These incidents are often generated from predicted events, which are changes or anomalies detected within the organization's infrastructure through active and passive monitoring. The endpoint facilitates the ongoing management of incidents, including those reported manually by users or automatically by network monitoring systems. It plays a crucial role in the Event Management module, enabling the system to process incident reports and potentially influence ticket creation and status updates. Actions like creating an incident for an event are supported, and the system can suppress events from triggering tickets or alerts.", "semantic_keywords": ["Predicted Events", "Incident Update", "Event Management"], "ontology_classification": {"features": ["notification_and_incident_generation", "aiops_anomaly_event_detection", "event_suppression", "incident_card_inline_editing"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/purchase_order/config/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_list", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PurchaseOrderList"}}}}, "description": ""}}, "description": "This GET endpoint retrieves configuration details related to a purchase order within the UX common module. It provides essential information, particularly regarding vendor locations and names, crucial for managing purchase orders and related financial transactions. The configuration data includes high-level details that support procurement processes, offering insights into supplier information and potentially payment methods, as indicated by context from the administration and user guides. This endpoint is designed to provide foundational configuration data necessary for various purchase order operations within the system.", "summary": "", "additional_info": "While the primary focus of this endpoint is configuration, the related context from the user guides (especially concerning 'Add Payment Method' and 'Purchase Order Details') suggests that the configuration might encompass settings directly influencing how payment methods are managed or how purchase order details are structured in the UI. Although the API specification lists no specific parameters, future enhancements might include filtration by vendor or location. This configuration data is fundamental for ensuring accurate purchase order processing and integration with other system components, such as asset tracking and financial reporting. Developers should anticipate data related to vendor setup rather than transactional purchase order data."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "Procurement Manager"], "primary_use_case": "To retrieve configuration details for purchase orders, specifically vendor and payment-related settings, to support procurement processes and financial transactions."}, "content_for_embedding": "This API retrieves foundational configuration details for purchase orders within the UX common module. It provides essential information like vendor locations and names, crucial for managing procurement processes and financial transactions. The data supports vendor setup and influences how payment methods and purchase order details are structured in the UI.", "ontology_classification": {"features": ["vendor_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration", "Retrieval", "Vendor Management"]}}, {"path": "/ux/common/purchase_order/config/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint allows for the configuration of purchase orders. Based on the request body specification, it supports a wide range of data types including primitive fields like strings, integers, booleans, and dates, as well as complex fields like lists, dictionaries, and references. The configuration can involve details typically found in purchase orders such as vendor location and vendor name, which are key elements in managing purchase order details. The system also supports integration with other services, potentially for payment methods or asset tracking, as indicated by various context sources. Essentially, this endpoint is used to define or update the structural and business rules for purchase orders within the system.", "summary": "", "additional_info": "The request body for this POST endpoint is designed to be highly flexible, accommodating various document structures as detailed in the `request_body_description`. It leverages a serializer that can handle nested structures like `ListField` and `DictField`, and special handling for `ReferenceField` and `EmbeddedDocumentField`. Developers should pay close attention to the specified field types to ensure correct data submission. While many field types are well-supported, `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. Common use cases might involve setting up new purchase order templates, defining vendor relationships, or configuring payment integration details. The context suggests that information like 'Vendor Name' and 'Vendor Location' are crucial aspects to be defined through this configuration."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Procurement Manager"], "primary_use_case": "This API allows for the comprehensive configuration and update of purchase orders, including defining structural rules, business rules, and integrating vendor-specific details and other services like payment or asset tracking."}, "content_for_embedding": "This API endpoint facilitates the creation and modification of purchase order configurations. It supports diverse data types for defining structural and business rules, including critical details like vendor name and location. The endpoint also enables integration with external services for functionalities such as payment processing and asset tracking, thereby providing a robust solution for managing purchase order frameworks within the system.", "semantic_keywords": ["Configuration", "Vendor Management", "Add"], "ontology_classification": {"features": ["vendor_management", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/purchase_order/config/{id}/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_retrieve", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint retrieves the configuration details for a specific purchase order. It uses a unique identifier (`id`) to fetch comprehensive information related to the setup of a purchase order, potentially including vendor-specific configurations and other essential details as highlighted in the administrative guides. This is crucial for viewing and understanding how various aspects of a purchase order are configured within the system.", "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier for the purchase order configuration being queried. Based on the provided contexts, this ID likely refers to a configuration profile, a ticket ID, or a contract ID, all of which redirect to a page containing comprehensive details. Contexts emphasize the importance of viewing details related to vendors and purchase orders, suggesting this endpoint could provide information on vendor location, vendor name, or specific purchase order details such as cost, supplier, and specifications. This endpoint is primarily for viewing existing configurations and is typically read-only."}, "llm_generated": {"business_context": {"user_personas": ["Procurement Specialists", "Administrators", "IT Support Staff"], "primary_use_case": "To retrieve and view the detailed configuration of a specific purchase order, including vendor-specific settings and other essential setup information."}, "content_for_embedding": "This API endpoint allows for the retrieval of comprehensive configuration details for a specific purchase order using its unique identifier. It provides access to information related to the setup of the purchase order, potentially including vendor-specific configurations, vendor location, vendor name, cost, supplier, and specifications. This is a read-only operation crucial for viewing and understanding existing purchase order configurations within the system. The ID can refer to a configuration profile, ticket ID, or contract ID.", "ontology_classification": {"features": ["detailed_contract_data_storage", "detailed_contract_view", "vendor_integration", "contract_search_functionality"], "primary_module": "contract_management", "confidence_score": 0.9}, "semantic_keywords": ["Configuration retrieval", "Purchase Order", "Contract"]}}, {"path": "/ux/common/purchase_order/config/{id}/", "method": "PUT", "details": {"operationId": "ux_common_purchase_order_config_update", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This PUT endpoint is used to update the configuration of a specific purchase order. It allows for the modification of common purchase order settings, identified by a unique `id`. The update process involves submitting a request body that adheres to a flexible serialization schema, supporting a wide range of primitive and compound data types, similar to standard Document-based serialization. This endpoint is crucial for maintaining and refining purchase order details, potentially including associations with vendor locations or other vendor-related information.", "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the purchase order configuration to be updated. The request body supports various field types including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others for granular control over the configuration settings. Compound fields like `ListField` and `DictField` are also supported, allowing for complex data structures. Special handling is noted for `ReferenceField` and `EmbeddedDocumentField`, where nested serializers are autogenerated for non-zero depth. While commonly used fields are well-supported, fields such as `FileField`, `ImageField`, and `BinaryField` are noted as not well-supported or untested. This endpoint likely plays a role in managing vendor-specific purchase order configurations, aligning with concepts of updating 'details of an existing contract' or 'modifying details of an existing contract' as seen in the contexts related to vendor and contract management. It enables users to make changes to already added purchase order configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Procurement Manager", "Vendor Manager"], "primary_use_case": "To update and modify existing purchase order configurations, including vendor-specific settings and other related details."}, "content_for_embedding": "This API endpoint allows for the update and modification of a specific purchase order configuration, identified by a unique ID. It supports flexible data types for the request body, enabling granular control over settings. The endpoint is crucial for maintaining and refining purchase order details, potentially involving vendor locations and other vendor-related information, aligning with the concept of modifying existing contract details.", "ontology_classification": {"features": ["contract_modification", "detailed_contract_data_storage", "vendor_integration", "contract_lifecycle_management", "contract_search_functionality"], "primary_module": "contract_management", "confidence_score": 0.95}, "semantic_keywords": ["Update", "Configuration", "Purchase Order"]}}, {"path": "/ux/common/purchase_order/config/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_purchase_order_config_destroy", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "description": "This endpoint allows for the permanent deletion of a specific purchase order configuration. It removes the configuration identified by its unique ID, including all its associated details. This action cannot be undone.", "summary": "", "additional_info": "The `id` path parameter refers to the unique identifier of the purchase order configuration to be deleted. This endpoint is crucial for managing the lifecycle of purchase order configurations, often used when a configuration is no longer needed or was created in error. Contexts suggest `ID` refers to a specific identifier, similar to `Contract ID` or `ticket ID`, implying a comprehensive details page or record associated with it. This aligns with the 'Delete' functionality often seen in contract management, where associated details are also removed."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Manager", "Purchase Order Manager"], "primary_use_case": "This API allows for the permanent deletion of specific purchase order configurations, which is crucial for managing their lifecycle by removing obsolete or erroneous entries."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific purchase order configuration identified by its unique ID. It removes all associated details, making it essential for lifecycle management of purchase order configurations, similar to how contracts or tickets are managed and deleted when no longer needed or created in error.", "ontology_classification": {"features": ["contract_deletion"], "primary_module": "contract_management", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Purchase Order", "Configuration"]}}, {"path": "/ux/common/purchase_order/config/add-approval-config/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_add_approval_config_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint, `/ux/common/purchase_order/config/add-approval-config/`, facilitates the addition of a new approval configuration for purchase orders. It is designed to configure settings related to the approval process, which is a mandatory compliance requirement. Users can define a Template Description and select a Configuration Type (such as Startup, Running, or Candidate) for the approval setup. While the configuration type acts primarily as a label, the 'Approval Required Checkbox' is mandatory and cannot be unchecked, ensuring compliance. The endpoint processes the request body, which can include various primitive and compound field types as documented for documents.", "summary": "", "additional_info": "The request body for this endpoint supports a wide array of data types, including StringField, IntField, DateTimeField, and BooleanField. Compound fields like ListField and DictField are also supported, mapping to DRF fields with respect to nested specifications. Special handling is noted for ReferenceField (similar to DRF's ForeignKey) and EmbeddedDocumentField. It's important to note that fields like FileField, ImageField, and BinaryField are either not well supported or untested. The 'Approval Required Checkbox' is a key compliance element and users must be aware that this is a system-enforced mandatory setting."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Compliance Officer", "Workflow Manager", "System Configurator"], "primary_use_case": "To add and configure approval settings for purchase orders, ensuring compliance and streamlining the approval process."}, "content_for_embedding": "This API endpoint allows for the addition of new approval configurations specifically for purchase orders. It enables users to define settings for the approval process, including a template description and configuration type (Startup, Running, or Candidate). A key aspect is the mandatory 'Approval Required Checkbox' which ensures compliance. The API supports various data types for the request body, facilitating comprehensive approval setup for purchase orders.", "ontology_classification": {"features": ["workflow_automation", "notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Approval Workflow", "Configuration", "Purchase Order"]}}, {"path": "/ux/common/purchase_order/config/add-attachment/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_add_attachment_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint facilitates the attachment of documents to purchase orders, supporting various file types and allowing for the categorization and description of attachments. It enables users to either drag and drop documents or upload files directly. The supported file formats for image-based attachments, as indicated by similar functionality, include PNG, JPG, and JPEG. This functionality is crucial for adding supporting documentation like images, screenshots, or team documents to purchase order configurations.", "summary": "", "additional_info": "The request body for this endpoint is designed to accept various primitive and compound field types as described in the `request_body_description`. It supports `StringField`, `URLField`, `EmailField`, `IntField`, `BooleanField`, `DateTimeField`, `UUIDField`, and others, mapping them to corresponding DRF fields. Nested structures like `ListField` and `DictField` are also supported. It's important to note that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested, suggesting potential issues if these are intended for file uploads directly through the serializer. Users should ideally classify the attachment (e.g., 'default category', 'ticket screenshot', 'team docs') and provide a description, based on common attachment mechanisms in the system. The primary use case is to enrich purchase order records with necessary documents, improving traceability and record-keeping."}, "llm_generated": {"business_context": {"user_personas": ["Procurement Specialists", "Administrators", "Users managing purchase orders"], "primary_use_case": "Attaching documents to purchase orders for record-keeping and traceability."}, "content_for_embedding": "This API allows users to add and categorize attachments, such as images, screenshots, and team documents, to purchase order configurations. It supports drag-and-drop or direct file uploads, crucial for enriching purchase order records, improving traceability, and record-keeping. Attachments can be classified into categories like 'default category', 'ticket screenshot', or 'team docs', and include a description.", "ontology_classification": {"features": ["attachment_management", "record_creation_&_management"], "primary_module": "workspace", "confidence_score": 0.9}, "semantic_keywords": ["Attachments", "Purchase Order", "Classification"]}}, {"path": "/ux/common/purchase_order/config/add_received_assets/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_add_received_assets_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This `/ux/common/purchase_order/config/add_received_assets/` endpoint is designed to facilitate the addition of received assets, likely to include assets associated with a purchase order, into the system's inventory. Building upon existing asset management capabilities described in the user guides, this endpoint supports the integration of new assets, allowing for tracking and management within the Infinity platform. The process aligns with the broader asset lifecycle, from initial receipt (potentially linked to a purchase order) through to detailed configuration and status updates. The endpoint is intended as a POST method to initiate the creation of new asset records reflecting items that have been received.", "summary": "", "additional_info": "The request body for this endpoint is critical for defining the received assets. It utilizes a robust serialization mechanism supporting various primitive and compound field types such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Specific attention is given to relational fields like `ReferenceField` (similar to DRF's `ForeignKey`) which can autogenerate nested serializers based on depth, and `EmbeddedDocumentField`. While many field types are well-supported, `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. Users should ensure their asset data conforms to the expected structure to avoid `DocumentField` fallback behavior, which may lead to incorrect operation. Information regarding general asset attributes such as asset name, IP address, status, owner, and requester from the general asset documentation (Context Rank 1) is likely relevant for structuring the incoming asset data."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager", "Procurement Manager"], "primary_use_case": "To add received assets, potentially linked to purchase orders, into the system's inventory for tracking and management."}, "content_for_embedding": "This API endpoint facilitates the addition of received assets into the system's inventory, specifically those associated with a purchase order. It supports the creation of new asset records for tracking and management within the Infinity platform, aligning with the asset lifecycle from initial receipt through to detailed configuration and status updates. The request body utilizes a robust serialization mechanism supporting various primitive and compound field types for defining the asset data.", "ontology_classification": {"features": ["multiple_asset_addition_methods", "unified_asset_repository", "asset_lifecycle_management", "customizable_asset_properties_and_fields", "consumable_asset_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Add", "Asset management", "Purchase Order"]}}, {"path": "/ux/common/purchase_order/config/add_received_product_history/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_add_received_product_history_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This POST endpoint is designed to add history for a received product within the purchase order configuration. It facilitates the comprehensive tracking of stock movements, similar to the \"Inventory History\" section described in the Infinity User Guide. This allows for the addition of new records related to product receipts, contributing to an overall history of stock levels by various attributes such as location, quantity, vendor, action type, status, and dates. This historical data is crucial for tracking changes over time, aiding in the planning of restocking and asset replenishment based on consumption trends.", "summary": "", "additional_info": "The request body for this endpoint is expected to conform to a serializer for documents, supporting various primitive fields (StringField, URLField, IntField, BooleanField, DateTimeField, etc.) and compound fields like ListField and DictField. ReferenceField is handled similarly to 'ForeignKey' in DRF, and EmbeddedDocumentField also supports nested serializers. Fields like FileField, ImageField, and BinaryField are noted as not well-supported or untested. This endpoint is critical for maintaining accurate inventory history records, which are vital for predicting future asset needs and comprehensive purchase order management. While the specific parameters are not detailed in the provided API spec for the request body, it is implied that the request will contain data relevant to a received product's history, aligning with the fields mentioned in the 'Inventory History' context (e.g., location, quantity, vendor, status, date)."}, "llm_generated": {"business_context": {"user_personas": ["Inventory Managers", "Procurement Specialists", "Warehouse Staff", "Administrators"], "primary_use_case": "To add and track historical records of received products, manage stock movements, and maintain comprehensive inventory history for purchase order management and asset replenishment planning."}, "content_for_embedding": "This API endpoint allows for adding historical records of received products to the purchase order configuration, facilitating comprehensive tracking of stock movements and inventory levels. It supports recording details such as location, quantity, vendor, action type, status, and dates, which is crucial for maintaining accurate inventory history, predicting future asset needs, and managing purchase orders effectively.", "ontology_classification": {"features": ["inventory_data_collection", "detailed_asset_activity_log", "multiple_asset_addition_methods", "customizable_asset_properties_and_fields", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Inventory update", "Asset History", "Purchase Order"]}}, {"path": "/ux/common/purchase_order/config/attachment/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_attachment_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint provides configuration details related to attachments for purchase orders. It allows for the retrieval of settings such as attachment categories (e.g., Default, Procurement, Service, Retirement Documents) that can be selected when adding new attachments to purchase orders, similar to how attachments are managed for assets and tickets. This functionality is crucial for organizing and categorizing documents associated with purchase order processes, aligning with broader attachment management features found across the system, including drag-and-drop options and descriptive fields for attachments.", "summary": "", "additional_info": "While the API specification shows no explicit parameters for this GET endpoint, the context suggests that it likely retrieves a predefined list of attachment categories. These categories are configurable and are similar to those used when attaching documents to assets or tickets within the system. Users should expect a list of available attachment types, which can then be used in subsequent API calls (e.g., POST requests to add attachments) to specify the category of the uploaded file. This API is commonly used to populate drop-down menus or configuration screens in a user interface where attachment categories need to be displayed or selected."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "Developers", "Users managing purchase orders"], "primary_use_case": "To retrieve configuration details, specifically attachment categories, for purchase orders to populate user interface elements like dropdown menus."}, "content_for_embedding": "This GET endpoint retrieves configuration details for attachments related to purchase orders. It provides a predefined list of attachment categories, such as Default, Procurement, Service, and Retirement Documents. This functionality is crucial for organizing and categorizing documents within purchase order processes, similar to how attachments are managed for assets and tickets. The retrieved categories are typically used to populate dropdown menus or configuration screens in a user interface, allowing users to select the appropriate category when adding new attachments.", "semantic_keywords": ["Attachments", "Configuration", "Purchase Order"], "ontology_classification": {"features": ["general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/purchase_order/config/create-csv/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_create_csv_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint allows users to create a new CSV file for Purchase Order configurations. It facilitates the export or download of specific configuration data in a CSV format (e.g., an Excel sheet). This is particularly useful for managing and importing various configuration details, such as those related to consumable assets or triggers, as it enables users to download a template or existing configuration to then modify and upload. The process often involves downloading a sample CSV template to ensure proper data structure before data entry.", "summary": "", "additional_info": "The request body for this endpoint is designed to handle various field types for document serialization. While it supports primitive fields like StringField, IntField, BooleanField, and DateTimeField, as well as compound fields like ListField and DictField, certain fields are noted as not well supported or untested, including FileField, ImageField, and BinaryField. Developers should be aware of these limitations. This API is commonly used in workflows that involve bulk data operations, such as importing asset lists or trigger configurations, where a CSV template is often provided for initial data population."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Data Manager"], "primary_use_case": "Exporting and downloading Purchase Order configuration data in CSV format for bulk management and import operations."}, "content_for_embedding": "This API enables the creation and download of CSV files for Purchase Order configurations, facilitating the export of specific configuration data. It supports bulk data operations, such as importing asset lists or trigger configurations, by providing a downloadable template for modification and subsequent upload.", "ontology_classification": {"features": ["report_export_capabilities", "adhoc_report_download", "bulk_actions_on_assets", "configuration_download_jobs"], "primary_module": "report", "confidence_score": 0.9}, "semantic_keywords": ["CSV Export", "Purchase Order", "Configuration"]}}, {"path": "/ux/common/purchase_order/config/csv_columns/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_csv_columns_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint allows users to define and configure column matching settings for CSV file uploads related to purchase order configurations. It is a crucial step in the process of importing data from CSV files, ensuring that the system correctly maps the columns in the uploaded file to the internal data structure. The process involves recognizing various primitive and compound field types such as `StringField`, `IntField`, `ListField`, and `DictField`, as well as handling `ReferenceField` and `EmbeddedDocumentField` for complex data structures. This configuration is essential before proceeding with the actual data import, as indicated by the 'Column Matching' details in user guides.", "summary": "", "additional_info": "The `request_body_description` details the serializer's capabilities for processing different data types from the CSV file. It recognizes a wide range of primitive types like `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, and `DateField`. Compound fields like `ListField` and `DictField` are mapped to corresponding DRF fields with respect to nested field specifications. `ReferenceField` is handled like `ForeignKey` in DRF, generating nested serializers if depth is greater than 0. `EmbeddedDocumentField` also generates nested serializers for non-zero depth, though the specification notes that the current handling for a depth of zero might be incorrect. Generic fields (`GenericReferenceField` and `GenericEmbeddedDocumentField`) are also supported. It's noted that `FileField`, `ImageField`, and `BinaryField` are 'Not well supported or untested'. This API is generally used in workflows where a user uploads a CSV file and then configures how its columns should be interpreted for data import, a mandatory step before proceeding to data validation and import of valid records."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Data Entry Specialist", "IT Operations Staff"], "primary_use_case": "To define and configure column matching settings for CSV file uploads related to purchase order configurations, ensuring correct data mapping before import."}, "content_for_embedding": "This API allows users to configure how columns in a CSV file are mapped to the system's internal data structure for purchase order configurations. It supports various field types like StringField, IntField, ListField, DictField, ReferenceField, and EmbeddedDocumentField. This is a crucial pre-import step for accurate data ingestion from CSV files.", "ontology_classification": {"features": ["general_settings", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CSV Import", "Column Configuration", "Purchase Order"]}}, {"path": "/ux/common/purchase_order/config/delete-attachment/{id}/", "method": "PUT", "details": {"operationId": "ux_common_purchase_order_config_delete_attachment_update", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint permanently removes a specific attachment associated with a purchase order. It is part of the 'Delete' functionality often seen in inventory and asset management systems, allowing users to remove items or related documents from the inventory. The `id` in the path refers to the unique identifier of the attachment to be deleted. Confirming this action typically involves a prompt like 'Yes, Delete It' in the user interface, as suggested by the context.", "summary": "", "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the attachment.\n\nWhile the request body description details the serializers for various field types, for this specific PUT method used for deletion of an attachment identified by a path parameter, a request body is generally not required or used. The provided serializer details seem to be a generic description for document handling across the API, rather than specific to this delete operation. The focus of this endpoint is on the `id` for identifying the attachment to be removed.\n\nThis deletion is permanent and should be confirmed, similar to how consumable assets or OS images are deleted within the system, as indicated by the user guide contexts."}, "llm_generated": {"business_context": {"user_personas": ["Inventory Managers", "Asset Managers", "Procurement Specialists", "Administrators"], "primary_use_case": "To permanently remove specific attachments associated with purchase orders within inventory and asset management systems."}, "content_for_embedding": "This API endpoint facilitates the permanent removal of a specific attachment associated with a purchase order. It is a core 'Delete' function within inventory and asset management systems, allowing users to manage and remove related documents from the inventory. The operation is identified by a unique attachment ID and requires user confirmation due to its irreversible nature, similar to the deletion of consumable assets or OS images.", "semantic_keywords": ["Delete", "Attachments", "Purchase Order"], "ontology_classification": {"features": ["attachment_management", "process_deletion"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/common/purchase_order/config/delete_po/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_delete_po_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint facilitates the deletion of a Purchase Order (PO) configuration. It enables users to permanently remove a specific purchase order entry from the system's inventory or configuration settings. The operation is typically confirmed by the user, similar to deleting assets, OS images, or configuration profiles, and is crucial for maintaining accurate records within the system. While the primary function is deletion, the request body's structure, allowing various primitive and compound field types, suggests that specific identifiers or criteria for the PO to be deleted can be passed.", "summary": "", "additional_info": "The request body for this endpoint is designed to accept various data types for specifying the Purchase Order configuration to be deleted. Supported primitive fields include StringField, IntField, BooleanField, and DateTimeField, among others. Compound fields like ListField and DictField are also accommodated, allowing for complex data structures if multiple identifiers or conditions are required for a targeted deletion. Special considerations are given to ReferenceField and EmbeddedDocumentField, which can generate nested serializers depending on the depth. It's important to note the specific fields not well supported or untested, such as FileField, ImageField, and BinaryField, which may not function as expected. Ensure the passed data adheres to the expected structure to successfully identify and delete the PO. The system typically requires user confirmation for such permanent deletion actions."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Inventory Manager", "System Administrator"], "primary_use_case": "This API allows for the permanent deletion of Purchase Order (PO) configurations from the system, ensuring accurate inventory and configuration records."}, "content_for_embedding": "This API endpoint is designed to permanently delete a specific Purchase Order (PO) configuration or entry from the system's inventory and configuration settings. It functions similarly to deleting other system assets, OS images, or configuration profiles, requiring specific identifiers for the PO to be removed. The request body supports various data types, including primitive fields (StringField, IntField, BooleanField, DateTimeField) and compound fields (ListField, DictField), to precisely target the PO for deletion. User confirmation is typically required for this irreversible action, which is crucial for maintaining accurate system records.", "ontology_classification": {"features": ["contract_deletion"], "primary_module": "contract_management", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Purchase Order", "Configuration"]}}, {"path": "/ux/common/purchase_order/config/download_csv/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_download_csv_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint allows users to download or export the current configuration of the purchase order system in a CSV file (Excel sheet format). It provides a convenient way to retrieve configuration details for offline review or integration with other systems. This functionality is akin to clicking a 'Download' or 'Export' button as described in the user guides, specifically for configuration data.", "summary": "", "additional_info": "This GET endpoint does not require any parameters or request body. The output is a CSV file containing the purchase order configuration. This is particularly useful for scenarios where you need to obtain a complete snapshot of the system's purchase order settings, similar to how users would export particular configurations from the UI for further analysis or backup purposes, as highlighted in the user guide contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User requiring data export", "System Integrator"], "primary_use_case": "This API allows users to download or export the current configuration of the purchase order system in a CSV file, enabling offline review, integration with other systems, analysis, or backup of configuration details."}, "content_for_embedding": "This GET endpoint facilitates the download and export of the current purchase order system configuration into a CSV file. It provides a convenient way to retrieve a complete snapshot of configuration details for offline review, integration with other systems, analysis, or backup purposes, mimicking the functionality of a \"Download\" or \"Export\" button in a user interface for configuration data.", "ontology_classification": {"features": ["download_job_management", "report_export_capabilities", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Download", "Export", "Purchase Order Configuration"]}}, {"path": "/ux/common/purchase_order/config/get-approval-config/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_get_approval_config_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This GET endpoint, `/ux/common/purchase_order/config/get-approval-config/`, is designed to retrieve the configuration settings for purchase order approvals. It specifically focuses on details related to the 'Approval Required' setting, which is a mandatory compliance requirement and cannot be unchecked. The retrieved configuration includes information about the template description, and the configuration type or store. Supported configuration types include 'Startup', 'Running', and 'Candidate'. While these types act primarily as labels, their specific value may not directly impact the operation but rather categorize the configuration for management purposes. This endpoint is crucial for understanding the current state of approval processes for purchase orders.", "summary": "", "additional_info": "The 'Approval Required' checkbox is reported as mandatory and unchangeable, indicating a fixed system behavior for compliance. Users can load configurations from existing downloaded versions, implying that the retrieved configuration might be used to populate a form or display for further interaction. The concept of 'Auto Approval Submission' mentioned in a related context suggests that the configuration retrieved by this endpoint might relate to features that streamline the approval process, potentially involving email-based approval actions, although this specific endpoint's direct impact on that is not explicitly stated. Fields like 'Template Description' and 'Configuration Type' are key elements of the approval configuration."}, "llm_generated": {"business_context": {"primary_use_case": "To retrieve the configuration settings for purchase order approvals, including details about the \"Approval Required\" setting, template descriptions, and configuration types. This helps users understand the current state of approval processes for purchase orders."}, "content_for_embedding": "This GET endpoint, `/ux/common/purchase_order/config/get-approval-config/`, is designed to retrieve the configuration settings for purchase order approvals. It specifically focuses on details related to the 'Approval Required' setting, which is a mandatory compliance requirement and cannot be unchecked. The retrieved configuration includes information about the template description, and the configuration type or store. Supported configuration types include 'Startup', 'Running', and 'Candidate'. While these types act primarily as labels, their specific value may not directly impact the operation but rather categorize the configuration for management purposes. This endpoint is crucial for understanding the current state of approval processes for purchase orders. The 'Approval Required' checkbox is reported as mandatory and unchangeable, indicating a fixed system behavior for compliance. Users can load configurations from existing downloaded versions, implying that the retrieved configuration might be used to populate a form or display for further interaction. The concept of 'Auto Approval Submission' mentioned in a related context suggests that the configuration retrieved by this endpoint might relate to features that streamline the approval process, potentially involving email-based approval actions, although this specific endpoint's direct impact on that is not explicitly stated. Fields like 'Template Description' and 'Configuration Type' are key elements of the approval configuration.", "ontology_classification": {"features": ["workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Purchase Order Configuration", "Approval Workflow", "Configuration retrieval"]}}, {"path": "/ux/common/purchase_order/config/get_asset_category_unique_fields/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_get_asset_category_unique_fields_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This GET endpoint is designed to retrieve configuration details specifically for unique fields associated with an asset category. It plays a crucial role in defining or configuring asset properties, allowing users to understand which fields are designated as unique identifiers for assets within a given category. This aligns with the system's ability to customize asset IDs and to ensure fields like Asset ID, Name, type, and custom formats maintain uniqueness across assets. It helps in the process of adding asset categories, where defining unique properties is essential for proper asset management.", "summary": "", "additional_info": "This endpoint is typically used in the context of asset category configuration, particularly when defining asset properties. As noted in the context, 'Unique Fields' are unique identifiers for assets. Therefore, this API would likely return a list of such fields that are selected from a dropdown or configured to be unique for a specific asset category. While no parameters are specified in the API JSON, context suggests that asset categories are central to asset management. It's crucial for users to understand which fields are unique, as this impacts asset searching (e.g., by asset ID), importing assets (ensuring data integrity), and avoiding duplicates. For instance, when adding an asset category, properties such as 'make, model, size, dimensions' and critical information like EOL, EOS, end of support, could include unique identifiers. The system allows for customization of asset IDs by changing prefixes, numbers, types, and custom formats, and these unique fields are integral to that customization."}, "llm_generated": {"business_context": {"user_personas": ["IT Asset Managers", "System Administrators", "Configuration Managers"], "primary_use_case": "To retrieve and configure unique identifier fields for asset categories, ensuring data integrity and proper asset management by defining how assets are uniquely identified within the system."}, "content_for_embedding": "This API retrieves configuration details for unique fields associated with asset categories. It is crucial for defining and customizing asset properties and IDs, ensuring uniqueness for asset identification, searching, importing, and preventing duplicates within asset management. It supports the configuration of asset categories by providing a list of fields designated as unique identifiers.", "ontology_classification": {"features": ["customizable_asset_properties_and_fields", "hierarchical_asset_categorization", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Asset category", "Field Configuration", "Configuration retrieval"]}}, {"path": "/ux/common/purchase_order/config/get_invoice_file/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_get_invoice_file_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint is designed to retrieve configuration details specifically related to obtaining invoice files for purchase orders. While the provided context doesn't directly detail invoice retrieval, it broadly touches upon processes within the Infraon platform such as adding payment methods, managing vendor information, and handling service requests, which suggests this endpoint might be part of a larger financial or procurement management system. Its purpose is to fetch the necessary configurations to access or generate purchase order invoice documents.", "summary": "", "additional_info": "Given the endpoint's path and the lack of specific context on 'get_invoice_file', further details on parameters or request bodies are not available from the provided snippets. However, based on the general context of related administrative and user guides (e.g., managing vendors, payment methods), it's highly probable that this endpoint is utilized within the Infraon portal for financial operations related to purchase orders. Developers should expect this endpoint to return configuration settings or paths required to retrieve or access invoice files, potentially requiring authentication against the Infraon account as suggested by the 'log into your Infraon account' context."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Finance Manager", "Procurement Manager"], "primary_use_case": "Retrieving configuration for purchase order invoice files within the Infraon platform."}, "content_for_embedding": "This API retrieves configuration details necessary for obtaining or generating invoice files related to purchase orders within the Infraon platform. It is part of a larger financial and procurement management system, likely used to fetch settings required for accessing or generating purchase order invoice documents, potentially requiring authentication against an Infraon account.", "semantic_keywords": ["Purchase Order Configuration", "Invoice file", "Configuration retrieval"], "ontology_classification": {"features": ["vendor_management", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/purchase_order/config/get_received_product_history/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_get_received_product_history_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint, `/ux/common/purchase_order/config/get_received_product_history/`, is designed to retrieve the comprehensive history of received products associated with purchase orders. It provides a detailed overview of stock movements and inventory levels, including information such as location, quantity, available quantity, action type, vendor, status, added date, and expiration date. This functionality directly supports tracking changes in stock over time, aiding in asset replenishment planning based on consumption trends and predicting future asset needs.", "summary": "", "additional_info": "This endpoint is crucial for inventory management and asset tracking, allowing users to understand the complete lifecycle of received products within the system. It enables teams to effectively plan for restocking and manage inventory levels proactively. While the current API specification does not list explicit parameters, typical usage scenarios would likely involve filtering by purchase order ID, product ID, or date ranges for specific historical views. This aligns with the 'Inventory History' and 'asset history' concepts found in the user guides, suggesting that future enhancements might include such filtering capabilities."}, "llm_generated": {"business_context": {"user_personas": ["Inventory Managers", "Asset Managers", "Supply Chain Analysts"], "primary_use_case": "To provide a comprehensive history of received products and stock movements for inventory management, asset tracking, and replenishment planning."}, "content_for_embedding": "This API retrieves the complete history of received products linked to purchase orders, offering insights into stock movements and inventory levels. It includes details such as location, quantity, action type, vendor, status, added date, and expiration date. This functionality is vital for tracking stock changes over time, facilitating asset replenishment planning based on consumption trends, and predicting future asset requirements. It supports proactive inventory management and asset lifecycle tracking, with potential future enhancements for filtering by purchase order ID, product ID, or date ranges.", "semantic_keywords": ["Asset History", "Purchase Order", "Retrieval"], "ontology_classification": {"features": ["detailed_asset_activity_log", "inventory_data_collection", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/purchase_order/config/history/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_history_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint retrieves the complete history of a purchase order. It provides crucial information such as the date, cost, supplier, and specifications related to the purchase order. It effectively functions as part of a larger system that tracks and manages stock movements and asset replenishment, offering a comprehensive overview similar to an 'Inventory History' or 'Recent Activities' section within an asset management system. This allows users to track changes over time and aids in predicting future asset needs.", "summary": "", "additional_info": "This endpoint is a GET request and does not require any parameters or request body, implying it fetches the entire historical configuration or a default view of purchase order history. It aligns with functionalities found in user guides for viewing comprehensive details and activity logs for various system entries. While the current specification indicates no parameters, typical use cases for history endpoints often involve filtering by date range or specific IDs for more granular lookup, although this is not explicitly listed here. Information regarding Purchase Order Details and Inventory History sections from guide documents is highly relevant to understanding the scope of data retrieved by this endpoint. It provides data for tracking and financial analysis, similar to asset history details."}, "llm_generated": {"business_context": {"user_personas": ["Inventory managers", "Financial analysts", "Procurement specialists", "Administrators"], "primary_use_case": "To retrieve and analyze the complete historical data of purchase orders for inventory tracking, asset replenishment, and financial analysis."}, "content_for_embedding": "This API retrieves the complete history of purchase orders, including crucial information such as date, cost, supplier, and specifications. It functions as a comprehensive log for tracking stock movements and asset replenishment, similar to an \"Inventory History\" or \"Recent Activities\" section within an asset management system. The data provided supports tracking, financial analysis, and predicting future asset needs, offering a historical overview of purchase order configurations for detailed activity logs and analysis.", "ontology_classification": {"features": ["detailed_asset_activity_log"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Purchase Order", "Asset History", "Inventory update"]}}, {"path": "/ux/common/purchase_order/config/options/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_options_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint provides configuration options related to common purchase order processes within the system. While the specific details are not fully elaborated in the provided contexts, the naming suggests it's designed to retrieve settings or choices available for purchase orders, aligning with the broader theme of managing financial transactions and inventory, such as setting buying prices or reorder quantities mentioned in some contexts.", "summary": "", "additional_info": "Based on the provided contexts, there are no specific parameters detailed for this GET endpoint. However, typical common configuration options might include settings related to 'Add Payment Method' (as seen in Contexts 1 and 3) or inventory details like 'Buying Price' and 'Re-Order Quantity' (Contexts 7 and 9), which are common in purchase order workflows. This endpoint is crucial for populating UI elements that allow users to configure purchase order behavior."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Finance Manager", "Developer"], "primary_use_case": "Retrieving configuration options for purchase order processes."}, "content_for_embedding": "This API endpoint is used to retrieve various configuration options and settings related to common purchase order processes. It provides choices and parameters essential for managing financial transactions, inventory, and specific details like buying prices and reorder quantities. The data retrieved is crucial for populating user interface elements that allow users to customize purchase order behavior within the system.", "semantic_keywords": ["Purchase Order Configuration", "Configuration Options", "Configuration Retrieval"], "ontology_classification": {"features": ["vendor_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/purchase_order/config/send_po_mail/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_send_po_mail_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This endpoint facilitates the sending of purchase order (PO) emails, likely as part of an automated mail system. It is designed to configure and initiate the transmission of email notifications specific to purchase orders. Based on the provided contexts, this functionality is integrated with features such as Mail Automator and requires pre-configuration of email settings, including SMTP server details (hostname, username, password, port) and sender email, essential for sending notifications from the platform.", "summary": "", "additional_info": "The request body for this endpoint is designed to serialize various data types (StringField, URLField, EmailField, IntField, etc.), including complex structures like ListField and DictField, as well as handling database references (ReferenceField) and embedded documents (EmbeddedDocumentField). This flexibility suggests that the API can accept a wide range of data pertinent to the purchase order and its email content. Key prerequisites for using this endpoint successfully include setting up the SMTP server configuration within the system, as highlighted by multiple contexts (Context Rank 5, 6, 7). Developers should ensure that all necessary email configurations are in place before attempting to use this endpoint for sending PO mails. The Mail Automator module is a relevant resource for step-by-step instructions related to this functionality (Context Rank 1). Note that certain field types (FileField, ImageField, BinaryField) may not be well supported or tested with this serialization mechanism."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To automate the sending of purchase order emails and manage the underlying email notification configurations."}, "content_for_embedding": "This API facilitates the sending of purchase order (PO) emails as part of an automated mail system. It is designed to configure and initiate the transmission of email notifications specific to purchase orders, leveraging pre-configured SMTP settings and integrating with the Mail Automator functionality.", "ontology_classification": {"features": ["notification_gateway_configuration", "mail-to-ticket_automation_(mail_automator)", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Purchase Order", "Notifications", "Configuration"]}}, {"path": "/ux/common/purchase_order/config/upload_csv/", "method": "POST", "details": {"operationId": "ux_common_purchase_order_config_upload_csv_create", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This powerful API endpoint facilitates the upload of CSV files for configuration purposes within the UX common purchase order system. It enables users to import data by uploading a relevant CSV, which serves as a crucial step before proceeding with column matching and record validation. The system expects a well-formatted CSV, allowing for data such as asset details to be imported in bulk. After upload, the process typically involves importing and proceeding with valid records, often followed by column matching.", "summary": "", "additional_info": "The request body for this endpoint is designed to handle various field types typically found in CSV documents. It supports primitive fields like `StringField`, `URLField`, `EmailField`, `IntField`, `FloatField`, `BooleanField`, `DateTimeField`, and `DateField`. Compound fields such as `ListField` and `DictField` are also recognized. For relational data, `ReferenceField` behaves like a ForeignKey, generating nested serializers for non-zero depths. `EmbeddedDocumentField` similarly auto-generates nested serializers when depth is greater than zero. Users should ensure their CSV files contain relevant data and adhere to the expected format. The upload is often followed by a 'Next' step which becomes enabled only after a relevant CSV file has been successfully uploaded, leading to column matching and then the final import of valid records. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Staff", "Data Entry Specialist"], "primary_use_case": "This API facilitates the bulk import and configuration of data, such as asset details, into the purchase order system by uploading CSV files. It streamlines the process of data entry and system setup."}, "content_for_embedding": "This API endpoint enables the upload of CSV files for configuration within the UX common purchase order system. It supports importing various data types, including asset details, in bulk. The process involves uploading the CSV, followed by column matching and validation of records to ensure data integrity before final import.", "ontology_classification": {"features": ["infraon_configuration.it_operations", "asset.multiple_asset_addition_methods", "asset.bulk_actions_on_assets", "infraon_configuration.advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["CSV Import", "Configuration", "Purchase Order"]}}, {"path": "/ux/common/purchase_order/config/vendor_options/", "method": "GET", "details": {"operationId": "ux_common_purchase_order_config_vendor_options_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PurchaseOrderList"}}}, "description": ""}}, "description": "This GET endpoint is an internal technical endpoint for retrieving configuration options related to vendor selection for purchase orders within the UX. It provides options for vendor selection, including vendor name and vendor location details, which are crucial for displaying relevant vendor information to users.", "summary": "", "additional_info": "This endpoint is likely called when a user needs to select an existing vendor, possibly from a dropdown list, when initiating a purchase order or configuring vendor-related settings. The options provided by this endpoint will populate the vendor selection fields. It does not support adding new vendors directly; instead, it provides the existing vendor data. For adding new vendors, refer to documentation regarding instructions to 'Add Vendor' which involves providing details such as vendor name and location (as suggested by Context Ranks 1, 2, 3, 5, 7)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "End User"], "primary_use_case": "To retrieve existing vendor configuration options for selection in purchase orders, enabling users to populate vendor selection fields."}, "content_for_embedding": "This API endpoint retrieves configuration options for vendors, specifically vendor names and locations, to facilitate vendor selection within purchase order processes. It is used to populate dropdown lists or similar UI elements where users need to choose an existing vendor. This endpoint does not support adding new vendors, only retrieving available options.", "ontology_classification": {"features": ["vendor_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Vendor Management", "Purchase Order Configuration", "Retrieval"]}}, {"path": "/ux/common/report/api/", "method": "GET", "details": {"operationId": "ux_common_report_api_retrieve", "description": "This endpoint, an adaptation of the DRF ModelViewSet, provides access to the reporting functionality within the system. It enables users to manage pre-configured and custom reports, offering capabilities to view, edit, and delete existing reports, as well as add new ones. This aligns with the system's ability to present a reports page that lists all default reports and provides options for report management.", "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The system supports the creation of new reports, often initiated via an 'Add Report' function which may involve different configuration tabs like 'Category', 'Configuration', and 'Filter'. While the API specification does not detail specific parameters, it implies interactions with report creation and modification, such as selecting report categories (e.g., Availability Reports) or managing various report types (e.g., 'Asset ticket report'). The underlying system design supports the export of report templates in JSON format, which is useful for backup, sharing, or importing into other systems. The endpoint's 'GET' method suggests its primary purpose is to retrieve information about reports, likely listing available reports or their configurations, rather than directly performing creation or modification actions, which would typically be handled by 'POST', 'PUT', or 'DELETE' methods."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Analyst", "End-user"], "primary_use_case": "Provides access to reporting functionality within the system, enabling users to view, manage, and retrieve information about pre-configured and custom reports."}, "content_for_embedding": "This GET endpoint provides access to the system's reporting functionality. It allows users to retrieve information about pre-configured and custom reports, including their configurations and available types. While the system supports adding, editing, and deleting reports, this specific GET method is primarily for listing and viewing report details. Users can access various report categories such as Availability Reports, Node Summary Reports, Event Reports, Incident Reports, Asset Reports, and AI/ML-driven forecast and prediction reports. The system also supports exporting report templates.", "semantic_keywords": ["Report", "Retrieval", "Data Export"], "ontology_classification": {"features": ["report_customization", "pre-configured_report_library", "custom_report_creation_and_management", "report_export_capabilities", "report_configuration_options", "report_filtering_options", "availability_reports", "node_summary_report", "event_reports_(specific_&_summary)", "incident_reports_(specific_&_summary)", "depreciation_report", "location_report", "detailed_asset_report", "asset_ticket_report", "software_reports_suite", "itsm_ticket_summary_report", "imacd_summary_report", "ai/ml-driven_forecast_and_prediction_reports", "capacity_planning_reports_(server,_device,_link)", "ticket_escalation_notification_report", "nccm_reports_(configuration_download_&_jobs_account_audit)", "on-demand_adhoc_reports", "adhoc_report_types_(forecast_&_prediction)", "performance_and_fault_data_analysis", "predictive_behavior_analysis"], "primary_module": "report", "confidence_score": 1}}}, {"path": "/ux/common/report/api/", "method": "POST", "details": {"operationId": "ux_common_report_api_create", "description": "This API endpoint provides an adaptation of the Django Rest Framework's ModelViewSet patterns, specifically designed for managing reports. It allows users to interact with pre-configured and custom reports within the Infraon system. The functionality includes viewing, editing, deleting, and adding new reports, mirroring the capabilities available on the user interface's reports page. Users can add new reports by selecting categories (e.g., Availability Reports), configuring them, and applying filters, or by importing reports in JSON format. This endpoint is central to the reporting capabilities, enabling actions similar to those described for the 'Reports' page in the UI, where all default and custom reports are listed.", "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "The `POST` method suggests this endpoint is likely used for creating new reports or submitting queries/configurations to generate specific report data. Given the context, this could involve defining report parameters, categories, or filters as part of the request body. The original specification notes 'No response body', implying that successful requests might result in a status code indicating success (e.g., 200 OK, 201 Created) without returning data directly in the response. This pattern is common for actions that trigger asynchronous processes or for endpoints where the result is viewed elsewhere (e.g., on a UI dashboard after report generation). It's crucial for developers to understand that the report creation or modification might be initiated via this API, rather than immediately returning the report data itself."}, "llm_generated": {"business_context": {"user_personas": ["User", "Developer"], "primary_use_case": "To enable users to create, manage, and configure both pre-configured and custom reports within the Infraon system."}, "content_for_embedding": "This API endpoint facilitates comprehensive management of reports within the Infraon system, allowing users to create, view, edit, and delete both pre-configured and custom reports. Specifically, the POST method is used for adding new reports by enabling users to select report categories, configure report parameters, and apply various filters. It also supports importing reports in JSON format. This central reporting API mirrors the functionalities available on the user interface's reports page, initiating report creation or modification processes rather than directly returning report data.", "semantic_keywords": ["Report", "Add", "Configuration"], "ontology_classification": {"features": ["custom_report_creation_and_management", "report_configuration_options", "report_filtering_options"], "primary_module": "report", "confidence_score": 1}}}, {"path": "/ux/common/report/api/{id}/", "method": "GET", "details": {"operationId": "ux_common_report_api_retrieve_2", "description": "This GET endpoint retrieves detailed information about a specific report identified by its unique `id`. It is part of the API adaptation of DRF (Django Rest Framework) ModelViewSet. Based on the documentation, Infraon offers multiple pre-configured reports that can be customized, and new custom reports can also be added. The reports page typically lists all default reports and provides options to view, edit, and delete existing ones. This API is likely used to fetch the details of a single report instance.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the report to be retrieved. While the API specification mentions 'No response body', this likely refers to a lack of a structured response body description within the spec itself. In practice, a successful GET request to retrieve report details would typically return the report's configuration, parameters, and other relevant information. This endpoint is crucial for viewing specific reports and understanding their setup, potentially leveraging details like those seen in various report categories (e.g., Availability Reports) or specific fields (e.g., Asset Tag, Incident Tags, Assignee) mentioned in the context."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Analyst", "General User"], "primary_use_case": "Retrieve detailed information about a specific report, including its configuration and parameters, to enable viewing and understanding of existing reports."}, "content_for_embedding": "This API retrieves comprehensive details of a specific report using its unique identifier. It provides access to the report's configuration, parameters, and other relevant information, which is crucial for viewing, understanding, and analyzing both pre-configured and custom reports within the system.", "semantic_keywords": ["Report", "Details retrieval", "Configuration"], "ontology_classification": {"features": ["report_configuration_options", "report_filtering_options", "pre-configured_report_library", "custom_report_creation_and_management", "report_customization", "on-demand_adhoc_reports", "adhoc_report_input_parameters"], "primary_module": "report", "confidence_score": 0.9}}}, {"path": "/ux/common/report/api/{id}/", "method": "PUT", "details": {"operationId": "ux_common_report_api_update", "description": "This PUT endpoint is used for updating an existing custom report within the Infraon system. It is an adaptation of the DRF ModelViewSet, allowing for modification of pre-configured or user-added custom reports. The Infraon platform offers multiple pre-configured reports that can be customized, and new custom reports can also be added, viewed, edited, and deleted via the reports page. This specific endpoint facilitates the 'edit' functionality for a report identified by its unique ID.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is a required string that uniquely identifies the report to be updated. While the original specification states 'No response body', a successful PUT operation typically implies a 200 OK or 204 No Content status. Based on the contexts, reports can include various details such as asset tags, incident tags, and can be categorized. The request body, though not explicitly described in the provided JSON spec, would be expected to contain the fields necessary to update the report's configuration (e.g., changes to its title, filters, category, or associated details) to reflect the customization. Common use cases include modifying report filters, changing report names, or adjusting other configured properties for existing reports."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Report Manager", "User with Report Editing Privileges"], "primary_use_case": "This API is used to update existing custom reports within the Infraon system, allowing users to modify their configuration, filters, and other properties."}, "content_for_embedding": "This PUT endpoint facilitates the modification of existing custom reports in the Infraon system. It enables users to update pre-configured or user-created reports by changing their title, filters, category, and other associated details. This is the core \"edit\" functionality for reports identified by a unique ID.", "ontology_classification": {"features": ["report_customization", "custom_report_creation_and_management", "report_configuration_options", "report_filtering_options"], "primary_module": "report", "confidence_score": 0.95}, "semantic_keywords": ["Report", "Update", "Customization"]}}, {"path": "/ux/common/report/api/{id}/", "method": "PATCH", "details": {"operationId": "ux_common_report_api_partial_update", "description": "This PATCH endpoint allows for the partial update of an existing pre-configured or custom report within the Infraon system. It is part of the reporting functionality that enables users to view, edit, and manage various reports. The endpoint adapts the Django REST Framework (DRF) ModelViewSet for its operation, providing a flexible way to modify report details.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter in the path refers to the unique identifier of the report to be updated. While the API specification states 'No response body' for this endpoint, a successful PATCH operation typically implies that the report has been updated. Common modifications could include updating report configurations, filters, or attributes based on user requirements. This aligns with the system's ability to 'customize' and 'edit' existing reports as detailed in the user guide. For detailed schema information on the request body for updating a report, refer to the relevant Report object definition in the API documentation. Report modifications might involve updating parameters such as date ranges, asset tags, or assignee information, as hinted by various contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Report Manager", "User with report editing privileges"], "primary_use_case": "To enable users to partially update and customize existing pre-configured or custom reports within the Infraon system."}, "content_for_embedding": "This API endpoint facilitates the partial update of existing pre-configured or custom reports within the Infraon system. It enables users to modify various report details, including configurations, filters, and attributes, based on their specific requirements. This aligns with the system's capability to customize and edit reports, allowing for adjustments to parameters such as date ranges, asset tags, or assignee information. The update operation is identified by a unique report ID.", "ontology_classification": {"features": ["report_customization", "report_configuration_options", "report_filtering_options"], "primary_module": "report", "confidence_score": 1}, "semantic_keywords": ["Report", "Update", "Edit"]}}, {"path": "/ux/common/report/api/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_report_api_destroy", "description": "This API endpoint allows users to delete an existing custom or pre-configured report within the Infraon system. The system offers various pre-configured reports that can be customized, and new custom reports can also be added. The reports page typically lists all default reports and provides options to add, view, edit, and delete existing ones. This specific endpoint facilitates the 'delete existing reports' functionality for a given report ID.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path parameter that uniquely identifies the report to be deleted. Successful deletion results in no response body. This operation is analogous to deleting a field in a Multi-Index as described in some documentation, reinforcing the destructive nature of the DELETE action. Users should ensure they have the necessary permissions before attempting to delete a report, as this action is irreversible."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Report Manager", "Power User"], "primary_use_case": "This API allows users to delete existing custom or pre-configured reports within the Infraon system, facilitating report management and cleanup."}, "content_for_embedding": "This API endpoint, `DELETE /ux/common/report/api/{id}/`, enables the permanent removal of custom or pre-configured reports from the Infraon system. It requires a unique report ID as a path parameter. The operation is irreversible and results in a 204 No Content response upon successful deletion. This functionality is crucial for maintaining an organized reporting environment by allowing users to remove outdated or unnecessary reports, similar to deleting fields or templates in other system contexts.", "ontology_classification": {"features": ["custom_report_creation_and_management", "report_customization", "pre-configured_report_library"], "primary_module": "report", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Report", "Customization", "Irreversible"]}}, {"path": "/ux/common/report/api/dashboard/", "method": "POST", "details": {"operationId": "ux_common_report_api_dashboard_create", "description": "This API endpoint provides functionality for managing customizable dashboards, which are visual representations of critical data including asset summaries, monitoring, and performance metrics. It allows users to add metrics and reports tailored to their requirements, akin to the capabilities of a DRF ModelViewSet for creating, retrieving, updating, and deleting dashboard configurations. Customizable dashboards can display up to a maximum of 5 reports in a graphical format.", "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Access to view and customize dashboards through this API is governed by Role privileges and must be enabled by an administrator. Dashboards managed via this endpoint can also be exported as PDFs for reporting purposes. While the endpoint adapts a DRF ModelViewSet, specific request body parameters and response structures for these CRUD operations are not detailed within the provided specification but would typically follow DRF conventions for dashboard configuration data."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "This API manages customizable dashboards, allowing users to create, retrieve, update, and delete dashboard configurations. It enables the display of critical data, asset summaries, monitoring, and performance metrics, with the capability to add various reports and metrics, and export dashboards as PDFs for reporting."}, "content_for_embedding": "This API endpoint provides comprehensive functionality for managing customizable dashboards. It supports full CRUD (Create, Retrieve, Update, Delete) operations for dashboard configurations, allowing users to tailor visual representations of critical data, including asset summaries, monitoring, and performance metrics. Users can add specific metrics and reports to their dashboards, which can display up to five reports in a graphical format. The API also facilitates the export of dashboards as PDFs for reporting. Access and customization are governed by role-based privileges, requiring administrator enablement.", "semantic_keywords": ["Dashboard", "Customization", "Report"], "ontology_classification": {"features": ["visual_data_representation", "dashboard_customization", "pdf_export", "role-based_access_control_(rbac)", "dashboard_management_actions", "widget-based_design", "multiple_graphical_formats_for_widgets", "dashboard_presentation_mode", "pre-configured_dashboards"], "primary_module": "dashboard", "confidence_score": 1}}}, {"path": "/ux/common/report/api/mrtg-stats-data/", "method": "POST", "details": {"operationId": "ux_common_report_api_mrtg_stats_data_create", "description": "This endpoint, an adaptation of Django REST Framework's ModelViewSet, is designed to retrieve performance report data, specifically 'mrtg-stats-data'. It allows users to generate comprehensive performance reports by applying various filters. The generated reports can be exported in formats like Excel or PDF, aligning with the reporting capabilities mentioned in the user guides. Key functionalities include filtering by Port, Granularity, PM Type, Statistic, Aggregate, and Duration to tailor the data extracted for specific performance monitoring requirements.", "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body described, the highly relevant context (Rank 1 and Rank 10) indicates that performance reports require filters. These filters include 'Port', 'Granularity', 'PM Type', 'Statistic', 'Aggregate', and 'Duration'. Therefore, it is highly probable that these parameters are passed either as query parameters or within the request body to generate the desired 'mrtg-stats-data' report. Users should add these filters to suit their requirements before generating the report. The endpoint is crucial for viewing essential performance data and supports exporting reports."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Manager", "Performance Analyst", "System Administrator"], "primary_use_case": "To generate and retrieve comprehensive performance reports based on specific filters, and to export these reports for analysis or record-keeping."}, "content_for_embedding": "This API endpoint is designed to retrieve and generate performance report data, specifically \"mrtg-stats-data\". It enables users to create comprehensive performance reports by applying various filters such as Port, Granularity, PM Type, Statistic, Aggregate, and Duration. The generated reports, which are crucial for viewing essential performance data, can also be exported in formats like Excel or PDF.", "semantic_keywords": ["Report", "Performance Statistics", "Filter"], "ontology_classification": {"features": ["performance_and_fault_data_analysis", "granular_data_filtering", "report_export_capabilities", "on-demand_adhoc_reports", "adhoc_report_download", "report_filtering_options", "report_customization", "custom_report_creation_and_management", "real-time_and_historical_reporting"], "primary_module": "report", "confidence_score": 0.95}}}, {"path": "/ux/common/report/api/report/", "method": "POST", "details": {"operationId": "ux_common_report_api_report_create", "description": "This API endpoint facilitates the management of reports within the system, supporting the creation, viewing, editing, and deletion of custom and pre-configured reports. It leverages a DRF ModelViewSet adaptation for robust interaction. Users can add new reports by specifying categories (e.g., Availability Reports, Incident Reports, Asset Ticket Reports) and configuring various parameters like duration, asset tags, incident tags, and assignees. The system supports advanced real-time and historical reporting capabilities, with options to customize reports and export them in formats like PDF, Excel, and CSV.", "tags": ["ux"], "security": [{"cookieAuth": []}, {"basicAuth": []}, {"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is central to the reporting functionality, allowing developers to programmatically interact with the report generation and management features described in the user guides. When adding a new report, the process typically involves defining its category, configuring relevant settings, and applying filters based on specific duration, asset, or incident tags. While the API specification currently shows no specific parameters or request body details, the contextual information highlights that report creation involves selecting categories ('Configuration' tab) and applying filters ('Filter' tab), which implies a request body containing these details would be expected. The API supports various report types, including those focused on availability, incidents, and assets. Developers should refer to specific report types for expected configuration and filter options as these can vary significantly."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "Managing and generating various types of reports within the system, including creation, viewing, editing, deletion, customization, and export."}, "content_for_embedding": "This API manages reports, enabling creation, viewing, editing, and deletion of both custom and pre-configured reports. Users can define report categories (e.g., Availability, Incident, Asset Ticket) and configure parameters such as duration, asset tags, incident tags, and assignees. It supports real-time and historical reporting, customization, and export to formats like PDF, Excel, and CSV. Developers can programmatically interact with report generation and management, including defining categories and applying filters.", "semantic_keywords": ["Report", "Customization", "Data Export"], "ontology_classification": {"features": ["report_customization", "real-time_and_historical_reporting", "granular_data_filtering", "report_export_capabilities", "pre-configured_report_library", "custom_report_creation_and_management", "report_configuration_options", "report_filtering_options", "availability_reports", "node_summary_report", "event_reports_(specific_&_summary)", "incident_reports_(specific_&_summary)", "depreciation_report", "location_report", "detailed_asset_report", "asset_ticket_report", "software_reports_suite", "itsm_ticket_summary_report", "imacd_summary_report", "ai/ml-driven_forecast_and_prediction_reports", "capacity_planning_reports_(server,_device,_link)", "ticket_escalation_notification_report", "nccm_reports_(configuration_download_&_jobs_account_audit)", "aiops_reports_module"], "primary_module": "report", "confidence_score": 0.9}}}, {"path": "/ux/common/requester/profile/", "method": "GET", "details": {"operationId": "ux_common_requester_profile_retrieve", "description": "This endpoint retrieves a paginated list of requester profiles within the current organization. It is designed to fetch details for all requesters, whether they are end-users or service desk agents, who raise formal requests for information, support, or services within the Infraon system. The authorization token used for the API call determines the organization from which requester profiles are listed. Each profile provides key information about the requester, often including their name, user ID, login credentials for self-service portal access, and whether their account is active. This enables comprehensive management and tracking of users who initiate requests.", "summary": "Gets a list of requester profiles", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Requester"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "The 'requester' is a fundamental role in the Infraon system, as requests are handled through the 'Request' module and can be initiated by end-users or service desk agents. This endpoint allows for efficient querying of these requester profiles. The response includes details such as 'Requester' name (initial), and potentially their type (Internal or External), and user ID. When fetching these profiles, the 'items_per_page' and 'page' query parameters are mandatory for pagination. The 'reverse' (for sorting order) and 'sort' (for sorting key) parameters are optional, allowing for flexible ordering of the results. This API supports use cases such as managing requester accounts, auditing user activity, or populating dropdowns in administrative interfaces where a list of requesters is required. Note that for external requesters, 'organization name' might be provided as per related documentation."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "service desk agent"], "primary_use_case": "To retrieve and manage a paginated list of requester profiles within an organization, enabling administrative oversight, auditing, and populating user interfaces."}, "content_for_embedding": "This API retrieves a paginated list of requester profiles, including details such as name, user ID, login credentials, and account status, for both end-users and service desk agents within the Infraon system. It supports comprehensive management, auditing of user activity, and populating administrative interfaces where a list of requesters is required. Pagination parameters (items_per_page, page) are mandatory, with optional sorting (reverse, sort) capabilities.", "semantic_keywords": ["Requester Management", "User Profiles", "Pagination"], "ontology_classification": {"features": ["user_management", "pagination", "retrieval", "search_functionality", "contract_filtering_capabilities", "audit_log"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/requester/profile/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_create", "description": "This endpoint facilitates the creation of a new requester profile within the current organization. As per the `Request Management` module in Infraon, end-users, or 'requesters', are central to raising formal service requests for information, support, IT access, or new services. This API enables the secure setup of such profiles, which is a prerequisite for a user to initiate service requests via various channels like the web portal, mobile app, or email. The creation of a requester profile is crucial for managing the lifecycle of requests, including their ownership, monitoring, and tracking.", "summary": "Creates a new requester ", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateRequesterSample": {"value": {"full_name": "Vinutha K", "email": "vinutha.k@everest-ims.com", "phone_number": "9980778899", "phone_ext": "91", "land_line": "201330", "is_login_active": true, "is_login_enable": true, "type": "internal", "notify_email": ["vinutha@everest-ims.com"], "notify_phone": ["8877667788"], "tags": ["test", "dns"], "support_hub": "Bangalore", "designation": "Manager", "department": "IT", "organization_name": "everest", "emp_type": "test", "customer_id": "123", "subscriber_id": "123", "customer_site_group": "cust_12", "joining_date": "", "business_segment": "1", "req_category": "1", "business_entity": "eve", "branch_partner": "eve", "sub_partner": "eve", "subscriber_status": "Pending", "user_details": {"username": "vinutha", "password": "ZDk5NjMwYmNjNzA1ODYzOWU3ZTgwZGYyMzlmMzhhMzI6OlUyRnNkR1ZrWDEvc0Jlb1BwcVYxcGViUWlucHFDTG1DdUlUanVMYWtzb1U9", "confirm_password": "ZDk5NjMwYmNjNzA1ODYzOWU3ZTgwZGYyMzlmMzhhMzI6OlUyRnNkR1ZrWDEvTUJhSkp2bENBQWlKdHBUOHVQY1ErdmZ6dnRhMkowMDg9", "reporting_id": "2"}, "location": {"street": "7th Main", "building": "Building A", "area": "Jp Nagar", "sub_area": "JP Nagar", "city": "Bangalore", "state": "Karnataka", "country": "India", "pincode": "574221", "region": "South", "longitude": "78.01", "latitude": "12.3", "address": "JP Nagar"}}, "summary": "Create Requester Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The `POST` method is used to save a new requester, requiring a comprehensive set of details in the request body. Key fields include full name, email, phone number, and organizational details. Importantly, the `user_details` object within the request body is vital for setting up the requester's login credentials, including username and password, which are necessary for accessing the requester portal and self-service features. The provided example usage showcases the extensive data required for a complete requester profile, ranging from contact information and organizational affiliations to location details. Once created, requesters can access the requester's portal to raise tickets, change requests, and communicate regarding existing requests. Admins can configure rules to automate CI relations based on requester mapping, enhancing insights into IT asset usage.", "parameters": [{"name": "full_name", "in": "body", "description": "Inferred parameter: full_name", "required": true, "schema": {"type": "string"}}, {"name": "email", "in": "body", "description": "Inferred parameter: email", "required": true, "schema": {"type": "string"}}, {"name": "phone_number", "in": "body", "description": "Inferred parameter: phone_number", "required": true, "schema": {"type": "string"}}, {"name": "phone_ext", "in": "body", "description": "Inferred parameter: phone_ext", "required": true, "schema": {"type": "string"}}, {"name": "land_line", "in": "body", "description": "Inferred parameter: land_line", "required": true, "schema": {"type": "string"}}, {"name": "is_login_active", "in": "body", "description": "Inferred parameter: is_login_active", "required": true, "schema": {"type": "string"}}, {"name": "is_login_enable", "in": "body", "description": "Inferred parameter: is_login_enable", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "body", "description": "Inferred parameter: type", "required": true, "schema": {"type": "string"}}, {"name": "notify_email", "in": "body", "description": "Inferred parameter: notify_email", "required": true, "schema": {"type": "string"}}, {"name": "notify_phone", "in": "body", "description": "Inferred parameter: notify_phone", "required": true, "schema": {"type": "string"}}, {"name": "tags", "in": "body", "description": "Inferred parameter: tags", "required": true, "schema": {"type": "string"}}, {"name": "support_hub", "in": "body", "description": "Inferred parameter: support_hub", "required": true, "schema": {"type": "string"}}, {"name": "designation", "in": "body", "description": "Inferred parameter: designation", "required": true, "schema": {"type": "string"}}, {"name": "department", "in": "body", "description": "Inferred parameter: department", "required": true, "schema": {"type": "string"}}, {"name": "organization_name", "in": "body", "description": "Inferred parameter: organization_name", "required": true, "schema": {"type": "string"}}, {"name": "emp_type", "in": "body", "description": "Inferred parameter: emp_type", "required": true, "schema": {"type": "string"}}, {"name": "customer_id", "in": "body", "description": "Inferred parameter: customer_id", "required": true, "schema": {"type": "string"}}, {"name": "subscriber_id", "in": "body", "description": "Inferred parameter: subscriber_id", "required": true, "schema": {"type": "string"}}, {"name": "customer_site_group", "in": "body", "description": "Inferred parameter: customer_site_group", "required": true, "schema": {"type": "string"}}, {"name": "joining_date", "in": "body", "description": "Inferred parameter: joining_date", "required": true, "schema": {"type": "string"}}, {"name": "business_segment", "in": "body", "description": "Inferred parameter: business_segment", "required": true, "schema": {"type": "string"}}, {"name": "req_category", "in": "body", "description": "Inferred parameter: req_category", "required": true, "schema": {"type": "string"}}, {"name": "business_entity", "in": "body", "description": "Inferred parameter: business_entity", "required": true, "schema": {"type": "string"}}, {"name": "branch_partner", "in": "body", "description": "Inferred parameter: branch_partner", "required": true, "schema": {"type": "string"}}, {"name": "sub_partner", "in": "body", "description": "Inferred parameter: sub_partner", "required": true, "schema": {"type": "string"}}, {"name": "subscriber_status", "in": "body", "description": "Inferred parameter: subscriber_status", "required": true, "schema": {"type": "string"}}, {"name": "user_details", "in": "body", "description": "Inferred parameter: user_details", "required": true, "schema": {"type": "string"}}, {"name": "location", "in": "body", "description": "Inferred parameter: location", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "End-user (Requester)"], "primary_use_case": "To enable the creation and management of end-user profiles (requesters) who will initiate and track service requests within the organization's request management system."}, "content_for_embedding": "This API creates a new requester profile, which is essential for end-users to submit formal service requests for information, support, IT access, or new services through various channels like web portals, mobile apps, or email. The profile setup is crucial for managing the entire lifecycle of these requests, including their ownership, monitoring, and tracking. It also facilitates the setup of login credentials for accessing the requester portal and self-service features. The request body requires comprehensive details such as full name, email, phone number, organizational details, and user login credentials.", "ontology_classification": {"features": ["request_creation_&_channels", "request_lifecycle_management", "request_ownership_&_assignment", "request_monitoring_&_tracking", "user_management", "requester_self-service_portal"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Requester Management", "User Management", "Request Management"]}}, {"path": "/ux/common/requester/profile/{id}/", "method": "GET", "details": {"operationId": "ux_common_requester_profile_retrieve_2", "description": "This endpoint retrieves the complete profile details for a specific requester within the current organization, identified by their unique ID. A requester profile includes essential information such as whether they are internal or external, their login credentials for self-service portal access (including User ID and Password), their activity status (Is Active), time zone settings, and language preferences. This allows for comprehensive management and understanding of individual requester attributes.", "summary": "Gets a requester profile with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Requester"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier for the requester whose profile is to be fetched. A requester can be either 'Internal' or 'External'; if 'External', an organization name is associated with their profile. This endpoint is crucial for various functionalities, including configuring login credentials for self-service access and monitoring the requester's active status. While the API specification does not detail response body structure, based on the context, the response should include fields like 'type', 'User ID', 'Is Active', 'Time zone', and 'Language'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Agent"], "primary_use_case": "Retrieving and managing requester profiles for comprehensive understanding and self-service portal access."}, "content_for_embedding": "This API retrieves comprehensive profile details for a specific requester using their unique ID. The profile includes critical information such as whether the requester is internal or external, their login credentials (User ID, Password) for self-service portal access, activity status ('Is Active'), time zone, and language preferences. This endpoint is essential for managing and understanding individual requester attributes, including configuring self-service portal access and monitoring active status. The `id` path parameter is mandatory.", "semantic_keywords": ["Requester Management", "User Profiles", "Retrieval"], "ontology_classification": {"features": ["user_management", "requester_self-service_portal"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/requester/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_common_requester_profile_update", "description": "This endpoint facilitates the detailed modification of an existing requester's profile within the current organization. As per the user guide, 'requesters' are typically technicians or users with permissions to initiate changes or requests. This PUT operation allows for comprehensive updates to a requester's details, distinct from 'Quick Edit' actions which only cover limited fields like status or priority. The system likely leverages a sophisticated serialization mechanism for handling complex data structures within the request body, supporting various primitive and compound field types such as strings, numbers, booleans, dates, and references to other documents.", "summary": "Edits the requester with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "additional_info": "The `id` in the path parameter is a required string that uniquely identifies the requester profile to be edited. The request body for this endpoint is highly flexible, supporting a wide range of data types as specified in the `request_body_description`. Developers should be aware of the recognized primitive fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `URLField`. Compound fields such as `ListField` and `DictField` are also supported, mapping to DRF fields. Special attention should be paid to `ReferenceField`, which like a `ForeignKey`, can lead to nested serializers depending on depth, and `EmbeddedDocumentField`, which also supports nested serialization for non-zero depth. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested', so their usage should be approached with caution. This endpoint is central to managing user permissions and roles related to request and change management, ensuring that 'CIs are associated with the appropriate requester' as per the admin guide context."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Staff", "Technician"], "primary_use_case": "To enable detailed and comprehensive modification of existing requester profiles, including managing user permissions and roles within the organization."}, "content_for_embedding": "This API endpoint facilitates the detailed and comprehensive modification of an existing requester's profile within the current organization. It allows for extensive updates to a requester's details, supporting various primitive and compound field types, distinct from limited 'Quick Edit' actions. This operation is central to managing user permissions and roles related to request and change management, ensuring configuration items (CIs) are accurately associated with the appropriate requester.", "semantic_keywords": ["Requester Management", "User Profiles", "Update"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/requester/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_requester_profile_destroy", "description": "This endpoint is used to permanently delete an existing requester for the current organization based on their unique ID. Deleting a requester is irreversible and may impact associated assets, service requests, and incidents if Requester Rules are configured that automate CI relations. If the requester owns active tickets or is associated with other users, they cannot be deleted unless the owner is replaced.", "summary": "Deletes the requester with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Requester"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and represents the unique identifier of the requester to be deleted. Similar to bulk delete operations, if the requester to be deleted has mapped assets or active tickets, the system may prevent deletion or require an owner replacement. This action is critical and should be used with caution, as it permanently removes the requester's profile."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Helpdesk Agent"], "primary_use_case": "To permanently remove a requester's profile from the system, ensuring data hygiene and compliance."}, "content_for_embedding": "This API permanently deletes an existing requester profile using their unique ID. The deletion is irreversible and may affect associated assets, service requests, and incidents. Deletion is prevented if the requester has active tickets or associated users, requiring owner replacement.", "semantic_keywords": ["Requester Management", "Delete", "User Management"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/requester/profile/assets/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_assets_create", "description": "This API endpoint allows for the creation and detailed management of a Requester's profile within the system. It enables viewing, editing, and associating a requester with specific assets, including their location and allocation details. This process supports the broader Request Management module, facilitating the formal submission and handling of user-initiated service requests for information, support, or new provisions. The API accommodates a wide variety of data types for the requester profile, including primitive fields like strings, integers, dates, and complex structures such as lists, dictionaries, and references to other documents.", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint supports a serializer for Documents, allowing for flexible data input. Primitive fields include StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, and DateField. Compound fields like ListField and DictField are mapped to corresponding DRF fields, supporting nested field specifications. ReferenceField and EmbeddedDocumentField are also supported for nested data, with autogenerated serializers for depths greater than 0, similar to foreign key relationships. GenericReferenceField and GenericEmbeddedDocumentField are handled by their own corresponding serializer fields. It's important to note that fields such as FileField, ImageField, and BinaryField are not well supported or are untested at this time. All other fields are mapped to DocumentField and might not work as expected. When adding a new requester, their location and allocation details can be specified. This endpoint is crucial for establishing and maintaining requester profiles, which are integral to the system's ability to track and manage requests efficiently, as highlighted in the user guides related to request management and asset allocation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "System Integrator"], "primary_use_case": "This API enables the creation, detailed management, and association of requester profiles with specific assets, including their location and allocation details, supporting the broader Request Management module."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of requester profiles within the system. It supports the creation, viewing, and editing of requester details, and crucially, allows for the association of requesters with specific assets, including their location and allocation information. This functionality is integral to the broader Request Management module, enabling efficient tracking and handling of user-initiated service requests. The API is designed to handle diverse data types for requester profiles and their associated assets, and its operations are subject to privilege-based access controls.", "ontology_classification": {"features": ["request_creation_&_channels", "request_editing_&_quick_actions", "asset_association_&_classification", "location_management", "requester_interaction_history_display", "roles_&_privileges_management", "user_management"], "primary_module": "request_management", "confidence_score": 0.95}, "semantic_keywords": ["Requester Management", "Asset Management", "Profile Management"]}}, {"path": "/ux/common/requester/profile/create-csv/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_create_csv_create", "description": "This API endpoint facilitates the bulk creation of Requester profiles by importing data from a CSV file. It allows administrators or technicians to efficiently add multiple requesters at once, rather than individually. The process involves uploading an edited CSV file containing requester details, which are then processed to create new requester entries in the system. Requesters can be internal or external users who submit service requests through various channels like web portal, mobile app, email, or via technicians.", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "The primary method for using this endpoint is to first download a CSV template, populate it with requester details, and then upload the edited CSV file. The system will then validate the records and proceed with importing valid requesters. The `request_body_description` indicates that the endpoint expects a structured document, likely mapping the CSV content to various field types such as StringField, EmailField, IntField, BooleanField, DateTimeField, and others. Fields like `ReferenceField` and `EmbeddedDocumentField` are supported with auto-generated nested serializers depending on depth. Developers should note that `FileField`, `ImageField`, and `BinaryField` are not well supported or untested. This endpoint is crucial for initial setup or large-scale updates of requester information, as outlined in the documentation on 'Import from CSV'."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "technician"], "primary_use_case": "This API endpoint allows administrators and technicians to efficiently create multiple requester profiles at once by importing data from a CSV file, streamlining the onboarding process for new internal or external users who submit service requests."}, "content_for_embedding": "This API endpoint facilitates the bulk creation of Requester profiles by importing data from a CSV file. It allows administrators or technicians to efficiently add multiple requesters at once, rather than individually. The process involves uploading an edited CSV file containing requester details, which are then processed to create new requester entries in the system. The primary method for using this endpoint is to first download a CSV template, populate it with requester details, and then upload the edited CSV file. The system will then validate the records and proceed with importing valid requesters. This endpoint is crucial for initial setup or large-scale updates of requester information.", "semantic_keywords": ["Requester Management", "CSV Import", "Add", "User Management"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/requester/profile/create_new_requester/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_create_new_requester_create", "description": "This API endpoint facilitates the creation of new requester profiles within the system. It is a critical function for managing users who submit requests, such as service requests or change requests. This endpoint allows for the detailed entry of new requester information, similar to how requesters can be added via the 'Add a New Requester' button described in the user guides. Successful creation enables requesters to submit and manage various types of requests, contributing to the overall request management workflow.", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to accommodate various data types for defining a requester's profile. It supports primitive fields like StringField (for names, emails), IntField (for IDs), BooleanField, and DateTimeField, ensuring comprehensive data capture. Compound fields such as ListField and DictField are supported, allowing for structured data input. Notably, ReferenceField and EmbeddedDocumentField are handled to establish relationships and embed complex data structures, though for non-zero depth, nested serializers are autogenerated. It is explicitly mentioned that fields like FileField, ImageField, and BinaryField are not well supported or untested, which developers should be aware of when constructing requests. Any other fields are mapped to 'DocumentField', which might lead to unexpected behavior. This endpoint is analogous to the 'Add a New Requester' functionality observed in the user interface during the process of creating new changes or managing requests."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "User Manager"], "primary_use_case": "This API creates new requester profiles within the system, enabling the management of users who submit various types of requests, such as service or change requests. It allows for detailed entry of new requester information, analogous to the \"Add a New Requester\" functionality in the user interface."}, "content_for_embedding": "This API facilitates the creation of new requester profiles, a critical function for managing users who submit service and change requests. It supports detailed entry of requester information, including primitive and compound fields, similar to the \"Add a New Requester\" UI feature. Successful creation allows requesters to submit and manage requests, contributing to the overall request management workflow.", "semantic_keywords": ["Requester Management", "User Management", "Add"], "ontology_classification": {"features": ["user_management", "new_requester_creation", "requester_search_&_add", "requester_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/requester/profile/initconfig/", "method": "GET", "details": {"operationId": "ux_common_requester_profile_initconfig_retrieve", "description": "This API endpoint allows users to initialize or retrieve the configuration details for a requester's profile, enabling actions such as viewing, editing, or managing an existing requester. It supports quick edit actions for status, priority, urgency, severity, impact service, and request assignee, as well as detailed editing of requester information. The endpoint is crucial for managing requester details within the system, such as adding new requesters or searching for existing ones.", "tags": ["Requester"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint contributes to the broader 'Requester' module, which is essential for managing user requests and changes. While the primary function is configuration initialization and retrieval, the associated contexts indicate its role in facilitating actions like 'Quick Edit' and 'Detailed Edit' for requester profiles. Requesters can be internal or external, and their profiles can include details such as login credentials for self-service portal access, user ID, password, time zone, and language settings. The API supports the ability to add new requesters or search for existing ones. There is no request body or specific parameters mentioned in the specification for this GET request, implying that the configuration information is retrieved based on implicit context or session, or that parameters are handled internally."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Agent/Support Staff"], "primary_use_case": "This API endpoint is used for managing requester profiles, including initializing and retrieving their configuration details. It enables administrators or IT agents to add new requesters, search for existing ones, and perform quick or detailed edits on requester information, facilitating efficient user management and self-service portal access."}, "content_for_embedding": "This API endpoint facilitates the initialization and retrieval of configuration details for requester profiles. It supports comprehensive management of requesters within the system, allowing for the addition of new requesters, searching for existing ones, and performing both quick and detailed edits on their profiles. This includes modifying key attributes such as status, priority, urgency, severity, impact service, and request assignee. The API is crucial for maintaining requester information and enabling self-service portal access.", "ontology_classification": {"features": ["requester_search_&_add", "quick_edit_(key_attributes)", "detailed_ticket_editing", "requester_self-service_portal", "user_management", "platform_account_configuration", "ticket_search_bar", "ticket_filters", "ticket_history_view"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Requester Management", "Configuration Retrieval", "Quick Edit"]}}, {"path": "/ux/common/requester/profile/requester_details/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_requester_details_create", "description": "This API endpoint facilitates the viewing and editing of a Requester's profile and details. It is a core component within the Request Management system, allowing for the direct management of individuals who raise formal requests. This includes capabilities for quick edits of key fields like status, priority, and assignee, as well as detailed editing of comprehensive requester information. The endpoint supports both retrieving existing requester data and updating it, aligning with the functionality to 'Add a New Requester' and select 'requester details' as described in the user guides. Changes made via this API correspond to the 'Detailed Edit' option available in the user interface, providing granular control over the Requester entity.", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various data types needed for a requester's profile. It uses a flexible serializer for documents, supporting primitive fields such as `StringField`, `URLField`, `EmailField`, `IntField`, and `BooleanField`. Compound fields like `ListField` and `DictField` are mapped to corresponding DRF fields, allowing for structured data. `ReferenceField` and `EmbeddedDocumentField` are supported with nested serializers for non-zero depth. While the documentation mentions that `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested, developers should be aware of this limitation if attempting to include such data. This API is essential for managing requester information within the system, especially when creating new changes (as requesters are a mandatory field) or updating existing ones. It correlates with UI actions for adding or searching for requesters, and modifying their details through quick actions or full edits."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff"], "primary_use_case": "To manage (view, add, edit, update) requester profiles and their detailed information within the system."}, "content_for_embedding": "This API manages requester profiles and details within the Request Management system. It enables viewing, adding new requesters, and performing both quick and detailed edits of requester information. It supports various data types for profiles and is crucial for managing requester entities for new changes or updates.", "semantic_keywords": ["Requester Management", "Profile Management", "User Management"], "ontology_classification": {"features": ["user_management", "new_requester_creation", "requester_search_&_add", "quick_edit_(key_attributes)", "detailed_ticket_editing"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/requester/profile/updateReportingMngr/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_updateReportingMngr_create", "description": "This API endpoint facilitates the update of a Requester's reporting manager. Requesters are key users within the system, typically technicians or users with permissions to add changes, or users requesting services. While the original description broadly states that it allows Requesters to be viewed or edited, the specific path `/ux/common/requester/profile/updateReportingMngr/` and context clues strongly suggest its primary function is for updating management relationships rather than general profile editing. The endpoint is crucial for managing the organizational structure of users who are involved in creating requests or changes.", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint expects a serialized document. Although specific request body parameters for updating the reporting manager are not detailed in the provided JSON, it will conform to a structure defined by the listed primitive fields (e.g., `StringField` for user IDs/names, `ObjectIdField`) and potentially compound fields like `DictField` for nested structures. Given the action 'updateReportingMngr', it's expected that the request body will contain identifiers for the Requester and their new Reporting Manager. The context highlights that Requesters can be added, searched, and managed from modules, implying that their profiles, including reporting lines, are administrable. This API is relevant for maintaining accurate user profiles and organizational hierarchies within the system, especially for users involved in creating changes or service requests."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "HR Personnel"], "primary_use_case": "To manage and update the reporting manager for Requesters, thereby maintaining accurate organizational structure and user profiles within the system."}, "content_for_embedding": "This API endpoint allows for the update of a Requester's reporting manager within the system. Requesters are typically technicians or users involved in initiating changes or requesting services. This functionality is essential for maintaining accurate organizational hierarchies and user profiles, ensuring proper management relationships for users who create requests or changes. The API expects identifiers for both the Requester and their new Reporting Manager in the request body.", "ontology_classification": {"features": ["user_management", "organization_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Requester Management", "Update"]}}, {"path": "/ux/common/requester/profile/updateRequesterStatus/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_updateRequesterStatus_create", "description": "This API endpoint, `/ux/common/requester/profile/updateRequesterStatus/`, facilitates comprehensive management of Requester profiles. It allows for detailed viewing and editing of Requester information, including quick edit actions for status, priority, urgency, severity, and assignee, as well as more detailed edits of request particulars. This aligns with the 'Quick Edit' and 'Edit' functionalities described in user guides for managing requests and requesters.", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "The API supports a wide range of data types for the request body, including primitive fields like String, URL, Email, Integer, Float, Boolean, and DateTime, as well as complex fields such as ListField, DictField, ReferenceField, EmbeddedDocumentField, GenericReferenceField, and GenericEmbeddedDocumentField. This allows for flexible and detailed updates to requester profiles. For adding new requesters or searching for existing ones, refer to the 'Requester' module details mentioned in the user guides. Requesters are typically technicians or users with permissions to add changes or request services. Note that fields like FileField, ImageField, and BinaryField are not well supported or are untested through this serializer. For `ReferenceField` and `EmbeddedDocumentField`, nested serializers are autogenerated if the serializer depth is greater than 0; otherwise, different handling applies (e.g., `str(id)` for `ReferenceField`)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Technician"], "primary_use_case": "This API facilitates the comprehensive management of Requester profiles, allowing for detailed viewing and editing of requester information, including quick edit actions for status, priority, urgency, severity, and assignee, as well as more detailed edits of request particulars. It supports the addition and searching of existing requesters."}, "content_for_embedding": "This API endpoint is designed for the comprehensive management of Requester profiles. It enables users to view and edit detailed requester information, perform quick edit actions such as updating status, priority, urgency, severity, and assignee, and also allows for more detailed modifications of request particulars. The API supports adding new requesters and searching for existing ones, aligning with functionalities for managing requests and requesters. It handles various data types for flexible updates to requester profiles.", "semantic_keywords": ["Requester Management", "Profile Management", "Quick Edit"], "ontology_classification": {"features": ["ticket_state_&_status_management", "quick_edit_(key_attributes)", "detailed_ticket_editing", "requester_search_&_add", "past_interactions_display_(requester_history)", "ticket_assignment_(individual/team/expertise)"], "primary_module": "ticket_management", "confidence_score": 0.95}}}, {"path": "/ux/common/requester/profile/upload-csv/", "method": "POST", "details": {"operationId": "ux_common_requester_profile_upload_csv_create", "description": "This POST API endpoint facilitates the upload of a CSV file to manage (view or edit) Requester profiles. This is primarily used for bulk operations, specifically to add multiple Requesters simultaneously by uploading a pre-filled Excel sheet (CSV file) containing new or updated requester details. The system processes the uploaded CSV, imports the records, and allows for proceeding with valid entries, as highlighted in the quick edit and bulk management contexts.", "tags": ["Requester"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequesterList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequesterList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint expects a CSV file containing requester details. The server processes this file, recognizing various primitive and compound field types for document serialization, including StringField, IntField, BooleanField, DateTimeField, ListField, and DictField. ReferenceField and EmbeddedDocumentField are also handled with nested serializer logic. It's crucial to ensure the CSV adheres to the expected format as detailed in the 'request_body_description' to avoid errors. Fields like FileField, ImageField, and BinaryField are noted as not well supported or untested. This functionality is part of the 'Quick Edit' and 'Detailed Edit' capabilities for managing Requesters, streamlining the process of adding or updating large numbers of requester profiles versus individual manual edits. The associated guide clarifies that users can download a template CSV, enter details, upload the edited file, and then import, proceeding specifically with valid records."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff"], "primary_use_case": "This API facilitates the bulk creation and update of requester profiles by uploading a CSV file, streamlining the process of managing multiple requester accounts simultaneously."}, "content_for_embedding": "This API endpoint allows for the bulk upload of requester profiles via a CSV file. It supports both adding new requesters and updating existing ones by processing the uploaded CSV data. Users can download a template, populate it with requester details, and then upload the edited file for import. This functionality is crucial for efficient management of a large number of requester accounts, offering an alternative to individual manual edits and integrating with quick edit and bulk management workflows.", "semantic_keywords": ["Requester Management", "CSV Import", "Bulk Add"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/roles/profile/", "method": "GET", "details": {"operationId": "ux_common_roles_profile_list", "description": "This endpoint retrieves a list of role profiles within the current organization. A role profile, also referred to as an 'Authorization Profile', defines user access levels and permissions, particularly for interacting with network devices. It ensures that only authorized users can execute specific commands or modify configurations, integrating with AAA (Authentication, Authorization, and Accounting) security frameworks. The list of profiles fetched by this endpoint is determined by the authorization token used for the request.", "summary": "Gets a list of role profiles", "tags": ["Role Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Group"}}}}, "description": ""}}, "additional_info": "Role profiles dictate what users can see and do within the system, including what commands they are allowed to execute (e.g., 'show running-config, ping') and system-defined commands (e.g., 'exit, logout'). Each profile includes a description (e.g., 'Admin access to core routers') and visibility settings (Public or Private). This API is crucial for managing user permissions and maintaining security policies. Users can only view role profiles if they have the necessary permissions assigned by an administrator. While this endpoint primarily addresses authorization profiles, other profile types like 'Authentication Profiles' also exist, which manage user authentication for CLI sessions by verifying identity before granting access."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Security Administrator"], "primary_use_case": "To manage and retrieve user access levels and permissions through role profiles, ensuring secure interaction with network devices and system functionalities."}, "content_for_embedding": "This API retrieves a list of role profiles, also known as Authorization Profiles, which define user access levels and permissions within an organization. These profiles are crucial for managing security policies and controlling user interactions with network devices, including the execution of specific CLI commands. The endpoint integrates with AAA security frameworks and ensures that only authorized users can view these profiles, which dictate what users can see and do within the system.", "ontology_classification": {"features": ["roles_&_privileges_management", "user_management", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["User Privileges", "Profile Management", "Access Control"]}}, {"path": "/ux/common/roles/profile/", "method": "POST", "details": {"operationId": "ux_common_roles_profile_create", "description": "This endpoint enables the creation of a new custom role within the Infraon platform for the current organization. Building on the default roles provided by Infraon, this API allows administrators or privileged users to define new roles with specific privileges tailored to organizational needs. The process involves defining the role name, a description, and assigning granular permissions across various modules, such as general organization settings. Newly created roles are saved and become available for assignment to users.", "summary": "Creates a new role ", "tags": ["Role Profile"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateRoleSample": {"value": {"role_name": "Requester", "description": "User can have access only to requester portal", "selected_permissions": {"General": {"organization": {"view": true, "add": true, "edit": true, "delete": true}}}}, "summary": "Create Role Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This API endpoint is part of the User & Role Management functionality. The example usage demonstrates the required structure for the request body, which includes `role_name`, `description`, and `selected_permissions`. The `selected_permissions` object is crucial for defining access controls, specifying permissions like `view`, `add`, `edit`, and `delete` for different organizational modules. After successfully submitting the role details via this endpoint, the new role is saved and becomes active. This functionality is analogous to the 'New Role' button available in the Infraon UI, allowing for programmatic role creation.", "parameters": [{"name": "role_name", "in": "body", "description": "Inferred parameter: role_name", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "selected_permissions", "in": "body", "description": "Inferred parameter: selected_permissions", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "To programmatically create and define custom user roles with specific permissions within the Infraon platform, enabling tailored access control for different organizational needs."}, "content_for_embedding": "This API creates new custom roles in the Infraon platform, allowing administrators to define specific permissions and access controls for users. It supports setting role names, descriptions, and granular permissions across various modules, including view, add, edit, and delete actions. This functionality is central to user and role management, enabling programmatic role creation similar to the UI's 'New Role' button.", "ontology_classification": {"features": ["roles_&_privileges_management", "user_management", "organization_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["User Roles", "User Management", "Access Control"]}}, {"path": "/ux/common/roles/profile/{id}/", "method": "GET", "details": {"operationId": "ux_common_roles_profile_retrieve", "description": "This endpoint is used to retrieve detailed information about a specific role profile within the current organization. It allows fetching a role's associated data, such as its name, user count, and description, which are typically displayed in the Infraon platform's user and role management interface. This includes details relevant for administrating user roles and their privileges.", "summary": "Gets a role profile with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Role Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is mandatory and represents the unique identifier of the role profile to be retrieved. This API is commonly used in user and role management systems, particularly for administrative tasks like viewing or editing existing roles. On Infraon, default roles are displayed with details like 'Role Name', 'User Count', and 'Role Description', which this endpoint helps in accessing programmatically. While Infraon provides several default roles, users can also customize them according to their needs. This endpoint helps in retrieving configuration profiles, which are often used to manage user authentication and access to network devices."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Developer", "System Integrator"], "primary_use_case": "To retrieve detailed information about a specific role profile within the organization, facilitating user and role management, administrative tasks, and understanding access policies for network devices."}, "content_for_embedding": "This API endpoint is designed to retrieve comprehensive details of a specific role profile, identified by its unique ID. It provides essential information such as the role's name, the number of associated users, and its description. This data is crucial for user and role administration within the Infraon platform, supporting programmatic access for tasks like viewing existing roles, managing user privileges, and understanding authentication and access configurations for network devices. It serves as a foundational component for administrative interfaces focused on user and role management.", "ontology_classification": {"features": ["roles_&_privileges_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["User Roles", "Profile Management", "Details retrieval"]}}, {"path": "/ux/common/roles/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_common_roles_profile_update", "description": "This endpoint is used to edit an existing role for the current organization within Infraon. Administrators or privileged users can utilize this API to modify an existing role's privileges and details, even for the seven default roles provided by Infraon, to suit specific organizational needs. This aligns with the ability to edit roles via respective icons on the Infraon UI, where default roles are displayed with options for editing.", "summary": "Edits the role with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Role Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Group"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Group"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required and identifies the specific role to be edited. On Infraon, default roles are presented in a list format, and this API provides the programmatic equivalent of editing those roles. While the `request_body_description` indicates it 'Serializes groups querysets,' this implies the request body will contain the updated details for the role, likely including its name, description, user count (if editable via API), and crucially, associated privileges or group assignments. This operation is a core part of Infraon's dynamic, role-based access control system, allowing for modification of pre-defined access levels (view, add, edit, delete, copy) for roles."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "To enable administrators and privileged users to modify existing user roles and their associated privileges within the Infraon system, ensuring granular control over user access and permissions."}, "content_for_embedding": "This API endpoint facilitates the modification of existing user roles and their assigned privileges within the Infraon platform. It allows administrators and privileged users to update role details, including names, descriptions, and specific access levels such as view, add, edit, delete, and copy permissions. This functionality is central to managing role-based access control (RBAC) and customizing default roles to meet specific organizational security and operational requirements.", "ontology_classification": {"features": ["roles_&_privileges_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["User Roles", "User Privileges", "Access Control"]}}, {"path": "/ux/common/roles/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_roles_profile_destroy", "description": "This endpoint is used to delete an existing role within the current organization on the Infraon platform. Administrators and privileged users can initiate this deletion, mirroring the functionality available via icons in the UI, where roles are displayed in a list alongside options to edit, clone, and delete them. The deletion is irreversible, as indicated by similar operations like deleting SLA Profiles.", "summary": "Deletes the role with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Role Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the role to be deleted. On Infraon, default roles are listed along with custom roles; this endpoint can delete any existing role. It's crucial to note that deleting the role is an irreversible action. This operation is accessible to administrators and privileged users who manage user and role configurations within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "To delete an existing user role within an organization."}, "content_for_embedding": "This API endpoint allows for the irreversible deletion of a specific user role identified by its ID within the current organization on the Infraon platform. It is intended for administrators and privileged users responsible for managing user and role configurations. The operation mirrors UI functionality for deleting roles and is a critical action in maintaining system access and privilege structures.", "semantic_keywords": ["Delete", "User Roles", "User Management"], "ontology_classification": {"features": ["roles_&_privileges_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/roles/profile/config/", "method": "GET", "details": {"operationId": "ux_common_roles_profile_config_retrieve", "description": "This endpoint retrieves the module role map for the current organization. It provides a comprehensive list of roles, detailing their associated privileges and modules within the system. This allows for understanding how user access levels and permissions are defined and applied across various functionalities, including network device interaction, configuration management, and other shared modules.", "summary": "Gets the module role map", "tags": ["Role Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "additional_info": "This endpoint returns information akin to what is seen on the Infraon screen concerning roles (Role Name, User Count, Role Description). It's crucial for understanding access control and privilege assignment, particularly for modules like 'Authorization Profile', which defines user access levels for network devices. While the system comes with default roles, this endpoint helps in understanding how those roles are mapped to specific modules and their corresponding permissions. The API does not require any parameters or request body for this GET operation. There are no known caveats or specific usage notes beyond its primary role in providing a detailed overview of the organization's role and module configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Security personnel", "IT Auditor"], "primary_use_case": "This API retrieves the module role map, providing a comprehensive overview of roles, their associated privileges, and modules within the system. It is crucial for understanding and managing user access levels and permissions across various functionalities, including network device interaction and configuration management."}, "content_for_embedding": "This GET API endpoint retrieves the complete module role map for an organization. It provides a detailed list of roles, outlining their assigned privileges and the modules they can access within the system. This information is vital for comprehending how user access levels and permissions are defined and applied throughout the system, including network device interactions and configuration management. The data returned is similar to the role information displayed on the Infraon screen, serving as a key resource for access control and privilege assignment without requiring any input parameters.", "semantic_keywords": ["User Roles", "User Privileges", "Access Control"], "ontology_classification": {"features": ["roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/roles/profile/json/", "method": "GET", "details": {"operationId": "ux_common_roles_profile_json_retrieve", "description": "This GET API endpoint, located at `/ux/common/roles/profile/json/`, is designed to manage user profiles within the system. It allows for viewing and editing aspects of user profiles, particularly focusing on their access levels and permissions, which are critical for controlling interactions with various modules and network devices. This includes, but is not limited to, privileges such as 'view', 'add', 'edit', and 'delete' for specific modules like 'Business Catalogue'. The endpoint is central to defining user access, ensuring that only authorized users can perform specific operations or modify configurations.", "tags": ["Role Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "summary": "", "additional_info": "The primary function of this endpoint revolves around 'Authorization Profiles' which define user access levels and permissions. For instance, if a user is granted 'Edit' privilege to a module, they can view and modify existing services or data within that module. Conversely, if only 'Add' privilege is granted, they can view and add new services but lack edit or delete capabilities. While the current specification does not list parameters, it is implied that profile identification or specific access parameters would be involved for viewing or editing specific profiles. This API is commonly used by administrators to manage user roles and their associated permissions across the system. It is a read-only field for certain aspects of the profile, possibly referencing system-defined roles such as SSH or Telnet access types."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "To manage user profiles, including their roles, access levels, and permissions within the system, ensuring proper authorization for interacting with various modules and network devices."}, "content_for_embedding": "This GET API endpoint, located at /ux/common/roles/profile/json/, is designed for comprehensive management of user profiles within the system. It enables viewing and editing of user profile aspects, with a strong emphasis on access levels and permissions. These permissions are crucial for controlling user interactions with different modules and network devices, encompassing privileges such as 'view', 'add', 'edit', and 'delete' for specific modules like 'Business Catalogue'. The API is fundamental to defining user access, ensuring that only authorized users can perform specific operations or modify configurations. Its primary function centers on 'Authorization Profiles', which dictate user access levels and permissions. For instance, granting 'Edit' privilege allows users to view and modify services/data, while 'Add' privilege permits viewing and adding new services. Although parameters are not explicitly listed, profile identification or specific access parameters are implied for viewing or editing profiles. This API is predominantly utilized by administrators for managing user roles and their associated permissions across the system. It also references system-defined roles like SSH or Telnet access types, with certain profile aspects being read-only.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["User Profiles", "User Roles", "User Privileges"]}}, {"path": "/ux/common/roles/profile/options/", "method": "GET", "details": {"operationId": "ux_common_roles_profile_options_retrieve", "description": "This endpoint, `/ux/common/roles/profile/options/`, is used to retrieve default options related to 'events' within the user experience (UX) common roles profile. Specifically, it provides the necessary configurations and selections for event-related functionalities. This includes options for displaying Windows events on the asset summary page, enabling asset options, and setting up the Event Page Module. The Event Page Module allows access to historical login/logout data, detailed event data, and key information such as domain name, login type, machine name, and system details including IP addresses. It also provides options for universal events history or specific asset events.", "summary": "Get the options for the events options", "tags": ["Role Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "additional_info": "This endpoint is crucial for configuring event display and data access within the system's user interface. To fully enable event functionalities, ensure the Event Page settings are configured appropriately, choosing either 'Show History' for universal events or selecting specific asset events. While the endpoint retrieves options, the actual enabling of these features often involves a separate configuration or action based on the retrieved options. The context suggests that access to certain event functions might be privilege-based, defined under roles and privileges. Therefore, the options returned may also depend on the user's assigned role and profile, though the API itself does not accept parameters for role-specific filtering."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator"], "primary_use_case": "To retrieve configuration options for displaying and accessing event-related functionalities within the user experience profile."}, "content_for_embedding": "This API endpoint retrieves default options and configurations for event-related functionalities within the user experience (UX) common roles profile. It provides necessary settings for displaying Windows events on the asset summary page, enabling asset options, and configuring the Event Page Module. The Event Page Module allows access to historical login/logout data, detailed event data, and key system information such as domain name, login type, machine name, and IP addresses. It offers choices for universal events history or specific asset events, making it crucial for configuring how event data is displayed and accessed in the system's user interface. The options returned may be influenced by the user's assigned role and profile.", "ontology_classification": {"features": ["event_listing_and_filtering", "event_detection_and_monitoring"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Events", "Configuration", "Retrieval"]}}, {"path": "/ux/common/service_feasibility_request/service_request/", "method": "GET", "details": {"operationId": "ux_common_service_feasibility_request_service_request_list", "description": "This API endpoint is designed to facilitate the viewing and tracking of service requests within the Self-Service Portal (SSP). It allows end-users to check the status of their service requests, including older requests and requests for catalog items or access. The endpoint supports both internal and external requesters and is part of a system that enables submitting and tracking service requests directly through the SSP.", "tags": ["Service Feasibility Requests"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint primarily focuses on viewing existing service requests. While the API specification shows 'users to be viewed', the context clarifies this refers to service requests made by users. Requesters can also be enabled with access to a dedicated portal to raise incidents, service requests, and change requests. This API can be used to track the progress of requests by viewing current status and updates. The definition of a 'requester' typically refers to the user initiating the service request."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Requesters"], "primary_use_case": "To allow end-users and requesters to view and track the status and details of their service requests within a Self-Service Portal."}, "content_for_embedding": "This API endpoint facilitates the viewing and tracking of service requests for end-users and requesters within a Self-Service Portal (SSP). It enables users to check the status, details, and updates of their current and older service requests, including those for catalog items or access. The API supports both internal and external requesters and is part of a system for submitting and tracking service requests directly through the SSP. It primarily focuses on displaying existing service requests, clarifying that \"users to be viewed\" refers to service requests made by users. Requesters can access a dedicated portal to raise and track incidents, service requests, and change requests. The API allows tracking progress by viewing current status and updates. The \"Request\" page, which this API supports, lists all requests in Panel View and Grid View, showing details like summary card, request, status, subject, team, and requester name, sorted by time. It also supports filtering requests by specific day, date, or date range, and has various actions available on the Request page.", "semantic_keywords": ["Request Management", "Self-service", "Status"], "ontology_classification": {"features": ["request_monitoring_&_tracking", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_search_&_filtering", "requester_self-service_portal"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/common/service_feasibility_request/service_request/", "method": "POST", "details": {"operationId": "ux_common_service_feasibility_request_service_request_create", "description": "This API endpoint facilitates the submission and tracking of service feasibility requests. It enables end-users to submit new service requests directly through the Self-Service Portal (SSP) and allows them to view their submitted requests, including older ones and those related to access or catalog items. This endpoint is crucial for managing the service request lifecycle from submission to approval or rejection.", "tags": ["Service Feasibility Requests"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is defined by the 'Service Feasibility Request Serializer'. While the exact fields are not detailed in the provided contexts, it is expected to contain information necessary for defining a service request, potentially including requester details (internal or external), service type, and other relevant attributes. This API is commonly used to empower requesters to manage their service interactions."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Requesters"], "primary_use_case": "This API facilitates the submission and tracking of service feasibility requests by end-users through a Self-Service Portal, managing the entire lifecycle of these requests from submission to approval or rejection."}, "content_for_embedding": "This API allows end-users to submit new service feasibility requests and track their status through a Self-Service Portal. It supports the entire lifecycle of a service request, from initial submission with details like requester information, service type, impact, and subject, to viewing submitted requests, including older ones and those related to access or catalog items. The API is integral for managing service interactions and ensuring services are published and available for request.", "semantic_keywords": ["Request Management", "Service Catalog", "Self-service"], "ontology_classification": {"features": ["request_creation_&_channels", "request_lifecycle_management", "request_classification_&_categorization", "request_ownership_&_assignment", "request_monitoring_&_tracking", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_search_&_filtering", "request_tagging", "requester_interaction_history_display"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/common/service_feasibility_request/service_request/{id}/", "method": "GET", "details": {"operationId": "ux_common_service_feasibility_request_service_request_retrieve", "description": "This API endpoint allows users to view the details of a specific service request. It is designed to facilitate the tracking and management of service requests, enabling both internal and external requesters to monitor the progress of their submissions through a self-service portal. The `id` path parameter uniquely identifies the service request to be retrieved.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Feasibility Requests"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter is a mandatory path parameter, representing the unique identifier of the service request. This endpoint is crucial for requesters to track their service requests directly, as mentioned in the extracted contexts regarding Self-Service Portal (SSP) access and the ability for users to submit and view older requests. Requesters are typically the users submitting the service request, which can be an 'Internal' or 'External' type, with 'External' requiring an organization name. This API plays a role in the overall Request Management process, which aims to handle predefined, user-initiated requests effectively and user-friendly, as defined in context rank 8."}, "llm_generated": {"business_context": {"user_personas": ["Internal requesters", "External requesters"], "primary_use_case": "To allow users to view and track the details of specific service requests through a self-service portal."}, "content_for_embedding": "This API endpoint allows users to retrieve and view the detailed information of a specific service request using its unique ID. It is crucial for tracking and managing service requests, enabling both internal and external requesters to monitor the progress of their submissions via a self-service portal. The API supports the overall Request Management process by providing direct access to request details and status updates.", "ontology_classification": {"features": ["request_monitoring_&_tracking", "detailed_request_information_display", "requester_self-service_portal", "request_display_views_(panel_&_grid)", "attachment_management", "customizable_statuses_&_views", "request_editing_&_quick_actions", "request_classification_&_categorization"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Request Management", "Details retrieval", "Self-service"]}}, {"path": "/ux/common/service_feasibility_request/service_request/{id}/", "method": "PUT", "details": {"operationId": "ux_common_service_feasibility_request_service_request_update", "description": "This API endpoint allows for the viewing or updating of a specific Service Feasibility Request. Its primary purpose includes empowering requesters with self-service capabilities for submitting, tracking, and managing their service requests. This includes enabling configuration of requester login credentials for self-service portal access and managing their active status. The goal is to streamline the service request lifecycle, from initial submission to tracking progress via a ticket URL.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Feasibility Requests"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the service feasibility request being viewed or updated. The request body, described as 'Service Feasibility Request Serializer', is utilized for updating the request details. This likely includes fields such as requester type (Internal or External), login credentials (User ID, Password), active status, time zone, language, and reporting settings, as suggested by the extracted user guides. This endpoint is crucial for enabling end-users to submit and track their service requests directly through the Self-Service Portal (SSP) and for administrators to manage requester accounts."}, "llm_generated": {"business_context": {"user_personas": ["Requester", "Administrator"], "primary_use_case": "This API allows for the viewing and updating of Service Feasibility Requests, empowering requesters with self-service capabilities to submit, track, and manage their service requests, and enabling administrators to configure requester login credentials and manage their active status for self-service portal access."}, "content_for_embedding": "This API endpoint is designed for viewing and updating specific Service Feasibility Requests. It facilitates self-service for requesters by allowing them to submit, track, and manage their service requests, including monitoring progress via a ticket URL. Additionally, it supports administrators in configuring requester login credentials for self-service portal access and managing their active status. The API is crucial for streamlining the service request lifecycle and managing end-user access to the Self-Service Portal (SSP).", "ontology_classification": {"features": ["request_lifecycle_management", "request_monitoring_&_tracking", "request_editing_&_quick_actions", "detailed_request_information_display", "requester_interaction_history_display", "ticket_url_for_tracking", "requester_self-service_portal", "user_management"], "primary_module": "request_management", "confidence_score": 0.95}, "semantic_keywords": ["Request Update", "Self-service", "Requester Management"]}}, {"path": "/ux/common/service_feasibility_request/service_request/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_service_feasibility_request_service_request_destroy", "description": "This API endpoint allows for the deletion of a specific service request. Service requests are formal requests made by users for information, support, or access to IT services, often managed through a self-service portal (SSP). The 'id' parameter identifies the specific service request to be deleted. This action may relate to the management of service requests within the system, potentially impacting the tracking and status of requests submitted by various requesters (internal or external).", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Feasibility Requests"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the service request to be deleted. Given the HTTP DELETE method, the API expects no request body. Successful deletion typically results in a 204 No Content response, as indicated by 'No response body'. This endpoint is crucial for maintaining the lifecycle of service requests, which often originate from end-users through a self-service portal (SSP) for submitting and tracking their requests."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Service Desk Agents", "System Administrators"], "primary_use_case": "To enable the permanent removal of specific service requests from the system, ensuring proper lifecycle management of user-submitted IT service requests."}, "content_for_embedding": "This API endpoint facilitates the deletion of individual service requests, which are formal requests for IT services often originating from users via a self-service portal. The deletion is identified by a unique 'id' and is a crucial action for managing the lifecycle and status of these requests within the system. A successful deletion results in a 204 No Content response.", "ontology_classification": {"features": ["request_management_actions_(delete,_copy,_merge)"], "primary_module": "request_management", "confidence_score": 1}, "semantic_keywords": ["Delete", "Service Request", "Request Management"]}}, {"path": "/ux/common/service_feasibility_request/service_request/get_service_requests/", "method": "GET", "details": {"operationId": "ux_common_service_feasibility_request_service_request_get_service_requests_retrieve", "description": "This endpoint is used to retrieve a paginated list of Service Feasibility Requests within the current organization. These requests, often referred to as 'Requests' in Infraon, are formal requests raised by users for information, support, access to IT, or new provisions. The endpoint facilitates the tracking and monitoring aspects of the request lifecycle, which includes states like 'Open' and statuses like 'New' or 'Assign'. Each service request is summarized by key details such as Request ID, Requester, Team, Status, and Priority, as seen in the Request Summary Card view.", "summary": "Gets a list of Service Feasibility Requests", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Service Feasibility Requests"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceFeasibilityRequest"}}}, "description": ""}}, "additional_info": "This endpoint supports pagination via `items_per_page` and `page` query parameters, ensuring efficient retrieval of large datasets. Optional `sort` and `reverse` query parameters allow for flexible sorting of the returned service requests, enabling users to organize the list by various keys and in ascending or descending order. Requests are managed through the 'Request' module and can be raised by service desk agents or end-users. The lifecycle of these requests involves multiple states and statuses. While this API retrieves requests, the system also handles their ownership, monitoring, tracking, and communication throughout their lifecycle."}, "llm_generated": {"business_context": {"user_personas": ["Users", "Service Desk Agents", "Administrators"], "primary_use_case": "This API is used to retrieve, track, and monitor Service Feasibility Requests within an organization, enabling users to manage the lifecycle of formal requests for information, support, IT access, or new provisions."}, "content_for_embedding": "This GET endpoint retrieves a paginated list of Service Feasibility Requests, often called \"Requests\" in Infraon. These are formal requests from users for information, support, IT access, or new provisions. The API supports tracking and monitoring the request lifecycle, including states like \"Open\" and statuses like \"New\" or \"Assign\". Each request summary includes details such as Request ID, Requester, Team, Status, and Priority, similar to the Request Summary Card view. Pagination is handled via `items_per_page` and `page` query parameters, and results can be sorted using `sort` and `reverse` parameters. Requests are managed through the \"Request\" module and can be initiated by service desk agents or end-users. The system also manages request ownership, monitoring, tracking, and communication throughout their lifecycle. The \"Request\" page offers Panel and Grid Views, displaying details like summary cards, status, subject, team, and requester name. Requests can be filtered by date, tagged for grouping, and their summary cards and columns configured. Users can edit or delete requests, and search for specific requests by number or assignee. The service desk is central to Request Management, handling the recording and resolution of requests, emphasizing the importance of understanding the request lifecycle within Infraon's Request module.", "semantic_keywords": ["Service Request", "Pagination", "Retrieval"], "ontology_classification": {"features": ["request_lifecycle_management", "request_monitoring_&_tracking", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_search_&_filtering", "request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "request_tagging", "customizable_statuses_&_views", "request_creation_&_channels", "request_ownership_&_assignment", "internal_&_external_communication", "requester_interaction_history_display"], "primary_module": "request_management", "confidence_score": 1}}}, {"path": "/ux/common/service_outage/service_outage/", "method": "GET", "details": {"operationId": "ux_common_service_outage_service_outage_retrieve", "description": "Retrieves a comprehensive list of service outages for the current organization. This endpoint provides details on the service name and its current status, which can include states like 'Unknown/Dependent' (blue, indicating a parent device is down) or 'Under Maintenance' (grey, for planned outages). It is crucial for monitoring service availability and understanding the impact of planned or unplanned service disruptions, as documented in user guides focusing on service status and maintenance. This helps in managing and classifying service requests properly.", "summary": "Get list of service outages", "tags": ["service_outage"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint does not require any parameters or request body. The response provides information on service outages, potentially including the 'Service Name' and 'Status' as outlined in user guide tables. The status colors (blue for unknown/dependent, grey for under maintenance) provide quick visual indicators of the service's state. This information is critical for service desk agents and users monitoring the health of services provided through the service management portal."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "Users monitoring service health"], "primary_use_case": "To monitor service availability and understand the impact of planned or unplanned service disruptions by retrieving a comprehensive list of current service outages and their statuses."}, "content_for_embedding": "This API retrieves a comprehensive list of current service outages, providing details such as service name and status. It is essential for real-time monitoring of service availability, understanding the impact of planned or unplanned disruptions, and supporting service desk operations by providing critical status information for proper service request management.", "ontology_classification": {"features": ["event_detection_and_monitoring", "event_listing_and_filtering"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Status", "Monitoring", "Events"]}}, {"path": "/ux/common/service_outage/service_outage/", "method": "POST", "details": {"operationId": "ux_common_service_outage_service_outage_create", "description": "This endpoint facilitates the creation of a new service outage record for the current organization. This is crucial for managing unexpected disruptions and restoring normal organizational functioning. While the context often refers to 'service' in broader terms like 'service template' or 'add a service' for a self-service portal, this specific endpoint focuses on registering an 'outage' related to an existing service. The system recommends keeping services in a 'New' or 'Draft' state during definition and refinement, but for an outage, the immediate recording is paramount to address disruptions effectively.", "summary": "Create a service outage", "tags": ["service_outage"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint is designed for managing service disruptions. While other contexts discuss creating new service templates or 'add service' functionalities, this specific API is dedicated to registering an 'outage'. The term 'Emergency Change' is also mentioned in the context of dealing with server outages, indicating that registering an outage might be a precursor or a part of the process for emergency changes. However, it's also noted that 'Emergency Change is not part of this release' in some contexts, so its direct integration with this API might be limited or planned for future releases. The request body details are not provided in the specification, so it's advised to consult separate schema documentation for required fields when creating an outage record."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Service Desk Agent", "Operations Personnel"], "primary_use_case": "To record and manage service disruptions and outages, facilitating the restoration of normal organizational functioning."}, "content_for_embedding": "This API endpoint is designed to create new service outage records. Its primary purpose is to manage unexpected service disruptions and aid in restoring normal organizational operations. While the broader context might involve service templates or adding services, this specific API focuses solely on registering an 'outage' related to an existing service. It is crucial for immediate recording of disruptions, and can be a precursor to or part of emergency change processes, although direct integration with 'Emergency Change' might be limited in current releases. Users should consult separate schema documentation for required fields when creating an outage record.", "semantic_keywords": ["Service Outage", "Event Management", "Incident Creation"], "ontology_classification": {"features": ["notification_and_incident_generation", "event_detection_and_monitoring", "event_listing_and_filtering", "event_management_actions"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/service_outage/service_outage/{id}/", "method": "GET", "details": {"operationId": "ux_common_service_outage_service_outage_retrieve_2", "description": "This endpoint provides access to retrieve specific information about a service outage. A \"ticket\" is defined as an unplanned interruption or reduction in IT service quality, or an asset/item failure that hasn't yet impacted service. Service outages fall under this definition, and information such as service name and status can be viewed. This endpoint is crucial for monitoring and understanding the state of IT services during disruptions.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["service_outage"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is a mandatory string that uniquely identifies the service outage. While the API specification does not detail its exact format, it likely corresponds to a specific ticket or outage identifier within the system. The response for this GET request does not include a body, indicating that the status of the request itself is sufficient for confirmation, or further details are accessed through other linked resources. Related contexts mention 'Emergency Change' in response to server outages, suggesting that this API might be used by systems to initiate or monitor emergency changes to restore normal functioning. The system also supports tracking the 'history' of such problems from their creation time."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Service desk agents", "Monitoring systems"], "primary_use_case": "To retrieve specific information about a service outage, which is treated as a ticket, for monitoring and understanding IT service disruptions."}, "content_for_embedding": "This API endpoint allows for the retrieval of detailed information regarding a specific service outage, identified by a unique ID. A service outage is defined as an unplanned interruption or reduction in IT service quality, or an asset/item failure, essentially functioning as a ticket within the system. Key information such as service name and status can be viewed. This endpoint is vital for monitoring the state of IT services during disruptions, facilitating the tracking of problem history and potentially informing emergency change processes.", "semantic_keywords": ["Service Outage", "Ticket", "Details retrieval"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "ticket_monitoring", "ticket_history_view", "ticket_state_&_status_management"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/service_outage/service_outage/{id}/", "method": "PUT", "details": {"operationId": "ux_common_service_outage_service_outage_update", "description": "This endpoint allows for the modification or update of service outage records. It is part of the broader Service Outage API, which manages critical disruptions to IT services. This PUT method specifically targets an existing service outage record identified by a unique ID to adjust its status, details, or to reflect progress in resolution. While the context highlights 'Emergency Change' and 'server outage' as types of disruptions, this endpoint is a general mechanism for updating any documented service outage.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["service_outage"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and must be a unique identifier for the service outage event being updated. This endpoint is crucial for managing the lifecycle of service outages, potentially allowing for updates that reflect the problem's resolution or changes in its status, similar to how 'Solutions' are documented for problems or 'Changes to Network Infrastructure' are managed. Further details on the specific fields that can be updated in the request body are not provided in the specification but would typically include fields related to the outage's status, impact, and planned resolution. It's distinct from creating a new service request or logging a 'ticket' as it focuses on updating an existing outage record."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Service Desk Agents", "Incident Managers", "Operations Teams"], "primary_use_case": "To update and manage the lifecycle of existing service outage records, including their status and resolution progress, to reflect critical disruptions to IT services."}, "content_for_embedding": "This API endpoint allows for the modification or update of existing service outage records. It is a crucial part of managing critical disruptions to IT services, enabling users to adjust the status, details, or reflect progress in resolution for a specific service outage identified by a unique ID. This mechanism is general for updating any documented service outage, distinguishing itself from creating new service requests or logging tickets by focusing on the lifecycle management of existing outage events.", "semantic_keywords": ["Service Outage", "Update", "Incident Update"], "ontology_classification": {"features": ["ticket_state_&_status_management", "resolution_&_recovery", "ticket_tracking", "detailed_ticket_editing", "ticket_resolution_functionality", "ticket_monitoring", "ticket_detail_view_(via_id)"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/service_outage/service_outage/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_service_outage_service_outage_destroy", "description": "This endpoint allows for the permanent deletion of a specific service outage identified by its unique ID. Deleting a service outage is analogous to deleting maintenance records, categories, services, or catalog entries, where dependent components are also removed. This action helps in managing and cleaning up service disruption records.", "summary": "Delete a service outage", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["service_outage"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` parameter is a required path parameter that specifies the unique identifier of the service outage to be deleted. There is no request body for this operation, and the response does not contain any body content upon successful deletion. This operation is irreversible, similar to deleting an SLA Profile or a category/service related to it. It is commonly used to remove outdated or incorrectly logged service outage incidents from the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Service Desk Agent"], "primary_use_case": "To permanently delete records of service outages and manage service disruption incidents."}, "content_for_embedding": "This API permanently deletes a specific service outage record identified by its unique ID. This irreversible action is essential for managing and cleaning up outdated or incorrectly logged service disruption incidents from the system.", "semantic_keywords": ["Delete", "Service Outage", "Irreversible"], "ontology_classification": {"features": ["problem_deletion"], "primary_module": "problem_management", "confidence_score": 0.95}}}, {"path": "/ux/common/service_outage/service_outage/options/", "method": "GET", "details": {"operationId": "ux_common_service_outage_service_outage_options_retrieve", "description": "This GET endpoint retrieves all configurable options and parameters related to service outages within the current organization. This includes critical attributes such as Urgency (Low, Medium, High), Severity (Minor, Major, Critical), Risk (Low, Medium, High, Critical), and Service Category options (e.g., IT Services). It also provides context for 'Under Maintenance' statuses, indicating planned outages, and can be used to understand the various classifications of services that might experience outages.", "summary": "Get service outage options", "tags": ["service_outage"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is crucial for populating dropdown boxes and selection fields within the user interface when configuring or reporting on service outages. While the API specification does not list any parameters, the information returned by this endpoint directly corresponds to the selectable values for managing service outages, as detailed in the user guides. It can help in understanding service status types (like 'Under Maintenance' for planned outages) and is relevant for classifying service problems or changes. This API helps define job types and notifier options when setting up service templates, although those are more related to job execution rather than direct outage parameters."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Service managers", "Help desk agents"], "primary_use_case": "This API retrieves all configurable options and parameters for service outages, such as urgency, severity, risk, and service categories. It is primarily used to populate dropdowns and selection fields in user interfaces for configuring or reporting service outages, and to understand various service classifications and statuses like \"Under Maintenance\"."}, "content_for_embedding": "This GET endpoint retrieves all configurable options and parameters related to service outages within an organization. This includes critical attributes like Urgency (Low, Medium, High), Severity (Minor, Major, Critical), Risk (Low, Medium, High, Critical), and Service Category options (e.g., IT Services). It also provides context for \"Under Maintenance\" statuses, indicating planned outages. The information returned is crucial for populating dropdown boxes and selection fields in user interfaces when configuring or reporting on service outages, and for understanding the various classifications of services that might experience outages. It helps in classifying service problems or changes and defining service status types.", "semantic_keywords": ["Service Outage", "Configuration Options", "Service Classification"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/", "method": "GET", "details": {"operationId": "ux_common_services_services_retrieve", "description": "This endpoint provides access to the service catalogue within Infraon, allowing users to retrieve information about available services. It is designed to adapt the functionalities of a DRF ModelViewSet, enabling the view of all services within a category, similar to how Infraon's service view can be switched between cards and grids. Services, along with their associated catalogues and categories, can be managed, including viewing, editing, and deleting. This endpoint facilitates the self-service framework by offering detailed descriptions of published products or services.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily for viewing common services. According to the user guide, services can be added under selected categories. Deleting a catalog or category will also delete its dependent services. While the API specification mentions 'Adaptation of DRF ModelViewSet', implying potential for other HTTP methods, the current method is GET, which focuses on retrieval. Details on service export (JSON format) and import options (JSON, Text, Manually) are available for service templates, but not directly through this GET endpoint. The retrieved contexts emphasize managing and classifying services within a catalogue, suggesting this endpoint plays a crucial role in displaying that structured content."}, "llm_generated": {"business_context": {"user_personas": ["End-users", "Requesters", "Administrators", "Catalogue Managers"], "primary_use_case": "To allow users to retrieve and view information about available services and their associated catalogues and categories within the Infraon service catalogue, facilitating a self-service framework."}, "content_for_embedding": "This API endpoint provides read-only access to the Infraon service catalogue. It allows users to retrieve and view detailed information about available services, including their categorization within catalogues and categories. The functionality supports displaying services in various formats, such as cards and grids, to facilitate a self-service framework. While the service catalogue itself is managed and configured elsewhere, this GET endpoint is crucial for displaying the structured content of published products and services to end-users.", "ontology_classification": {"features": ["knowledge_access_&_utilization", "search_functionality", "user-friendly_content_presentation", "service_catalog_integration_for_categorization"], "primary_module": "knowledge_base", "confidence_score": 0.9}, "semantic_keywords": ["Service Catalogue", "Service Listing", "Retrieval"]}}, {"path": "/ux/common/services/services/", "method": "POST", "details": {"operationId": "ux_common_services_services_create", "description": "This API endpoint facilitates the creation, storage, and management of services within the system, adapting the functionalities of a DRF ModelViewSet. It allows users to define new services, which can then be categorized and associated with catalogues, similar to how Infraon's Service Catalogue enables the creation and publishing of detailed products or services. Services, once created, can be viewed, managed, and potentially organized into classifications based on type (e.g., Desktop Servicing, Laptop Servicing). This operation is crucial for populating the self-service framework with defined service offerings.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint inherently supports CRUD operations common to a ModelViewSet, implying that while the HTTP method is POST for creation, other methods like GET, PUT, PATCH, and DELETE might be supported on related paths for retrieving, updating, and deleting services respectively. The creation of a service integrates it under a selected category within 'Infraon', and services can be viewed in various formats (cards/grids). Deleting a category will also delete all dependent services. Fields for service creation, if applicable, are likely to include service name, description, and classification details, with a strong suggestion (based on related contexts) that some fields may be mandatory. The JSON specification currently does not detail request parameters or a request body schema, but in a real-world scenario, this endpoint would accept a JSON payload defining the new service's attributes."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Service Manager"], "primary_use_case": "To enable the creation and management of service offerings within a self-service portal or service catalog."}, "content_for_embedding": "This API endpoint is designed for the creation, storage, and comprehensive management of services within a system, functioning similarly to a DRF ModelViewSet. It allows users to define new services, categorize them, and associate them with existing catalogues. This is crucial for populating and maintaining a self-service framework with defined service offerings. Services can be classified by type (e.g., Desktop Servicing, Laptop Servicing) and include various details such as name, description, cost, tags, and ownership. The endpoint supports the full lifecycle of a service, from initial definition (New, Draft states) to publication for operational use in the self-service portal. It also implies support for CRUD operations, allowing for viewing, updating, and deleting services, and their integration into Infraon's Service Catalogue.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "record_creation_&_management", "request_classification_&_categorization", "tag_management", "attachment_management", "self-service_portal_integration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Service Creation", "Service Management", "Service Catalogue"]}}, {"path": "/ux/common/services/services/{id}/", "method": "GET", "details": {"operationId": "ux_common_services_services_retrieve_2", "description": "This endpoint retrieves detailed information for a specific service identified by its unique ID. It is adapted from the DRF (Django Rest Framework) ModelViewSet for viewing individual service entries. This allows users to inspect specific service templates, which are crucial for defining services within the system. The 'id' in the path parameter corresponds to the service ID and enables specific service details to be displayed, supporting the management of individual service entries such as those found in service catalogues.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is mandatory and uniquely identifies the service to be retrieved. While the original description notes 'No response body', it is implied that a successful GET request to this endpoint would return the JSON representation of the requested service's details. Contexts indicate services can be edited and deleted, and service details include descriptions, and potentially configurations (if the service is a template). This endpoint is likely used to view service name, description, and other properties associated with a service, essential for scenarios like displaying service information to users or for internal management of the service catalogue. The service view can be switched between cards and grids to suit requirements, and service exports as JSON are useful for backup and sharing, suggesting the retrieved service data could be in JSON format."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Manager", "Developer"], "primary_use_case": "This API allows users to retrieve detailed information about a specific service template from the service catalog, enabling them to view service names, descriptions, and other properties for display or internal management."}, "content_for_embedding": "This API retrieves comprehensive details for a specific service template identified by its unique ID. It is crucial for displaying service information to users and for the internal management of the service catalogue, allowing inspection of service names, descriptions, and configurations.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Details", "Service Management", "Service Catalogue"]}}, {"path": "/ux/common/services/services/{id}/", "method": "PUT", "details": {"operationId": "ux_common_services_services_update", "description": "This `PUT` endpoint is part of the `/ux/common/services/services/{id}/` path and allows for the adaptation and update of an existing service within the Infraon system. It leverages a DRF ModelViewSet structure, enabling modifications to service details. Services are integral to Infraon's Service Catalogue, which facilitates the creation, publishing, and description of products or services for a self-service framework, supporting various organizational teams beyond IT such as HR and Finance. This endpoint is used to edit existing services, similar to how catalogues and categories can be edited.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the service to be updated. While the original specification states 'No response body', a successful update operation typically implies a 2xx status code. Based on the context, updating a service could involve modifying its description, classification, or other detailed configurations. Changes made via this endpoint would reflect in the service view (cards and grids) within Infraon. It's crucial to ensure the request body for the PUT operation (though not explicitly described in the provided JSON, it would typically contain the updated service details) adheres to the expected format for service objects within the Infraon system, likely including fields like 'Service Name' and 'Description' as mentioned in relevant contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Manager", "IT Personnel", "HR Personnel", "Finance Personnel"], "primary_use_case": "To update and adapt existing services within the Infraon Service Catalogue, enabling modifications to service details and their availability for self-service."}, "content_for_embedding": "This API endpoint allows for the modification and update of an existing service within the Infraon system. It is integral to the Service Catalogue, which supports the creation, publishing, and description of products or services for a self-service framework across various organizational teams. Users can edit service details such as name, code, description, catalogue alignment, category, classification, status (e.g., Draft to Published), cost, tags, overview, features, availability, ownership (service owner, business owners, IT owners), and define audience visibility. Changes made via this endpoint are reflected in the service view (cards and grids) within Infraon.", "ontology_classification": {"features": ["infraon_configuration.service_management_(catalogue_configuration)", "workspace.record_creation_&_management", "workspace.record_lifecycle_&_status_management", "knowledge_base.draft/publish_workflow", "asset.customizable_asset_properties_and_fields", "release_management.quick_edit", "infraon_configuration.tag_management", "contract_management.multiple_data_display_views_(grid_&_card)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Service Update", "Service Catalogue", "Service Management"]}}, {"path": "/ux/common/services/services/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_services_services_destroy", "description": "Deletes a specific service identified by its unique ID. This endpoint is designed for managing services within the Infraon platform's service catalog, providing the capability to remove unwanted or outdated service definitions. As noted in the documentation, deleting a service will also automatically delete any dependent services associated with it, ensuring data consistency.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the service to be deleted. This action is irreversible and should be used with caution, especially considering that dependent services will also be removed. This endpoint is part of the larger service management functionality in Infraon, alongside options to create, edit, and view services. No response body is returned upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Service Manager"], "primary_use_case": "To permanently remove a specific service definition from the Infraon platform's service catalog, including any dependent services, ensuring data consistency."}, "content_for_embedding": "This API facilitates the irreversible deletion of a service from the Infraon service catalog. It requires a unique service ID and automatically handles the removal of associated dependent services. This functionality is crucial for maintaining an accurate and up-to-date service catalog by allowing users to eliminate outdated or unwanted service definitions. It forms a part of the comprehensive service management capabilities within the Infraon platform.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Service Management", "Service Catalog"]}}, {"path": "/ux/common/services/services/add-channelmap-data/", "method": "GET", "details": {"operationId": "ux_common_services_services_add_channelmap_data_retrieve", "description": "This endpoint allows for the addition of E1 channel mapping data. It is an adaptation of the DRF ModelViewSet and is crucial for configuring and tracking signal routing within the network. Specifically, it facilitates the management of E1 Channel Mapping between E1 Ports and E1 to Client (Voice, Data, Voice_Data) Channels, enabling the definition of source E1 ports, specific E1 channels, and their corresponding client circuit types. This functionality directly supports accurate tracking and understanding of signal routing, as explained in the context related to E1 Channel Mapping.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification states 'No response body', successful operations are likely to be indicated by a 2xx HTTP status code. Based on the context, this endpoint plays a role in the tabular views displaying channel mapping and utilization for PDH (Plesiochronous Digital Hierarchy) systems. It's an internal service component that allows adding configuration data rather than retrieving it, despite being a GET method in the provided specification."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "IT Operations Personnel"], "primary_use_case": "To configure and manage E1 channel mapping data for signal routing within PDH network systems."}, "content_for_embedding": "This API endpoint facilitates the addition of E1 channel mapping data, which is essential for configuring and tracking signal routing in PDH network systems. It allows for the definition of source E1 ports, specific E1 channels, and their corresponding client circuit types (Voice, Data, Voice_Data), thereby enabling accurate signal routing management.", "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Network Configuration", "Channel", "Add"]}}, {"path": "/ux/common/services/services/add-service/", "method": "POST", "details": {"operationId": "ux_common_services_services_add_service_create", "description": "This `/ux/common/services/services/add-service/` endpoint facilitates the creation of new services within the Infraon platform. It is a POST operation that allows users to add a service under a selected category, contributing to the service catalog. The process involves defining the service's details, and upon successful submission, the service becomes available for viewing and management within the platform. This API underpins the ability to expand the range of available services, whether for IT components or other organizational departments, crucial for building a comprehensive self-service framework.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is an adaptation of the DRF (Django REST Framework) ModelViewSet for adding services. While the API specification currently lists no parameters or request body description, based on the user guides, creating a new service typically involves providing details such as 'Service Name', 'Service Classification', 'Service Description', and potentially other configurations specific to the service template. Users can choose to add a service manually or by importing from JSON or plain text formats, which is particularly useful for migrating or backing up service templates. The successful addition of a service results in it being listed under its respective category. Fields marked with an asterisk in the user guide are typically mandatory. Users should refer to UI documentation for specific mandatory fields for adding a service template."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "To enable administrators and catalogue managers to create and add new services to the Infraon platform's service catalog, supporting a comprehensive self-service framework for various organizational departments."}, "content_for_embedding": "This API endpoint, `/ux/common/services/services/add-service/`, is a POST operation designed for creating new services within the Infraon platform. It allows administrators and catalogue managers to add detailed service information, including name, description, classification, catalogue, cost, and ownership details, to the service catalog. The process supports manual entry and import from JSON/plain text, facilitating the expansion and management of available services for IT components or other departments. Successfully added services become viewable and manageable, contributing to a robust self-service framework. The API is crucial for populating the service catalog and making services available for end-users, often requiring the service to be in a 'Published' status for operational availability.", "semantic_keywords": ["Service Creation", "Service Catalog", "Service Classification"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "draft/publish_workflow", "content_curation", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/add-service-profile/", "method": "GET", "details": {"operationId": "ux_common_services_services_add_service_profile_retrieve", "description": "This endpoint is used to add a new service profile, functioning as an adaptation of Django REST Framework's ModelViewSet for managing service-related data. The process involves submitting the service, which is then added under a selected category within Infraon. Service views can be switched between cards and grids, and catalogues, categories, and services can be edited and deleted post-addition. Notably, deleting a catalogue or category will also result in the deletion of all dependent services.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the current specification indicates 'No response body' and no parameters, context suggests that adding a service profile typically involves providing details such as task names, vendor, configuration templates, and device details. Fields marked with an asterisk are mandatory for successful submission. Users should be aware that this process is similar to adding service templates or SLA profiles, which often require specific naming conventions, descriptions, and selections from dropdown lists for various attributes (e.g., connection protocols, configuration profiles). Although not explicitly detailed in the API spec, typical usage would involve providing a unique name for the service profile and selecting relevant vendors and configuration templates. Dependent objects are automatically deleted when a parent object (catalog or category) is removed."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager"], "primary_use_case": "To enable administrators and catalogue managers to add, configure, and manage new service profiles within the service catalogue, including defining service details, ownership, and availability."}, "content_for_embedding": "This API endpoint facilitates the creation and comprehensive management of new service profiles within Infraon's service catalog. It allows users, primarily administrators and catalogue managers, to define detailed service information across multiple tabs: Basic Information (service name, code, description, image, catalogue, classification, status, criticality), Advanced Information (cost, currency, purchase/shipping requirements, tags, overview, key features, availability), Ownership (service, business, IT owners, user/requester visibility), and a Service Template for incident creation. Services are organized hierarchically under catalogues and categories. The API supports editing and deletion of services, categories, and catalogues, with dependent services automatically removed upon parent deletion. Services can be in 'New', 'Draft', or 'Published' states, with 'Published' making them operational on the self-service portal. Service views can be toggled between card and grid formats.", "semantic_keywords": ["Service Creation", "Service Management", "Service Catalogue"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "tag_management", "draft/publish_workflow", "attachment_management", "multiple_data_display_views_(grid_&_card)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/all-circuits/", "method": "GET", "details": {"operationId": "ux_common_services_services_all_circuits_retrieve", "description": "This GET endpoint provides a comprehensive view of all available circuits within the system. It leverages a DRF ModelViewSet adaptation to efficiently retrieve circuit details. Users can expect to find information related to circuit types (e.g., E1, Ethernet, STM, Voice, Data), profile names, and technology (e.g., SDH, PDH). This endpoint supports the discovery of deployed trails and circuits, enhancing the network's overall functionality and connectivity, as detailed in the user guides. While the API specification refers to a DRF ModelViewSet adaptation, the primary function is to list all circuits, reflecting a 'services' related view.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Although the API specification indicates 'No response body', it's inferred from the context (e.g., 'What you see on the screen', 'Field \u2013 Circuit Type, Profile Name, Technology') that a list of circuits with their respective details would be returned. The associated documentation suggests that filtering capabilities are typically available for circuit discovery based on fields like 'Circuit Type', 'Profile Name', and 'Technology' with conditions such as 'in', 'not in', 'equal to', 'not equal to', 'contains', and 'not contains'. It is also relevant that this endpoint might be part of services that allow management actions such as adding new Circuit Discoveries. However, this specific GET endpoint is for retrieving all circuits rather than performing modifications or specific discoveries."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Network engineers", "System integrators"], "primary_use_case": "To provide a comprehensive view and enable discovery of all available network circuits, including their types, profile names, and technology, thereby enhancing network functionality and connectivity."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of all available network circuits, providing details such as circuit types (e.g., E1, Ethernet, STM, Voice, Data), profile names, and underlying technology (e.g., SDH, PDH). It supports the discovery of deployed trails and circuits, which is crucial for understanding network functionality, performance, and connectivity. Although the API returns a list of circuits, the data is structured to facilitate filtering and further analysis, serving as a foundational component for network inventory and operational insights.", "ontology_classification": {"features": ["device_discovery", "it_operations", "inventory_data_collection", "asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Circuit Discovery", "Network Inventory", "Circuit Retrieval"]}}, {"path": "/ux/common/services/services/associated-onts-list/", "method": "POST", "details": {"operationId": "ux_common_services_services_associated_onts_list_create", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To establish new associations or add entries to a managed list of configurations or classifications within the system's common services."}, "content_for_embedding": "This API facilitates the creation of new entries in a list of associated configurations or classifications, likely related to services or system-wide settings. It supports the dynamic management of internal relationships and data categorization within the platform.", "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.8}, "semantic_keywords": ["Add", "Configuration", "Classification"]}}, {"path": "/ux/common/services/services/check-service-name/", "method": "GET", "details": {"operationId": "ux_common_services_services_check_service_name_retrieve", "description": "This GET endpoint is designed to check the validity or existence of a service name within the system, crucial for operations like adding, editing, or managing service templates and classifications. It leverages an adaptation of the Django REST Framework (DRF) ModelViewSet, indicating its role in data retrieval and validation for service-related entities. The primary purpose is to ensure service names are unique and conform to system requirements before they are 'Submit'-ted or integrated into catalogues and categories.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The endpoint is particularly relevant for scenarios involving the definition of new services or editing existing ones, where service names are a 'View-only field' post-creation according to context. It implicitly supports unique naming constraints (as suggested by 'Enter a unique name for the task' in a related context for 'Task Name', which mirrors the importance of uniqueness for 'Service Name'). While the API specification states 'No response body', successful validation would typically result in a 200 OK status, and an invalid or duplicate service name would likely return a 4xx client error, indicating the rejection of an invalid service name. This is vital for maintaining data integrity across service catalogues and categories within the Infraon system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Catalog Manager", "System Integrator"], "primary_use_case": "This API checks the validity and uniqueness of a service name within the system, preventing duplicates and ensuring data integrity before new services or service templates are created or updated. It is crucial for maintaining a clean and accurate service catalog."}, "content_for_embedding": "This GET endpoint validates a service name for uniqueness and adherence to system requirements. It is primarily used during the creation or modification of service templates and classifications to ensure that service names are unique across the system. A successful check (200 OK) indicates the name is valid, while a 4xx error would signify an invalid or duplicate name, supporting data integrity within the Infraon service catalog.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "search_functionality", "content_curation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Management", "Service Classification", "Search"]}}, {"path": "/ux/common/services/services/ci_is_enable/", "method": "POST", "details": {"operationId": "ux_common_services_services_ci_is_enable_create", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "System Integrators", "Asset Managers"], "primary_use_case": "To manage the operational status (enable/disable) of Configuration Items (CIs) within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API is designed to manage the enabled status of Configuration Items (CIs) within the system. It allows for checking or setting whether a specific CI is active or operational, which is a fundamental aspect of asset lifecycle management and maintaining an accurate Configuration Management Database (CMDB).", "semantic_keywords": ["CMDB", "CI status", "Asset management"], "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/ci_name/", "method": "POST", "details": {"operationId": "ux_common_services_services_ci_name_create", "description": "This API endpoint, an adaptation of the DRF ModelViewSet, is designed to manage Configuration Item (CI) names, specifically related to services. It likely facilitates operations such as creating, retrieving, updating, or deleting CI names, particularly in the context of service templates, service classification, or device details. This functionality is crucial for maintaining accurate service and device inventories within the system, as CI names are a key attribute of devices and service templates. The endpoint's interaction with service-related data aligns with functionalities like exporting/importing service templates in JSON format and managing service classifications, as described in the user guides.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates 'No response body', the method is POST, suggesting a creation or update operation. Given the context, this endpoint likely accepts a request body containing the 'ci_name' and potentially other related service or device details for creation or modification. The 'ci_name' is a view-only field in some contexts, but here, it would be an input. This endpoint is fundamental for system administrators or integration developers who need to programmatically manage and standardize CI names across services and devices. Information from higher-ranked contexts suggests 'ci_name' is a critical identifier for devices and services, and this endpoint enables its management."}, "llm_generated": {"business_context": {"user_personas": ["system administrators", "integration developers"], "primary_use_case": "To manage Configuration Item (CI) names for services and devices, facilitating the creation, retrieval, updating, and deletion of these names to maintain accurate service and device inventories."}, "content_for_embedding": "This API endpoint manages Configuration Item (CI) names, which are essential for maintaining accurate service and device inventories. It supports operations such as creating, updating, and deleting CI names, specifically in the context of service templates, service classification, and device details. This functionality is crucial for system administrators and integration developers who need to programmatically manage and standardize CI names across services and devices within the system.", "semantic_keywords": ["CI configurations", "Service Management", "Asset Management"], "ontology_classification": {"features": ["customizable_asset_properties_and_fields", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/ci_tag/", "method": "POST", "details": {"operationId": "ux_common_services_services_ci_tag_create", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Configuration Manager", "IT Operations"], "primary_use_case": "To create new Configuration Item (CI) tags within the system."}, "content_for_embedding": "This API allows for the creation of new Configuration Item (CI) tags. These tags are used to categorize, label, and organize Configuration Items within the system, facilitating improved search, filtering, and management of IT assets and infrastructure components.", "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Tags", "Configuration", "Add"]}}, {"path": "/ux/common/services/services/circuit-paths/", "method": "POST", "details": {"operationId": "ux_common_services_services_circuit_paths_create", "description": "This endpoint, designed as an adaptation of a DRF ModelViewSet, likely manages or provides access to 'circuit paths' within the system. While the exact operation (creation, retrieval, update, deletion) is not specified by the 'POST' method alone given its ModelViewSet adaptation, the contextual information suggests it could be related to discovering, defining, or managing network circuit information. Contexts indicate 'circuit paths' are fundamental to network functionality, performance, and connectivity, allowing for discovery of deployed trails and circuits, monitoring their operational status (e.g., Trail State: Active, Inactive, Faulted), and detailing node and port information (e.g., A-End Node and Service Port, Z-End Node and Service Port). The endpoint's function is crucial for integrating network discovery and service management aspects, potentially involving configurations and service templates.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Given the 'POST' method, this endpoint could be used for creating new circuit path entries, initiating a discovery process for circuit paths, or submitting data related to circuit configurations. The absence of specific request parameters or a request body description in the API specification suggests that either the payload is dynamically determined by the ModelViewSet or is implicitly understood in the context of the larger framework. Contexts related to 'Circuit Type', 'Profile Name', and 'Technology' suggest these might be filterable or configurable attributes related to circuit paths. Users should refer to documentation concerning DRF ModelViewSet POST operations and the specific data models expected for circuit path management. Mandatory fields, if any, for such operations would align with concepts like 'Task Name' or 'Template Selection' as seen in other service-related contexts."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations personnel", "Network Engineers", "System Integrators"], "primary_use_case": "To initiate and manage the discovery of network circuit paths, enhancing network functionality, performance, and connectivity. This includes creating new circuit path entries and configuring discovery parameters."}, "content_for_embedding": "This API endpoint, adapted from a DRF ModelViewSet, facilitates the creation and management of network circuit paths. It is primarily used to initiate the discovery process for deployed trails and circuits within a network, allowing for the definition and submission of data related to circuit configurations. This includes specifying parameters such as Profile Name, Technology (e.g., SDH, PDH), and Circuit Type (e.g., E1, Ethernet, STM, Voice, Data), and scheduling the discovery. The endpoint is crucial for integrating network discovery and service management, enabling monitoring of operational status (Active, Inactive, Faulted) and detailing node and port information (A-End/Z-End Node and Service Port).", "ontology_classification": {"features": ["it_operations", "device_discovery"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Circuit Discovery", "Network Inventory", "Configuration"]}}, {"path": "/ux/common/services/services/delete-service/", "method": "GET", "details": {"operationId": "ux_common_services_services_delete_service_retrieve", "description": "This endpoint facilitates the deletion of services within the system. It is an adaptation of the DRF ModelViewSet for handling service removal. When a service is deleted, any dependent services associated with it are also automatically removed, as are any services linked to a category if that category is deleted. This operation is irreversible and ensures data consistency across the Infraon platform by managing cascades.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint does not require any parameters or request body for its operation, as it is a GET request. While the API specification lists it as a GET, standard practice for deletion operations often involves DELETE methods for idempotency and semantically appropriate HTTP verbs. Users with 'Delete' privilege are required to perform this action. Deleting an SLA Profile (if applicable in context) is also noted as irreversible, reinforcing the nature of deletion operations in general."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "IT Operations Staff"], "primary_use_case": "This API facilitates the permanent removal of services from the system, including the automatic deletion of any dependent services or associated entities, ensuring data consistency."}, "content_for_embedding": "This API endpoint is used for deleting services within the system. It is an irreversible operation that also triggers the automatic removal of all dependent services and associated entities to maintain data consistency across the platform. Although it uses a GET method, its function is a permanent deletion.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "bulk_actions"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Service Management", "Irreversible"]}}, {"path": "/ux/common/services/services/delete-service-profile/", "method": "GET", "details": {"operationId": "ux_common_services_services_delete_service_profile_retrieve", "description": "This endpoint allows for the permanent deletion of a service profile. Deleting a service profile is an irreversible action, as highlighted in the user guides. If a category is deleted, all dependent services within that category are also deleted. This action is part of the broader service management functionalities, enabling users with appropriate privileges to remove existing service configurations.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This API endpoint is based on an adaptation of the DRF (Django REST Framework) ModelViewSet. While the API specification currently lists 'GET' as the method, deletion operations are typically performed using 'DELETE' requests. Developers should clarify the correct HTTP method with the API provider. The user guides emphasize that dependent services are deleted when a category is removed, implying broader cascade deletion behavior in related service management operations. Users lacking delete privileges (per context Rank 6 and 10) will not be able to perform this operation. There is no request body for this operation, and it returns no response body upon successful completion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Manager"], "primary_use_case": "To permanently delete service profiles and their dependent services, ensuring proper configuration management and adherence to privilege controls."}, "content_for_embedding": "This API endpoint is designed for the permanent and irreversible deletion of service profiles. It supports cascade deletion, meaning that deleting a service category will also remove all dependent services within that category. The operation requires specific user privileges. Although the API specification currently lists 'GET' as the method, deletion operations are typically performed using 'DELETE' requests, and this should be clarified with the API provider. There is no request body or response body for this operation upon successful completion.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Service Management", "Irreversible"]}}, {"path": "/ux/common/services/services/delete-service-profile-enh/", "method": "POST", "details": {"operationId": "ux_common_services_services_delete_service_profile_enh_create", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Manager"], "primary_use_case": "To remove or deactivate an existing service profile within the system."}, "content_for_embedding": "This API allows for the deletion of a specific service profile. It is a POST request and requires API Key authentication. This operation is typically performed by administrators or users with service management privileges to remove unwanted or outdated service configurations.", "semantic_keywords": ["Delete", "Service Profile", "API Key"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/ethernet-service-profiles/", "method": "GET", "details": {"operationId": "ux_common_services_services_ethernet_service_profiles_retrieve", "description": "This GET endpoint retrieves a comprehensive list of configured Ethernet service profiles. Building on the DRF ModelViewSet adaptation, it likely provides a detailed view of Ethernet services available in the network, similar to how other displays provide VCG and Ethernet services traversing a specific node, as mentioned in Context Rank 6 and 10. The returned data would encompass information such as the unique service ID, source, destination, and service status. This resource is essential for understanding traffic routing and service associations within the system, especially concerning Ethernet port associations.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates no response body, this likely refers to a lack of a formal schema document in the provided spec rather than an actual absence of data on a successful GET request. Given the purpose of retrieving 'service profiles', a successful response would typically contain a list or array of Ethernet service profile objects. This endpoint is distinct from configuration changes which are handled via HTTP (REST) API configurations using POST/PUT methods, as described in Context Rank 1. It serves purely as a data retrieval mechanism. The API does not accept any parameters or request body for filtering or modifying the request, indicating it provides a general overview of all available Ethernet service profiles."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Operations teams", "Network engineers"], "primary_use_case": "To retrieve a comprehensive list of configured Ethernet service profiles for understanding network traffic routing and service associations, particularly concerning Ethernet port associations."}, "content_for_embedding": "This GET endpoint retrieves a comprehensive list of configured Ethernet service profiles, providing a detailed view of Ethernet services available in the network. The returned data includes service ID, source, destination, and service status. This resource is essential for understanding traffic routing and service associations within the system, especially concerning Ethernet port associations. It serves purely as a data retrieval mechanism for existing configurations and does not accept parameters for filtering or modification.", "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Profile", "Configuration retrieval", "Service Listing"]}}, {"path": "/ux/common/services/services/ethernet-services/", "method": "GET", "details": {"operationId": "ux_common_services_services_ethernet_services_retrieve", "description": "This endpoint provides access to information regarding Ethernet services, supporting the adaptation of the DRF ModelViewSet. It can be used to view details such as configured Ethernet to VCG mappings, which ensure a clear understanding of traffic routing within a network node. Information about associated VLAN IDs for Ethernet services is also available, along with potential reasons for dropped services like administrative shutdown, faulty links, or bandwidth shortages. This API is likely integrated into a broader network configuration and diagnosis system, possibly related to HTTP REST-API configurations as mentioned in context.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint has no explicit request body or parameters defined in the specification. Therefore, it likely serves as a GET operation to retrieve existing Ethernet service configurations and related diagnostics. Users may find it useful for network diagnosis tasks and to identify how specific Ethernet ports are associated with corresponding VCGs. While the endpoint seems to be focused on retrieving service data, similar systems often allow for configuration changes via HTTP REST-API as indicated by context, though this specific endpoint is for retrieval ('GET')."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Network engineers", "IT support personnel"], "primary_use_case": "To retrieve detailed information about Ethernet services, including VCG mappings, VLAN IDs, and reasons for service drops, primarily for network diagnosis and monitoring of traffic routing and service status."}, "content_for_embedding": "This API provides comprehensive access to information regarding Ethernet services within a network node. It allows users to view detailed Ethernet to VCG mappings, understand traffic routing, and identify associated VLAN IDs. Furthermore, it offers insights into reasons for dropped services, such as administrative shutdowns, faulty links, or bandwidth shortages. This endpoint is crucial for network diagnosis tasks, enabling users to monitor service status and troubleshoot connectivity issues by providing a detailed view of VCG and Ethernet services traversing the network.", "ontology_classification": {"features": ["topology_view_display", "connection_status_visualization_(color-coded)", "node_inventory_details", "services_integration_(from_edge)", "diagnosis_tools"], "primary_module": "topology", "confidence_score": 0.9}, "semantic_keywords": ["Service Details", "Configuration Retrieval", "Monitoring"]}}, {"path": "/ux/common/services/services/ethernet-services/", "method": "POST", "details": {"operationId": "ux_common_services_services_ethernet_services_create", "description": "This endpoint, a DRF ModelViewSet adaptation, facilitates the management and configuration of Ethernet services, specifically focusing on the mapping of Ethernet ports to VCGs (Virtual Concatenation Groups) within a node. It allows for a comprehensive view of these configurations, essential for understanding traffic routing. While the primary method is POST, typically used for creating or updating configurations, the nature of a ModelViewSet also implies support for other CRUD operations, adapting to the underlying DRF framework for these services. This endpoint is crucial for tasks like reviewing existing Ethernet to VCG mappings and ensures clear understanding of traffic flow.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Given the endpoint's nature as an adaptation of a DRF ModelViewSet and the POST method specified, it likely supports operations to create new Ethernet service configurations or update existing ones. The context heavily emphasizes viewing and understanding mappings ('comprehensive view of all configured Ethernet to VCG mappings at your fingertips'), suggesting that while it's a POST, it might be used to initiate a configuration change or perhaps a query that triggers configuration updates based on specific criteria. The 'No response body' indicates that success might be conveyed via HTTP status codes, and further details, if any, would need to be retrieved via other endpoints. For specific configuration changes, users should refer to documentation on how HTTP REST-API Configuration is performed within the system, as mentioned in Context Rank 3, which executes configuration changes using HTTP(S) URL, Headers, Forms, or RAW JSON content. The input for such operations would typically involve parameters related to Ethernet ports, VCGs, and potentially VLANs (as mentioned in Context Rank 4 and 5 for Ethernet Services)."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "IT Operations Personnel"], "primary_use_case": "To manage and configure Ethernet services, specifically mapping Ethernet ports to Virtual Concatenation Groups (VCGs) within a network node, to ensure a clear understanding of traffic routing and facilitate configuration changes."}, "content_for_embedding": "This API endpoint facilitates the management and configuration of Ethernet services, specifically focusing on the mapping of Ethernet ports to Virtual Concatenation Groups (VCGs) within a network node. It provides a comprehensive view of these configurations, crucial for understanding and managing traffic routing. While primarily used for creating or updating configurations, it supports various operations related to Ethernet to VCG mappings, ensuring clear understanding of traffic flow and enabling configuration changes.", "semantic_keywords": ["Ethernet Services", "Network Configuration", "Traffic Routing"], "ontology_classification": {"features": ["topology_view_display", "services_integration_(from_edge)", "topology_configuration_editing"], "primary_module": "topology", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/ethernet-services-paths/", "method": "GET", "details": {"operationId": "ux_common_services_services_ethernet_services_paths_retrieve", "description": "This GET endpoint leverages the Django Rest Framework's (DRF) ModelViewSet adaptation to retrieve information about Ethernet services paths. It provides a comprehensive view of how specific Ethernet ports are associated with Virtual Circuit Groups (VCGs), ensuring a clear understanding of traffic routing within network nodes. This functionality is crucial for network diagnosis, offering a detailed perspective on configured Ethernet to VCG mappings at a granular level. While similar to a command execution template for network diagnosis, this endpoint specifically focuses on the mapping and routing of Ethernet services.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint contributes to network diagnosis tasks by providing a detailed view of VCG and Ethernet services traversing through specific network nodes. It is particularly relevant for understanding service types, source and destination points, and associated VLAN IDs for Ethernet services. Although the core functionality uses a DRF ModelViewSet adaptation, its output feeds directly into the network diagnosis framework, allowing for comprehensive health checks and troubleshooting related to Ethernet service paths and their VCG mappings. The API call is primarily for fetching data and, as such, does not require a request body. The response provides the details of the Ethernet service paths."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Network Engineer", "IT Support"], "primary_use_case": "To retrieve detailed information about Ethernet services paths and Virtual Circuit Group (VCG) mappings for network diagnosis, health checks, and troubleshooting of traffic routing within network nodes."}, "content_for_embedding": "This GET endpoint retrieves comprehensive information about Ethernet services paths and how specific Ethernet ports are associated with Virtual Circuit Groups (VCGs). It provides a detailed view of traffic routing within network nodes, crucial for network diagnosis, health checks, and troubleshooting. The data includes service types, source and destination points, and associated VLAN IDs for Ethernet services. This functionality feeds directly into the network diagnosis framework, offering a granular perspective on configured Ethernet to VCG mappings.", "ontology_classification": {"features": ["services_integration_(from_edge)", "trace_test", "diagnosis_tools"], "primary_module": "topology", "confidence_score": 0.9}, "semantic_keywords": ["Ethernet Services", "Traffic Routing", "Network Diagnosis"]}}, {"path": "/ux/common/services/services/fetch-status/", "method": "GET", "details": {"operationId": "ux_common_services_services_fetch_status_retrieve", "description": "This endpoint, adapted from DRF ModelViewSet, is used to fetch the status of various services or items within the system. It is designed to provide real-time status updates, such as 'Open' or 'New' for different scenarios. The endpoint is crucial for displaying the current state of services as listed in views like 'Service Name' and 'Status' tables. It aligns with the system's capability to show status for tickets, services, and other categorized items, ensuring that the user interface can accurately reflect their current state.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically retrieves status information. While various contexts mention the ability to change or update status, this particular GET endpoint focuses solely on fetching the current status. It does not accept any parameters or request body for filtering or modification, implying it might provide a comprehensive list of statuses or a generalized status retrieval for a specific, pre-determined context. Given the path '/ux/common/services/services/fetch-status/', it likely retrieves the status of common services. The documentation explicitly states 'No response body', which is unusual for a GET request meant to fetch data. This might imply the status is returned via headers or that 'No response body' refers to the request body, not the response. However, assuming it means no response body, its utility for fetching data is curtailed. This could be a misinterpretation of 'response_description' from the original API spec or implies the response is handled differently, outside a conventional JSON body."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Desk Agent", "End-user", "System Monitor"], "primary_use_case": "To fetch and display the current operational status of various services, tickets, and other categorized items within the system, providing real-time updates for user interfaces and monitoring purposes."}, "content_for_embedding": "This API endpoint retrieves the current status of various services, tickets, and other categorized items within the system. It provides real-time status updates, such as 'Open' or 'New', enabling the user interface to accurately reflect their current state. This GET endpoint is crucial for displaying the operational status of different entities.", "ontology_classification": {"features": ["ticket_state_&_status_management", "ticket_monitoring", "ticket_tracking", "sla_monitoring_&_management"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Status", "Retrieval", "Monitoring"]}}, {"path": "/ux/common/services/services/filter-options/", "method": "GET", "details": {"operationId": "ux_common_services_services_filter_options_retrieve", "description": "This endpoint provides various filter options available within Infraon Infinity, which can be applied to widgets on dashboards to filter displayed data. It functions as an adaptation of a DRF ModelViewSet, retrieving a comprehensive list of customizable filters such as Asset ID, IP Address, Device Type, Asset Type, IT Asset Status, Location Name, and more. These filters are essential for refining data views related to services, assets, and other operational elements within the system.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is designed to return the available filter options. While the API specification states 'No response body', it's inferred from the context that it will return a list of filter types and perhaps associated values (e.g., for asset tags like IT-Asset, Samsung, TAG1). It is commonly used in conjunction with filtering mechanisms for services, categories, and catalogs. For instance, when adding or configuring resources, users can select a category and then apply conditions using these filter options. Developers should be aware that the output of this endpoint will drive the available choices in UI elements for filtering various data points across the Infraon Infinity platform, including service views and catalog management."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "End User"], "primary_use_case": "To provide a comprehensive list of customizable filter options for refining data views across various modules like dashboards, services, and assets within the Infraon Infinity platform."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of available filter options within Infraon Infinity. These options, such as Asset ID, IP Address, Device Type, and Asset Type, are crucial for dynamically refining and filtering displayed data on dashboards, service views, and other operational elements. It provides the configurable choices that drive UI elements for data filtering across the platform, enabling users to customize their data views.", "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)", "tag_management", "service_management_(catalogue_configuration)", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Filter", "Configuration", "Retrieval"]}}, {"path": "/ux/common/services/services/get-olt-details/", "method": "GET", "details": {"operationId": "ux_common_services_services_get_olt_details_retrieve", "description": "This GET endpoint leverages a DRF ModelViewSet adaptation to retrieve detailed information specifically about OLT (Optical Line Terminal) devices. The response provides no explicit body but focuses on furnishing device details, inventory information, and other essential properties. The retrieved data includes basic details, additional properties, Custom Fields, and a Health Summary, similar to the information available in device sub-views. Key details provided are Hostname, Device Type, Tags, Asset ID, IP Address, Make, Active Version, CI Name, Managed EMS IP, Managed EMS Name, and Model, which are crucial for detailed device management and monitoring.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates 'No response body', the context strongly suggests that detailed device information is provided in the response. This endpoint is primarily for viewing comprehensive OLT device details. The output will likely be structured to present inventory data for the specific OLT device, similar to how device details are presented in a user interface. There are no request parameters or body required for this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Technicians"], "primary_use_case": "To retrieve comprehensive and detailed information about Optical Line Terminal (OLT) devices, including their inventory, health summary, and various properties, for effective device management and monitoring."}, "content_for_embedding": "This API endpoint is designed to retrieve detailed information about OLT (Optical Line Terminal) devices. It provides comprehensive device details, inventory information, and other essential properties such as Hostname, Device Type, Tags, Asset ID, IP Address, Make, Active Version, CI Name, Managed EMS IP, Managed EMS Name, and Model. The response also includes Custom Fields and a Health Summary, similar to what is available in device sub-views. This endpoint is crucial for detailed device management and monitoring, allowing users to view comprehensive OLT device details and structured inventory data.", "semantic_keywords": ["OLT details", "Device details", "Inventory information"], "ontology_classification": {"features": ["inventory_data_collection", "customizable_asset_properties_and_fields", "real-time_asset_performance_monitoring", "software_inventory_discovery", "ci_relationship_management_(cmdb)", "asset_search_and_filtering", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/common/services/services/get-vcg/", "method": "GET", "details": {"operationId": "ux_common_services_services_get_vcg_retrieve", "description": "This endpoint provides a detailed view of VCG (Virtual Circuit Group) and Ethernet services traversing through a specific network node. The information is typically displayed in a table format, including details such as VCG/Ethernet Service ID, Source (node and port information), Destination (node and port information), and Type (e.g., VCG-64, VCG-4). It acts as an adaptation of a DRF ModelViewSet, querying and presenting data related to these services. This API is crucial for understanding traffic routing within the node and analyzing device configurations. It can be particularly useful for identifying how specific Ethernet ports are associated with corresponding VCGs.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically retrieves VCG details which are critical for network understanding. While the API specification does not list any parameters, the context suggests that information about vendor devices, model details, and series details might be relevant in broader service inquiries related to network devices. Additionally, the ability to export data as JSON or CSV/XLS, as well as importing templates via JSON, suggests a broader ecosystem for managing and interacting with network configurations and service templates. This API likely forms a part of a larger system that allows for comparison of device configurations and understanding service flows."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "Operations Teams", "Support Personnel"], "primary_use_case": "To provide a detailed view and analysis of Virtual Circuit Group (VCG) and Ethernet services, enabling network administrators and engineers to understand traffic routing, device configurations, and service flows within specific network nodes."}, "content_for_embedding": "This API endpoint retrieves detailed information about Virtual Circuit Group (VCG) and Ethernet services traversing through a specific network node. It provides a comprehensive view of service IDs, source and destination node/port information, and service types (e.g., VCG-64, VCG-4). This data is crucial for understanding traffic routing, analyzing device configurations, and identifying associations between Ethernet ports and VCGs within the network. It supports the discovery of deployed trails and circuits, offering insights into network functionality, performance, and connectivity. The information is typically presented in a table format and can be part of a larger system for managing network configurations and service templates, with potential for data export.", "ontology_classification": {"features": ["topology_view_display", "node_inventory_details", "edge/connection_details", "services_integration_(from_edge)"], "primary_module": "topology", "confidence_score": 0.9}, "semantic_keywords": ["Traffic Routing", "Ethernet Services", "Circuit Discovery"]}}, {"path": "/ux/common/services/services/get_vcg_port/", "method": "GET", "details": {"operationId": "ux_common_services_services_get_vcg_port_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System integrators", "Developers"], "primary_use_case": "To retrieve detailed configuration and status information for a Virtual Circuit Group (VCG) port within the Infraon system, enabling network monitoring, troubleshooting, and management."}, "content_for_embedding": "This API is designed to retrieve detailed information about a Virtual Circuit Group (VCG) port within the Infraon system. It serves as a crucial endpoint for accessing specific network port configurations and their current status, enabling network administrators and IT operations teams to monitor and manage network infrastructure effectively. The API facilitates the retrieval of essential data for network analysis and troubleshooting.", "ontology_classification": {"features": ["network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Port Status", "Network Configuration", "Configuration retrieval"]}}, {"path": "/ux/common/services/services/gpon-services/", "method": "GET", "details": {"operationId": "ux_common_services_services_gpon_services_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Network engineers", "Developers"], "primary_use_case": "To retrieve detailed information about GPON (Gigabit Passive Optical Network) services within the network."}, "content_for_embedding": "This API allows for the retrieval of specific GPON (Gigabit Passive Optical Network) service details. It provides a mechanism to fetch comprehensive information about these network services, likely for display in a user interface or for integration with other systems that require real-time or historical data on GPON services. The operation is a standard data retrieval (GET) for service instances.", "semantic_keywords": ["Service Details", "Retrieval", "Network Configuration"], "ontology_classification": {"features": ["services_integration_(from_edge)", "node_inventory_details", "topology_view_display"], "primary_module": "topology", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/multiple-trigger-service/", "method": "GET", "details": {"operationId": "ux_common_services_services_multiple_trigger_service_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "System Integrator"], "primary_use_case": "To retrieve and view the configuration and details of multiple trigger services within the system."}, "content_for_embedding": "This API endpoint is designed to retrieve comprehensive details and configurations related to a 'multiple-trigger-service'. As a GET operation, it provides read-only access to the current state, parameters, and setup of various automated triggers or services within the system. This allows users to gain insights into how these services are configured and operating, facilitating monitoring, auditing, and troubleshooting of automated workflows and notifications.", "semantic_keywords": ["Details retrieval", "Configuration", "Notification Trigger Configuration"], "ontology_classification": {"features": ["notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/node-list/", "method": "GET", "details": {"operationId": "ux_common_services_services_node_list_retrieve", "description": "This GET endpoint, an adaptation of the DRF ModelViewSet, is designed to retrieve a list of 'nodes' or 'node devices' within the system. While the specific content of the 'node list' is not explicitly detailed in the provided API specification, contextual information suggests these nodes are likely associated with network infrastructure elements such as Routers, SDH MUX, PDH MUX, and potentially Firewall devices. The API enables viewing details about these nodes, which can include Host Name, IP Address, Make, Model, Device Type, and EMS Name, among others. The description 'Adaptation of DRF ModelViewSet' implies it follows standard Django REST Framework patterns for listing multiple instances of a resource, likely supporting pagination and filtering capabilities typical of such an implementation, though no parameters are specified here.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided contexts, 'nodes' are critical components within the system, potentially representing network devices (e.g., SDH MUX, Routers). The system appears to manage and display various details about these devices, and their status can be indicated by color (e.g., Blue, Grey). Although the API specification lists no parameters, a typical DRF ModelViewSet for a list operation might implicitly support query parameters for filtering (e.g., by device type, status, or location) and pagination (e.g., `page`, `page_size`). Users can export data in JSON format for backup or migration purposes for similar 'templates' and 'services' within the system, suggesting that the node list data could also be consumable for similar programmatic uses. There is no request body for this GET endpoint, and the response is described as having 'No response body' in the specification, which contradicts the purpose of a GET endpoint retrieving data. This might be an error in the original specification's `response_description` field, as a successful GET request to `/node-list/` is expected to return a list of nodes. It's likely intended to return a JSON array of node objects."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Technicians", "Developers"], "primary_use_case": "To retrieve a comprehensive list of network devices (nodes) and their detailed information for inventory management, network monitoring, and troubleshooting."}, "content_for_embedding": "This GET API endpoint provides a comprehensive list of network \"nodes\" or \"node devices,\" which are critical infrastructure elements such as Routers, SDH MUX, PDH MUX, and Firewall devices. It allows for the retrieval of detailed information including Host Name, IP Address, Make, Model, Device Type, EMS Name, and operational status (indicated by color). Designed as an adaptation of DRF ModelViewSet, it implicitly supports filtering and pagination, making it an essential tool for network inventory, asset management, monitoring, and troubleshooting.", "semantic_keywords": ["Asset Management", "Inventory Retrieval", "Network Devices"], "ontology_classification": {"features": ["unified_asset_repository", "inventory_data_collection", "asset_search_and_filtering", "real-time_asset_performance_monitoring", "network_topology_visualization", "software_inventory_discovery"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/port-list/", "method": "GET", "details": {"operationId": "ux_common_services_services_port_list_retrieve", "description": "Retrieves a comprehensive list of all available ports within the system. This endpoint is designed to provide detailed information for each port, including its status, optical values, utilization, and associated properties like Shelf Number, Slot Number, Card Name, Port Name, Port State, SFP Installed status, and SFP Type. It acts as an adaptation of a DRF ModelViewSet, facilitating access to granular port data for various services and analysis purposes.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for functionalities such as viewing port information (e.g., status, optical values as highlighted in Context Rank 2). The returned data can significantly aid in understanding port utilization (Context Rank 5) across different card levels and port types, and identifying cross connections (Context Rank 3). This list is fundamental for managing and monitoring network assets and services where port-level details are required. While the API specification states 'No response body' for its description, the context clearly indicates that a list of port details would be returned, including various attributes relevant to port identification and state."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "System integrators", "Monitoring engineers", "IT operations personnel"], "primary_use_case": "Retrieving detailed port information for network asset management and monitoring."}, "content_for_embedding": "This API retrieves a comprehensive list of all available ports within the system, providing detailed information for each port, including its status, optical values, utilization, Shelf Number, Slot Number, Card Name, Port Name, Port State, SFP Installed status, and SFP Type. It facilitates access to granular port data for various services and analysis purposes, crucial for viewing port information and understanding port utilization across different card levels and port types. This list is fundamental for managing and monitoring network assets and services where port-level details are required, aiding in analyzing total ports available, currently in use, unused ports, and utilized capacity.", "semantic_keywords": ["Port Status", "Inventory Retrieval", "Asset Management"], "ontology_classification": {"features": ["unified_asset_repository", "inventory_data_collection", "asset_search_and_filtering", "network_topology_visualization"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/service-activate-deactivate/", "method": "GET", "details": {"operationId": "ux_common_services_services_service_activate_deactivate_retrieve", "description": "This API endpoint, an adaptation of Django REST Framework's ModelViewSet, is primarily used to activate or deactivate services within the Infraon system. It correlates with the user interface actions where administrators or users can explicitly 'Activate' or 'Deactivate' a service using corresponding buttons or links in a service management view. The endpoint facilitates toggling the operational status of a service, which is distinct from simply toggling a template's public/private status.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically handles the activation and deactivation of services. Based on the context, 'Activate' and 'Deactivate' are direct actions available on a service. While the API specification provides minimal details on parameters or request body, the method being 'GET' suggests that the activation/deactivation might be driven by path parameters or query parameters (which are not detailed in the provided spec), or it might be part of an internal system action rather than a direct user-invoked GET request for state change. However, the presence of 'Activate' and 'Deactivate' actions in the user guide, directly associated with services, strongly indicates this endpoint's purpose. It does not appear to have a response body, indicating a simple status code might be returned for success or failure."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Manager", "User"], "primary_use_case": "To activate or deactivate services within the Infraon system, enabling administrators and users to manage the operational status of services."}, "content_for_embedding": "This API endpoint is designed to activate or deactivate services within the Infraon system. It facilitates the toggling of a service's operational status, directly correlating with user interface actions for service management. This functionality is distinct from managing the public/private status of service templates.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Management", "Activate Service", "Deactivate Service"]}}, {"path": "/ux/common/services/services/service-confirmation/", "method": "POST", "details": {"operationId": "ux_common_services_services_service_confirmation_create", "description": "This endpoint, a POST request to `/ux/common/services/services/service-confirmation/`, is designed for the confirmation and submission of services within the Infraon system. It plays a crucial role in finalizing the addition of a service under a selected category. While adapting a DRF ModelViewSet, its primary function is to process the confirmation and subsequent submission of a service, making it available for viewing and management. This process is integral to defining, reviewing, and refining service/product aspects before they are 'Published' and made available on the self-service portal.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Based on the provided API specification, this endpoint does not accept parameters or a request body, and it returns no response body, suggesting it might act as a trigger for a server-side process that confirms the service submission. The context indicates that once a service is confirmed and submitted, it is added under its respective category. Services can be edited and deleted post-submission. It is recommended that services remain in a 'New' state and 'Draft' status until fully defined and ready for publication. The 'Published' status is required for a service to be operational and visible on the self-service portal."}, "llm_generated": {"business_context": {"user_personas": ["Service Administrators", "IT Managers", "Catalog Managers"], "primary_use_case": "To finalize the creation and submission of a new service within the Infraon system, making it available for viewing, management, and eventual publication on the self-service portal."}, "content_for_embedding": "This API endpoint, a POST request, is used to confirm and submit a service that has been defined within the Infraon system. It acts as a trigger to finalize the addition of a service under a selected category, transitioning it from a draft state to a state where it can be managed and eventually published to the self-service portal. The API does not accept a request body or parameters and returns no response, indicating it initiates a server-side process for service finalization.", "semantic_keywords": ["Add", "Service Management", "Service Catalogue"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/service-customer-details/", "method": "GET", "details": {"operationId": "ux_common_services_services_service_customer_details_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Support Agents", "Administrators", "Developers"], "primary_use_case": "To retrieve detailed information about customers associated with services, enabling efficient service management and customer support."}, "content_for_embedding": "This API retrieves comprehensive details about service customers. It is a GET endpoint designed to fetch customer-specific information within the context of services, supporting operations like customer support, service request fulfillment, and data analysis. The API is secured using API Key authentication.", "semantic_keywords": ["Details retrieval", "Customer details", "Service details"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "requester_dropdown_(auto-fill)", "past_interactions_display_(requester_history)"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/service-locations/", "method": "GET", "details": {"operationId": "ux_common_services_services_service_locations_retrieve", "description": "This GET endpoint provides a view of service locations, adapting the functionalities of a DRF (Django Rest Framework) ModelViewSet. It is designed to retrieve information related to how services are categorized and deployed within the Infraon system. This aligns with the broader Service Catalogue capabilities that allow switching between cards and grids for service views, and managing catalogs, categories, and services through editing and deletion. The endpoint can be used to understand the structure of services and their relationships within the system, such as how dependent categories and services are affected if a catalog is deleted, or how services are categorized within a broader service classification.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates 'No response body', the context suggests that this endpoint is likely used to retrieve an underlying structure of service locations, possibly to render a service view or to support export functionalities (like 'Export as JSON' for templates). It's crucial for developers to ensure that the method (GET) is used for data retrieval only and to anticipate a response that, despite the 'No response body' note, would represent the service location data in a structured format, enabling subsequent operations on services such as editing, deleting, or viewing detailed information. The endpoint plays a role in managing structured content for the self-service framework, facilitating the organization and display of products and services."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Developer"], "primary_use_case": "To retrieve and understand the structure of service locations and their categorization within the Service Catalogue for display and management purposes."}, "content_for_embedding": "This GET API endpoint retrieves information about service locations and their categorization within the Infraon system's Service Catalogue. It supports the broader Service Catalogue functionalities, enabling users to view, manage (edit, delete), and understand the relationships between services, categories, and catalogs. This endpoint is crucial for rendering service views, supporting content management for the self-service framework, and facilitating the organization and display of products and services.", "semantic_keywords": ["Service Catalogue", "Service Classification", "Location Management"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "location_management", "multiple_data_display_views_(grid_&_card)", "self-service_portal_integration", "asset_association_&_classification"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/service-nodes-coordinates/", "method": "POST", "details": {"operationId": "ux_common_services_services_service_nodes_coordinates_create", "description": "This endpoint, adapting the DRF ModelViewSet, is designed to manage and retrieve coordinate data for service nodes within the Infraon system. It is specifically relevant for views such as the 'Map View' where the geographical placement and status of nodes are critical. These nodes can represent various devices like SDH MUX, Routers, and Firewalls, each with associated details such as Host Name, IP Address, Make, Model, Device Type, and Firmware Version. The colors of the nodes in the map view indicate their operational status based on severity. This API is crucial for visualizing the network topology and monitoring the health and location of individual service components.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates 'No response body' and 'No parameters' directly, the context implies that this endpoint is likely involved in submitting or retrieving data related to node coordinates, possibly for rendering on a map. Given its adaptation from DRF ModelViewSet, it likely supports standard CRUD operations (Create, Retrieve, Update, Delete) for node coordinate data. Future enhancements might include specific request body schemas for creating/updating coordinates and detailed response schemas for retrieval, possibly including node attributes like Host Name, IP Address, and status indicators. It is closely tied to the visualization of service nodes in a 'Map View' as highlighted in Context Ranks 2, 3, and 5."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Integrator"], "primary_use_case": "To manage and retrieve geographical coordinate data for service nodes, enabling visualization of network topology and monitoring of device health and location within a map view."}, "content_for_embedding": "This API endpoint is designed to manage and retrieve coordinate data for service nodes within the Infraon system. It is primarily used for visualizing network topology and monitoring the health and geographical location of individual service components in a \"Map View\". The nodes represent various devices like SDH MUX, Routers, and Firewalls, with associated details such as Host Name, IP Address, Make, Model, Device Type, and Firmware Version. The colors of these nodes on the map indicate their operational status based on severity. This API supports CRUD operations for node coordinate data, crucial for rendering on a map and understanding the network layout.", "ontology_classification": {"features": ["topology_view_display", "node_status_visualization_(color-coded)", "node_inventory_details", "node_location_&_neighbor_display"], "primary_module": "topology", "confidence_score": 0.95}, "semantic_keywords": ["Topology", "Network Devices", "Location"]}}, {"path": "/ux/common/services/services/service-ont-olt-info/", "method": "GET", "details": {"operationId": "ux_common_services_services_service_ont_olt_info_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Service managers"], "primary_use_case": "To retrieve detailed information about Optical Network Terminals (ONT) and Optical Line Terminals (OLT) for network inventory, monitoring, and management purposes."}, "content_for_embedding": "This API is designed to retrieve comprehensive information regarding Optical Network Terminals (ONT) and Optical Line Terminals (OLT) within the network infrastructure. It provides access to essential device details, inventory data, and service-related information for these critical network components. This enables users to perform network inventory management, monitor device status, and facilitate troubleshooting by providing on-demand access to specific ONT and OLT data.", "ontology_classification": {"features": ["node_inventory_details"], "primary_module": "topology", "confidence_score": 1}, "semantic_keywords": ["OLT details", "Device details", "Network Inventory"]}}, {"path": "/ux/common/services/services/service-profiles/", "method": "GET", "details": {"operationId": "ux_common_services_services_service_profiles_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "System Integrator"], "primary_use_case": "To retrieve detailed information about service profiles within the Infraon system for display or integration purposes."}, "content_for_embedding": "This API allows for the retrieval of service profiles within the Infraon system. It uses a GET method to fetch data, likely for display in a user interface or for integration with other applications. Authentication is handled via an API Key. The operation is designed to provide detailed information about existing service profiles.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Profile", "Retrieval", "Service Management"]}}, {"path": "/ux/common/services/services/service-related/", "method": "GET", "details": {"operationId": "ux_common_services_services_service_related_retrieve", "description": "This endpoint is used to retrieve a paginated list of 'Services profiles' associated with the current organization, authorized by the provided token. Services profiles are an integral part of the Service Catalogue, which serves as the backend for managing and defining all products and services offered to end-users, accessible via the business catalog. These profiles enable administrators or catalogue managers to define items like email creation, login credentials, or laptop servicing, which can then be viewed, wish-listed, and requested by internal and external end-users. The service catalogue is designed to maintain a list of components offered as services to the end-user. The API allows for sorting of the retrieved profiles based on specified criteria and order.", "summary": "Gets a list of Services profiles", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "The Service Catalogue is a key component of service management, providing a centralized system for defining and managing service offerings. Each 'Services profile' likely corresponds to a specific service or product available for request. \n\nParameters:\n- `items_per_page`: Specifies the number of service profiles to return per page. This is a mandatory integer parameter.\n- `page`: Indicates the specific page number of results to retrieve. This is a mandatory integer parameter.\n- `reverse`: Optional boolean parameter to control the sorting order. If true, results are sorted in reverse order.\n- `sort`: Optional string parameter to specify the key by which the service profiles should be sorted (e.g., related to the service name or creation date)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager"], "primary_use_case": "Retrieving paginated and sortable lists of service profiles from the Service Catalogue, enabling administrators and catalogue managers to manage and define services offered to end-users."}, "content_for_embedding": "This API retrieves a paginated and sortable list of 'Services profiles' from the Service Catalogue. These profiles are used by administrators and catalogue managers to define and manage products and services offered to end-users, such as email creation or laptop servicing. The Service Catalogue acts as a backend for managing these service offerings.", "semantic_keywords": ["Service Profile", "Service Catalogue", "Pagination"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "multiple_view_options"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/services/", "method": "GET", "details": {"operationId": "ux_common_services_services_services_retrieve", "description": "This GET endpoint leverages the Django REST Framework (DRF) ModelViewSet adaptation to retrieve information about services within the Infraon platform. It is designed to facilitate the display and management of services, offering the ability to view services by category, and switch between card and grid views. This endpoint is crucial for displaying the Service Catalogue, which details products or services. It allows users to see all catalogues within a category and supports the overall self-service framework by providing structured content about services.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates 'No response body', the context suggests that this endpoint is used to populate service views, indicating a response that details service information. Based on the context, retrieved service data can be categorized, edited, or deleted via respective icons on the UI, implying that the API provides the necessary data for these operations. The naming convention 'services/services/services/' suggests a hierarchical or detailed view of services, possibly allowing drill-down into specific service details or classifications. The retrieved services might be part of an export function (like 'Export as JSON') or used for displaying service templates."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Catalogue Manager", "Requester (End-user)"], "primary_use_case": "This API retrieves and displays comprehensive information about services within the Infraon Service Catalogue, enabling users to view, categorize, and manage service offerings effectively. It supports the overall self-service framework by providing structured content about available products and services."}, "content_for_embedding": "This API endpoint retrieves detailed information about services available in the Infraon Service Catalogue. It supports displaying services in various formats (card and grid views) and allows filtering by category, facilitating the management and viewing of service offerings for administrators, catalogue managers, and end-users within a self-service framework. The data retrieved supports operations like editing, deleting, and exporting service details.", "ontology_classification": {"features": ["knowledge_access_&_utilization", "user-friendly_content_presentation", "search_functionality", "seamless_navigation", "content_tagging", "multiple_content_types_support", "article_sorting_options", "service_catalog_integration_for_categorization"], "primary_module": "knowledge_base", "confidence_score": 0.9}, "semantic_keywords": ["Service Catalogue", "Service Listing", "Service Retrieval", "Self-service", "Service Management", "Content Display"]}}, {"path": "/ux/common/services/services/services/", "method": "POST", "details": {"operationId": "ux_common_services_services_services_create", "description": "This endpoint provides functionality for managing services within the Infraon platform. It is an adaptation of the Django Rest Framework (DRF) ModelViewSet, indicating it likely supports standard CRUD (Create, Retrieve, Update, Delete) operations for service resources. Based on the provided context, this includes actions such as adding new services, viewing existing ones, editing service details, and deleting services or associated categories and catalogs. Service management encompasses details like service name, description, categorization, and classification (e.g., based on desktop brand or servicing needs). The API is integral to the Service Catalogue, allowing users to create and publish detailed service offerings for a self-service framework.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The API facilitates the management of services, classifications, and categories. When a catalog is deleted, all dependent categories and services are also deleted. Similarly, deleting a category results in the deletion of all its dependent services. Users can input new service templates using various methods including importing JSON, importing text, or manually entering details. The 'description' field for a service is typically view-only after initial creation. While not explicitly detailed in the specification, the DRF ModelViewSet adaptation implies methods for creating, retrieving, updating, and deleting service entities. Fields marked with an asterisk (*) in the user guide are typically mandatory for service creation and updates."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "catalogue manager"], "primary_use_case": "To enable administrators and catalogue managers to define, create, update, and delete service offerings within the Infraon Service Catalogue, facilitating a comprehensive self-service framework for end-users."}, "content_for_embedding": "This API manages service resources within the Infraon platform's Service Catalogue. It supports CRUD operations (Create, Retrieve, Update, Delete) for services, categories, and classifications. Users can define service details such as name, description, categorization (catalogue, category, classification), and publish them for the self-service portal. It also handles the deletion of dependent categories and services when a catalogue or category is removed. The API allows for various methods of inputting service templates, including JSON, text, or manual entry, and supports the management of service status for availability on the self-service portal.", "semantic_keywords": ["Service Management", "Service Catalogue", "Service Creation"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/services/services/stm-jklm/", "method": "GET", "details": {"operationId": "ux_common_services_services_stm_jklm_retrieve", "description": "This endpoint provides access to the 'stm-jklm' service, leveraging an adaptation of the Django Rest Framework (DRF) ModelViewSet. While the specific function of 'stm-jklm' is not detailed, closely related contexts suggest it might be involved in managing aspects of service templates or configurations. The broader context of 'services' in the path implies its role in the overall service management framework. Given the context about exporting and importing JSON for service templates, this endpoint could be related to retrieving or managing such templates, possibly in a JSON format.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint uses a GET method and is expected to have no response body based on the API specification. However, given the context regarding exporting JSON for templates, it's possible its current specification is a placeholder or part of a larger ViewSet where other methods (e.g., POST for import) handle data exchange. Therefore, developers should consult the full DRF ModelViewSet documentation for expected behaviors like data retrieval or listing, even if 'No response body' is specified for this particular GET operation, as its primary purpose might be to trigger a backend process. The path `/ux/common/services/services/stm-jklm/` suggests it is part of the common services within the UX layer."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Operator", "Developer"], "primary_use_case": "To retrieve or manage service templates, which standardize configurations and operations for network devices."}, "content_for_embedding": "This API endpoint, `/ux/common/services/services/stm-jklm/`, is a GET operation designed to retrieve or manage service templates. These templates are crucial for standardizing configurations and operations across network devices within the NCCM network. While the API specification indicates no response body, the broader context suggests it's part of a ModelViewSet for service template management, implying its role in data retrieval or listing of service templates, potentially in JSON format for export or import. It supports the overall service management framework within the UX layer.", "semantic_keywords": ["Service Template", "Service Management", "Retrieval"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/topology-service/", "method": "GET", "details": {"operationId": "ux_common_services_services_topology_service_retrieve", "description": "This API endpoint, adapted from the DRF ModelViewSet, is designed to retrieve comprehensive information related to the network topology. It allows users to visualize how various nodes, devices, and connections are physically or logically arranged within the network. This includes displaying the complete topology of all connected devices and their relationships, with connections configured to change colors automatically based on faults or thresholds. Users can also obtain inventory details by clicking on specific nodes. The service is accessible under 'UX Common Services' and plays a crucial role in understanding and managing network infrastructure.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Topology View functionality within the system allows for displaying the arrangement of network components. This endpoint is instrumental for viewing network health, identifying faults, and understanding device interconnections. While the API specification refers to it as an 'Adaptation of DRF ModelViewSet', the primary function based on the context is clearly related to presenting network topology data. Users interacting with the UI built on this API would be able to see node details like Host Name, IP Address, Make, Model, Device Type, EMS Name, Firmware Version, Region, State, and City. The connections are visually depicted, and their colors signify network status related to faults or thresholds. There is no request body for this GET request, and no specific parameters are listed in the provided API specification, suggesting it might retrieve a default or system-wide topology view."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Network Engineers"], "primary_use_case": "Retrieving and visualizing network topology for health monitoring and infrastructure management."}, "content_for_embedding": "This API retrieves comprehensive network topology information, allowing users to visualize the physical and logical arrangement of nodes, devices, and connections. It displays the complete topology, with connections color-coded based on faults or thresholds to indicate network health. Users can also obtain detailed inventory information by clicking on specific nodes, including host name, IP address, device type, and firmware version. This service is crucial for understanding and managing network infrastructure.", "ontology_classification": {"features": ["topology_view_display", "connection_status_visualization_(color-coded)", "node_inventory_details"], "primary_module": "topology", "confidence_score": 1}, "semantic_keywords": ["Topology", "Retrieval", "View"]}}, {"path": "/ux/common/services/services/total-paths/", "method": "GET", "details": {"operationId": "ux_common_services_services_total_paths_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Developers"], "primary_use_case": "To retrieve an overview or count of service-related paths within the system for monitoring, auditing, or configuration purposes."}, "content_for_embedding": "This API provides a mechanism to retrieve the total count or a comprehensive list of defined paths for various services within the Infraon platform. It serves as an essential tool for system administrators and developers to monitor the architectural landscape of services, ensure proper endpoint configuration, and facilitate auditing of service access points. The GET method indicates its role in data retrieval, offering insights into the system's operational structure.", "semantic_keywords": ["API Registration", "Service Management", "Retrieval"], "ontology_classification": {"features": ["api_registration", "service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/trigger-service/", "method": "GET", "details": {"operationId": "ux_common_services_services_trigger_service_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Developer", "System Administrator", "Integrator"], "primary_use_case": "To programmatically initiate or activate a specific service or process within the system, enabling automation and integration with other applications."}, "content_for_embedding": "This API endpoint is a GET request to the `/ux/common/services/services/trigger-service/` path, designed to programmatically initiate or activate a specific service or process within the Infraon system. The operationId `ux_common_services_services_trigger_service_retrieve` and the absence of a response body for a successful 200 status indicate its primary function is to trigger an action rather than retrieve data. It utilizes API Key authentication for secure access, making it a key component for enabling automated workflows and system integrations.", "semantic_keywords": ["Service Trigger", "API Key", "Automation"], "ontology_classification": {"features": ["notification_trigger_configuration", "api_registration", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/services/services/update-service-status/", "method": "GET", "details": {"operationId": "ux_common_services_services_update_service_status_retrieve", "description": "This endpoint, adapted from a DRF ModelViewSet, is used to update the current status of a service. Users have the capability to modify the service status through this API, which is critical for managing change requests and service lifecycle within the system. The status is a key attribute alongside priority and service category, as outlined in the user guides.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The primary function of this endpoint is to facilitate changes to the 'Status' of a service. According to user guide contexts, the 'Status' displays the current status of the service and enables users to change it. This is particularly relevant for change requests where the status (e.g., New, Draft, Published) dictates the service's availability and progression. While the current API specification does not explicitly list parameters or a request body, based on the description, it is expected that a parameter for the service identifier and a payload for the new status would be required to perform the update. Services must be in 'Published' status to be available on the self-service portal, implying this endpoint would be crucial for moving services to an operational state."}, "llm_generated": {"business_context": {"user_personas": ["Service Administrators", "Service Managers", "IT Operations"], "primary_use_case": "Managing and updating the status of services within the system, crucial for service lifecycle progression and availability on the self-service portal."}, "content_for_embedding": "This API endpoint is used to update the current status of a service. It plays a critical role in managing the service lifecycle, allowing services to transition between states like 'New', 'Draft', and 'Published'. This functionality is essential for controlling service availability, particularly for making services operational and accessible via the self-service portal, and is often integrated into change request management processes.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Service Status", "Service Management", "Service Lifecycle"]}}, {"path": "/ux/common/services/services/update_vcg_port/", "method": "GET", "details": {"operationId": "ux_common_services_services_update_vcg_port_retrieve", "description": "Adaptation of DRF ModelViewSet", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Administrator"], "primary_use_case": "To retrieve the current configuration and details of a Virtual Circuit Group (VCG) port, enabling network and system administrators to prepare for subsequent updates or modifications to the port's settings."}, "content_for_embedding": "This API endpoint, identified by `/ux/common/services/services/update_vcg_port/` and accessed via a GET request, is designed to retrieve comprehensive details and the current configuration of a specific Virtual Circuit Group (VCG) port. This retrieval is a prerequisite for any planned updates or changes to the VCG port's settings, supporting network configuration management workflows. It provides the necessary data for network and system administrators to assess, plan, and execute modifications to network service ports.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Network Configuration", "Port Status", "Configuration Retrieval"]}}, {"path": "/ux/common/tag/tag/", "method": "GET", "details": {"operationId": "ux_common_tag_tag_list", "description": "This endpoint retrieves a paginated list of all tags within the current organization. Tags are fundamental simplified identification keywords used throughout Infraon to group various items or users. They facilitate quick categorization and filtering, and can be applied to assets (e.g., by brand, vendor, location), users (e.g., by team, skills, location), incidents, requests, and articles. This GET request allows for pagination and sorting of the tag list.", "summary": "Gets a list of tags", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Tag"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}, "description": ""}}, "additional_info": "Requests to this endpoint require both `items_per_page` and `page` query parameters to manage pagination. The `reverse` boolean parameter can be used to control the sorting order (ascending or descending), and the `sort` string parameter defines the key by which the results should be sorted. Tags are managed in the 'General Settings -> Tag Management module' and are crucial for functionalities such as controlling service availability through user tags or grouping requests."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "System User"], "primary_use_case": "To enable efficient categorization and filtering of various items (assets, users, incidents, requests, articles) within the system by providing access to a comprehensive list of predefined tags."}, "content_for_embedding": "This API retrieves a paginated and sortable list of all available tags within the organization. Tags are essential keywords used for categorizing and filtering various entities such as assets, users, incidents, requests, and articles. This endpoint supports pagination via `items_per_page` and `page` parameters, and allows sorting using `reverse` and `sort` parameters. Tags are centrally managed within the 'General Settings -> Tag Management module' of Infraon, enabling consistent identification and grouping across the platform.", "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Tags", "Pagination", "Tag Management"]}}, {"path": "/ux/common/tag/tag/", "method": "POST", "details": {"operationId": "ux_common_tag_tag_create", "description": "This endpoint facilitates the creation of new organizational tags within Infraon. Tags are simplified identification keywords used to group and categorize various items or users, such as assets, users, incidents, requests, and articles. This API allows for the programmatic addition of these tags, which are crucial for efficient data organization, filtering, and work allocation across multiple categories in Infraon.", "summary": "Creates a new tag ", "tags": ["Tag"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateTagSample": {"value": {"tag": "tag1", "type": "User"}, "summary": "Create Tag Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "When creating a new tag, the request body requires two key fields: `tag` (the name of the tag, e.g., 'Laptops', 'IT', 'India') and `type` (the category the tag belongs to, e.g., 'User', 'Asset', 'Expertise', 'Services', 'Incident', 'Requests'). The 'Type' field should align with the defined Tag Types within Infraon, as detailed in the 'Tag Types' section of the user guide. Once created, tags play a vital role in filtering and grouping, for example, enabling assignment of incidents to technicians based on matching tags (e.g., 'Laptop' tag for technicians and incidents). It's important to note that assigned tags cannot be deleted.", "parameters": [{"name": "tag", "in": "body", "description": "Inferred parameter: tag", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "body", "description": "Inferred parameter: type", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "This API facilitates the creation of new organizational tags within Infraon, which are used to group and categorize various items or users like assets, incidents, requests, and articles. This enables efficient data organization, filtering, and work allocation across the platform."}, "content_for_embedding": "This API creates new organizational tags in Infraon. These tags are keywords used to categorize and group various entities such as assets, users, incidents, requests, and articles. The API allows programmatic addition of tags, requiring a tag name and a tag type (e.g., 'User', 'Asset', 'Incident'). Tags are crucial for efficient data organization, filtering, and work allocation.", "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Tags", "Tag Management", "Add"]}}, {"path": "/ux/common/tag/tag/{id}/", "method": "GET", "details": {"operationId": "ux_common_tag_tag_retrieve", "description": "This endpoint retrieves the details of a specific tag given its unique identifier (ID). Tags are simplified identification keywords used within Infraon to group various items or users, enabling quick organization and filtering. They can be applied to assets, users, incidents, requests, articles, and more, serving as a flexible way to categorize and manage diverse entities across the platform.", "summary": "Gets a tag with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Tag"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "additional_info": "The `id` parameter is a mandatory path parameter representing the unique identifier of the tag to be retrieved. Tags are integral to Infraon's categorization system, used for purposes such as assigning incidents to specific technicians based on asset tags (e.g., 'Laptop', 'NY'), or controlling service availability for users based on user tags (e.g., 'HR'). Tag management, including their creation and predefined rules, is typically configured within the 'General Settings -> Tag Management module' in Infraon."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "IT Support Staff"], "primary_use_case": "To enable efficient categorization, organization, and filtering of various entities (assets, users, incidents, requests, articles) within Infraon by providing a mechanism to retrieve specific tag details. This supports quick access to relevant information and system-wide entity management."}, "content_for_embedding": "This API endpoint, `ux_common_tag_tag_retrieve`, allows for the retrieval of detailed information about a specific tag using its unique identifier (ID). Tags in Infraon serve as simplified identification keywords crucial for grouping and organizing diverse entities such as assets, users, incidents, requests, and articles. By providing access to tag details, this API facilitates efficient categorization, quick organization, and effective filtering across the platform. It is integral to Infraon's categorization system, supporting functionalities like assigning incidents based on asset tags or controlling service availability via user tags. Tag management, including their creation and predefined rules, is typically handled within the 'General Settings -> Tag Management module'.", "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Tags", "Retrieval", "Tag Management"]}}, {"path": "/ux/common/tag/tag/{id}/", "method": "PUT", "details": {"operationId": "ux_common_tag_tag_update", "description": "This endpoint is used to edit an existing tag within the Infraon platform for the current organization. Tags are simplified identification keywords used to categorize and group items or users, facilitating quick grouping and efficient management. They can be applied across various categories such as assets, users, incidents, requests, and articles. For instance, assets can be tagged by brand or location, while users can be tagged by team or skills. This operation allows for modification of these tags that are critical for organization and task management within the system.", "summary": "Edits the tag with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Tag"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Tag"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required and identifies the specific tag to be edited. The request body will conform to a serialized format. The `request_body_description` indicates that standard primitive fields like `StringField`, `IntField`, `BooleanField`, etc., are recognized. Compound fields like `ListField` and `DictField` are also supported, including nested serializers. The `ReferenceField` behaves like a `ForeignKey` in Django Rest Framework, and `EmbeddedDocumentField` similarly supports nested serialization. Generic fields such as `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled specifically. Fields related to files or binary data (`FileField`, `ImageField`, `BinaryField`) might not be fully supported. Edits to tags can be done via the respective icons in the UI, and it's important to note that assigned tags often cannot be deleted, implying that their properties can only be modified."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "System Configurators"], "primary_use_case": "To update and manage existing categorization tags used across the Infraon platform for various entities like assets, users, incidents, requests, and articles."}, "content_for_embedding": "This API endpoint facilitates the modification of existing tags within the Infraon platform. Tags serve as essential keywords for categorizing and grouping diverse items and users, including assets, incidents, requests, and articles. By allowing updates to these tags, the API ensures that the system's organizational structure remains accurate and adaptable, supporting efficient data management and retrieval across the platform.", "semantic_keywords": ["Tags", "Edit", "Tag Management"], "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/tag/tag/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_tag_tag_destroy", "description": "This endpoint facilitates the deletion of an existing tag within the current organization. Tags are simplified identification keywords used to group items or users within Infraon, applicable to assets, users, incidents, requests, or articles. This functionality is part of Tag Management, allowing for the removal of tags that might have been used to categorize things like assets by brand or users by team. It directly corresponds to the 'Untag' action or the ability to delete tags as mentioned in the user guides.", "summary": "Deletes the tag with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Tag"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter for this endpoint is required and identifies the specific tag to be deleted. It is important to note that 'Assigned tags cannot be deleted,' as per the user guide. This implies that if a tag is currently linked to any assets, users, or other items, its deletion will be prevented. Users can typically manage tags via respective icons in the UI, and this endpoint provides the programmatic equivalent for deleting such tags."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Staff", "Developer"], "primary_use_case": "This API allows for the programmatic deletion of existing tags within the organization, which are used to categorize and group various items like assets, users, incidents, requests, or articles. It is a core function for maintaining and cleaning up the system's categorization schema."}, "content_for_embedding": "This API endpoint, `DELETE /ux/common/tag/tag/{id}/`, is designed to delete a specific tag identified by its unique `id`. Tags are essential identification keywords used across Infraon to group entities such as assets, users, incidents, requests, and articles. This functionality is part of the broader Tag Management system, enabling users to remove tags that are no longer needed. A critical constraint is that assigned tags cannot be deleted, meaning if a tag is currently linked to any items, its removal will be prevented. This endpoint provides the programmatic equivalent to the \"Untag\" action or the UI-based tag deletion.", "semantic_keywords": ["Delete", "Tags", "Tag Management"], "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/tag/tag/check-tags-config/", "method": "GET", "details": {"operationId": "ux_common_tag_tag_check_tags_config_retrieve", "description": "This API endpoint, `/ux/common/tag/tag/check-tags-config/`, is used to check the configuration of various tags within the system. While the original description suggested it was for viewing or editing users, the higher-ranked contexts strongly indicate its purpose is related to 'tags'. Specifically, it likely pertains to 'User Tags' and 'Requester Tags' which are critical for controlling service availability and filtering. It may also involve checking configurations for request tags, which are predefined for grouping requests.", "tags": ["Tag"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "summary": "", "additional_info": "User tags and requester tags are utilized as filters to control service availability. For instance, HR services might be restricted to internal users by applying relevant tags, or region-based tags can filter region-specific services. The API likely verifies how these tags are set up and how they impact service accessibility. Although the API specification lists no parameters, its function suggests it evaluates the existing tag configurations rather than creating or modifying them. This endpoint is crucial for ensuring that service availability and access restrictions, based on user and requester tags, are correctly configured."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To verify and ensure the correct setup and impact of various tags, including user, requester, and request tags, on service availability and filtering within the system."}, "content_for_embedding": "This API endpoint, `/ux/common/tag/tag/check-tags-config/`, is designed to retrieve and verify the current configuration of various tags within the system. It specifically focuses on 'User Tags' and 'Requester Tags', which are crucial for managing service availability and filtering access to services. The endpoint ensures that existing tag setups, including request tags, are correctly configured and impact service accessibility as intended, without modifying them. This is vital for administrators to confirm that service restrictions and availability based on tagging are functioning as expected.", "semantic_keywords": ["Tags", "Configuration", "Access Control"], "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/tag/tag/filter/", "method": "GET", "details": {"operationId": "ux_common_tag_tag_filter_retrieve", "description": "This API endpoint is designed to filter user tags that control service availability and can be used to limit service access. These tags are fundamental for managing which services are available to specific requesters or groups of users, such as restricting HR services to internal users or applying region-based service filters. While the original description broadly states user veiwing/editing, the context strongly indicates its primary function is for filtering based on user tags to manage service visibility and access.", "tags": ["Tag"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "summary": "", "additional_info": "User tags are utilized as filters to define service availability. For instance, HR services can be restricted to internal users by selecting the appropriate tag, or region-based tags can be used to filter services based on a specific region. This functionality is crucial for administrators to fine-tune access controls and ensure that services are only accessible to the intended audience. The endpoint's method is GET, suggesting it is used for retrieving filtered results rather than modifying tags directly. The API can also allow users to submit and view older requests related to access or catalog items."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Managers"], "primary_use_case": "Managing service access and visibility through user tag filtering."}, "content_for_embedding": "This API filters user-defined tags to manage service visibility and access. It allows administrators to control which services are available to specific users or groups by applying tag-based restrictions, such as limiting HR services to internal users or filtering by region.", "semantic_keywords": ["Tags", "Filter", "Access Control"], "ontology_classification": {"features": ["tag_management", "roles_&_privileges_management", "service_management_(catalogue_configuration)", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/tag/tag/multidelete/", "method": "POST", "details": {"operationId": "ux_common_tag_tag_multidelete_create", "description": "This API endpoint provides functionality for the multi-deletion of 'tags'. It allows selected tags to be removed from the system. This is particularly useful for streamlined management, enabling users to categorize and then delete tags associated with various items, such as change requests or asset data. The operation is irreversible. While the original description mentioned users, the most relevant context points to the deletion of 'tags' which group various system items.", "tags": ["Tag"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Tag"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to contain data that maps to specific primitive and compound fields. Developers should be aware of the recognized primitive fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields such as `ListField` and `DictField` are mapped to DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on the depth. Fields like `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested. This endpoint is crucial for maintaining a clean and organized tagging system, especially when dealing with categorized requests or assets, and supports bulk operations for efficiency."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "To enable streamlined management and multi-deletion of tags associated with various system items, such as change requests and asset data, thereby maintaining a clean and organized tagging system."}, "content_for_embedding": "This API endpoint provides functionality for the multi-deletion of tags from the system. It allows selected tags to be removed, which is particularly useful for streamlined management and organization of categorized items like change requests or asset data. The operation is irreversible and supports bulk operations for efficiency, making it crucial for maintaining a clean and organized tagging system.", "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Tags", "Delete", "Tag Management"]}}, {"path": "/ux/common/tag/tag/options/", "method": "GET", "details": {"operationId": "ux_common_tag_tag_options_retrieve", "description": "This GET API endpoint, located at `/ux/common/tag/tag/options/`, allows users to view and manage existing tags within the system. It facilitates the submission and viewing of various requests, such as access requests or catalog items, by enabling the associated tags to be viewed or edited. This functionality is crucial for administrators and users who need to organize and track system entries.", "tags": ["Tag"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters at this time, based on the context, future enhancements might include parameters for filtering, sorting, or specifying tag types. The endpoint specifically supports viewing existing tags, which can be linked to older requests, access requests, or catalog items, as highlighted in the administrative guides. The general ability to 'edit' as mentioned in the original description might imply a subsequent PUT/POST operation on a specific tag, or this GET endpoint could be used to retrieve options for editing if combined with other UI elements. No specific authentication details or common use cases are directly derivable from the provided context for this particular tag options endpoint, beyond its general utility in managing requests and catalog items."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Users"], "primary_use_case": "To enable users and administrators to view and manage predefined tags for categorizing and organizing system entities like requests, assets, and catalog items."}, "content_for_embedding": "This API retrieves a list of available tag options within the system. These tags are used for categorizing and organizing various entities such as requests, assets, and catalog items. It supports the viewing of predefined tags, which are managed through the Tag Management module in the system's configuration.", "semantic_keywords": ["Tags", "Tag Management", "Retrieval"], "ontology_classification": {"features": ["tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/tag/tag/validate_tag_user_usages/{id}/", "method": "GET", "details": {"operationId": "ux_common_tag_tag_validate_tag_user_usages_retrieve", "description": "This API endpoint is designed to validate the usage of specific user tags by querying their association with a given ID. User tags act as crucial filters that control service availability and can be applied to restrict access to services, such as HR or region-based services, to relevant user groups. This endpoint allows for the verification of how these tags are assigned and utilized in the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Tag"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter represents the unique identifier for which user tag usages are to be validated. User tags are a fundamental component of the system's access and service availability control, enabling granular filtering based on user attributes like team, skills, or location. For more details on how to manage and apply tags, refer to the Tag Management section of the user guide. This endpoint is particularly useful for ensuring correct tag assignment and preventing unauthorized service access."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Security Personnel", "System Auditors"], "primary_use_case": "To verify the correct assignment and utilization of user tags for controlling service access and availability, ensuring that services are restricted to relevant user groups and preventing unauthorized access."}, "content_for_embedding": "This API endpoint validates the usage of specific user tags by querying their association with a given ID. These user tags are critical for controlling service availability and restricting access to services (e.g., HR or region-based services) to relevant user groups. The endpoint helps verify how tags are assigned and utilized in the system, ensuring correct tag assignment and preventing unauthorized service access.", "semantic_keywords": ["Tags", "Access Control", "User Privileges"], "ontology_classification": {"features": ["tag_management", "user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/teams/profile/", "method": "GET", "details": {"operationId": "ux_common_teams_profile_list", "description": "This endpoint retrieves a paginated list of team profiles within the current organization. Each team profile represents a grouping of users in Infraon, which can be categorized by reporting manager, technical skills, support level (L1, L2), or role. These teams are crucial for assigning users to specific modules, such as Incident Management, Service Requests, or asset management tasks. The name of each profile helps in its easy identification, and these profiles can be used to track activities and initiate periodic discoveries.", "summary": "Gets a list of team profiles", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Teams"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Team"}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination and sorting. The `items_per_page` and `page` query parameters are mandatory for controlling the pagination of results. Developers can further refine the output by using the optional `sort` parameter to specify the sorting key and the `reverse` parameter to define the sorting order (ascending or descending). Team profiles can be managed (added, edited, and deleted) via dedicated pages within the Infraon application, as highlighted in the user guide. The profiles are analogous to configuration templates that define settings for various operational aspects."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Developer"], "primary_use_case": "To retrieve a paginated and sortable list of team profiles within the current organization, enabling administrators and users to view and manage user groupings for task assignment and organizational structure."}, "content_for_embedding": "This API endpoint retrieves a paginated and sortable list of team profiles. Each team profile represents a grouping of users within Infraon, categorized by attributes like reporting manager, technical skills, support level, or role. These profiles are essential for assigning users to specific modules such as Incident Management, Service Requests, or asset management tasks. The endpoint supports pagination via `items_per_page` and `page` parameters, and sorting using `sort` and `reverse` parameters. It allows for easy identification and tracking of team activities and supports periodic discoveries.", "ontology_classification": {"features": ["team_&_department_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Team Management", "User Profiles", "Pagination"]}}, {"path": "/ux/common/teams/profile/", "method": "POST", "details": {"operationId": "ux_common_teams_profile_create", "description": "This endpoint facilitates the creation of a new team within the current organization on the Infraon platform. Teams are fundamental for grouping users, assigning tasks, and enabling collaboration and mutual support. They can be categorized based on various criteria such as reporting manager, technical skills (e.g., L1, L2), or specific roles. Users can be assigned to multiple teams, and teams themselves can be aligned with specific modules like Incident Management, Service Requests, or asset management. This API allows administrators and privileged users to effectively manage the organizational structure by adding new teams, which can then be assigned to specific modules or used for task assignment.", "summary": "Creates a new team ", "tags": ["Teams"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateTeamSample": {"value": {"name": "Team Approval 2", "description": "Test Approval 2", "type": "Approval", "staff_selection_type": "individual", "approval_sequence": false, "staff": [{"profile_id": "105068180334458180584", "email": "test_new2@gmail.com", "full_name": "Vinutha K"}], "expertiseGroupList": [], "owners": [{"profile_id": "105068167971394819048", "email": "test_new1@gmail.com", "full_name": "Shilpa V"}]}, "summary": "Create team Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body for this POST operation defines the details of the new team to be created, including its name, description, type, staff selection, approval sequence, assigned staff members, expertise groups, and owners. The example usage demonstrates how to structure this request body, specifying staff and owner details by profile ID, email, and full name. This endpoint is analogous to the 'Add Team' functionality seen in the UI, enabling programmatic creation of teams within the system.", "parameters": [{"name": "name", "in": "body", "description": "Inferred parameter: name", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "body", "description": "Inferred parameter: type", "required": true, "schema": {"type": "string"}}, {"name": "staff_selection_type", "in": "body", "description": "Inferred parameter: staff_selection_type", "required": true, "schema": {"type": "string"}}, {"name": "approval_sequence", "in": "body", "description": "Inferred parameter: approval_sequence", "required": true, "schema": {"type": "string"}}, {"name": "staff", "in": "body", "description": "Inferred parameter: staff", "required": true, "schema": {"type": "string"}}, {"name": "expertiseGroupList", "in": "body", "description": "Inferred parameter: expertiseGroupList", "required": true, "schema": {"type": "string"}}, {"name": "owners", "in": "body", "description": "Inferred parameter: owners", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "To create and manage teams within an organization for user grouping, task assignment, and collaboration."}, "content_for_embedding": "This API creates new teams within the Infraon platform, enabling administrators and privileged users to manage organizational structure. Teams facilitate grouping users, assigning tasks, and fostering collaboration. They can be categorized by reporting manager, technical skills (e.g., L1, L2), or specific roles, and assigned to modules like Incident Management or Service Requests. This endpoint is analogous to the 'Add Team' functionality in the UI, allowing programmatic team creation with details such as name, description, type, staff, and owners.", "ontology_classification": {"features": ["team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Team Management", "Add", "User Management"]}}, {"path": "/ux/common/teams/profile/{id}/", "method": "GET", "details": {"operationId": "ux_common_teams_profile_retrieve", "description": "This endpoint provides comprehensive details for a specific team within the current organization, identified by its unique ID. In Infraon, teams are conceptualized as groups of users, allowing for categorization based on criteria such as reporting managers, technical skills, support levels (L1, L2), or specific roles. Teams are instrumental in assigning users to specific modules, managing incidents, service requests, or assets. This GET request facilitates retrieving the profile information of such categorized teams, which can be viewed, edited, or deleted from the Teams management page.", "summary": "Gets a team with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Teams"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is a required string that represents the unique identifier of the team whose profile details are to be retrieved. Team Names serve as designated identifiers for groups responsible for handling escalated issues or tasks within the system. This endpoint is crucial for functionalities where team-specific information is needed, such as assigning requests, viewing team compositions, or managing workflow escalations. This API can be utilized to populate team details in dashboards or for backend processes requiring team profiles for operational assignments."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Workflow Manager", "System Integrator"], "primary_use_case": "This API retrieves comprehensive profile details for a specific team within an organization. Teams are used for categorizing users, assigning tasks, and managing incidents, service requests, or assets. This endpoint is crucial for functionalities requiring team-specific information for operational assignments and management."}, "content_for_embedding": "This GET API endpoint, identified by operationId \"ux_common_teams_profile_retrieve\", provides comprehensive details for a specific team using its unique ID. Teams in Infraon are conceptualized as groups of users, categorized by reporting managers, technical skills, support levels (L1, L2), or specific roles. They are instrumental in assigning users to modules and managing incidents, service requests, or assets. The API facilitates retrieving team profile information, which can be viewed, edited, or deleted from the Teams management page. The \"id\" path parameter is a required string representing the unique identifier of the team. This endpoint is vital for populating team details in dashboards and for backend processes requiring team profiles for operational assignments and workflow escalations.", "ontology_classification": {"features": ["team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Team Management", "Details retrieval", "Profile Management"]}}, {"path": "/ux/common/teams/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_common_teams_profile_update", "description": "This endpoint allows for editing an existing team within the current organization on the Infraon platform. Teams group users, and can be categorized by reporting manager, technical skills (e.g., L1, L2), or role. Teams are crucial for assigning users to specific modules, such as managing Incidents, Service Requests, or asset teams. This functionality is accessible to administrators and privileged users.", "summary": "Edits the team with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Teams"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Team"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Team"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required and uniquely identifies the team to be edited. The request body for this PUT operation is described as 'Team Serializers', implying that it expects a JSON object containing the updated team details. Users can edit existing teams from the designated teams page, similar to how new teams are added or existing ones are deleted. Ensure that the 'Team Name' being updated is a designated identifier for a specific group responsible for handling tasks within the system."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "This API allows for the modification of existing teams within the Infraon platform, which is essential for maintaining organizational structure, user grouping, and task assignment to specific modules like Incident or Service Request management."}, "content_for_embedding": "This API endpoint enables administrators and privileged users to update the details of an existing team on the Infraon platform. Teams are used to group users based on criteria such as reporting managers, technical skills, or roles, and are critical for assigning users to specific modules like Incident, Service Request, or asset teams. The API requires a unique team ID in the path and accepts updated team details in the request body. This functionality is part of the overall team management capabilities, allowing for the modification of existing teams similar to how new teams are added or deleted.", "ontology_classification": {"features": ["team_&_department_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Team Management", "Edit", "User Management"]}}, {"path": "/ux/common/teams/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_teams_profile_destroy", "description": "This endpoint allows authorized Infraon users and privileged users to delete an existing team within the current organization. Teams on Infraon group users and can be categorized by reporting manager, technical skills, support level (L1, L2), or role. Teams are assigned to specific modules, such as managing Incidents, Service Requests, or assets. This operation is typically performed from the team management page where existing teams can be added, edited, and deleted. Deleting a team is irreversible and requires confirmation.", "summary": "Deletes the team with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Teams"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and represents the unique identifier of the team to be deleted. Similar to other deletion operations within Infraon, users will likely need to confirm the deletion action (e.g., clicking 'Yes' in a confirmation prompt). While not explicitly stated for teams, other profiles cannot be deleted if associated with download jobs, suggesting that team deletion might also have similar constraints if a team is actively linked to ongoing processes or data. Ensure that the team is not associated with any active jobs or critical assignments before proceeding with deletion to avoid potential issues. Note that some entities, such as 'owner' users, cannot be deleted directly and require replacement; consider if similar rules apply to teams in certain contexts."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "IT Manager", "privileged user"], "primary_use_case": "To enable authorized users to delete existing teams within the organization, ensuring proper management of user groups and assignments."}, "content_for_embedding": "This API allows authorized Infraon users to delete an existing team by its unique ID. Teams are used to group users and are assigned to specific modules like Incident or Service Request management. The deletion is irreversible and typically requires user confirmation, similar to other deletion operations within the platform. It's part of the team management functionality within the Infraon configuration.", "semantic_keywords": ["Delete", "Team Management", "Irreversible"], "ontology_classification": {"features": ["team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/teams/profile/incident_map/", "method": "POST", "details": {"operationId": "ux_common_teams_profile_incident_map_create", "description": "This API endpoint allows for the viewing and editing of user profiles belonging to specific teams. In Infraon, users are grouped into teams, which can be categorized by factors like reporting manager, technical skills, support level (L1, L2), or role. These teams are often assigned to specific modules, such as managing incidents or service requests. This endpoint facilitates the management of team members, specifically in the context of their profile and involvement in incident mapping. The request body for this operation is expected to conform to the 'Team Serializers' specification, enabling comprehensive management of team-related user data.", "tags": ["Teams"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Team"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Team"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is specifically designed for managing user profiles within a team context concerning incident mapping. While the initial description broadly mentions 'users', the inclusion of 'teams' and 'incident_map' in the path, coupled with the context, strongly suggests its purpose is to manage users as part of a team responsible for incidents. Users can be internal or external, including Technicians (Tech Support User/NOC Operator) who might raise incidents on behalf of requesters. Requesters themselves can access a portal to raise incidents, service requests, and change requests. This API likely supports operations similar to how new teams are added, and existing teams are edited or deleted, as referenced in the context. However, the endpoint's direct focus is on the 'profile' of team members related to 'incident_map'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Technician"], "primary_use_case": "This API manages user profiles within specific teams, focusing on their involvement in incident mapping. It enables administrators to view and edit team members' profiles to facilitate incident management and response."}, "content_for_embedding": "This API endpoint allows for the viewing and editing of user profiles belonging to specific teams, specifically in the context of their involvement in incident mapping. It facilitates the comprehensive management of team members and their profiles for incident-related responsibilities within the Infraon system. This includes managing users as part of a team responsible for incidents, supporting operations like adding, editing, or deleting team members related to incident mapping.", "semantic_keywords": ["Team Management", "User Profiles", "Incident"], "ontology_classification": {"features": ["user_management", "team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/teams/profile/options/", "method": "GET", "details": {"operationId": "ux_common_teams_profile_options_retrieve", "description": "This GET API endpoint, `/ux/common/teams/profile/options/`, is designed to retrieve options related to user profiles within the context of teams. It allows for viewing various configuration options or settings associated with user profiles that are part of organizational teams. These teams, as described in the associated documentation, group users based on criteria like reporting managers, technical skills, or support levels (e.g., L1, L2). The endpoint helps in understanding how user profiles are managed and categorized within these teams, potentially offering details on view-only fields or available access types such as 'SSH' or 'Telnet' for specific profiles. While the original description mentioned viewing or editing users, this endpoint specifically provides 'options' for those profiles to facilitate management of teams and their assigned users on the Infraon platform.", "tags": ["Teams"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}, "summary": "", "additional_info": "The contexts suggest that 'users' can be viewed and edited, and 'teams' can be added, edited, and deleted. This `/options/` endpoint likely provides the selectable choices or configurations pertinent to user profiles when managing teams, rather than direct user or team data. For instance, it might provide a list of available access types (like SSH, Telnet) or profile descriptions for configuration purposes. The 'users' are assigned to multiple teams, and teams are assigned to specific modules (e.g., Incident management). This endpoint would therefore be crucial for populating dropdowns or configuration screens when setting up or modifying user profiles within the team management interface. Direct editing of user or team data would likely occur via other dedicated endpoints (e.g. PUT/POST methods). For more holistic user and team management, refer to the 'Users' module and the sections on adding, editing, and deleting teams within the Infraon documentation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Team Manager"], "primary_use_case": "To retrieve configuration options and selectable choices for user profiles within the context of team management."}, "content_for_embedding": "This API endpoint, `/ux/common/teams/profile/options/`, retrieves configuration options and selectable choices for user profiles that are part of organizational teams. It provides details such as available access types (e.g., SSH, Telnet) and profile descriptions. This information is crucial for populating dropdowns and configuration screens when setting up or modifying user profiles within the team management interface on the Infraon platform. The API supports the management of how users are categorized and managed within teams, which can be based on criteria like reporting managers, technical skills, or support levels.", "ontology_classification": {"features": ["user_management", "team_&_department_management", "roles_&_privileges_management", "device_credential_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Team Management", "User Profiles", "Configuration Options"]}}, {"path": "/ux/common/teams/profile/upload_csv/", "method": "POST", "details": {"operationId": "ux_common_teams_profile_upload_csv_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Teams"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Team"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Team"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager"], "primary_use_case": "To facilitate bulk management and updates of user profiles and their team affiliations within the system."}, "content_for_embedding": "This API allows administrators to manage user profiles and team assignments by uploading CSV files. It supports viewing and editing user data, including their roles and privileges within different teams.", "ontology_classification": {"features": ["user_management", "team_&_department_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Team Management", "CSV Import"]}}, {"path": "/ux/common/teams/profile/usergrplist/", "method": "POST", "details": {"operationId": "ux_common_teams_profile_usergrplist_create", "description": "This API endpoint facilitates the viewing and editing of user group lists within the Infraon platform. It allows administrators and privileged users to manage teams, which are defined as groups of users categorized by reporting manager, technical skills, support level (L1, L2), or role. Users can be assigned to multiple teams, and these teams are often assigned to specific modules for managing incidents, service requests, or assets. The endpoint supports operations to add new teams, and to edit and delete existing ones, based on the provided team serializers.", "tags": ["Teams"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Team"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Team"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on 'User' related APIs, where the concept of 'User.Read.All' permissions may be relevant for viewing comprehensive user and team details. Editing capabilities ('Edit' privilege) allow users to perform modifications within a selected module or page, such as updating existing services or team configurations. Developers should refer to the 'Team Serializers' for the expected request body format when performing edit operations. Further details on managing users can be found in the Users module documentation, as indicated in Context Rank 1."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User", "Developer"], "primary_use_case": "This API endpoint enables administrators and privileged users to manage user groups, referred to as teams, within the Infraon platform. It supports the creation, modification, deletion, and viewing of these teams, which are essential for task assignment and managing incidents, service requests, or assets."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of user groups, or teams, within the Infraon platform. It allows authorized users to add new teams, modify existing team details, and delete teams. Teams are defined as collections of users categorized by various criteria such as reporting manager, technical skills, support level, or role. These teams are integral for assigning tasks and managing workflows related to incidents, service requests, and assets. The endpoint provides capabilities for both viewing and editing user group lists.", "ontology_classification": {"features": ["team_&_department_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Team Management", "User Management", "Retrieval"]}}, {"path": "/ux/common/teams/profile/validate_csv/", "method": "POST", "details": {"operationId": "ux_common_teams_profile_validate_csv_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Teams"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Team"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Team"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Staff"], "primary_use_case": "To validate the format and content of a CSV file intended for bulk creation or update of user and team profiles."}, "content_for_embedding": "This API endpoint facilitates the validation of CSV files containing user and team profile data. It is designed to ensure data integrity and adherence to system requirements before bulk import or update operations. This is crucial for maintaining accurate user and team information and streamlining administrative tasks related to user provisioning and team organization.", "ontology_classification": {"features": ["user_management", "team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "CSV Import", "Team Management"]}}, {"path": "/ux/common/teams/profile/validate_team_change/", "method": "GET", "details": {"operationId": "ux_common_teams_profile_validate_team_change_retrieve", "description": "This API endpoint is designed to validate changes related to a team profile within the system. It facilitates the management of team profiles by allowing for the validation of proposed modifications before they are applied. Given that teams are groupings of users often categorized by reporting managers, technical skills, or roles, this validation step is crucial for maintaining organizational structure and permissions.", "tags": ["Teams"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Team"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows 'parameters' as empty, the purpose of validating team changes aligns with the system's larger 'Teams' functionality, where users can be assigned to multiple teams, and teams to specific modules. This validation likely ensures consistency with existing team structures and user assignments. Although contexts related to 'Edit App registration' and 'OAuth consent screen' were present, they appear less relevant to the direct function of validating a team profile change compared to contexts explicitly discussing 'Teams' and their management (e.g., Context Rank 4 and 10 which talk about adding, editing, and deleting teams, and how users are grouped into teams). This endpoint would typically be used before a 'quick edit' or 'detailed edit' operation on a team profile to ensure the proposed change is valid according to system rules or existing configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "System Administrator"], "primary_use_case": "This API validates proposed changes to team profiles to ensure consistency with existing organizational structures and user assignments before modifications are applied, thereby maintaining data integrity and permissions."}, "content_for_embedding": "This API endpoint validates proposed modifications to team profiles within the system. It ensures that any changes, such as those made during quick or detailed edit operations, align with existing team structures and user assignments, which are crucial for maintaining organizational structure, permissions, and facilitating tasks like user grouping by reporting managers, technical skills, or roles.", "ontology_classification": {"features": ["team_&_department_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Team Management", "Profile Management", "Validation"]}}, {"path": "/ux/common/telecom_settings/telecom_settings/", "method": "GET", "details": {"operationId": "ux_common_telecom_settings_telecom_settings_list", "description": "This API endpoint provides functionalities for viewing and editing `telecom_settings`, which are associated with user access configurations. It specifically pertains to settings like SSH and Telnet details for user profiles, allowing administrators to manage how users can access network devices. The endpoint facilitates the viewing of existing telecom settings and enables their modification, including details such as profile labels and associated actions.", "tags": ["Telecom Settings"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TelecomSettings"}}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for managing user permissions on network devices, particularly for SSH and Telnet access. While the API documentation mentions users can be 'viewed or edited', the context specifically highlights 'telecom_settings' related to user access methods. Users can be grouped under common profiles using User Tags, and SSH and Telnet details are configured within these profiles. The context also briefly mentions 'Authorization Profile Details' in conjunction with SSH and Telnet settings, suggesting a broader management of access profiles. Although the current endpoint specification lists no parameters, developers should be aware that related user and profile management often involves unique identifiers (like User Tags or Profile Names) and potentially IP addresses or asset tags for specific devices, as indicated by various user guide sections. For comprehensive user management, refer to the 'Users module' as mentioned in the admin guide (Context Rank 3)."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "To manage and configure user access settings for network devices, specifically SSH and Telnet details, allowing administrators to view and modify these telecom settings."}, "content_for_embedding": "This API endpoint allows administrators to view and edit telecom settings, which include SSH and Telnet details for user access configurations on network devices. It facilitates the management of user permissions and profiles, enabling control over how users access network devices. The endpoint supports viewing existing settings and their modification, including profile labels and associated actions. Related management often involves user tags, profile names, IP addresses, and asset tags for specific devices.", "semantic_keywords": ["Telecom Settings", "Network Configuration", "User Management"], "ontology_classification": {"features": ["user_management", "device_credential_management", "network_configuration_management_(nccm)", "roles_&_privileges_management", "search_functionality", "filtering_options"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/telecom_settings/telecom_settings/", "method": "POST", "details": {"operationId": "ux_common_telecom_settings_telecom_settings_create", "description": "This API endpoint, `/ux/common/telecom_settings/telecom_settings/`, uses a POST method to facilitate the viewing and editing of user-related settings within the system. While the original description broadly stated 'users can be viewed or edited', the context suggests this endpoint is more specifically tailored for managing access, profiles, and contact details, particularly those related to telecom settings such as SSH and Telnet access configurations. It likely allows administrators to define and modify how users can access certain infrastructure components or services. The endpoint processes a request body that conforms to a robust serializer supporting various primitive and compound fields, including advanced types such as `ReferenceField` for linked documents and `EmbeddedDocumentField` for nested data, highlighting its capability to handle complex user data structures.", "tags": ["Telecom Settings"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is a highly flexible serializer, capable of processing diverse data types. Primitive fields like `StringField`, `IntField`, `EmailField`, `DateTimeField`, and even geographical data types (`GeoPointField`, `GeoJsonBaseField`) are recognized, indicating the breadth of user attributes that can be managed. Compound fields such as `ListField` and `DictField` support structured data. Notably, `ReferenceField` acts like a foreign key, generating nested serializers for deeper data retrieval, and `EmbeddedDocumentField` also supports nested serialization. This suggests the endpoint can handle detailed user profiles, including authentication methods (like SSH and Telnet as per Context Rank 1) and contact information (Email, Phone Number, Landline Number, Contact Extension as per Context Rank 6), potentially linked to various access profiles. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested', so their use may lead to unexpected behavior. All other unspecified fields default to `DocumentField` and 'probably will work wrong', emphasizing the importance of adhering to the recognized field types."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network admin", "User"], "primary_use_case": "Managing user access and configuration profiles, particularly for telecom settings like SSH and Telnet."}, "content_for_embedding": "This API allows administrators to create, view, and edit user-related settings, focusing on telecom configurations such as SSH and Telnet access. It supports managing detailed user profiles, including authentication methods and contact information, and handles complex data structures for comprehensive user data management.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "device_credential_management", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Telecom Settings", "User Management", "Configuration"]}}, {"path": "/ux/common/telecom_settings/telecom_settings/{id}/", "method": "GET", "details": {"operationId": "ux_common_telecom_settings_telecom_settings_retrieve", "description": "This API endpoint allows users to retrieve or modify telecom-related settings for a specific user, identified by their unique ID. It focuses on configurations such as SSH and Telnet details, and potentially other contact information like phone numbers and email addresses. This endpoint is crucial for managing user access profiles and communication protocols.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Telecom Settings"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter uniquely identifies the user whose telecom settings are being accessed. This ID is essential for viewing or editing user-specific configurations, including SSH/Telnet access details and contact information. Contexts indicate this endpoint is related to setting up authorization profiles, configuring command settings (like recording CLI sessions), and managing contact details such as full name, email, phone number, and landline number. It is also tied into the broader 'Users' module, suggesting that these settings are part of a user's overall profile management for system access."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "System Administrators", "IT Support Staff"], "primary_use_case": "Managing user-specific telecom settings and access configurations, including SSH/Telnet details and contact information."}, "content_for_embedding": "This API endpoint, GET /ux/common/telecom_settings/telecom_settings/{id}/, is designed to retrieve and modify telecom-related settings for a specific user identified by their unique ID. It manages configurations such as SSH and Telnet details, and other contact information including phone numbers and email addresses. This endpoint is crucial for managing user access profiles, communication protocols, and setting up authorization profiles. It also supports configuring command settings like recording CLI sessions and is integrated with overall user profile management for system access. Network administrators utilize this API to create and manage comprehensive configuration profiles, including device details and connection protocols. It allows for checking and editing account configuration settings and viewing detailed user information such as username, email, and IP address.", "ontology_classification": {"features": ["user_management", "platform_account_configuration", "device_credential_management", "network_configuration_management_(nccm)", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Telecom Settings", "User Configuration", "Access Control"]}}, {"path": "/ux/common/telecom_settings/telecom_settings/{id}/", "method": "PUT", "details": {"operationId": "ux_common_telecom_settings_telecom_settings_update", "description": "This API endpoint allows for the viewing and editing of `telecom_settings` configurations, specifically identified by a unique `id`. Although the original description suggests 'users,' the path `/ux/common/telecom_settings/` combined with relevant contexts indicates this endpoint is more accurately used for managing settings related to telecommunication access, such as SSH and Telnet details, which are often associated with user profiles or device access. This allows for updating specific telecom profiles or configurations, rather than general user management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Telecom Settings"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` in the path parameter is a required string that identifies the specific telecom setting to be viewed or edited. The request body, if provided, must conform to the serializer for Documents, supporting various primitive and compound fields. Notably, `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on the `depth` setting. While common primitive types like String, Integer, Boolean, and Date are supported, `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested. This endpoint is crucial for managing access protocols (like SSH and Telnet) related to devices or user profiles, as highlighted by context ranks 1, 3, and 9. It is likely used to configure how users or systems interact with network devices via these protocols, potentially including details such as command settings or authorization profiles."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT administrators", "IT support staff"], "primary_use_case": "To update existing telecommunication access settings, such as SSH and Telnet details, for network devices or user profiles."}, "content_for_embedding": "This API updates existing telecommunication settings configurations, identified by a unique ID. It specifically manages access protocols such as SSH and Telnet details, which are associated with user profiles or network devices. This allows network administrators to modify command settings, authorization profiles, and other configurations for how users or systems interact with network devices via these protocols.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "device_credential_management", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Telecom Settings", "Configuration", "Update"]}}, {"path": "/ux/common/telecom_settings/telecom_settings/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_telecom_settings_telecom_settings_destroy", "description": "This API endpoint allows for the deletion of specific telecom settings profiles, identified by a unique ID. These profiles are instrumental in defining communication protocols like SSH and Telnet for accessing devices, often associated with user access management and device credentials. The settings are typically tied to user groups or individual users, regulating their access to specific network devices.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Telecom Settings"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the telecom settings profile to be deleted. The purpose of these telecom settings, as indicated by context, often involves defining access methods (e.g., 'SSH' or 'Telnet') and associated credentials (e.g., 'SSH Key - Admin') for various devices. This endpoint is part of a broader system managing user access and device configuration, as profiles often group users under a common access scheme. Successful deletion will result in no response body."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT administrators", "Users managing device access and configurations"], "primary_use_case": "To enable network administrators to delete specific telecom settings profiles, which define communication protocols (like SSH and Telnet) and device access credentials, thereby managing user access and device configurations."}, "content_for_embedding": "This API endpoint facilitates the deletion of telecom settings profiles, identified by a unique ID. These profiles are crucial for defining communication protocols such as SSH and Telnet, and managing device access credentials. They play a key role in user access management and overall device configuration. The deletion of these profiles is a privilege-based operation, and a profile cannot be deleted if it is associated with a download job.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "device_credential_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Telecom Settings", "Configuration Profiles"]}}, {"path": "/ux/common/telecom_settings/telecom_settings/get_settings/", "method": "GET", "details": {"operationId": "ux_common_telecom_settings_telecom_settings_get_settings_retrieve", "description": "This endpoint is used to fetch a paginated list of all telecom settings within the current organization. It provides comprehensive access to vital information about network devices, including current and historical configurations, enabling comparison and change tracking. The endpoint supports sorting by a specified key and order.", "summary": "Gets a list of telecom Settings", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Telecom Settings"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}, "description": ""}}, "additional_info": "The 'items_per_page' and 'page' query parameters are mandatory for pagination. Users can optionally specify 'sort' and 'reverse' parameters to control the order of the returned settings. While not explicitly detailed, telecom settings often involve network configuration parameters, security policies, access controls, and performance configurations, as suggested by related configuration contexts. This functionality is crucial for administrators to manage and monitor network device configurations effectively."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations Personnel"], "primary_use_case": "To provide comprehensive access to current and historical telecom settings for network devices, enabling administrators to manage, monitor, and track configuration changes."}, "content_for_embedding": "This API endpoint retrieves a paginated list of all telecom settings for network devices within an organization. It allows access to current and historical configurations, facilitating comparison and change tracking. The results can be sorted by a specified key and order. These settings typically include network configuration parameters, security policies, access controls, and performance configurations, crucial for effective network device management and monitoring.", "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Telecom Settings", "Configuration retrieval", "Pagination"]}}, {"path": "/ux/common/telecom_settings/telecom_settings/update_settings/", "method": "POST", "details": {"operationId": "ux_common_telecom_settings_telecom_settings_update_settings_create", "description": "This API endpoint facilitates the viewing and editing of user-related telecom settings. It integrates with the user management module, allowing administrators to manage profiles, contact details (such as full name, email, phone, and landline numbers, and contact extensions) for individuals, teams, or departments. The endpoint supports detailed configuration of access settings, potentially including SSH and Telnet details, and allows for the management of user profiles relevant to change requests within the system. The API is designed to handle various field types for document processing, including primitive types (StringField, IntField, BooleanField, DateTimeField, etc.) and compound fields (ListField, DictField), along with specialized fields like ReferenceField and EmbeddedDocumentField for handling nested data structures.", "tags": ["Telecom Settings"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TelecomSettings"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` provides a comprehensive list of recognized primitive and compound field types that can be processed by this API, indicating its flexibility in handling diverse data structures for telecom settings. Specifically, nested serializers are autogenerated for `ReferenceField` and `EmbeddedDocumentField` when the serializer depth is greater than zero, otherwise they are handled as simple identifiers (`str(id)`). Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are supported. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. This endpoint is commonly used in administrative interfaces for managing user access and communication settings. Although the summary is empty, the description implies administrative control over user settings, including communication methods like SSH and Telnet, and details related to making change requests within the system, as suggested by the context documents referencing 'Change' module and 'requester' information."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Admin", "IT Support Staff"], "primary_use_case": "This API is used by administrators to view and edit user-related telecom settings, including contact details, user profiles, and access configurations such as SSH and Telnet. It facilitates the management of user access and communication settings, and supports handling of various data structures for configuration profiles and change requests."}, "content_for_embedding": "This API endpoint allows administrators to view and edit user-related telecom settings, including contact details (full name, email, phone, landline, extensions), user profiles, and access settings such as SSH and Telnet. It integrates with user management and supports various field types for data processing. The API is crucial for administrative interfaces to manage user access and communication settings, and it also relates to managing user profiles for change requests within the system.", "semantic_keywords": ["Telecom Settings", "User Management", "Configuration Profiles"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "device_credential_management", "network_configuration_management_(nccm)", "change_request_logging", "customizable_asset_properties_and_fields", "record_creation_&_management", "detailed_record_view"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/trap/configuration/", "method": "GET", "details": {"operationId": "ux_common_trap_configuration_list", "description": "This endpoint allows users to retrieve a paginated list of all 'Trap Configurations' within the current organization. Trap configurations are crucial for defining how automated alerts, called Traps, are generated and sent in response to specific system events. These configurations fine-tune the system's ability to capture and handle events or signals, ensuring the correct alarm/notification messages are included. The response can be sorted by a specified key and in a defined order.", "summary": "Gets a list of trap configurations", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Trap Configurations"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TrapConfiguration"}}}}, "description": ""}}, "additional_info": "Trap configurations are used to configure Traps to trigger events, which is an integral part of IT infrastructure management. Parameters such as 'items_per_page' and 'page' are required for pagination, while 'sort' and 'reverse' allow for flexible ordering of the results. The 'description/example' field within a trap configuration typically includes messages that will be incorporated into the trap configuration alarm or notification. Common attributes of a trap configuration include a profile name, description, Trap OID, status (Active/In-Active), type, severity (critical, major, minor), bind resource type, and alarm messages."}, "llm_generated": {"business_context": {"user_personas": ["System administrators", "IT operations personnel", "Network engineers"], "primary_use_case": "To retrieve and manage configurations for automated alerts (Traps) that respond to specific system events, enabling fine-tuning of alarm and notification messages within an organization's IT infrastructure."}, "content_for_embedding": "This API retrieves a paginated and sortable list of 'Trap Configurations' for the current organization. These configurations are vital for defining how automated alerts, known as Traps, are generated and sent in response to system events. They allow for fine-tuning the system's ability to capture and handle events or signals, ensuring accurate alarm and notification messages. Trap configurations are integral to IT infrastructure management, often including details like profile name, description, Trap OID, status (Active/In-Active), type, severity, and alarm messages. The endpoint supports pagination via 'items_per_page' and 'page' parameters, and sorting using 'sort' and 'reverse' parameters.", "ontology_classification": {"features": ["notification_trigger_configuration", "threshold_configuration", "event_listing_and_filtering", "search_functionality"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Trap Configurations", "Alerts", "Pagination"]}}, {"path": "/ux/common/trap/configuration/", "method": "POST", "details": {"operationId": "ux_common_trap_configuration_create", "description": "This endpoint enables the creation and saving of a new trap configuration within the current organization. Trap configurations are crucial for fine-tuning how automated alerts (Traps) are generated and sent in response to specific system events. This includes defining various attributes such as the trap name, description, type, Object Identifier (OID), severity (e.g., Critical, Major, Minor), status (Active or In-Active), and specific criteria for setting and resetting alarms. The configuration also allows for custom alarm and clear messages to be included in notifications.", "summary": "Creates a new trap configuration", "tags": ["Trap Configurations"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateTrapConfigurationSample": {"value": {"name": "Link Down Trap", "trap_id": "123456789012345", "description": "Used to configure the link down trap", "type": "Link Down", "trap_oid": "1.3.6.1.6.3.1.1.5.3", "stat_name": "ge-0/0/1", "stat_dn": "l_util", "stat_unit": "%", "status": 1, "severity": "Critical", "set_criteria": {"varbind": [{"key": 6, "condition": "in", "value": "Critical"}, {"key": 7, "condition": "equal to", "value": "Down"}], "condition": "and"}, "reset_criteria": {"varbind": [{"key": 6, "condition": "in", "value": "Info"}, {"key": 7, "condition": "equal to", "value": "Up"}], "condition": "or"}, "alarm_msg": "Link Down", "clear_msg": "Link UP", "applicable": "All", "applies_to": {}, "applicable_filter": {}, "organization": "123456789012345"}, "summary": "Create Trap Configuration Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "Trap configurations are primarily used to capture and handle events or signals occurring within a system. When creating a new configuration, you will need to specify details such as the 'name', 'trap_id', 'alarm_msg', and 'clear_msg'. The 'alarm_msg' and 'clear_msg' are particularly important as they will be directly included in the trap configuration alarm/notification. The 'trap_oid' defines the specific Object Identifier associated with the trap message. The 'set_criteria' and 'reset_criteria' objects allow for defining complex conditions based on varbinds, using logical operators like 'and' or 'or', to determine when an alarm should be triggered or cleared. After entering all necessary details, the configuration is submitted to be saved for the organization.", "parameters": [{"name": "name", "in": "body", "description": "Inferred parameter: name", "required": true, "schema": {"type": "string"}}, {"name": "trap_id", "in": "body", "description": "Inferred parameter: trap_id", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "body", "description": "Inferred parameter: type", "required": true, "schema": {"type": "string"}}, {"name": "trap_oid", "in": "body", "description": "Inferred parameter: trap_oid", "required": true, "schema": {"type": "string"}}, {"name": "stat_name", "in": "body", "description": "Inferred parameter: stat_name", "required": true, "schema": {"type": "string"}}, {"name": "stat_dn", "in": "body", "description": "Inferred parameter: stat_dn", "required": true, "schema": {"type": "string"}}, {"name": "stat_unit", "in": "body", "description": "Inferred parameter: stat_unit", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "body", "description": "Inferred parameter: status", "required": true, "schema": {"type": "string"}}, {"name": "severity", "in": "body", "description": "Inferred parameter: severity", "required": true, "schema": {"type": "string"}}, {"name": "set_criteria", "in": "body", "description": "Inferred parameter: set_criteria", "required": true, "schema": {"type": "string"}}, {"name": "reset_criteria", "in": "body", "description": "Inferred parameter: reset_criteria", "required": true, "schema": {"type": "string"}}, {"name": "alarm_msg", "in": "body", "description": "Inferred parameter: alarm_msg", "required": true, "schema": {"type": "string"}}, {"name": "clear_msg", "in": "body", "description": "Inferred parameter: clear_msg", "required": true, "schema": {"type": "string"}}, {"name": "applicable", "in": "body", "description": "Inferred parameter: applicable", "required": true, "schema": {"type": "string"}}, {"name": "applies_to", "in": "body", "description": "Inferred parameter: applies_to", "required": true, "schema": {"type": "string"}}, {"name": "applicable_filter", "in": "body", "description": "Inferred parameter: applicable_filter", "required": true, "schema": {"type": "string"}}, {"name": "organization", "in": "body", "description": "Inferred parameter: organization", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations Personnel", "Network Engineers"], "primary_use_case": "This API allows users to create and save new trap configurations, which are essential for defining how automated alerts (Traps) are generated and sent in response to specific system events. It enables fine-tuning of alert attributes like name, description, type, OID, severity, status, and criteria for setting and resetting alarms, including custom alarm and clear messages."}, "content_for_embedding": "This API creates and saves new trap configurations, which are crucial for setting up automated alerts and notifications based on specific system events. Users can define various attributes such as trap name, description, type, Object Identifier (OID), severity (e.g., Critical, Major, Minor), status (Active or In-Active), and complex set/reset criteria using varbinds and logical operators. It also allows for custom alarm and clear messages to be included in notifications. This configuration is vital for event monitoring and alert generation within an organization.", "ontology_classification": {"features": ["notification_trigger_configuration", "threshold_configuration", "it_operations", "event_detection_and_monitoring", "notification_and_incident_generation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Trap Configurations", "Alerts", "Configuration"]}}, {"path": "/ux/common/trap/configuration/{id}/", "method": "GET", "details": {"operationId": "ux_common_trap_configuration_retrieve", "description": "This endpoint retrieves the comprehensive details of a specific trap configuration within the current organization. A trap configuration is a crucial component used to define how automated alerts, known as Traps, are generated and dispatched in response to system events. These configurations allow fine-tuning of event capture and handling, including setting up messages that will be included in trap configuration alarms/notifications.", "summary": "Gets a trap configuration with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Trap Configurations"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the trap configuration to be retrieved. Trap configurations typically include details such as a profile name (acting as an identifier), a brief description, Trap OID (Object Identifier), status (Active or In-Active), type, and severity (critical, major, or minor). The alarm message associated with the trap configuration can also be retrieved here. This endpoint is fundamental for understanding how specific system events are monitored and reported within the IT infrastructure."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network engineers", "System monitoring personnel", "Developers"], "primary_use_case": "To retrieve and understand the detailed settings of a specific trap configuration, which dictates how automated alerts are generated and dispatched in response to system events."}, "content_for_embedding": "This API retrieves the comprehensive details of a specific trap configuration within an organization. Trap configurations are crucial for defining how automated alerts, known as Traps, are generated and dispatched in response to system events. The retrieved details include the profile name, description, Trap OID, status (Active or In-Active), type, severity (critical, major, or minor), and the associated alarm message. This endpoint is fundamental for gaining insight into how specific system events are monitored and reported within the IT infrastructure.", "semantic_keywords": ["Trap Configurations", "Configuration retrieval", "Automated alerts"], "ontology_classification": {"features": ["event_detection_and_monitoring", "notification_and_incident_generation"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/trap/configuration/{id}/", "method": "PUT", "details": {"operationId": "ux_common_trap_configuration_update", "description": "This endpoint allows authorized users to update the configuration of an existing trap for the current organization. Trap configurations are crucial for fine-tuning how automated alerts ('Traps') are generated and sent in response to specific system events within Infraon. This involves editing details such as the trap's profile name, description, Trap OID (Object Identifier), status (Active/In-Active), type, severity (critical, major, minor), and the message included in the trap configuration alarm/notification.", "summary": "Edits the trap configuration with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Trap Configurations"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "description": ""}}, "additional_info": "The `id` path parameter must be a string representing the unique identifier of the trap configuration to be updated. The request body supports various primitive and compound field types as described by the serializer documentation, enabling comprehensive updates to the trap configuration properties like `Alarm Message`, `Status`, `Type`, `Severity`, and `Trap OID`. It's essential to define a clear message for the trap configuration as this message will be included in the alarm/notification triggered by the trap. While `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, other common data types are expected to function correctly."}, "llm_generated": {"business_context": {"user_personas": ["Authorized Users", "Administrators", "IT Operations Personnel"], "primary_use_case": "To enable authorized users to fine-tune and manage automated alert generation by updating existing trap configurations in response to specific system events within Infraon."}, "content_for_embedding": "This API allows authorized users to update existing trap configurations within Infraon. Trap configurations define how automated alerts, or 'Traps', are generated and sent based on specific system events. Users can edit details such as the trap's profile name, description, Object Identifier (OID), status (Active/In-Active), type, severity (critical, major, minor), and the message included in the trap configuration alarm or notification.", "ontology_classification": {"features": ["it_operations", "notification_trigger_configuration", "threshold_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Trap Configurations", "Update", "Configuration"]}}, {"path": "/ux/common/trap/configuration/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_trap_configuration_destroy", "description": "This endpoint is used to delete an existing trap configuration for the current organization. Trap Configurations are crucial for fine-tuning how automated alerts, called Traps, are generated and sent in response to specific system Events within the system. They are primarily used to capture or handle events or signals that occur within a system, often including a message that will be part of the trap configuration alarm/notification.", "summary": "Deletes the trap configuration with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Trap Configurations"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter refers to the unique identifier of the trap configuration to be deleted. Existing trap configurations can generally be edited or deleted using respective icons in the UI, suggesting this API offers a programmatic way to perform the same deletion operation. To create a trap configuration, users would typically go to 'Infraon Configuration -> IT Operations -> Trap Configuration' and click the 'New Profile' button, providing details such as a profile name, description, Trap OID, status (Active/In-Active), type, and severity (critical, major, or minor), as well as an alarm message. This API specifically handles the deletion aspect of these configurations."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations Personnel", "Developers"], "primary_use_case": "To programmatically delete an existing trap configuration, which is essential for managing automated alerts and system events within an organization."}, "content_for_embedding": "This API endpoint allows for the deletion of a specific trap configuration using its unique identifier. Trap configurations are critical for defining how automated alerts, known as Traps, are generated and sent in response to system events. This DELETE operation provides a programmatic alternative to the UI-based deletion of these configurations, which are typically managed under \"Infraon Configuration -> IT Operations -> Trap Configuration\".", "ontology_classification": {"features": ["notification_trigger_configuration", "threshold_configuration", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Trap Configurations", "Automated alerts"]}}, {"path": "/ux/common/trap/configuration/msg_options/", "method": "GET", "details": {"operationId": "ux_common_trap_configuration_msg_options_retrieve", "description": "This API endpoint, `/ux/common/trap/configuration/msg_options/`, is designed for managing Trap Configuration message options. It allows users to view and potentially edit configurations related to trap profiles. Although the original description mentioned 'users to be viewed or edited', the context from documentation, particularly the 'Trap Configuration | Basic Detail' section, strongly suggests its primary use is for managing trap-related settings such as profile names and descriptions, applicable for all protocols.", "tags": ["Trap Configurations"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "The most relevant context (Rank 1) for this endpoint is related to 'Trap Configuration', specifically how to define 'Profile name' and 'Description' for a credential, applicable across all protocols. While the API specification's original description broadly mentioned 'users to be viewed or edited', the contextual information reorients this endpoint's purpose towards `Trap Configuration` details. The API does not currently define any parameters or request body in its specification, suggesting it might be a GET endpoint to retrieve the current configuration for trap message options. Future enhancements might include parameters for filtering or a request body for updating these configurations. Common use cases would involve setting up or reviewing how trap messages are identified and described within the system."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System administrators"], "primary_use_case": "To retrieve and manage configuration options for automated trap messages, including profile names and descriptions, across various network protocols."}, "content_for_embedding": "This API endpoint facilitates the retrieval of configuration options for trap messages, which are automated alerts designed to trigger events within a system. It enables users, primarily network administrators and IT operations personnel, to view and manage settings such as profile names and descriptions for these trap configurations, ensuring consistent identification and description of trap messages across all protocols. The API's core function is to support the setup and review processes for how these critical automated alerts are defined and presented within the system.", "ontology_classification": {"features": ["notification_trigger_configuration", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Trap Configurations", "Configuration retrieval", "Automated alerts"]}}, {"path": "/ux/common/trap/configuration/multidelete/", "method": "POST", "details": {"operationId": "ux_common_trap_configuration_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of Trap Configurations within the system. It allows users to remove multiple configured traps at once, serving as a crucial feature for fine-tuning how automated alerts (Traps) are generated and managed. This aligns with the 'Delete' privilege described in the user guide, which enables users to view and perform delete operations on selected modules, such as the Business Catalogue or authentication profiles. Specifically, this endpoint is used to manage Trap Configurations, which are set up to trigger events and capture signals within the system.", "tags": ["Trap Configurations"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to accept a list of IDs or identifiers for the Trap Configurations to be deleted. The serializer supports various primitive and compound fields, including StringField, IntField, ListField, and DictField, enabling flexible input for deletion actions. While the specific structure for the multi-delete request body is not detailed in the provided API spec beyond general serializer information, it can be inferred that it will likely contain a list of Trap Configuration IDs. This endpoint is particularly useful for bulk operations, such as removing outdated or unnecessary trap profiles, as indicated by context mentioning bulk-delete of authentication profiles. Users with appropriate delete privileges can leverage this endpoint for efficient management of system alerts, however, they will not have add or edit privileges through this specific endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "User with delete privileges"], "primary_use_case": "To facilitate the bulk deletion of Trap Configurations, which are used to manage and fine-tune automated alerts within the system."}, "content_for_embedding": "This API endpoint allows for the multi-deletion of Trap Configurations, which are essential for managing automated alerts (Traps) in the system. It supports bulk operations to remove outdated or unnecessary trap profiles by accepting a list of IDs for deletion.", "ontology_classification": {"features": ["notification_trigger_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Trap Configurations", "Delete", "Automated alerts"]}}, {"path": "/ux/common/trap/configuration/options/", "method": "GET", "details": {"operationId": "ux_common_trap_configuration_options_retrieve", "description": "This API endpoint allows users to retrieve and manage configuration options for 'Trap' profiles. It supports viewing existing trap configurations and enabling modifications to their details, including profile names and descriptions, which are applicable for all protocols. This functionality is crucial for defining how system events or 'traps' are handled and identified.", "tags": ["Trap Configurations"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "The 'Trap Configuration' refers to settings related to network management traps (e.g., SNMP traps), which are used to notify administrators of significant events. Users can define a 'Profile name' and 'Description' for each trap configuration, similar to how credentials or access profiles are managed. The endpoint is part of the `/ux/common/trap/configuration/options/` path, suggesting it's designed for user experience (UX) related common trap configurations. While the current specification shows no specific parameters, future updates might introduce options for filtering or specifying which trap configurations to view or edit."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "This API allows users to retrieve and manage configuration options for network management \"Trap\" profiles, which define how system events are handled and identified. It supports viewing and modifying trap configurations like profile names and descriptions."}, "content_for_embedding": "This API endpoint, `/ux/common/trap/configuration/options/`, is designed for user experience (UX) related common trap configurations. It enables users to retrieve and manage configuration options for \"Trap\" profiles, which are crucial for defining how system events or \"traps\" are handled and identified. Users can view existing trap configurations and modify details such as profile names and descriptions, applicable for all protocols. The \"Trap Configuration\" refers to settings for network management traps (e.g., SNMP traps) used to notify administrators of significant events. It allows defining a \"Profile name\" and \"Description\" for each configuration, similar to managing credentials or access profiles. While currently focused on retrieval, future updates might include filtering or editing parameters. Related documentation highlights fields like \"Trap OID\" (Object Identifier), \"Status\" (Active/In-Active), \"Profile Name\", and \"Description\" for trap configurations.", "semantic_keywords": ["Trap Configurations", "Configuration Management", "Configuration Retrieval"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "notification_trigger_configuration", "general_settings", "log_rule_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/trap/configuration/trap_msgs/", "method": "GET", "details": {"operationId": "ux_common_trap_configuration_trap_msgs_retrieve", "description": "This endpoint provides a paginated list of trap messages. It is designed to fetch all traps received by agents for the current organization within the system. These 'trap messages' are integral to 'Trap Configuration', which is used to fine-tune how automated alerts (Traps) are generated and sent in response to specific system events. Each trap message typically contains the time, an identifier, and a value. This API helps in managing and monitoring IT infrastructure by allowing users to view the collected trap data, which can then be used for alarm or notification purposes.", "summary": "Gets a list of trap messages", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Trap Configurations"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TrapConfiguration"}}}, "description": ""}}, "additional_info": "This endpoint supports pagination using the `items_per_page` and `page` query parameters. Filtering and sorting capabilities are also available through the `sort` and `reverse` parameters. The `reverse` parameter dictates the sorting order (e.g., ascending or descending) based on the `sort` key. Trap messages are crucial for IT infrastructure management as they capture events or signals from various devices like routers, switches, firewalls, and servers. The content of these trap messages can be included in alarm/notification messages configured within the system."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Engineers", "System Administrators", "Operations Teams"], "primary_use_case": "Monitoring and managing IT infrastructure through trap message analysis for alarm and notification purposes."}, "content_for_embedding": "This API retrieves a paginated list of trap messages, which are automated alerts generated by system events from various IT infrastructure devices like routers, switches, firewalls, and servers. These messages contain critical information such as time, an identifier, and a value, and are essential for monitoring IT infrastructure. The collected trap data can be used for configuring alarms and notifications, enabling proactive management of system events. The endpoint supports pagination, sorting, and filtering to efficiently manage and view the trap data.", "semantic_keywords": ["Trap Messages", "Event Monitoring", "Automated Alerts"], "ontology_classification": {"features": ["event_detection_and_monitoring", "notification_and_incident_generation", "event_listing_and_filtering"], "primary_module": "event_management", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/", "method": "GET", "details": {"operationId": "ux_common_user_profile_retrieve", "description": "This endpoint retrieves a paginated list of user profiles within the current organization. Access is determined by the authentication token used for authorization. User profiles are instrumental for tracking and initiating discovery processes. The API supports pagination through `items_per_page` and `page` parameters, and allows for sorting of results by `sort` key in ascending or descending `reverse` order. These profiles are crucial for managing user authentication and authorization, defining access levels and permissions for interactions with network devices, verifying user identity before granting access to CLI sessions, and ensuring only authorized users can execute specific commands or modify configurations.", "summary": "Gets a list of user profiles", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "This endpoint is designed for managing user profiles, which are the cornerstone of authentication and authorization within the system, particularly concerning access to network devices and managing CLI sessions. It integrates with the AAA (Authentication, Authorization, and Accounting) framework. When utilizing this API, ensure your authentication token has the necessary permissions as this is a privilege-based feature. \n\nParameters:\n- `items_per_page` (required, integer): Specifies the number of results to return per page.\n- `page` (required, integer): Indicates the specific page number to retrieve.\n- `reverse` (optional, boolean): If set to `true`, results will be sorted in descending order. Default is ascending.\n- `sort` (optional, string): The key by which the results should be sorted. Examples of sorting keys could include 'profile name', 'number of logins', or similar fields relevant to user profiles, though specific valid sort keys are not detailed here. The 'name of the profile' is a key identifier.\n\nCommon use cases include populating user management dashboards, auditing user activity (such as login/logout counts), and managing user permissions for various system functionalities."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Security Personnel"], "primary_use_case": "To retrieve a paginated and sortable list of user profiles for authentication, authorization, and managing access to network devices and CLI sessions."}, "content_for_embedding": "This API retrieves a paginated and sortable list of user profiles within an organization. These profiles are fundamental for managing user authentication, authorization, access levels, and permissions, particularly for interactions with network devices and CLI sessions. It supports auditing user activity and populating user management dashboards.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "organization_management", "device_credential_management", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["User Profiles", "Profile Management", "Pagination", "User Authentication", "User Management", "Access Control", "Retrieval", "Search", "Filter"]}}, {"path": "/ux/common/user/profile/", "method": "POST", "details": {"operationId": "ux_common_user_profile_create", "description": "This endpoint is used to create a new user profile within the current organization. It allows administrators to curate end-user functionalities by defining various user attributes like email, name, password, contact details (landline, phone), timezone, and organizational role. This is a privilege-based feature, ensuring that only authorized users can create and manage user accounts, aligned with the organization's needs for user authentication and access control. Once a user is created, their profile can be edited or cloned, and their activity can be monitored, similar to how other profiles are managed within the system.", "summary": "Creates a new user ", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateUserSample": {"value": {"email": "test@everest.com", "name": "Test", "password": "ZDk5NjMwYmNjNzA1ODYzOWU3ZTgwZGYyMzlmMzhhMzI6OlUyRnNkR1ZrWDEvc0Jlb1BwcVYxcGViUWlucHFDTG1DdUlUanVMYWtzb1U9", "confirm_password": "ZDk5NjMwYmNjNzA1ODYzOWU3ZTgwZGYyMzlmMzhhMzI6OlUyRnNkR1ZrWDEvTUJhSkp2bENBQWlKdHBUOHVQY1ErdmZ6dnRhMkowMDg9", "landline": "0801212121", "timezone": "time zone 1", "phone": "99999999", "dashboard": "1", "role": "", "is_active": true, "organization_role": "Manager", "first_name": "Test", "username": "test@everest.com"}, "summary": "Create User Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"status": "success", "user_id": 20, "message": "user created"}, "examples": {"ResponseSample": {"value": {"status": "success", "user_id": 20, "message": "user created"}, "summary": "Response Sample"}}}}, "description": ""}}, "additional_info": "The request body for this endpoint specifies various fields required for user creation, including `email`, `name`, `password`, `confirm_password`, `landline`, `timezone`, `phone`, `dashboard` (likely indicating dashboard access), `role`, `is_active` (boolean to set user status), `organization_role` (e.g., 'Manager'), `first_name`, and `username`. It's crucial for `password` and `confirm_password` to match, and for administrators to consider the implications of `is_active` and `organization_role` on the new user's access and capabilities. This API is commonly used in admin panels to provision new accounts and manage user access within an organization, allowing for granular control over user functionalities.", "parameters": [{"name": "email", "in": "body", "description": "Inferred parameter: email", "required": true, "schema": {"type": "string"}}, {"name": "name", "in": "body", "description": "Inferred parameter: name", "required": true, "schema": {"type": "string"}}, {"name": "password", "in": "body", "description": "Inferred parameter: password", "required": true, "schema": {"type": "string"}}, {"name": "confirm_password", "in": "body", "description": "Inferred parameter: confirm_password", "required": true, "schema": {"type": "string"}}, {"name": "landline", "in": "body", "description": "Inferred parameter: landline", "required": true, "schema": {"type": "string"}}, {"name": "timezone", "in": "body", "description": "Inferred parameter: timezone", "required": true, "schema": {"type": "string"}}, {"name": "phone", "in": "body", "description": "Inferred parameter: phone", "required": true, "schema": {"type": "string"}}, {"name": "dashboard", "in": "body", "description": "Inferred parameter: dashboard", "required": true, "schema": {"type": "string"}}, {"name": "role", "in": "body", "description": "Inferred parameter: role", "required": true, "schema": {"type": "string"}}, {"name": "is_active", "in": "body", "description": "Inferred parameter: is_active", "required": true, "schema": {"type": "string"}}, {"name": "organization_role", "in": "body", "description": "Inferred parameter: organization_role", "required": true, "schema": {"type": "string"}}, {"name": "first_name", "in": "body", "description": "Inferred parameter: first_name", "required": true, "schema": {"type": "string"}}, {"name": "username", "in": "body", "description": "Inferred parameter: username", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "System Administrator"], "primary_use_case": "To create and manage new user profiles and accounts within an organization, enabling administrators to control user authentication and access."}, "content_for_embedding": "This API creates new user profiles with various attributes like email, name, password, contact details, timezone, and organizational role. It's a privilege-based feature for administrators to manage user accounts, authentication, and access control within the organization. User profiles can be edited, cloned, and monitored after creation.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "organization_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["User Management", "User Profiles", "Access Control"]}}, {"path": "/ux/common/user/profile/{id}/", "method": "GET", "details": {"operationId": "ux_common_user_profile_retrieve_2", "description": "This endpoint retrieves a user's profile within the current organization. User profiles are crucial for tracking and initiating discovery processes periodically, with the profile name serving as a key identifier. The profile information helps in managing user authentication for network device access and understanding how a user interacts with or is utilized by various Configuration Items (CIs).", "summary": "Gets a user profile with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required and represents the unique identifier for the user profile to be fetched. The profile name often corresponds to the user's network login name or an alias. This endpoint is fundamental for understanding how users interact with IT assets and services, contributing to the alignment of users, assets, and services across an organization's locations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Security Analyst", "IT Asset Manager"], "primary_use_case": "Retrieving user profile information for authentication, asset interaction tracking, and organizational alignment within the current organization."}, "content_for_embedding": "This API retrieves a specific user's profile by ID within an organization. It provides critical information for tracking user interactions with IT assets and services, managing user authentication for network device access, and understanding user utilization of Configuration Items (CIs). The profile name often serves as a key identifier, such as a network login or alias, facilitating the alignment of users, assets, and services across the organization.", "semantic_keywords": ["User Profiles", "User Management", "User Authentication"], "ontology_classification": {"features": ["user_management", "user_access_auditing", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_common_user_profile_update", "description": "This endpoint is used to update an existing user's profile within the current organization. It provides the ability to modify various profile settings such as commands, visibility (Public/Private), user tags, and other user-specific profile details. This corresponds to the 'Edit' action described in the user guide for modifying a selected user profile. The user's profile is serialized for updates.", "summary": "Edits the user with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required and uniquely identifies the user whose profile is to be updated. While editing users is possible via this endpoint, adding new users is typically handled through an 'Invite' process. This PUT operation allows for detailed modifications to an existing user's profile, contrasting with cloning (which creates a new profile from an existing one) or deleting a profile. This endpoint is crucial for user management and ensuring user profiles accurately reflect their intended settings and permissions."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff"], "primary_use_case": "Updating user profiles and managing user-specific settings within an organization."}, "content_for_embedding": "This API endpoint allows for the modification and update of an existing user's profile within the current organizational context. It enables changes to various profile settings, including commands, visibility (public/private status), and user tags. This is a key function for user management, facilitating detailed adjustments to user profiles rather than creation or deletion. The user's profile is serialized for these updates, and the operation is identified by a unique user ID.", "semantic_keywords": ["User Profiles", "Update", "Profile Management"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "tag_management", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/user/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_user_profile_destroy", "description": "This endpoint enables the deletion of an existing user within the current organization. While the primary action is to remove a user, it's crucial to note a significant constraint: users cannot be deleted if, for example, they are associated as an owner, in which case the owner must be replaced in a pop-up first. This permanent removal action is irreversible, similar to other delete functionalities within the system for profiles and configurations.", "summary": "Deletes the user with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required to specify the unique identifier of the user to be deleted. It appears that direct deletion of users might sometimes be restricted, as indicated by 'users cannot be deleted; replace the owner in the pop-up.' (Context Rank 1). This suggests that certain 'user' types or roles might prevent direct deletion without prior reassignment or specific conditions being met, making this an important consideration for API consumers. The general 'Delete' functionality across the system implies a permanent and irreversible removal, as seen with SLA Profiles and other configurations, so users should proceed with caution."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "Managing user accounts and ensuring data integrity during user removal."}, "content_for_embedding": "This API endpoint allows for the permanent and irreversible deletion of an existing user within an organization by their unique ID. It is crucial to note that users cannot be deleted if they are associated as an owner or have active tickets, requiring prior reassignment or specific conditions to be met. This functionality is similar to other system-wide delete operations for profiles and configurations, emphasizing the finality of the action. Deletion is a privilege-based feature, typically performed by administrators.", "semantic_keywords": ["Delete", "User Management", "User Profiles"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/active_users/", "method": "POST", "details": {"operationId": "ux_common_user_profile_active_users_create", "description": "This POST API endpoint facilitates the viewing and editing of user profiles, specifically focusing on 'active users'. Active users are defined as those currently logged in and actively engaging with the system, representing real-time presence for interaction or collaboration. While the primary function is to serialize user querysets for viewing and editing, the endpoint is instrumental in managing user information. The ability to edit user profiles allows for operations such as updating user privileges within specific modules, for instance, granting or modifying 'Edit' privileges in areas like the 'Business Catalogue' module.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint serializes users querysets, implying that internal data structures are converted into a format suitable for transmission or storage. While this page allows viewing of a list of currently online users, the highest-ranked context notes that 'No actions can be performed from this page' regarding active users, suggesting that detailed editing might occur through separate, linked processes or specific request body parameters not explicitly detailed in the provided JSON spec or contexts. For broader user management, refer to the 'Users module'. The general concept of viewing and editing aligns with user privilege management, where 'Edit' selected allows viewing and performing edit operations within a module/page. This is particularly relevant for managing active user capabilities within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Administrator"], "primary_use_case": "To manage active user profiles, including viewing and editing user information and updating user privileges within the system."}, "content_for_embedding": "This API endpoint allows administrators to view and edit profiles of active users, defined as those currently logged in. It facilitates the management of user information and enables the updating of user privileges within various system modules, such as granting or modifying \"Edit\" permissions. The endpoint serializes user querysets for efficient data transmission and storage, supporting real-time user presence for interaction and collaboration.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "User Privileges", "Profile Management"]}}, {"path": "/ux/common/user/profile/activeuser_list/", "method": "GET", "details": {"operationId": "ux_common_user_profile_activeuser_list_retrieve", "description": "This API endpoint provides a read-only list of users who are currently logged in and actively engaging with the system. These 'active users' represent the real-time presence of individuals interacting with the system, indicating their availability for interaction or collaboration. The primary purpose is to view who is currently online, aligning with the real-time presence aspect highlighted in the user guide.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "It is important to note that this endpoint is for viewing active users only. No actions, such as editing or performing operations on user profiles, can be performed through this specific API endpoint. This aligns with the 'Note: No actions can be performed from this page' stated in the user guide regarding the list of active users. For user management operations (like editing), users should refer to the Users module or other relevant API endpoints, as this endpoint is strictly informational regarding current online status."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "System Monitor"], "primary_use_case": "To provide a real-time, read-only list of users who are currently logged in and actively engaging with the system, indicating their online presence and availability."}, "content_for_embedding": "This API endpoint offers a read-only view of users currently logged in and actively interacting with the system. It serves to display the real-time presence of individuals, indicating their online status and availability for collaboration. Crucially, this API is strictly informational; it does not permit any actions such as editing, deleting, or performing operations on user profiles. Its purpose is solely to provide a live list of active users, consistent with documentation stating that no management actions can be performed from this view.", "semantic_keywords": ["Active Users", "User Presence", "User Profiles"], "ontology_classification": {"features": ["user_management", "real-time_activity_tracking", "multiple_view_options"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/user/profile/asset-lifecycle/", "method": "GET", "details": {"operationId": "ux_common_user_profile_asset_lifecycle_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support"], "primary_use_case": "To retrieve and manage user profiles, including their associated roles, privileges, and asset lifecycle information."}, "content_for_embedding": "This API endpoint allows for the retrieval of user profiles, including details related to their asset lifecycle. It supports viewing and potentially editing user information, roles, and privileges. The retrieved data can be displayed in various formats, such as List View and Card View, and includes details like username, mobile, role, and status. The API is part of a privilege-based system where access and actions like editing and deleting are controlled by administrator-defined roles and privileges.", "semantic_keywords": ["User Profile", "User Management", "Asset Lifecycle"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "asset_lifecycle_management", "multiple_view_options"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/download_csv/", "method": "GET", "details": {"operationId": "ux_common_user_profile_download_csv_retrieve", "description": "This API endpoint allows users with the appropriate 'Download' privilege to export user profile data in CSV format. Primarily, it supports performing export operations within the selected module or page, enabling offline analysis, sharing, and integration with other tools. This functionality is part of the user management capabilities, allowing administrators or authorized users to retrieve user information as a downloadable CSV file. The original description stated 'allows users to be viewed or edited', however, based on the `download_csv` in the path and relevant contexts (Context Rank 1 & 3 explicitly discuss 'Download' and 'export operations' for CSV format), this API is specifically for downloading/exporting user data, not viewing or editing directly via the API.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "The 'Download' privilege is crucial for accessing this endpoint, as it enables users to download and perform export operations. For instance, the 'Download' privilege allows users to export logs from the Log Management module in PDF, CSV, or XLS formats, demonstrating the capability for CSV export. This endpoint is specifically designed for exporting user profiles. While the original description mentioned 'viewed or edited', the `download_csv` in the path and the context strongly indicate its export-only nature. Users should ensure they have the necessary 'Download' privilege assigned to their role through the Privileges module to successfully utilize this API. Please note, no specific parameters or request body details were found in the provided JSON specification or contexts for this GET request, implying the endpoint likely triggers a direct CSV download upon access by an authorized user."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Authorized Users"], "primary_use_case": "This API allows authorized users to export user profile data in CSV format for offline analysis, sharing, and integration with other tools."}, "content_for_embedding": "This API endpoint enables authorized users with the necessary 'Download' privilege to export user profile data in CSV format. It is a GET request designed to facilitate offline analysis, sharing, and integration of user information by providing a direct downloadable CSV file of user profiles. No specific parameters are required, as the endpoint triggers a direct download upon access by an authorized user.", "semantic_keywords": ["Data Export", "User Profiles", "CSV Export"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/user/profile/get_user_clocks_data/", "method": "GET", "details": {"operationId": "ux_common_user_profile_get_user_clocks_data_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To manage and view user profiles, including their roles and privileges."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing user profile data. It allows for viewing user details, including their status, roles, and other profile information. Depending on privileges, it also supports editing and deleting existing user profiles. The API facilitates user management by providing access to user lists, enabling administrators to manage user access, roles, and privileges, and allowing users to view their own or other authorized user data. It supports different views like List View and Card View for user data.", "semantic_keywords": ["User Management", "User Profiles", "User Privileges"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "multiple_view_options", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/get_user_clocks_status/", "method": "GET", "details": {"operationId": "ux_common_user_profile_get_user_clocks_status_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Security Personnel"], "primary_use_case": "This API is used for monitoring user activity and presence within the system by retrieving their real-time login and activity status. It also supports the broader context of viewing and managing user profiles."}, "content_for_embedding": "This API endpoint, `/ux/common/user/profile/get_user_clocks_status/`, is designed to retrieve the real-time \"clocks status\" of users, indicating whether they are currently logged in or active within the system. It serves as a crucial tool for administrators and authorized personnel to monitor user presence and activity. While primarily focused on status retrieval (viewing), the API operates within a broader user profile management context that includes the ability to view and edit user details, subject to defined roles and privileges.", "semantic_keywords": ["User Status", "User Management", "Active Users"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/getmyprofile/", "method": "GET", "details": {"operationId": "ux_common_user_profile_getmyprofile_retrieve", "description": "This GET API endpoint, `/ux/common/user/profile/getmyprofile/`, is designed to retrieve the current user's profile information. While the original description suggested it allows users to be viewed or edited, the `GET` method explicitly indicates retrieval. It is relevant for users to see or access their own profile details. Given the context, this endpoint likely relates to 'User. Read.All' permissions, suggesting it's part of a broader user management system where profile data can be read.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "To successfully use this API, ensure that the necessary 'User. Read.All' permissions are enabled, typically found under 'User' related APIs as indicated by the guide. This API is primarily for viewing user profiles, rather than for editing. For detailed editing of user requests or profiles, a separate 'Detailed Edit' or 'Edit' functionality would be required, as suggested by other contexts. While the API specification shows no specific parameters, authentication (e.g., Auth Key, Basic Auth, Custom Auth) might be required, as is common for user-specific endpoints."}, "llm_generated": {"business_context": {"user_personas": ["End-users viewing their own profile", "Administrators managing user profiles"], "primary_use_case": "To retrieve the current user's profile information."}, "content_for_embedding": "This GET API endpoint retrieves the current user's profile information. It is a read-only operation, allowing users to view or access their own profile details. It requires 'User. Read.All' permissions and is typically part of a broader user management system. Authentication is required.", "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Profile", "Retrieval", "View"]}}, {"path": "/ux/common/user/profile/logout/", "method": "POST", "details": {"operationId": "ux_common_user_profile_logout_create", "description": "This API endpoint facilitates user logout functionality. While the original description broadly stated it allows users to be 'viewed or edited', the context strongly suggests its primary role is to manage user sessions and track login/logout events. It is part of a module that monitors user login and logout counts, profile names, and session activity for specific IT assets, as detailed in the user guide. This endpoint would specifically handle the action of ending a user's session.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint processes requests to serialize user querysets, likely updating session status and related metrics internally. Although the `parameters` array is empty, this endpoint implicitly manages user session state. Relevant contexts mention displaying a user login and logout cart, tracking the number of logins and logouts for each user profile. This endpoint contributes to those metrics by recording a logout event. Developers should be aware that successful invocation of this endpoint will terminate the user's active session, and subsequent API calls often require re-authentication. The `request_body_description` of 'Serializes users querysets' hints at the backend process for managing user session data during logout."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Developers", "Security personnel"], "primary_use_case": "This API endpoint facilitates user logout, terminating active user sessions and recording these events for auditing and tracking user login/logout activity within the system."}, "content_for_embedding": "This API endpoint handles user logout, effectively ending a user's active session. It plays a crucial role in managing user sessions and tracking login/logout events, contributing to a comprehensive audit trail of user activity on IT assets. Successful invocation terminates the user's session, often requiring re-authentication for subsequent API calls. It serializes user querysets to update session status and related metrics internally, supporting features like displaying user login/logout carts and tracking counts for user profiles.", "ontology_classification": {"features": ["user_management", "audit_log", "user_access_auditing"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Audit Trail", "User Profile"]}}, {"path": "/ux/common/user/profile/myprofile/", "method": "POST", "details": {"operationId": "ux_common_user_profile_myprofile_create", "description": "This API endpoint allows for the viewing and editing of user profiles. It serves as a central point for managing user-specific information. The serialization of user querysets implies that the API can handle complex queries to retrieve or modify user data, supporting comprehensive user management operations. Building upon the concept of editable APIs, as seen in other contexts, this endpoint is designed for flexible interaction with user profiles.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint handles the serialization of user querysets for both viewing and editing operations, suggesting it can process various user-related data requests. While specific parameters are not detailed in the provided JSON, it's implied that user profile management involves fields such as those described for user access levels and profile purposes (e.g., 'Admin profile for core routers'). Given the context of APIs being editable post-submission, it's likely this endpoint's capabilities can be tailored. The API is related to 'User' functionalities, often associated with 'User. Read.All' permissions in broader API configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Authorized User", "Network Admin"], "primary_use_case": "To view and edit user profiles, enabling comprehensive user management operations."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of user profiles, serving as a central point for managing user-specific information. It supports comprehensive user management operations by handling the serialization of user querysets for both retrieval and modification of user data. The API is designed for flexible interaction with user profiles, allowing for tailoring of capabilities post-submission, and is associated with user functionalities like \"User. Read.All\" permissions.", "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Profile", "User Management", "Profile Management"]}}, {"path": "/ux/common/user/profile/options/", "method": "GET", "details": {"operationId": "ux_common_user_profile_options_retrieve", "description": "This GET API endpoint, `/ux/common/user/profile/options/`, allows for the retrieval and management of user profile options. It facilitates both viewing and editing capabilities for user profiles within the system. The endpoint supports viewing specific profile attributes like allowed access types (e.g., SSH, Telnet) and brief notes describing the profile's function, as indicated by Context Rank 1. While the primary method is GET, the description explicitly mentions 'edited', implying that the retrieved options can be modified through other means or subsequent API calls, aligning with the general concept of user profile management as highlighted in Context Rank 5 regarding 'Edit' privileges and Context Rank 6 regarding editing APIs.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "Although this is a GET endpoint, its description states that it allows users to be 'viewed or edited'. This suggests that the retrieved 'options' might then be used in conjunction with other API calls (e.g., PUT or POST to the same or a related endpoint not detailed here) to perform the actual editing of user profiles. Context Rank 5 elaborates on 'Edit' privileges, noting that they allow users to view and perform edit operations within a selected module, and Context Rank 6 mentions that 'APIs can be edited or deleted using the respective icons', reinforcing the concept of API-driven editing functionality. The context also hints at various authentication options (Auth Key, Basic Auth, Custom Auth, No Auth) that might be relevant for accessing user profiles, though these are not specific to this endpoint's parameters. Common use cases suggested by the contexts include managing authentication profiles and understanding access configurations, potentially for administrators or system engineers."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Engineer", "Network Administrator"], "primary_use_case": "To retrieve user profile configuration options, including access types and descriptive notes, enabling administrators and system engineers to view and manage user access and system configurations."}, "content_for_embedding": "This GET API endpoint retrieves user profile options, such as allowed access types (e.g., SSH, Telnet) and brief descriptive notes, for viewing and subsequent management. Although a GET request, its purpose is to facilitate the broader management and editing of user profiles and associated configurations within the system. It is crucial for administrators and system engineers to understand and control user access and network device configurations.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "network_configuration_management_(nccm)", "device_credential_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Profiles", "Configuration Profiles", "Profile Management"]}}, {"path": "/ux/common/user/profile/preference/", "method": "POST", "details": {"operationId": "ux_common_user_profile_preference_create", "description": "This API endpoint, `/ux/common/user/profile/preference/`, facilitates the viewing and editing of user profiles and preferences. It allows for detailed management of user-specific configurations, including the ability to perform read and edit operations on user profiles. The endpoint serializes user querysets to enable these actions. This is consistent with functionalities described for user profile management where users can view their profiles and potentially edit settings or preferences, mirroring 'Edit App registration' or 'Edit' privileges for viewing and performing edit operations within a module or page, such as managing services or applications.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is primarily for managing individual user profiles and preferences. While the API specification mentions 'parameters' as an empty array and 'request_body_description' as 'Serializes users querysets', it implies that user data is passed in the request body for editing or retrieved as part of the view operation. Contexts suggest similar 'edit' functionalities often involve detailed controls, allowing users to modify existing services or specific profile details. This API likely plays a role in configuring user access and operational behaviors, akin to how app registrations or service permissions are configured and edited. Developers should ensure the request body conforms to the expected serialization format for user querysets when performing edit operations. This may align with 'User. Read.All' permissions for viewing and specific 'Edit' permissions for modification capabilities."}, "llm_generated": {"business_context": {"primary_use_case": "This API is designed to manage user profiles and preferences, allowing for the viewing and editing of user-specific configurations and access settings."}, "content_for_embedding": "This API endpoint provides comprehensive functionality for managing individual user profiles and their associated preferences. It enables both viewing and editing of user-specific configurations, including settings related to access, operational behaviors, and other customizable profile details. The API serializes user querysets to facilitate these read and write operations, playing a crucial role in user access control and system configuration.", "semantic_keywords": ["User Profile", "Edit", "User Management"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/retrieve-page-config/", "method": "GET", "details": {"operationId": "ux_common_user_profile_retrieve_page_config_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["User Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "End User"], "primary_use_case": "Managing user profiles and access permissions."}, "content_for_embedding": "This API retrieves the configuration settings for user profile pages, enabling the display, viewing, editing, and deletion of user information. It supports various display options like list and card views, and its functionality is governed by user roles and privileges, allowing administrators to manage user access and permissions.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "multiple_view_options", "detailed_record_view", "quick_edit", "request_management_actions_(delete,_copy,_merge)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Profiles", "User Management", "Access Control"]}}, {"path": "/ux/common/user/profile/save-page-config/", "method": "POST", "details": {"operationId": "ux_common_user_profile_save_page_config_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To manage and save page configurations for user profiles, including user viewing, editing, and privilege management."}, "content_for_embedding": "This API endpoint is designed to save page configurations for user profiles. It is a crucial part of the user management system, enabling administrators to define and store specific display settings or preferences for individual user interfaces. The broader context of this API involves comprehensive user management, including the ability to view, edit, invite, and delete users, as well as manage their associated roles and privileges.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "User Profiles", "Configuration"]}}, {"path": "/ux/common/user/profile/update_csv/", "method": "POST", "details": {"operationId": "ux_common_user_profile_update_csv_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "System Administrator"], "primary_use_case": "This API enables administrators to manage user profiles, including bulk creation, viewing, and editing of user data, roles, and associated privileges within the system."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management of user profiles, allowing for the creation, viewing, and modification of user data, including their roles and privileges. It supports bulk operations, likely through CSV import, making it a crucial tool for system administrators to efficiently manage user access and information.", "semantic_keywords": ["User Management", "User Profiles", "CSV Import"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/user/profile/updateactiveusers/", "method": "POST", "details": {"operationId": "ux_common_user_profile_updateactiveusers_create", "description": "This API endpoint is designed to allow administrators to view and manage 'active users' within the system. Active users are defined as those currently logged in and actively engaging with system activities, indicating their real-time presence. The endpoint facilitates the serialization of users querysets, enabling the viewing or editing of user profiles. This is distinct from a view-only list of online users where no actions can be performed, as this endpoint explicitly supports editing capabilities.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on 'active users' as opposed to the general 'Users module' for broader user management (Context Rank 2). While Context Rank 4 mentions a page where active users can be seen but no actions taken, this API explicitly allows for viewing or *editing* user profiles, aligning more with Context Rank 5 and 6 which detail 'Edit' privileges for viewing and performing edit operations within modules. The API serializes user querysets for these operations. Developers should note the distinction between simply viewing active users and the ability to modify their profiles via this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To allow administrators to view and manage (edit) active user profiles within the system."}, "content_for_embedding": "This API enables administrators to view and edit active user profiles. It specifically targets users currently logged in and actively engaging with the system, providing management capabilities beyond simple viewing, including the ability to modify user details.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Active Users", "User Profile", "Update"]}}, {"path": "/ux/common/user/profile/upload_csv/", "method": "POST", "details": {"operationId": "ux_common_user_profile_upload_csv_create", "description": "This API endpoint facilitates the upload of user data in CSV format. It enables privileged users to add or update user profiles by performing 'add' operations within a selected module or page, such as the `Users` module. The upload supports CSV file formats and is part of the system's user management capabilities, allowing for bulk submission of user information.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body serializes user querysets, likely referencing a structured data input for the user profiles being uploaded. Although the original description mentioned 'viewing or editing', the relevant contexts (Rank 1, 2, 3) strongly emphasize 'upload' functionality, specifically for 'add' operations for new users or updates via upload. The accepted format for upload is CSV (Context Rank 2), with a maximum size of 20 MB. This endpoint is analogous to the 'Upload' privilege described in the user guide, which grants the ability to view and perform add operations within a module. For more details on user management, refer to the 'Users module' as mentioned in Context Rank 6."}, "llm_generated": {"business_context": {"user_personas": ["Privileged users", "Administrator"], "primary_use_case": "Facilitating bulk user data upload and profile updates via CSV."}, "content_for_embedding": "This API endpoint allows privileged users, such as administrators, to upload user data in CSV format for bulk addition or updating of user profiles within the system's user management capabilities. It supports CSV file formats up to 20 MB and is analogous to the \"Upload\" privilege for user management.", "semantic_keywords": ["User Profiles", "CSV Import", "Bulk Add"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/user/profile/user_clocks_data/", "method": "POST", "details": {"operationId": "ux_common_user_profile_user_clocks_data_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Administrator", "IT Support Staff"], "primary_use_case": "This API allows for comprehensive management of user profiles, including viewing, adding, editing, and deleting users, as well as managing their associated roles and privileges within the system."}, "content_for_embedding": "This API endpoint facilitates the management of user profiles within the system. It enables operations such as viewing, adding, editing, and deleting user accounts. The functionality is privilege-based, allowing administrators to control user access, assign roles, and define privileges. It also supports the management of user authentication data and provides insights into active user statuses.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["User Management", "User Profiles", "User Privileges"]}}, {"path": "/ux/common/user/profile/user_invite/", "method": "POST", "details": {"operationId": "ux_common_user_profile_user_invite_create", "description": "This API endpoint facilitates the invitation and management of users within the system. While the original description states it allows users to be 'viewed or edited', the context reveals its primary function is for 'inviting' users. It supports administrators and privileged users in mailing invites, viewing the status of pending invites, and resending them. Although editing and deleting users are possible through other means, adding users is specifically handled via this 'Invite' mechanism. This endpoint serializes user querysets in its request body.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for user onboarding, specifically for inviting new users (e.g., technicians, requesters). The invitation link typically expires (e.g., in 36 hours, though this can be changed in settings); new invites must be sent for re-invitations. If a user receives multiple invites with different roles, their role will be assigned based on the first link used for registration. Administrators can monitor pending invites via a dedicated notifications icon. For detailed steps on how to invite users, refer to the 'Infraon Configuration -> User Management -> Users' section within the system's user interface, where an 'Invite User(s)' button is available. The system allows group management of users and requesters based on mapped asset tags for streamlined administration."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "To facilitate the invitation and onboarding of new users, including administrators, technicians, and requesters, into the system. It allows for sending new invitations, managing pending invites, and re-inviting users with specific roles."}, "content_for_embedding": "This API endpoint is designed for inviting new users to the system. It enables administrators and privileged users to send email invitations, monitor the status of pending invites, and resend invitations. It is a crucial component for user onboarding, allowing the assignment of specific roles during the invitation process. While other methods exist for editing or deleting users, adding new users is exclusively handled through this invitation mechanism. The system also supports group management of users based on asset tags.", "ontology_classification": {"features": ["user_management", "add", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Invite User", "User Management", "User Onboarding"]}}, {"path": "/ux/common/user/profile/validate_csv/", "method": "POST", "details": {"operationId": "ux_common_user_profile_validate_csv_create", "description": "This API endpoint facilitates the validation of CSV files related to user data, primarily for bulk operations such as viewing or editing users. The validation process allows users to verify uploaded CSV files and provides a summary of valid and invalid records.", "tags": ["User Profile"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UserList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body serializes user querysets. While the API's specific authentication types are not detailed, APIs generally use authorization to secure client requests, including API Key (key-value pairs in headers or query parameters) or Basic Auth (username and password). This endpoint is likely part of a broader user management system where CSV files are used to import or update user information in bulk. Users can download a validation report after the process."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "User Manager"], "primary_use_case": "This API validates CSV files containing user data for bulk operations such as importing or updating user profiles, ensuring data integrity before processing."}, "content_for_embedding": "This API endpoint is designed for the validation of CSV files that contain user-related data. It supports bulk operations, allowing users to verify the integrity of uploaded CSVs before proceeding with actions like viewing or editing user profiles. The validation process provides a summary of both valid and invalid records, and users can download a detailed validation report for further analysis. This is crucial for ensuring data quality in user management systems, especially when importing or updating large sets of user information.", "semantic_keywords": ["CSV Import", "Validation", "User Management"], "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/common/vendor/vendor/", "method": "GET", "details": {"operationId": "ux_common_vendor_vendor_list", "description": "This `/ux/common/vendor/vendor/` API endpoint is designed to manage user records. Primarily, it allows for the viewing of user details and facilitates the editing of existing user information. This functionality is crucial for administrators or authorized users to maintain user accounts, modify privileges, and update user-specific data. The API supports operations similar to those found in user management modules where users can view and perform edit operations within selected modules/pages, such as updating service listings or app registrations, as highlighted in the provided user guidelines. While the API's main purpose is to view and edit, its context within user management suggests it contributes to allowing users to submit and view requests, like access requests or catalog items, and managing other related user configurations.", "tags": ["Vendor Managemment"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Vendor"}}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint's primary interaction is for viewing and editing. As a GET method, it is typically used for retrieval of user data. Although the original description suggests editing capabilities, this would imply supporting other methods like PUT or POST which are not specified; therefore, further documentation would be required for actual edit operations. The context provided heavily emphasizes the 'Edit' privilege, suggesting that users interacting with this endpoint usually possess the 'Edit' and 'View' permissions to manage aspects like 'Business Catalogue' modules or app registrations. This endpoint is fundamental for user administration functionalities, allowing authorized parties to manage their internal or external users effectively."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "authorized user"], "primary_use_case": "This API endpoint is used by administrators and authorized users to manage user and vendor records, including viewing details, modifying privileges, and facilitating updates to user-specific data within a user administration context."}, "content_for_embedding": "This GET API endpoint, `/ux/common/vendor/vendor/`, is designed for managing user and vendor records. Its primary function is to allow administrators and authorized users to view user details and facilitate the editing of existing user information, including modifying privileges and updating user-specific data. While the method is GET for retrieval, the endpoint is fundamental for user administration functionalities, enabling authorized parties to manage internal or external users effectively within modules like Business Catalogue or app registrations. It supports operations similar to those found in user management modules where users can view and perform edit operations, contributing to the overall management of user accounts and related configurations.", "semantic_keywords": ["User Management", "Vendor Management", "Details retrieval"], "ontology_classification": {"features": ["user_management", "vendor_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/vendor/vendor/", "method": "POST", "details": {"operationId": "ux_common_vendor_vendor_create", "description": "This API endpoint facilitates the viewing and editing of user accounts within the system. It is designed to manage user profiles, similar to how an administrator might manage access requests or catalog items as described in the administrative guides. This endpoint aligns with functionalities that allow users to view their status, edit their details, or for administrators to manage user access and privileges, such as adding and editing services within modules like the 'Business Catalogue'. Although the original description states 'users to be viewed or edited', its context, especially from the provided guides, clearly points towards the management of user profiles and their associated permissions.", "tags": ["Vendor Managemment"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Vendor"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Vendor"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Vendor"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Vendor"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this POST endpoint uses a serializer for Documents, supporting a wide range of primitive and compound data types. Developers can utilize fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ReferenceField` (which behaves like `ForeignKey` with potential nested serialization), `ListField`, and `DictField`. While `EmbeddedDocumentField` supports nested serialization for non-zero depth, note the `TODO` regarding potential issues. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested', so their usage should be approached with caution. All other fields not explicitly listed are mapped to `DocumentField` and 'will probably work wrong', indicating they should be avoided or thoroughly tested. This endpoint is crucial for managing user permissions and details, potentially allowing for fine-grained control over user access as highlighted by the 'Add', 'Edit', and 'View' privilege contexts. Common use cases include user profile updates, access management, and integrating with consent screens or app registration processes where user data might be modified."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "system_user", "developer"], "primary_use_case": "This API facilitates the creation and modification of user accounts and profiles, including managing their associated permissions and access privileges within the system."}, "content_for_embedding": "This API endpoint, `ux_common_vendor_vendor_create`, is used for the creation and modification of user accounts and profiles within the system. It allows for the management of user details, access privileges, and permissions, similar to administrative functions for user access and catalog items. The request body supports various data types including StringField, IntField, BooleanField, DateTimeField, ReferenceField, ListField, and DictField, enabling comprehensive user profile updates. This endpoint is crucial for user profile management, access control, and integrating with processes requiring user data modification, such as consent screens or app registration. It is a privilege-based feature, meaning access to manage these profiles is controlled by administrator-assigned roles and privileges.", "semantic_keywords": ["User Management", "Add", "Edit"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/common/vendor/vendor/{id}/", "method": "GET", "details": {"operationId": "ux_common_vendor_vendor_retrieve", "description": "This endpoint is used to retrieve detailed information about a specific vendor within the current organization's IT environment. It supports fetching details such as the vendor's name and location, which are central to managing vendor relationships in the Infraon Infinity portal. This API allows for a comprehensive overview of a particular vendor's data, crucial for managing configurations, device manufacturers (e.g., Cisco, Juniper, Nivetti) and their associated profiles.", "summary": "Gets a vendor with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Vendor Managemment"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Vendor"}}}, "description": ""}}, "additional_info": "The `id` parameter is a required path parameter, representing the unique identifier for the vendor whose details are being requested. This endpoint is particularly useful for integrating with the Infraon Infinity Vendor module, which serves as a centralized hub for managing information about software and hardware vendors. It is commonly used as a lookup mechanism to get specific vendor data, supporting various operations like managing configuration profiles and tracking contract information related to vendors."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "IT managers", "Procurement teams", "Asset managers"], "primary_use_case": "To retrieve comprehensive details about a specific vendor within the organization's IT environment, enabling effective management of vendor relationships, configurations, and associated contracts."}, "content_for_embedding": "This API endpoint retrieves detailed information for a specific vendor using its unique ID. It provides a comprehensive overview of vendor data, including name and location, crucial for managing vendor relationships, configurations, device manufacturers, and associated profiles within the Infraon Infinity portal. It serves as a lookup mechanism for integrating with the Infraon Infinity Vendor module, supporting operations like managing configuration profiles and tracking contract information related to vendors.", "ontology_classification": {"features": ["vendor_management", "detailed_record_view", "search_functionality"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Vendor Management", "Details retrieval", "Search"]}}, {"path": "/ux/common/vendor/vendor/{id}/", "method": "PUT", "details": {"operationId": "ux_common_vendor_vendor_update", "description": "This API endpoint facilitates the viewing and editing of vendor details within the system. It allows users to modify existing vendor information by providing the unique vendor ID. The PUT method indicates that this operation is for updating a vendor's record. This capability is aligned with general API management practices mentioned in the documentation, allowing for the editing of registered entities.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Vendor Managemment"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Vendor"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Vendor"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Vendor"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Vendor"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and uniquely identifies the vendor to be viewed or edited. The request body for this PUT operation will utilize a serializer capable of handling various primitive data types such as `StringField`, `EmailField`, `IntField`, `BooleanField`, `DateTimeField`, and others, as well as compound fields like `ListField` and `DictField`. Special attention is paid to `ReferenceField` and `EmbeddedDocumentField`, which either autogenerate nested serializers for non-zero depth or handle references as `str(id)`. Developers should note the limitations or untested status of `FileField`, `ImageField`, and `BinaryField` as specified in the `request_body_description`. This endpoint is crucial for maintaining accurate vendor records, similar to how application registrations or APIs themselves can be edited within the system as described in the user guides."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Procurement Specialist"], "primary_use_case": "Updating and managing vendor information within the system."}, "content_for_embedding": "This API endpoint allows for the viewing and editing of existing vendor details by their unique ID. It supports updating vendor records using various primitive and compound data types, excluding `FileField`, `ImageField`, and `BinaryField`. This is crucial for maintaining accurate vendor records and is part of the system's general configuration and management practices.", "ontology_classification": {"features": ["vendor_management", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Vendor Management", "Update", "Configuration"]}}, {"path": "/ux/common/vendor/vendor/{id}/", "method": "DELETE", "details": {"operationId": "ux_common_vendor_vendor_destroy", "description": "This endpoint permanently deletes an existing vendor from the current organization's inventory. It removes the vendor and all associated details, similar to how contracts or assets are removed within the system. The deletion is final and cannot be undone.", "summary": "Deletes the vendor with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Vendor Managemment"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The 'id' path parameter is required and represents the unique identifier of the vendor to be deleted. This action is critical for managing the list of software vendors associated with the organization's IT environment, as detailed in the Vendor module documentation. Confirm the action carefully, as deletion is permanent, akin to selecting 'Yes, Delete It' for consumable assets."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Asset Manager"], "primary_use_case": "To permanently remove a vendor and all associated details from the organization's inventory."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of an existing vendor from an organization's inventory. It is used to remove a vendor and all its associated details, playing a crucial role in managing the list of software vendors within the IT environment. The action requires the unique ID of the vendor to be deleted and is final.", "semantic_keywords": ["Delete", "Vendor Management", "Irreversible"], "ontology_classification": {"features": ["vendor_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/common/vendor/vendor/options/", "method": "GET", "details": {"operationId": "ux_common_vendor_vendor_options_retrieve", "description": "This API endpoint, `/ux/common/vendor/vendor/options/`, is designed to allow users to view and manage various configuration options, specifically those related to vendor settings. It provides the capability to view existing configurations, such as access requests or catalog items, and also supports operations to edit these settings. This is aligned with roles that have 'Edit' privileges, allowing users to view and modify specific modules or pages within the system. The endpoint facilitates the management of system parameters and configurations, ensuring that users with appropriate permissions can adjust the behavior or appearance of different functionalities.", "tags": ["Vendor Managemment"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Vendor"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is particularly useful for administrators or users with elevated privileges who need to configure vendor-related options, similar to how one might edit app registrations or update specific system settings. The functionality is broad, allowing for the review and modification of various system behaviors. While the current specification doesn't explicitly list parameters, any edit operation invoked through this endpoint would implicitly require the relevant data to be passed in a request body, or as query parameters, to specify what is being modified. Given the description, it likely involves editing existing configurations rather than creating new ones, much like the 'Edit' privilege described in the context allows for modifying existing services."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with elevated privileges"], "primary_use_case": "To allow users with elevated privileges to view, manage, and edit vendor-related configuration options and system parameters."}, "content_for_embedding": "This API endpoint allows users, particularly administrators or those with elevated privileges, to view, manage, and edit various configuration options specifically related to vendor settings. It facilitates the adjustment of system parameters and configurations, similar to managing app registrations or updating system settings.", "ontology_classification": {"features": ["vendor_management", "roles_&_privileges_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Vendor Management", "Configuration", "Edit"]}}, {"path": "/ux/ims/association_events/association_events/", "method": "GET", "details": {"operationId": "ux_ims_association_events_association_events_retrieve", "description": "This API endpoint allows for the viewing and editing of Infraon users, specifically focusing on how they are associated with events. It supports management of both internal and external users, including Technicians (Tech Support User/NOC Operator) and Requesters. While the endpoint facilitates viewing and editing, the primary method for adding new users is through an 'Invite' process, which is managed elsewhere. The API is central to the user management module, enabling oversight of user roles, access, and their activities within the system, such as raising incidents, service requests, and change requests on the Requester Portal.", "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Adding users ('Invite') is not directly supported by this endpoint; it focuses on post-invitation management (viewing/editing). The user management aspect extends to classifying users based on mapped asset tags, as indicated by the 'Group Users and Requesters by Asset Data' context. This endpoint is crucial for administrators and privileged users to manage the lifecycle and access of users within the Infraon system. While the API specification did not detail specific parameters, it is implied that user identification would be necessary for viewing or editing operations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User", "Technician", "NOC Operator", "Requester"], "primary_use_case": "To manage existing Infraon users by viewing and editing their profiles, roles, access, and association with system events and asset data."}, "content_for_embedding": "This API endpoint is designed for the comprehensive management of existing Infraon users, both internal and external, such as Technicians and Requesters. It enables administrators and privileged users to view and edit user profiles, oversee their roles, access permissions, and track their activities within the system, including their involvement in incidents, service requests, and change requests. Crucially, this API supports the classification of users based on mapped asset tags, facilitating a streamlined approach to user lifecycle and access management within the Infraon ecosystem. It focuses on post-invitation user management, as the initial user invitation process is handled by a separate mechanism.", "semantic_keywords": ["User Management", "Edit", "View"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "tag_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/ims/association_events/association_events/", "method": "POST", "details": {"operationId": "ux_ims_association_events_association_events_create", "description": "This API endpoint facilitates the viewing and editing of user and requester profiles within the system. While users can be viewed or edited via this endpoint, the primary method for adding new users is through an 'Invite' process, as indicated in the documentation. This endpoint supports managing various user types, including internal and external users, Technicians, and Requesters. It allows for detailed modifications to user profiles, although specific request details for editing are handled via a 'Detailed Edit' button, distinct from quick edit actions.", "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "User creation is exclusively done via the 'Invite' mechanism, rather than directly through this endpoint. Administrators and privileged users can monitor pending invites and resend them. Users and requesters can be grouped based on mapped asset tags for streamlined management. This endpoint is crucial for managing user permissions, accessing requests, and maintaining user information within the system. Though this endpoint supports editing and viewing, general user management may also involve other modules like 'APIs & Services' or the 'Users module' for broader configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "To facilitate the viewing and editing of existing user and requester profiles within the system, enabling detailed modifications and management of various user types."}, "content_for_embedding": "This API endpoint is designed for viewing and editing existing user and requester profiles within the system. It supports managing various user types, including internal and external users, Technicians, and Requesters, and allows for detailed modifications to their profiles. While the operation ID suggests creation, direct user creation is exclusively handled via a separate 'Invite' mechanism, not through this endpoint. This API is crucial for administrators and privileged users to manage user permissions, access requests, and maintain user information, including the ability to group users and requesters based on mapped asset tags.", "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["User Management", "User Profiles", "Edit"]}}, {"path": "/ux/ims/association_events/association_events/{id}/", "method": "GET", "details": {"operationId": "ux_ims_association_events_association_events_retrieve_2", "description": "This API endpoint provides a mechanism to retrieve details and facilitate editing for a specific user within the system, identified by their unique ID. While user addition is primarily handled via 'Invite' processes, this endpoint supports viewing and modifying existing user profiles. This includes functionalities relevant to various user types such as internal/external users, Technicians (Tech Support User/NOC Operator), and Requesters, allowing for streamlined management and categorization based on associated asset data.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is required and uniquely identifies the user whose details are to be viewed or edited. Although the endpoint description mentions editing, the provided specification for a GET method typically implies retrieval. For actual editing (e.g., PUT/PATCH methods), a request body would be necessary, but none is described here. Requesters can access the Requester Portal to raise incidents and requests. Administrators and privileged users can manage invitations. This endpoint is crucial for user management tasks beyond initial invitation, such as categorizing users by asset data or updating their information, and integrates with the overall user management flow which heavily relies on 'Invite' for initial provisioning."}, "llm_generated": {"business_context": {"user_personas": ["Internal Users", "External Users", "Technicians", "NOC Operators", "Requesters", "Administrators", "Privileged Users"], "primary_use_case": "To retrieve and facilitate the management and categorization of specific user profiles, including internal/external users, Technicians, and Requesters, based on their associated asset data."}, "content_for_embedding": "This API retrieves detailed profiles for specific users, identified by a unique ID. It supports viewing and modifying existing user profiles, including internal/external users, Technicians, and Requesters. A key functionality is the categorization of users based on associated asset data, streamlining user management tasks beyond initial provisioning. This endpoint is crucial for updating user information and integrating with broader user management workflows.", "semantic_keywords": ["User Management", "User Profiles", "Asset Data"], "ontology_classification": {"features": ["user_management", "asset_association_&_classification", "detailed_record_view", "roles_&_privileges_management", "requester_self-service_portal"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/association_events/association_events/{id}/", "method": "PUT", "details": {"operationId": "ux_ims_association_events_association_events_update", "description": "This API endpoint allows for the viewing and editing of user association events. While users can be edited or deleted, the primary method for adding new users is through an 'Invite' process. This endpoint facilitates managing various user types, including internal and external users, and requesters. It supports categorizing users and requesters based on mapped asset data for streamlined management, aligning with functionalities for grouping users by asset data.\n\nSpecifically, this PUT method is designed for updating an existing association event identified by its unique ID. The broad capabilities for viewing and editing users suggest this endpoint plays a role in managing user access and attributes within the system, potentially including details similar to those seen in user or requester profiles, or specific configuration settings related to their association.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the association event to be viewed or edited. While the API specification indicates 'No response body', successful operations would typically imply the changes have been applied. Given that 'adding users is only done through 'Invite'', this endpoint is primarily for modifications to existing user associations rather than initial provisioning. It's crucial to understand that 'association events' might refer to specific user-related actions, configurations, or historical data rather than core user profiles directly, though modifying them can influence user status or categorization. For detailed editing of user attributes or requests, other specific 'edit' actions (like Quick Edit or Detailed Edit discussed in contexts for Requests or Changes) might be relevant depending on the exact nature of the 'association event'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "User Manager"], "primary_use_case": "To update existing user and requester association events, including their categorization based on mapped asset data, for streamlined user management."}, "content_for_embedding": "This API updates existing user and requester association events, enabling administrators to modify user attributes and categorize them based on mapped asset data for streamlined management. It's crucial for maintaining accurate user relationships and their associated configurations, distinct from the initial user invitation process.", "semantic_keywords": ["User Management", "Update", "Asset Association"], "ontology_classification": {"features": ["user_management", "asset_association_&_classification", "event_association"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/association_events/association_events/{id}/", "method": "DELETE", "details": {"operationId": "ux_ims_association_events_association_events_destroy", "description": "This API endpoint allows for the deletion of a specific user or an associated entity. While the original description mentioned viewing or editing, the 'DELETE' method clearly indicates its primary function is removal. This aligns with the context stating that 'deleting users is possible'. The deletion is irreversible, as highlighted in related contexts concerning 'Delete' actions for other entities.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a mandatory path parameter, representing the unique identifier of the user or associated entity to be deleted. It is of type 'string'. Adding users is exclusively managed through an 'Invite' process, rather than via an API endpoint. This endpoint does not return a response body upon successful deletion, consistent with its `DELETE` method. Contexts suggest deletion actions, including for 'Requests' and 'Changes', are often immediate and permanent."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Manager", "IT Support"], "primary_use_case": "This API endpoint is designed for the irreversible deletion of specific users or associated entities from the system, identified by a unique ID."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of a specific user or an associated entity using a unique identifier (ID). It is a DELETE operation, and no response body is returned upon successful deletion. This API is primarily used for removing existing users or related records, as user addition is handled via an 'Invite' process. Deletion actions are immediate and permanent.", "ontology_classification": {"features": ["user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "User Management", "Irreversible"]}}, {"path": "/ux/ims/association_events/association_events/associated-event-details/", "method": "GET", "details": {"operationId": "ux_ims_association_events_association_events_associated_event_details_retrieve", "description": "This API endpoint, `/ux/ims/association_events/association_events/associated-event-details/`, is designed to retrieve comprehensive details of associated events within the system. While the initial description broadly mentions 'users to be viewed or edited,' the context strongly suggests this endpoint is primarily focused on rendering detailed information related to tickets, requests, changes, problems, or releases. It allows users to view the creation time and date of these items, and potentially access various tabs such as 'Basic Details', 'Workspace', and 'Communication', similar to how a user might view the comprehensive details page after double-tapping on a ticket ID in the UI. This endpoint is crucial for displaying the full context of an associated event, including historical data and system-related specific information.", "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Although the API specification does not list any parameters, the contextual information implies that this endpoint is likely accessed after a user 'double-taps' on a specific ID (e.g., Ticket ID, Request ID, Change ID), which would suggest a need for a unique identifier to fetch the correct associated event details. This identifier would logically serve as a query parameter or path parameter, even though it's not explicitly defined in the provided JSON spec. The functionality aligns with viewing detailed event data, login/logout history, and system details like IP addresses, as mentioned in the event page module context. This endpoint facilitates detailed inspections of incident/request lifecycles and associated historical logs for both internal and external users, including technicians and requesters."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "Requesters", "Internal Users", "External Users"], "primary_use_case": "Retrieving comprehensive details and historical context for associated events, including tickets, requests, changes, problems, and releases."}, "content_for_embedding": "This API endpoint retrieves comprehensive details of associated events, such as tickets, requests, changes, problems, or releases. It provides a detailed view of these items, including creation time, date, and access to various tabs like Basic Details, Workspace, and Communication. The functionality is similar to viewing a comprehensive details page after selecting an ID in the UI. It is crucial for displaying the full context of an associated event, including historical data, system-related information, and facilitating detailed inspections of incident/request lifecycles and associated historical logs.", "ontology_classification": {"features": ["event_association", "ticket_detail_view_(via_id)", "detailed_record_view", "communication_tab", "ticket_history_view"], "primary_module": "event_management", "confidence_score": 0.95}, "semantic_keywords": ["Associated Events", "Details retrieval", "Event History"]}}, {"path": "/ux/ims/association_events/association_events/association-versions/", "method": "GET", "details": {"operationId": "ux_ims_association_events_association_events_association_versions_retrieve", "description": "This API endpoint provides functionalities for viewing and editing details related to user requests, specifically focusing on 'association versions'. It allows users to view older access requests or catalog items and supports quick edit actions such as status, priority, urgency, and assignee for these requests. The endpoint also facilitates detailed editing of request information.", "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Common use cases for this endpoint include managing user-submitted requests, IT service management (ITSM), and helpdesk operations. While editing and viewing are primary functions, users can also copy existing request details to create new ones. Though the current API specification does not list any parameters, the functionality implies interaction with request IDs and details, similar to how changes, problems, or releases are handled within the system. Prioritization of edits aligns with 'Quick Edit' options as seen in the context. Users can also access the history of change requests and attachments."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Helpdesk Agent", "Service Desk Personnel"], "primary_use_case": "This API endpoint is designed for comprehensive management of user requests and catalog items, referred to as \"association versions.\" It enables users to view, edit, copy, and track the history of these requests, supporting core IT Service Management (ITSM) and helpdesk operations."}, "content_for_embedding": "This API endpoint, `/ux/ims/association_events/association_events/association-versions/` (GET method), provides robust functionalities for managing user requests and catalog items, specifically \"association versions.\" Users can retrieve and view detailed information about current and older access requests or catalog items. A key feature is the ability to perform quick edits on request attributes such as status, priority, urgency, and assignee. The API also supports detailed editing of all request information. Common use cases include IT Service Management (ITSM) and helpdesk operations, where managing user-submitted requests is crucial. Additionally, users can copy existing request details to create new ones, and access the history of changes and attachments associated with these requests. The functionality implies interaction with request IDs and details, similar to how changes, problems, or releases are handled within the system. Filtering and searching capabilities for requests by various criteria (e.g., request number, assignee, date range) are also supported.", "semantic_keywords": ["Detailed Edit", "Quick Edit", "History"], "ontology_classification": {"features": ["request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_search_&_filtering", "request_management_actions_(delete,_copy,_merge)", "attachment_management", "request_tagging", "requester_interaction_history_display", "change_management_integration", "request_lifecycle_management", "request_monitoring_&_tracking"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/ims/association_events/association_events/save-topology/", "method": "POST", "details": {"operationId": "ux_ims_association_events_association_events_save_topology_create", "description": "This API endpoint facilitates the saving and updating of topology information within the system, specifically related to association events. While the original description broadly indicates user viewing or editing, the path suggests a more specific function tied to 'IMS association events' and 'save-topology'. This implies the API is used to manage or persist the structural or relational data of entities involved in association events, potentially impacting how user or asset data is grouped and managed. This could include updating user associations with asset data or configuring relationships between different system components, as indicated by references to 'Group Users and Requesters by Asset Data!' and mentions of 'editing users'.", "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The original description 'API endpoint that allows users to be viewed or edited' is highly generic and contradicts the specific path `/ux/ims/association_events/association_events/save-topology/`. Based on the path, this endpoint likely handles the POSTing (saving) of topology data related to 'association_events' within the 'IMS' (Information Management System) context. The provided contexts frequently mention 'editing users' and 'Group by asset data based on End User / Requesters and owner technician', suggesting that this 'save-topology' operation might be a mechanism to persist changes in how users are categorized, or how their relationships with assets or other system entities are defined. Although the `parameters` and `request_body_description` fields are empty in the provided spec, a POST request to a 'save' endpoint implies a request body containing the topology data to be saved or updated. Developers should consult more detailed documentation or the API schema for the expected structure of the request body for this specific topology saving operation, as it's critical for correctly interacting with the endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Developer"], "primary_use_case": "This API is used to save and update topology information within the system, specifically focusing on how assets and users are grouped and related based on association events. It enables the persistence of structural and relational data, impacting how user and asset data are categorized and managed within a topological view."}, "content_for_embedding": "This API endpoint, `/ux/ims/association_events/association_events/save-topology/`, is designed for saving and updating topology information. It specifically handles the persistence of structural and relational data concerning \"IMS association events,\" which includes how user and asset data are grouped and managed. This implies the API is crucial for defining and maintaining relationships between system components, users, and assets, potentially impacting user categorization and asset-user associations. The operation involves saving new topology profiles or views, and adding inferred connections to a topology map, often based on asset data and user/requester groupings.", "ontology_classification": {"features": ["topology_view_editing_(drag_&_save)", "add_topology_(guided/manual)", "topology_configuration_editing", "asset_association_&_classification", "event_association"], "primary_module": "topology", "confidence_score": 0.9}, "semantic_keywords": ["Topology", "Save", "Asset Association"]}}, {"path": "/ux/ims/association_events/association_events/validate-topology/", "method": "POST", "details": {"operationId": "ux_ims_association_events_association_events_validate_topology_create", "description": "This POST endpoint is designed to validate the topology of association events, which likely involves checking the configuration or structure of linked events. While the specific validation logic is not detailed, it pertains to the backend processing of association events related to UX and IMS. The endpoint does not return a response body, indicating a successful validation or an internal processing status.", "tags": ["Association Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification provides limited detail beyond the path and method, with no parameters or request body described. The context documents, while discussing editing app registrations, user management (requesters/technicians), and viewing changes, do not directly clarify the `validate-topology` function within `association_events`. The references to 'Edit App registration' (Contexts 1 & 2) and 'Edit' actions (Context 7) suggest a broader system where configurations, like topology, might be validated after modifications. There is no explicit information from the provided contexts regarding the specific input required for this validation or the meaning of the lack of a response body. It is implied that the validation process occurs behind the scenes, and an HTTP status code would denote success or failure."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Developer"], "primary_use_case": "This API validates the structural integrity and configuration of linked events within a topological framework, ensuring that event associations are correctly represented and maintained in the system."}, "content_for_embedding": "This API validates the topology of association events, ensuring the structural integrity and configuration of how events are linked within the system. It's a backend process that confirms the correctness of event relationships in a topological context, often triggered after modifications or additions to the topology. The endpoint provides no response body, signifying a successful validation or an internal processing status. This function is critical for maintaining accurate event association inferences and reliable topological correlations, as highlighted by documentation on 'Add Topology' and 'Topology-based correlation'.", "semantic_keywords": ["Topology", "Validation", "Event Association"], "ontology_classification": {"features": ["event_association", "topology_configuration_editing", "add_topology_(guided/manual)"], "primary_module": "topology", "confidence_score": 0.9}}}, {"path": "/ux/ims/device-template/", "method": "GET", "details": {"operationId": "ux_ims_device_template_list", "description": "This endpoint is used to fetch all `device_template` entries within the current organization. These templates, often referred to as 'Golden Templates' or 'Configuration Templates', serve as standard configurations for devices, allowing organizations to identify missing or additional configurations across their network. They are a collection of commands, potentially with variables, designed for specific device operations like ACL modification, OS upgrades, or service creation/deactivation. The API supports pagination and sorting to efficiently retrieve the list of templates.", "summary": "Gets a list of device_template", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/DeviceTemplate"}}}}, "description": ""}}, "additional_info": "The `device_template` is not directly executable but functions as a placeholder to save 'Golden Template' commands. These templates can be applied to devices using the 'Upload Job' functionality described elsewhere in the documentation. Configuration Templates inherit Jinja2 Template standards, supporting data types (Integer, Boolean, List), control statements (if-elif-else, for loops), and operator conditions. Templates are often specific to vendor devices, OS types, and can be customized with model and series details. When fetching templates, developers should be aware of the pagination (`items_per_page`, `page`) and sorting (`sort`, `reverse`) parameters to manage the results effectively."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Developers"], "primary_use_case": "To retrieve standardized device configuration templates (\"Golden Templates\") to enable network administrators and IT operations to manage, audit, and apply consistent configurations across their network devices, ensuring compliance and operational efficiency."}, "content_for_embedding": "This API endpoint allows for the retrieval of 'device_template' entries, also known as 'Golden Templates' or 'Configuration Templates'. These templates contain standardized commands and configurations for network devices, facilitating the identification of configuration discrepancies and enabling consistent device provisioning. The API supports efficient data retrieval through pagination and sorting capabilities, making it suitable for managing large sets of device configurations.", "semantic_keywords": ["Configuration Management", "Configuration retrieval", "Pagination"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/device-template/", "method": "POST", "details": {"operationId": "ux_ims_device_template_create", "description": "This endpoint enables the creation of a new device template within the current organization's environment. Device templates are crucial for automating configuration changes on networking devices, supporting operations such as 'Provisioning,' 'OS Upgrade,' 'Service Creation,' 'Service Deactivation,' and general configuration modifications. These templates can be a 'Collection of commands' with variables, executed on devices for specific operations like ACL modification, route addition, or interface configuration. The created templates are vendor and OS-type specific, requiring separate templates for different vendors or OS types even for the same operation.", "summary": "Creates a new device_template", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The 'device_template' created by this POST request serves as a placeholder for saving commands, similar to a 'Golden Template,' but is not directly executable from this endpoint. It's designed to identify missing or additional configurations based on a defined standard template. Key details for the new template include a unique 'Template Name,' and selection of 'Template Group' and 'Vendor.' Configuration templates can also be utilized for 'Network Diagnosis' functionality to check operational data or perform simple, non-device-affecting configurations. The template framework inherits Jinja2 standards, allowing for data types, control statements, and operator conditions. While the API specification does not detail request body parameters, based on context, the request will likely include fields for Template Name, Template Group, Vendor, and the command portion which should be in XML format."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "DevOps Engineers"], "primary_use_case": "To enable the creation and management of device templates for automating configuration changes, provisioning, OS upgrades, and service management on networking devices."}, "content_for_embedding": "This API creates a new device template, a crucial component for automating configuration changes on networking devices. These templates, which are vendor and OS-type specific, act as a collection of commands with variables, supporting operations like provisioning, OS upgrades, service creation/deactivation, and general configuration modifications. While not directly executable from this endpoint, the created templates serve as 'Golden Templates' for identifying configuration discrepancies and can be used for network diagnosis. The template framework supports Jinja2 standards for dynamic configurations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management", "download_job_management", "zero_touch_provisioning_(ztp)"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Network Configuration", "Configuration Management", "Device Template"]}}, {"path": "/ux/ims/device-template/{id}/", "method": "GET", "details": {"operationId": "ux_ims_device_template_retrieve", "description": "This endpoint allows retrieval of a `device_template`'s detailed information within the current organization. A `device_template` acts as a configuration template that can be used on devices, incorporating Jinja2 Template standards for flexible data types, control statements, and operator conditions. These templates can include ACL configurations to define management permissions and are crucial for functionalities like Network Diagnosis (e.g., checking operational data, crypto cache clearing) and executing templates on devices via the Upload Job functionality. The template commands are often written in XML format and can be specific to vendor devices, OS types, models, and series.", "summary": "Gets a device_template details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "additional_info": "The `id` parameter is a mandatory path parameter used to specify the unique identifier of the `device_template` to be retrieved. These templates are distinct from 'Golden Templates', which are primarily placeholders for standard configurations and not for direct execution. Configuration templates can also interact with device information such as hostname, device type, tags, and IP address. The same template framework is followed across various features like 'Configuration Profile' for download."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations", "System integrators", "Developers"], "primary_use_case": "To retrieve detailed information about a specific device configuration template, which is essential for managing network device configurations, performing network diagnosis, and executing configuration changes on devices."}, "content_for_embedding": "This API retrieves comprehensive details for a specific device configuration template, identified by its unique ID. These templates are fundamental for managing network device configurations, supporting advanced templating features like Jinja2, and defining Access Control List (ACL) configurations. They are integral to functionalities such as Network Diagnosis for operational data checks and executing configuration updates on devices through Upload Jobs. The templates can be tailored to specific vendors, operating systems, models, and series, and can interact with various device attributes including hostname, device type, tags, and IP address. This endpoint provides the necessary information to understand and apply these critical configuration profiles.", "semantic_keywords": ["Device Template", "Configuration Retrieval", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "diagnosis_tools", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/device-template/{id}/", "method": "PUT", "details": {"operationId": "ux_ims_device_template_update", "description": "This API endpoint allows for the viewing and editing of a specific device template identified by its unique ID. It is central to managing device credentials for various protocols like SNMP, SSH, WMI, and HTTP, as highlighted in the user guide. The `/ux/ims/device-template/{id}/` path indicates that this operation targets a singular device template, enabling detailed modification or retrieval of its configuration.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the device template to be viewed or edited. The request body for PUT operations on this endpoint is expected to conform to a flexible document serializer. This serializer supports a wide range of primitive data types (String, URL, Email, Integer, Float, Boolean, Date, etc.) and compound fields like `ListField` and `DictField`. For references and embedded documents, nested serializers are autogenerated when the serializer depth is greater than zero. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are noted as not well-supported or untested. This endpoint plays a crucial role in managing device credentials and configurations within the system's IT operations, especially for adding, editing, or deleting device credentials."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "System Administrators", "IT Operations Personnel", "Device Managers"], "primary_use_case": "To manage and update device templates, specifically for configuring network devices and handling device credentials (SNMP, SSH, WMI, HTTP). This API is central to IT operations related to device provisioning and maintenance."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of specific device templates, identified by a unique ID. It is essential for managing device credentials across various protocols like SNMP, SSH, WMI, and HTTP, and for modifying device configurations within IT operations. The endpoint supports flexible data types for updates, playing a crucial role in adding, editing, or deleting device credentials and configurations.", "semantic_keywords": ["Device Template", "Configuration", "Device Credentials"], "ontology_classification": {"features": ["device_credential_management", "network_configuration_management_(nccm)", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/device-template/{id}/", "method": "DELETE", "details": {"operationId": "ux_ims_device_template_destroy", "description": "This endpoint permanently removes an existing `device_template` from the system for the current organization. Device templates are crucial for automating network device configurations, including tasks like provisioning, OS upgrades, and service creation/deactivation. They are vendor and OS-type specific, containing commands (which can leverage Jinja2 templating, e.g., for variables like hostname) and ACL configurations defining management permissions. Deleting a template ensures it is no longer available for use in upload jobs, network diagnosis, or other operations. This operation cannot be undone. Higher-privileged users manage who can delete specific templates.", "summary": "Deletes the device_template with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the `device_template` to be deleted. Once a template is deleted, it will no longer appear in the Configuration Template Grid and cannot be used in features like 'Upload Job' or 'Network Diagnosis'. Be aware that deleting templates impacts any features or processes that rely on them. The concept of 'Golden Templates' also exists, which are standard templates for identifying missing or additional configurations across devices, though they are placeholders and not directly executed."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Administrator"], "primary_use_case": "This API allows for the permanent removal of existing device templates, which are critical for automating network device configurations. Its primary use case is to enable network administrators and IT operations personnel to manage and clean up obsolete or incorrect configuration templates, ensuring that only valid and current templates are available for network operations like provisioning, OS upgrades, and service management. This prevents the accidental use of outdated configurations and helps maintain a clean and efficient network environment."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a specific device template identified by its unique ID. Device templates are fundamental for automating network device configurations, including tasks such as provisioning, OS upgrades, and service creation/deactivation. Deleting a template ensures it is no longer available for use in critical network operations like upload jobs or network diagnosis. This action is irreversible and is typically performed by higher-privileged users to maintain configuration integrity and system cleanliness.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Device Template", "Network Configuration"]}}, {"path": "/ux/ims/device-template/create-templates/", "method": "POST", "details": {"operationId": "ux_ims_device_template_create_templates_create", "description": "This API endpoint facilitates the creation of device templates within the system. It is designed to define and manage configurations for various network devices, supporting primitives like strings, integers, and booleans, as well as complex structures such as lists, dictionaries, and references to other documents. The functionality aligns with managing device credentials (SNMP, SSH, WMI, HTTP) as indicated in the user guide, allowing for the addition, editing, or deletion of device configurations that can then be used for discovery and authentication.", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is a serializer for Documents, supporting a wide range of field types including `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, and `GeoJsonBaseField`. Compound fields like `ListField` and `DictField` are mapped to DRF fields, with nested field specifications. `ReferenceField` behaves like a ForeignKey, generating nested serializers for non-zero depth. `EmbeddedDocumentField` also autogenerates nested serializers for non-zero depth. `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own serializer fields. Fields such as `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested', and other unrecognized fields default to `DocumentField`, which may lead to incorrect behavior. The endpoint's utility is tied to managing device credentials and authentication profiles, as highlighted in the user guide, which can involve specifying credentials for various protocols like SNMP, SSH, WMI, and HTTP."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "To create and manage device configuration templates for various network devices, including their credentials and authentication profiles, enabling network discovery and authentication processes."}, "content_for_embedding": "This API endpoint is designed for the creation and management of device templates within the system. These templates define configurations for network devices, supporting various data types including primitives and complex structures. A key function is managing device credentials such as SNMP, SSH, WMI, and HTTP, which are essential for device discovery and authentication. The API facilitates network configuration changes and is integral to IT operations for setting up and maintaining network device profiles.", "semantic_keywords": ["Device Template", "Device Credentials", "Configuration Management"], "ontology_classification": {"features": ["device_credential_management", "network_configuration_management_(nccm)", "device_discovery", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/ims/device-template/csv_cols/", "method": "POST", "details": {"operationId": "ux_ims_device_template_csv_cols_create", "description": "This API endpoint facilitates the import and management of device data, specifically allowing for the bulk upload of device IP addresses and other associated details via a CSV file. It is crucial for populating the system with multiple devices at once, rather than adding them individually. The process involves downloading a sample CSV template, filling in the required device information (such as IP addresses, asset tags, and authentication credentials like username and password), and then uploading the populated file. This endpoint supports a variety of primitive and compound data types for document serialization, making its request body highly flexible for different data structures.", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "Common use cases for this endpoint include adding 100+ device IPs and associating devices with relevant asset tags (e.g., Switches, Firewalls, Routers). While the API documentation lists various field types for the request body, particular attention should be paid to the support for StringField, IntField, and reference fields. Note that fields related to files (FileField, ImageField, BinaryField) are not well supported or untested. The 'request_body_description' provides a comprehensive list of supported data types for serialization. Users will need to ensure the CSV structure aligns with the expected data types and that the provided credentials have sufficient privileges for device authentication."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "Network Engineers", "IT Support Staff"], "primary_use_case": "This API enables the bulk import and management of device data, including IP addresses and asset tags, via CSV files, streamlining the process of populating the system with multiple devices simultaneously."}, "content_for_embedding": "This API endpoint is designed for the efficient bulk upload and management of device data using CSV files. Users can download a sample CSV template, populate it with device IP addresses, asset tags, and authentication credentials (username and password), and then upload the file to add numerous devices at once. It supports various primitive and compound data types for flexible request body serialization. Common use cases include adding over 100 device IPs and associating them with asset tags like Switches, Firewalls, and Routers. While supporting StringField, IntField, and reference fields, file-related fields are not well supported. Users must ensure CSV structure and data types align with expectations and that provided credentials have sufficient privileges for device authentication. This method serves as an alternative to adding devices individually, facilitating large-scale inventory updates.", "ontology_classification": {"features": ["multiple_asset_addition_methods", "inventory_data_collection", "bulk_actions_on_assets", "customizable_asset_properties_and_fields", "hierarchical_asset_categorization"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["CSV Import", "Bulk Add", "Asset Management"]}}, {"path": "/ux/ims/device-template/download_csv/", "method": "GET", "details": {"operationId": "ux_ims_device_template_download_csv_retrieve", "description": "This API endpoint allows users to download a sample CSV template for device management. This template is designed to facilitate the bulk import of device IP addresses and other associated details into the system. It helps in adding multiple devices efficiently, such as importing 100+ device IPs at once.", "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for preparing data before using the CSV import functionality to add devices. Users are advised to download and fill out this sample CSV template, typically with device IP addresses, before uploading the CSV to the system for bulk device provisioning. The downloaded CSV serves as a template to ensure correct data formatting for successful uploads. The 'Download' privilege allows users to perform this export operation within the selected module/page."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations"], "primary_use_case": "Facilitate bulk device provisioning by providing a downloadable CSV template for importing device IP addresses and other details."}, "content_for_embedding": "This API allows users to download a sample CSV template for bulk device import. The template is specifically designed for adding multiple devices, such as 100+ device IP addresses, efficiently into the system. It ensures correct data formatting for successful uploads, serving as a crucial step before utilizing the CSV import functionality for device provisioning. Users with 'Download' privileges can access this template.", "ontology_classification": {"features": ["multiple_asset_addition_methods", "bulk_actions_on_assets"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Device Template", "CSV Import", "Bulk Add"]}}, {"path": "/ux/ims/device-template/export-import-options/", "method": "GET", "details": {"operationId": "ux_ims_device_template_export_import_options_retrieve", "description": "This API endpoint facilitates the management of device templates by allowing users to view and export device template options. It supports the search and export of configurations, aligning with the functionality for maintaining Device Connection and Download Commands. While the initial description suggests viewing or editing, the primary functionality highlighted by the most relevant context is viewing and exporting options for device templates, such as `.txt` files.", "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint primarily focuses on 'export options' for device templates, as indicated by the most relevant context. Users can view the current state of device template configurations and export them. Although the original description mentions editing, the provided contexts emphasize viewing and exporting. This aligns with a privilege-based feature where users can only view or export profiles/options if they have the necessary permissions. This feature is likely used for archiving configurations or transferring settings between systems."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT technicians"], "primary_use_case": "This API allows users to view and export options for device templates and configurations, facilitating the management, archiving, and transfer of network device settings. It supports privilege-based access for these operations."}, "content_for_embedding": "This API endpoint is designed for managing device templates by enabling users to view and export device template options and configurations. It supports the search and export of configurations, aligning with functionalities for maintaining Device Connection and Download Commands. The primary focus is on viewing and exporting options for device templates, such as .txt files, and is a privilege-based feature. This functionality is crucial for archiving configurations or transferring settings between systems. Network admins and technicians can utilize this API to access and export comprehensive configuration profiles.", "semantic_keywords": ["Device Template", "Export", "Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/device-template/import-stats-json/", "method": "POST", "details": {"operationId": "ux_ims_device_template_import_stats_json_create", "description": "This `/ux/ims/device-template/import-stats-json/` API endpoint facilitates the import of device template statistics. While the original description broadly referred to 'users being viewed or edited,' the context suggests its primary function relates to managing and reporting on device assets and their associated data. This endpoint is crucial for importing data relevant to device inventory details, potentially including hardware, software, and activity logs, similar to how comprehensive asset reports are generated. It likely processes data that can be used to update or generate reports on device credentials and configuration profiles.", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this POST endpoint expects a JSON payload that conforms to a specific document serializer structure. It supports a wide range of primitive field types, including StringField, IntField, DateTimeField, and more. Complex data structures can be represented using Compound fields like ListField and DictField, and references to other documents are handled via ReferenceField and EmbeddedDocumentField. Developers should pay close attention to the expected data types and hierarchy for the import, especially for nested structures. Fields such as FileField, ImageField, and BinaryField are noted as not well-supported or untested, so their usage should be approached with caution. This import mechanism is integral for maintaining accurate and detailed device asset information within the system, potentially supporting functionalities like 'importing from a CSV file' as mentioned in the user guides, although the API specifically mentions JSON import."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Network Administrators", "Developers"], "primary_use_case": "This API facilitates the import of device template statistics and associated asset data, crucial for maintaining accurate device inventory, credentials, and configuration profiles within the system."}, "content_for_embedding": "This API endpoint, `/ux/ims/device-template/import-stats-json/`, is designed to import device template statistics and comprehensive asset data. It processes JSON payloads containing device inventory details, including hardware, software, activity logs, credentials, and configuration profiles. The imported data is integral for updating and generating reports on device assets, supporting functionalities similar to CSV imports for detailed asset information management.", "ontology_classification": {"features": ["inventory_data_collection", "multiple_asset_addition_methods", "customizable_asset_properties_and_fields", "device_credential_management", "network_configuration_and_change_management", "detailed_asset_report"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["Asset Management", "Device Template", "Inventory update"]}}, {"path": "/ux/ims/device-template/multidelete/", "method": "POST", "details": {"operationId": "ux_ims_device_template_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of device templates. Based on the context, this endpoint is specifically designed to remove multiple device credentials simultaneously, including those for SNMP, SSH, WMI, and HTTP. It is a critical component for managing and cleaning up device credentials within the system, allowing administrators and privileged users to streamline the process of removing device templates.", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that the request body will likely contain a list of identifiers (e.g., `ObjectIdField`, `StringField`, `UUIDField`) corresponding to the device templates to be deleted. The system supports various primitive field types for identifying these templates. While the API specification provides a detailed breakdown of recognized primitive and compound fields for serialization, the core function here centers around the 'multi-delete' operation. It is important to ensure the identifiers provided in the request body are valid and correspond to existing device templates. The user guide contexts emphasize that 'Delete' operations are typically restricted to users with specific privileges, highlighting the security implications of this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "This API streamlines the process of removing multiple device templates and their associated credentials (SNMP, SSH, WMI, and HTTP) from the system."}, "content_for_embedding": "This API endpoint allows for the bulk deletion of multiple device templates and their associated credentials, such as SNMP, SSH, WMI, and HTTP. It is used by administrators and privileged users to efficiently manage and clean up device credentials within the system by providing a list of identifiers for the templates to be removed.", "semantic_keywords": ["Delete", "Device Template", "Device Credentials"], "ontology_classification": {"features": ["device_credential_management", "bulk_actions_on_assets"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/device-template/options/", "method": "GET", "details": {"operationId": "ux_ims_device_template_options_retrieve", "description": "This API endpoint provides functionality to add, view, edit, and delete device credentials. It specifically handles credentials for protocols such as SNMP, SSH, WMI, and HTTP. The endpoint is part of the '/ux/ims/device-template/options/' path, indicating its role in managing device-related configurations in a user experience context. This functionality is crucial for setting up and managing access to network devices.", "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is central to managing device credentials, often seen on a dedicated 'device credentials' page. While the API specification did not detail parameters or request body for this GET method, context suggests it aligns with operations to 'add, edit, and delete device credentials'. Developers should reference the 'device credentials page' in the Infinity user guide for typical use cases and how these options are presented to end-users. The description 'API endpoint that allows users to be viewed or edited' in the original specification appears to be a generic placeholder; the context strongly indicates the endpoint's purpose is related to 'device credentials' rather than general 'users'."}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "Network Administrators"], "primary_use_case": "To manage (add, view, edit, and delete) device credentials for network devices, enabling their discovery and access."}, "content_for_embedding": "This API endpoint is designed for managing device credentials, including protocols like SNMP, SSH, WMI, and HTTP. It allows users to add, view, edit, and delete these credentials, which are crucial for setting up and managing access to network devices and facilitating device discovery. The functionality is typically found on a dedicated \"device credentials\" page within the user interface.", "semantic_keywords": ["Device Credentials", "Configuration", "Network Device Discovery"], "ontology_classification": {"features": ["device_credential_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/ims/device-template/res-config-options/", "method": "GET", "details": {"operationId": "ux_ims_device_template_res_config_options_retrieve", "description": "This API endpoint allows users to retrieve resource configuration options for device templates. While the initial description suggests user-related functionalities, the most relevant context indicates this endpoint is related to managing credentials (SNMP, SSH, WMI, HTTP) for devices. It serves to view or edit these device-specific configurations.", "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The current `parameters` and `request_body_description` fields are empty in the API specification. However, based on the context, this endpoint likely interacts with 'device credentials' or 'authentication profiles.' For 'device credentials,' typical operations include adding, editing, and deleting. For 'authentication profiles,' users can view, add, edit, delete, execute, or export profiles based on assigned permissions. While the primary function appears to be viewing/editing, specific parameters for device name, protocol, or credential ID would typically be required for a GET request to specify which resource configuration options are desired. Users should refer to relevant sections of the Infinity documentation for details on expected input parameters or response structures related to device credentials or authentication profiles."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Users"], "primary_use_case": "This API endpoint allows users, specifically network administrators, to retrieve and view resource configuration options for device templates. It is primarily used for managing and understanding device-specific configurations and credentials (SNMP, SSH, WMI, HTTP) to facilitate viewing or editing these settings."}, "content_for_embedding": "This API endpoint is designed to retrieve resource configuration options associated with device templates. It provides access to view and understand device-specific credentials, including SNMP, SSH, WMI, and HTTP. The primary function is to allow users to view or prepare for editing these device configurations and authentication profiles, which are crucial for operations like discovery, configuration download, and upload.", "ontology_classification": {"features": ["device_credential_management", "network_configuration_management_(nccm)", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Device Credentials", "Configuration Options", "Device Template"]}}, {"path": "/ux/ims/device-template/sys-object-resync/", "method": "POST", "details": {"operationId": "ux_ims_device_template_sys_object_resync_create", "description": "This API endpoint facilitates the resynchronization of system objects related to device templates. While the original description broadly states user viewing/editing, the context strongly suggests this endpoint interacts with device credentials (SNMP, SSH, WMI, HTTP) and device-related information. It is likely used to update or reconcile the system's understanding of device configurations, potentially after changes to credentials or device properties, ensuring the system reflects the current state of networked devices, as hinted by mentions of 'saving and proceeding to discovery' and managing device credentials.", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various primitive and compound field types for document serialization, as detailed in the `request_body_description`. It supports standard types like `StringField`, `IntField`, `BooleanField`, and `DateTimeField`, as well as more complex types such as `ListField`, `DictField`, `ReferenceField`, and `EmbeddedDocumentField` for structured data. Developers should be aware that certain field types, specifically `FileField`, `ImageField`, and `BinaryField`, are noted as 'not well supported or untested' and should be used with caution if applicable. The endpoint is likely part of a broader system for managing device inventory and configurations, where device credentials and system object states need to be frequently updated or verified."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations"], "primary_use_case": "This API endpoint is used to resynchronize system objects related to device templates, specifically to update and reconcile device configurations and credentials. This ensures that the system accurately reflects the current state of networked devices after changes to credentials or properties."}, "content_for_embedding": "This API facilitates the resynchronization of system objects associated with device templates. Its primary function is to update and reconcile device configurations and credentials (such as SNMP, SSH, WMI, HTTP) to ensure the system accurately reflects the current state of networked devices. This process is crucial after changes to device properties or credentials, and it supports the broader management of device inventory and configurations, often preceding or following device discovery.", "semantic_keywords": ["Device Template", "Device Credentials", "Configuration Management"], "ontology_classification": {"features": ["device_credential_management", "network_configuration_management_(nccm)", "device_discovery", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/device-template/upload-csv/", "method": "POST", "details": {"operationId": "ux_ims_device_template_upload_csv_create", "description": "This API endpoint facilitates the upload of CSV files containing device information for template management within the Inventory Management System (IMS). It allows privileged users to add multiple devices at once by importing data from a CSV, such as IP addresses. This functionality is crucial for bulk operations, enabling efficient management of device inventories and their associated attributes.", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint supports the upload of CSV files, which is one of the accepted formats for attachments (along with png, jpeg, jpg, txt, doc, docx, xls, xlsx, pdf), with a maximum file size of 20 MB. Users are advised to download a sample CSV template before uploading to ensure correct formatting, especially for fields like IP addresses and asset tags. The `request_body_description` indicates that the API expects files that can be processed by a serializer supporting primitive and compound fields like StringField, IntField, ListField, and DictField, suggesting that the CSV contents are mapped to these data types. The upload operation itself is tied to the 'Upload' privilege, allowing users with this privilege to view and perform add operations within the selected module, specifically for device templates in this context."}, "llm_generated": {"business_context": {"user_personas": ["Privileged users", "Inventory managers", "IT staff responsible for device management"], "primary_use_case": "This API facilitates the bulk upload of device information via CSV files for template management within an Inventory Management System (IMS), enabling efficient management of device inventories and their associated attributes."}, "content_for_embedding": "This API endpoint allows privileged users to upload CSV files containing device information for template management within the Inventory Management System (IMS). It supports bulk operations to add multiple devices at once, including details like IP addresses and asset tags. Users are advised to download a sample CSV template for correct formatting. The API expects CSV contents to map to various data types (StringField, IntField, ListField, DictField) and supports file sizes up to 20 MB. This functionality is crucial for efficient management of device inventories and their associated attributes, similar to importing asset details to add multiple IT or Fixed Assets simultaneously.", "semantic_keywords": ["CSV Import", "Asset Management", "Bulk Add"], "ontology_classification": {"features": ["multiple_asset_addition_methods", "bulk_actions_on_assets", "inventory_data_collection", "unified_asset_repository"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/ims/device-template/validate-stats-json/", "method": "POST", "details": {"operationId": "ux_ims_device_template_validate_stats_json_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Device Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Network Engineers", "System Integrators"], "primary_use_case": "To validate the statistical configuration data within device templates, ensuring data integrity and proper device provisioning."}, "content_for_embedding": "This API endpoint is designed to validate the statistics JSON data associated with device templates. It ensures the correctness and integrity of statistical configurations before they are applied to devices, supporting robust device management and provisioning processes. This API is primarily utilized by administrators and network engineers responsible for configuring and maintaining device templates.", "semantic_keywords": ["Device Template", "Validation", "Configuration", "Statistics"], "ontology_classification": {"features": ["network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/ims/device-template/verify-oid-exists/", "method": "GET", "details": {"operationId": "ux_ims_device_template_verify_oid_exists_retrieve", "description": "This API endpoint is designed to verify the existence of an Object Identifier (OID) within the device template system. It plays a crucial role in managing device credentials and configurations, allowing for the addition, editing, and deletion of credentials for various protocols like SNMP, SSH, WMI, and HTTP. When configuring device credentials, this endpoint can confirm if a specific OID is already in use or available, ensuring data integrity before saving changes and proceeding with device discovery.", "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "While the primary function is OID verification for device templates, the broader context of device credential management suggests common use cases include validating unique identifiers during template creation, ensuring that new device profiles or configurations do not conflict with existing OIDs, and streamlining the setup process for authentication profiles, as mentioned in the related documentation for adding and editing device credentials."}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "Administrator", "Network Engineer"], "primary_use_case": "To verify the existence of an Object Identifier (OID) within the device template system, ensuring data integrity before saving device configurations and credentials for various protocols like SNMP, SSH, WMI, and HTTP. This supports streamlined device discovery and credential management."}, "content_for_embedding": "This API endpoint verifies if a specific Object Identifier (OID) already exists or is available within the device template system. It is a critical component for managing device credentials and configurations, supporting the addition, editing, and deletion of credentials for various protocols such as SNMP, SSH, WMI, and HTTP. By confirming OID existence, it ensures data integrity and prevents conflicts during device template creation, configuration, and subsequent device discovery processes. The API helps validate unique identifiers to streamline the setup of authentication profiles.", "ontology_classification": {"features": ["device_credential_management", "device_discovery"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Device Template", "Device Credentials", "Validation"]}}, {"path": "/ux/ims/device-template/verify-sysobjectid-asset-exists/", "method": "GET", "details": {"operationId": "ux_ims_device_template_verify_sysobjectid_asset_exists_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Device Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeviceTemplate"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "System Engineers", "IT Operations", "Developers"], "primary_use_case": "To verify the existence of a specific asset within a device template, ensuring data integrity and checking prerequisites for operations involving device templates and assets."}, "content_for_embedding": "This API endpoint is designed to verify whether a specific asset, identified by its sysobjectid, currently exists within a defined device template. It is crucial for maintaining data consistency and validating asset relationships before further actions in device template management.", "ontology_classification": {"features": ["Device Template", "Asset Verification", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Device Template", "Asset Verification", "Retrieval"]}}, {"path": "/ux/ims/discovery/profile/", "method": "GET", "details": {"operationId": "ux_ims_discovery_profile_retrieve", "description": "This endpoint retrieves a paginated list of discovery configurations, also referred to as 'Discovery Profiles'. Discovery Profiles serve to save preferences and identify profiles for tracking and initiating periodic discovery processes. The API leverages the authentication token to fetch only the configurations relevant to the current organization. Each profile includes a name, which aids in identification, and specifies discovery options such as discovering only inventory information, or inventory with availability and/or performance monitoring. This allows users to manage and view their established discovery settings.", "summary": "Gets a list of discovery configurations", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "Discovery Profiles are fundamental for setting up and managing how different devices (network devices, Windows servers, etc.) are discovered within the system. The `items_per_page` and `page` query parameters are mandatory for pagination, controlling the number of results returned per page and the specific page to retrieve. Optional query parameters `reverse` and `sort` allow for custom sorting of the results based on a specified key and order. The `sort` parameter typically refers to a key such as 'profile name' or creation date, though specific sortable keys are not detailed in the provided contexts. Further details on the different discovery options (like 'Discover only Inventory Information' or 'Discover inventory with availability and performance monitoring') can be found in the Infinity User Guide."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network engineers", "System administrators"], "primary_use_case": "To manage and view existing discovery configurations for IT infrastructure, enabling users to track and initiate periodic device discovery processes."}, "content_for_embedding": "This API retrieves a paginated list of \"Discovery Profiles,\" which are configurations used to save preferences and initiate periodic discovery processes for IT infrastructure. These profiles define how devices are discovered, including options for collecting inventory information, availability, and performance monitoring. The endpoint supports pagination through `items_per_page` and `page` parameters, and allows sorting of results. It is essential for managing and viewing established discovery settings within an organization.", "semantic_keywords": ["Configuration Profiles", "Pagination", "Network Device Discovery"], "ontology_classification": {"features": ["device_discovery", "network_configuration_management_(nccm)", "inventory_data_collection", "real-time_asset_performance_monitoring", "asset_search_and_filtering"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/", "method": "POST", "details": {"operationId": "ux_ims_discovery_profile_create", "description": "This endpoint enables the creation of a new Discovery Profile within the system. Discovery Profiles are crucial for saving preferences and identifying configurations to track and initiate network discovery periodically. The profiles allow organizations to define their discovery requirements, including options for discovering inventory information, with or without availability monitoring, and with availability and performance monitoring. Each profile is identified by a name, which aids in its tracking and management.", "summary": "Creates a new discovery configuration ", "tags": ["Discovery Configuration"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateDiscoveryConfigurationSample": {"value": {"organization": "532475354328", "agent_id": "xxxxxxxxxxxxxx", "job_id": "2222222222", "host": "192.168.50.1/24", "label": "Auto_192.158.50.*", "protocol": ["snmp", "ping"], "params": {"filter_by_ping": 1, "ping_monitor": 1, "snmp_monitor": 1, "exclude_ip_address": []}, "credentials": [], "creation_time": "now", "created_by": "admin", "schedule": {"period": "Daily", "hour": "00", "min": "00", "unit": "Days", "days": "0"}}, "summary": "Create Discovery Configuration Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"status": "success", "job_id": 20, "message": "discovery configuration created"}, "examples": {"ResponseSample": {"value": {"status": "success", "job_id": 20, "message": "discovery configuration created"}, "summary": "Response Sample"}}}}, "description": ""}}, "additional_info": "The `host` field in the request body specifies the IP address or range for discovery. The `label` provides a descriptive name for the discovery profile, while `protocol` defines the methods used (e.g., 'snmp', 'ping'). The `params` object allows for fine-tuning discovery behavior, such as `filter_by_ping` or `snmp_monitor`. The `schedule` object enables periodic discovery, supporting daily, weekly, or monthly intervals. Discovery Profiles are designed to streamline the process of identifying network devices like hubs, modems, printers, switches, routers, bridges, and access points, often leveraging SNMP protocols for comprehensive discovery.", "parameters": [{"name": "organization", "in": "body", "description": "Inferred parameter: organization", "required": true, "schema": {"type": "string"}}, {"name": "agent_id", "in": "body", "description": "Inferred parameter: agent_id", "required": true, "schema": {"type": "string"}}, {"name": "job_id", "in": "body", "description": "Inferred parameter: job_id", "required": true, "schema": {"type": "string"}}, {"name": "host", "in": "body", "description": "Inferred parameter: host", "required": true, "schema": {"type": "string"}}, {"name": "label", "in": "body", "description": "Inferred parameter: label", "required": true, "schema": {"type": "string"}}, {"name": "protocol", "in": "body", "description": "Inferred parameter: protocol", "required": true, "schema": {"type": "string"}}, {"name": "params", "in": "body", "description": "Inferred parameter: params", "required": true, "schema": {"type": "string"}}, {"name": "credentials", "in": "body", "description": "Inferred parameter: credentials", "required": true, "schema": {"type": "string"}}, {"name": "creation_time", "in": "body", "description": "Inferred parameter: creation_time", "required": true, "schema": {"type": "string"}}, {"name": "created_by", "in": "body", "description": "Inferred parameter: created_by", "required": true, "schema": {"type": "string"}}, {"name": "schedule", "in": "body", "description": "Inferred parameter: schedule", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Administrators"], "primary_use_case": "To enable organizations to create and manage configurations for automated network device discovery, inventory collection, and performance monitoring."}, "content_for_embedding": "This API endpoint facilitates the creation of new Discovery Profiles, which are essential for defining and saving preferences for periodic network discovery. These profiles allow for tracking and initiating the discovery of network devices such as hubs, modems, printers, switches, routers, bridges, and access points. The configuration includes specifying IP addresses or ranges (host), discovery protocols (e.g., SNMP, ping), and fine-tuning parameters like filtering by ping or enabling SNMP monitoring. Additionally, it supports scheduling for automated periodic discovery and is designed to collect comprehensive inventory information, with options for availability and performance monitoring. The process contributes to asset management and leverages protocols like SNMP for detailed device information.", "semantic_keywords": ["Network Device Discovery", "Configuration Profiles", "Inventory information"], "ontology_classification": {"features": ["device_discovery", "it_operations", "inventory_data_collection"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/ims/discovery/profile/{id}/", "method": "GET", "details": {"operationId": "ux_ims_discovery_profile_retrieve_2", "description": "This endpoint retrieves a specific Discovery Profile configuration within the current organization. Discovery Profiles are pre-configured settings designed to save preferences for tracking and initiating periodic discovery of IT assets. This allows users to fetch detailed information about a profile, including its name, description, and chosen discovery options such as 'Discover only Inventory Information', 'Discover inventory with availability monitoring', or 'Discover inventory with availability and performance monitoring'.", "summary": "Gets a discovery configuration with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "The `id` path parameter is required and uniquely identifies the Discovery Profile to be retrieved. Discovery Profiles are used to categorize and manage different discovery operations based on varying requirements for inventory, availability, and performance monitoring. The name and a brief description help in identifying and understanding the purpose of each profile."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network administrators", "System administrators", "IT operations personnel"], "primary_use_case": "To retrieve specific Discovery Profile configurations used for tracking and initiating periodic discovery of IT assets, including inventory, availability, and performance monitoring."}, "content_for_embedding": "This API retrieves a specific Discovery Profile configuration by its unique ID. Discovery Profiles are pre-configured settings designed to save preferences for tracking and initiating periodic discovery of IT assets. This includes options for discovering only inventory information, inventory with availability monitoring, or inventory with availability and performance monitoring. The endpoint allows users to fetch detailed information about a profile, such as its name, description, and chosen discovery options. The `id` path parameter is required to uniquely identify the Discovery Profile to be retrieved.", "semantic_keywords": ["Discovery Configuration", "Configuration retrieval", "Asset Management"], "ontology_classification": {"features": ["device_discovery", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_ims_discovery_profile_update", "description": "This endpoint allows users to edit an existing Discovery Profile configuration for their organization. Discovery Profiles are designed to save preferences and identify profiles that will track and initiate periodic discovery of network devices. This includes setting the profile's name, which helps identify it, and choosing from various discovery options (e.g., discovering only inventory information, inventory with availability monitoring, or inventory with both availability and performance monitoring). The endpoint specifically modifies the configuration of the Discovery Profile identified by the provided `id`.", "summary": "Edits the discovery configuration with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Discovery Configuration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "The `id` in the path parameter is a required string that uniquely identifies the Discovery Profile to be edited. The request body for this PUT operation is expected to be a 'Discovery Configuration serializers' object, which will contain the updated details for the profile, including its name and chosen discovery options. The updated profile name should be meaningful and unique to help identify the profile within the system. Developers should refer to the 'Discovery Configuration serializers' schema for the exact structure and fields required in the request body."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Administrator"], "primary_use_case": "This API allows users to modify existing Discovery Profile configurations, which are used to define how network devices are discovered and monitored (e.g., for inventory, availability, or performance). It solves the problem of updating and maintaining network device discovery settings for an organization."}, "content_for_embedding": "This endpoint facilitates the modification of an existing Discovery Profile configuration. Discovery Profiles are crucial for defining how network devices are periodically discovered, including preferences for collecting inventory information, availability monitoring, and performance monitoring. Users can update the profile's name and various discovery options. The API requires a unique `id` to identify the specific Discovery Profile to be edited, and the request body expects a 'Discovery Configuration serializers' object containing the updated details.", "semantic_keywords": ["Discovery Configuration", "Network Device Discovery", "Configuration Profiles"], "ontology_classification": {"features": ["device_discovery", "general_settings", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/ims/discovery/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_ims_discovery_profile_destroy", "description": "This endpoint facilitates the deletion of an existing Discovery Configuration Profile identified by its unique ID. Discovery Profiles are instrumental in saving preferences and identifying configurations to track and initiate discovery processes periodically within the current organization. Deleting a profile permanently removes it from the system.", "summary": "Deletes the discovery configuration with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and uniquely identifies the Discovery Configuration Profile to be deleted. A critical constraint to note is that a Discovery Configuration Profile cannot be deleted if it is currently associated with an active download job. Users should ensure no active associations before attempting deletion. This operation is analogous to clicking the delete icon for a configuration profile in the user interface and confirming the deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "User with appropriate privileges"], "primary_use_case": "To delete an existing Discovery Configuration Profile, which stores preferences and configurations for initiating discovery processes. This helps in managing and cleaning up old or unused discovery settings."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a Discovery Configuration Profile, identified by its unique ID. These profiles are crucial for saving preferences and configuring periodic discovery processes within an organization. A key constraint is that a profile cannot be deleted if it is actively associated with a download job. This operation is functionally equivalent to deleting a configuration profile through the user interface.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "centralized_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Discovery Configuration", "Configuration Management"]}}, {"path": "/ux/ims/discovery/profile/audit/", "method": "GET", "details": {"operationId": "ux_ims_discovery_profile_audit_retrieve", "description": "This endpoint provides access to the audit logs for a specific discovery job configuration. It is used to view a detailed log of activities related to a discovery job, similar to the 'Audit' action accessible via action icons on the Job Progress page. The audit log typically includes timestamps, task names, IP addresses, and relevant messages, providing insights into when the job was initiated, modified, or completed, along with details like configuration type (running or start-up), error logs, and any issues encountered during the process.", "summary": "Get the audit for the discovery configuration", "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "This endpoint specifically retrieves audit logs for a *given discovery job ID*. While the API specification does not explicitly list parameters, based on context, it implies that a discovery job identifier would be needed to retrieve the audit for a specific job. Future enhancements to the API might include ways to filter or search the audit logs by criteria such as timestamp, task name, or message content, similar to the 'Search' and 'Filter' functionalities described in the documentation for other audit logs. Users can typically find active discovery jobs and their associated audit information on the Job Progress page."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Operations Teams", "System Auditors"], "primary_use_case": "Monitoring and auditing network discovery job activities, providing detailed insights into job execution and status."}, "content_for_embedding": "This API retrieves detailed audit logs for specific network discovery job configurations. It provides a comprehensive view of activities, including timestamps, task names, IP addresses, and messages, offering insights into job initiation, modification, completion, and any encountered issues. The logs are crucial for monitoring, troubleshooting, and auditing the execution of discovery processes, with potential future enhancements for advanced search and filtering capabilities.", "semantic_keywords": ["Audit Trail", "Log Management", "Discovery Configuration"], "ontology_classification": {"features": ["log_search_module", "real-time_log_analysis"], "primary_module": "log_management", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/details/", "method": "GET", "details": {"operationId": "ux_ims_discovery_profile_details_retrieve", "description": "This endpoint retrieves the detailed configuration and operational information for a specific discovery job. It provides comprehensive insights into an active discovery, allowing users to understand its current status, associated profile, schedule type, and other relevant details. This information is crucial for monitoring discovery progress and managing ongoing discovery operations, similar to the \"Information\" icon functionality described in the Job Progress page.", "summary": "Get the detailed discovery configuration", "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "This endpoint is used to view details of an active discovery job, not to initiate or modify it. While the provided API specification does not list any parameters, in a typical usage scenario, a `job_id` or `profile_name` would likely be required to specify which discovery details to retrieve. The output should include data points such as 'Profile Name', 'Type', 'Schedule Type', 'Current Status', 'Last Action', and 'Next Action', consistent with the details displayed on the 'Job Progress' page for active discoveries."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators", "Monitoring Engineers"], "primary_use_case": "To retrieve detailed configuration and operational information for specific active discovery jobs, enabling users to monitor their status, associated profiles, schedule types, and other relevant details for effective management of ongoing discovery operations."}, "content_for_embedding": "This API endpoint retrieves comprehensive detailed configuration and operational information for a specific active discovery job. It provides insights into its current status, associated profile, schedule type, and other crucial details. This is essential for monitoring discovery progress and managing ongoing discovery operations, similar to the \"Information\" icon functionality on the Job Progress page. The output includes data points such as Profile Name, Type, Schedule Type, Current Status, Last Action, and Next Action.", "ontology_classification": {"features": ["device_discovery", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Discovery Configuration", "Details retrieval", "Monitoring"]}}, {"path": "/ux/ims/discovery/profile/do-rescan/", "method": "POST", "details": {"operationId": "ux_ims_discovery_profile_do_rescan_create", "description": "This endpoint is used to initiate a re-scan for an existing discovery profile. While the summary mentions 'iterations for the discovery configuration', the context suggests this endpoint triggers a new discovery cycle given a 'Discovery Profile'. Discovery Profiles are pre-configured settings that save preferences for tracking and periodically initiating discovery processes. This re-scan action helps update inventory information, availability monitoring, or performance monitoring based on the profile's saved options. The process is similar to initiating a discovery, where job progress can be monitored displaying details like Profile Name, Type, Schedule Type, Current Status, Last Action, and Next Action.", "summary": "Get the iterations for the discovery configuration", "tags": ["Discovery Configuration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "The API requires a request body to define the 'Discovery Configuration serializers', which implies the request likely contains the necessary information (e.g., profile ID or details) to identify which discovery profile to re-scan. Although specific parameters are not listed in the provided API spec, the request body is crucial for this operation. This action effectively 're-submits' a discovery job associated with a profile, similar to clicking 'Submit' to initiate a discovery from the UI. Users can then monitor the progress of this re-scan on the Job Progress page."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Administrators"], "primary_use_case": "To initiate a re-scan for an existing discovery profile, updating inventory information, availability monitoring, and performance monitoring data to ensure up-to-date network and asset information."}, "content_for_embedding": "This API endpoint allows users to trigger a re-scan for a pre-configured discovery profile. The re-scan initiates a new discovery cycle to refresh and update inventory details, availability status, and performance metrics of network assets. The process is analogous to re-submitting a discovery job from the user interface, and its progress can be tracked on the Job Progress page. The request body is essential for providing the necessary discovery configuration details to identify the profile to be re-scanned.", "semantic_keywords": ["Discovery Configuration", "Network Inventory", "Rescan"], "ontology_classification": {"features": ["it_operations", "device_discovery", "inventory_data_collection", "real-time_asset_performance_monitoring"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/download_csv/", "method": "GET", "details": {"operationId": "ux_ims_discovery_profile_download_csv_retrieve", "description": "This API endpoint provides a mechanism to download a CSV file containing information related to Discovery Profiles. Discovery Profiles are critical for saving preferences and identifying configurations used to track and periodically initiate network or server discoveries. These profiles define settings such as the scope of discovery (e.g., inventory with availability and performance monitoring, or only inventory information).\n\nThe '/ux/ims/discovery/profile/download_csv/' endpoint is specifically designed to facilitate the export of these profile configurations, supporting workflows where users might want to manage or audit their discovery settings outside the system, or for configuration backup purposes. It serves as an alternative to manually adding IP addresses or ranges allowing for bulk import and management.", "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "This `GET` endpoint triggers a download of a CSV file. While the parameters are not explicitly detailed in the provided JSON specification for this particular endpoint, typically, download functionalities like this might implicitly utilize existing profile configurations set up via other interfaces or could eventually support query parameters to filter which discovery profiles are included in the CSV export. Based on the context, the CSV import/export functionality relates to managing IP addresses, IP ranges, or subnets for discovery. It complements the manual entry of these details, providing a bulk management option for discovery targets. The 'Profile Name' is a key identifier for these saved preferences and helps in tracking and initiating periodic discoveries. This endpoint is crucial for users needing to manage their discovery configurations in a file-based format."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "System Administrators", "IT Auditors", "Users managing network/server discovery configurations"], "primary_use_case": "This API allows users to download a CSV file containing Discovery Profiles, which are essential configurations for network and server discoveries. It supports external management, auditing, and backup of discovery settings, and facilitates bulk import/export of IP addresses and ranges for discovery targets."}, "content_for_embedding": "This API endpoint provides a mechanism to download a CSV file containing information related to Discovery Profiles. Discovery Profiles are critical for saving preferences and identifying configurations used to track and periodically initiate network or server discoveries. This endpoint facilitates the export of these profile configurations, supporting workflows where users might want to manage or audit their discovery settings outside the system, or for configuration backup purposes. It also complements manual entry by providing a bulk management option for discovery targets like IP addresses or ranges.", "semantic_keywords": ["CSV Export", "Discovery Configuration", "Download"], "ontology_classification": {"features": ["download_job_management", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/get-custom-scanner-fields/", "method": "POST", "details": {"operationId": "ux_ims_discovery_profile_get_custom_scanner_fields_create", "description": "This endpoint is used to retrieve the configuration of a specific custom scanning mechanism, identified by a given ID. It fetches the definition of fields available for a custom scanner within the context of the current organization. This custom scanner is part of Discovery Profiles, which are configured to save preferences and track periodic discovery of network devices. The scan configuration can include details such as IP ranges, selected protocols, and discovery options (e.g., discovering only inventory information, or inventory with availability and performance monitoring).", "summary": "Gets a scanning mechanism List with the given id", "tags": ["Discovery Configuration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "This endpoint specifically focuses on fetching the 'custom scanner fields', which are likely the definable attributes or input options for a particular scanning method. The request body is described as 'Discovery Configuration serializers', suggesting it might be used to specify details about the Discovery Profile or the custom scanner itself. The endpoint summary refers to 'a scanning mechanism List with the given id', which implies that the retrieved 'custom scanner fields' are part of a broader scanning mechanism definition. Discovery Profiles are crucial for network discovery, enabling users to define and save preferences for tracking and initiating periodic scans of network devices like hubs, modems, printers, switches, routers, bridges, and access points."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Staff", "System Integrators"], "primary_use_case": "To retrieve the configuration details, specifically custom scanner fields, for discovery profiles used in network device discovery."}, "content_for_embedding": "This API retrieves the configuration details, specifically custom scanner fields, for a given discovery profile or custom scanning mechanism. These profiles are used to define preferences for periodic discovery of network devices such as routers, switches, and printers, including parameters like IP ranges and protocols. The endpoint provides the definable attributes and input options for a specific scanning method.", "semantic_keywords": ["Discovery Configuration", "Network Device Discovery", "Configuration Retrieval"], "ontology_classification": {"features": ["device_discovery", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/iteration-list/", "method": "GET", "details": {"operationId": "ux_ims_discovery_profile_iteration_list_retrieve", "description": "This endpoint retrieves a list of all iterations associated with a specific discovery configuration identified by its job ID. These iterations represent the historical runs or cycles of a discovery job, detailing its progress and results, similar to what is displayed on the 'Job Progress' page in the user interface. It focuses on providing insights into the ongoing or completed discovery processes for inventory monitoring, potentially including availability and performance monitoring as configured within the Discovery Profile.", "summary": "Get the iterations for the discovery configuration", "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "Discovery Profiles are crucial for periodic discovery and help save preferences for tracking and initiating discovery processes. The information retrieved by this endpoint would allow users to programmatically monitor the status and history of discovery jobs, mirroring the 'Job Progress' view that includes details like 'Profile Name', 'Type', 'Schedule Type', 'Current Status', 'Last Action', and 'Next Action'. This API is essential for understanding the lifecycle and outcomes of initiated discovery operations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Developer"], "primary_use_case": "To programmatically retrieve and monitor the historical runs and current status of discovery jobs for inventory monitoring, mirroring the 'Job Progress' view in the user interface."}, "content_for_embedding": "This API retrieves a list of all iterations associated with a specific discovery configuration identified by its job ID. These iterations represent the historical runs or cycles of a discovery job, detailing its progress and results, similar to what is displayed on the 'Job Progress' page. It provides insights into ongoing or completed discovery processes for inventory monitoring, including availability and performance monitoring. Discovery Profiles are crucial for periodic discovery and help save preferences for tracking and initiating discovery processes. This endpoint allows users to programmatically monitor the status and history of discovery jobs, mirroring the 'Job Progress' view that includes details like 'Profile Name', 'Type', 'Schedule Type', 'Current Status', 'Last Action', and 'Next Action'. This API is essential for understanding the lifecycle and outcomes of initiated discovery operations.", "semantic_keywords": ["Discovery Configuration", "History", "Retrieval"], "ontology_classification": {"features": ["device_discovery", "audit_log", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/multidelete/", "method": "POST", "details": {"operationId": "ux_ims_discovery_profile_multidelete_create", "description": "This API endpoint facilitates the deletion of multiple Discovery Profiles. Discovery Profiles are configurations that store preferences and define how and when to track and initiate system or device discovery periodically. Each profile is identified by a unique name and can include various discovery options, such as discovering only inventory information, or extending to include availability and/or performance monitoring. This endpoint is crucial for managing and cleaning up no longer needed discovery configurations.", "tags": ["Discovery Configuration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "The request to this endpoint will likely involve a list of Discovery Profile identifiers (e.g., IDs or names) within its request body, as indicated by 'multidelete'. While the API specification refers to 'Discovery Configuration serializers' for the request body, the specific format or required fields (like profile names/IDs) are not detailed here. Refer to the 'Infinity User Guide' for a comprehensive understanding of Discovery Profiles, their creation, and the different discovery options available (Inventory, Availability, Performance monitoring)."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations teams", "System administrators"], "primary_use_case": "Streamlining the management and cleanup of discovery configurations by enabling the deletion of multiple profiles simultaneously."}, "content_for_embedding": "This API endpoint allows for the bulk deletion of multiple Discovery Profiles. Discovery Profiles are essential configurations that dictate how and when system or device discovery is performed, including options for inventory, availability, and performance monitoring. This operation is crucial for managing and cleaning up outdated or unneeded discovery configurations. The request body is expected to contain identifiers for the profiles to be deleted. Note that profiles cannot be deleted if associated with a download job.", "semantic_keywords": ["Delete", "Discovery Configuration", "Bulk Delete"], "ontology_classification": {"features": ["device_discovery", "network_configuration_management_(nccm)", "bulk_actions"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/discovery/profile/options/", "method": "GET", "details": {"operationId": "ux_ims_discovery_profile_options_retrieve", "description": "This endpoint is used to retrieve the configuration options and dropdown values primarily for creating Discovery Profiles. These profiles allow users to save preferences, track, and periodically initiate various types of discovery. The options returned pertain to the different discovery types available, such as 'Discover only Inventory Information', 'Discover inventory with availability monitoring', and 'Discover inventory with availability and performance monitoring'. It serves as a foundational step for configuring and initiating discovery processes within the system.", "summary": "Get the discovery dropdown and config options", "tags": ["Discovery Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "additional_info": "This endpoint provides the 'Discovery Options' which are critical for defining how a discovery profile will behave. Based on the contexts, there are typically two or three options for discovery, allowing users to choose the level of detail they require (e.g., just inventory, inventory with availability, or inventory with availability and performance monitoring). While the API specification does not list any parameters, the response will provide the necessary data for populating UI elements related to these discovery choices. This data is essential for setting up new Discovery Profiles, which can be applied to various discovery types like Linux Server Discovery or Network Discovery."}, "llm_generated": {"business_context": {"user_personas": ["Users responsible for configuring and initiating IT discovery processes", "System administrators", "Network administrators"], "primary_use_case": "To provide configuration options and dropdown values necessary for creating and defining Discovery Profiles, enabling users to set up various types of discovery processes (e.g., inventory, availability, performance monitoring)."}, "content_for_embedding": "This API retrieves configuration options and dropdown values essential for creating and managing Discovery Profiles. These profiles allow users to define preferences for various discovery types, such as discovering only inventory information, inventory with availability monitoring, or inventory with both availability and performance monitoring. The data returned by this endpoint is crucial for populating user interface elements that guide the setup of new Discovery Profiles, which can be applied to different discovery scenarios like Linux Server Discovery or Network Discovery. It serves as a foundational step for configuring and initiating automated discovery processes within the system.", "ontology_classification": {"features": ["device_discovery", "it_operations"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Discovery Configuration", "Configuration Options", "Dropdown options"]}}, {"path": "/ux/ims/discovery/profile/validate_csv/", "method": "POST", "details": {"operationId": "ux_ims_discovery_profile_validate_csv_create", "description": "This API endpoint facilitates the validation of Discovery Profile configurations, specifically when importing data via a CSV file. Discovery Profiles are crucial for saving preferences and identifying configurations that track and periodically initiate network discovery. The validation process ensures the integrity of the data provided in the CSV, confirming that profile names, discovery options (including inventory, availability, and performance monitoring preferences), and other details align with system requirements. This endpoint supports the initial setup or modification of discovery settings through batch operations.", "tags": ["Discovery Configuration"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DiscoveryConfiguration"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint (`request_body_description`: \"Discovery Configuration serializers\") expects data related to Discovery Configuration serializations, likely in a format that can be parsed for validation against defined Discovery Profile structures. While the primary method of input is suggested to be via a CSV file for validation, the exact structure of the expected serialization in the request body is not explicitly detailed in the provided contexts. Developers should refer to the `Discovery Configuration serializers` documentation for the precise format required for the CSV content. Discovery Profiles can choose between options like 'Discover inventory with availability and performance monitoring' or 'Discover only Inventory Information'."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Integrators"], "primary_use_case": "To validate the integrity and correctness of Discovery Profile configurations, especially when imported via CSV, ensuring they align with system requirements for network discovery and batch operations."}, "content_for_embedding": "This API endpoint validates Discovery Profile configurations, specifically for data imported via CSV files. It ensures the integrity of profile names, discovery options (inventory, availability, performance monitoring), and other details align with system requirements for network discovery. This supports initial setup or modification of discovery settings through batch operations.", "semantic_keywords": ["Discovery Configuration", "CSV Import", "Validation"], "ontology_classification": {"features": ["device_discovery", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/jobs/profile/", "method": "GET", "details": {"operationId": "ux_ims_jobs_profile_retrieve", "description": "This endpoint allows users to retrieve a paginated list of all job profiles within the current organization. Each job profile returned includes details such as its name, description, job type (e.g., Upload Job, Configuration Template, OS Image, Download Job), current status, and execution details. This information is crucial for auditing, reviewing job execution steps, managing configurations (like startup or running configurations), and tracking job outcomes (success or failure). The API supports pagination and sorting to efficiently navigate through large sets of job data.", "summary": "Gets a list of Jobs", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "This endpoint is used to fetch all the job profiles available in the organization's network configuration inventory. When fetching job details, expect to see information relevant to various job types like 'Upload Job' (for active and scheduled jobs), 'Download Jobs' (for retrieving configurations from network devices), and 'OS Image' jobs (for managing and deploying configuration changes). The 'Workflow Job Name' and 'Description' parameters described in the contexts are internal identifiers for the job profiles themselves. Results typically include details like 'Vendor', 'Created By', 'Executed By', and the 'Result' status of job executions if applicable. Use the `items_per_page` and `page` query parameters to control pagination, and `sort`, `reverse` to order the results. The 'Result' tab or section (as mentioned in contexts) if exposed through other means, would display underlying command information related to the job execution."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Operator", "Auditor"], "primary_use_case": "To provide a comprehensive, paginated list of all job profiles within an organization, enabling users to audit, review, and manage job execution details, status, and configurations."}, "content_for_embedding": "This API retrieves a paginated list of all job profiles, including details like name, description, type (e.g., Upload, Configuration Template, OS Image, Download), status, and execution information. It supports sorting and is crucial for auditing, reviewing job execution, managing configurations, and tracking job outcomes (success/failure). Key details like Vendor, Created By, Executed By, and Result status are provided.", "semantic_keywords": ["Job Management", "Retrieval", "Pagination"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "download_job_status_drill-down", "download_result_page_drill-down"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/ims/jobs/profile/", "method": "POST", "details": {"operationId": "ux_ims_jobs_profile_create", "description": "This API endpoint facilitates the viewing and editing of configurations for bot CMDB (Configuration Management Database) profiles. It allows administrators to manage and customize these bot profiles, which are integral to the system's automated assistance functionalities. Bots offer instant access to information on company policies, procedures, and support across various departments like Finance, HR, IT, Legal, and Operations. This endpoint is crucial for tailoring bot behavior and data handling to specific departmental needs and compliance requirements.", "tags": ["Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobConfig"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/JobConfig"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/JobConfig"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobConfig"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is defined by 'Jobs serializers', suggesting that the operation pertains to the management of 'job' configurations or definitions associated with these bot profiles. Administrators can typically customize default bots or create new ones, specifying details like 'Bot Name' and 'Description'. For detailed guidance on configuring bots, refer to the 'Bots module' within the application, often accessible via 'Infraon configuration -> Bots -> Bots Assistance'."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To manage and customize configuration profiles for bot CMDB, enabling administrators to tailor bot behavior and data handling for automated assistance functionalities."}, "content_for_embedding": "This API allows administrators to create, view, and edit configuration profiles for bot CMDB. These profiles define the behavior and data handling of AI bots, which provide automated assistance across various departments. It supports managing job configurations associated with these bot profiles, including customizing bot names and descriptions. This is part of the broader Infraon Configuration for AI Bot Assistance.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "AI Bot Assistance"], "ontology_classification": {"features": ["ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/jobs/profile/{id}/", "method": "GET", "details": {"operationId": "ux_ims_jobs_profile_retrieve_2", "description": "This API endpoint allows administrators to view and manage existing bot CMDB configurations. It provides access to the details of a specific bot profile identified by its unique ID. This functionality is part of the 'Bots' module, enabling granular control over how bots are configured, including their labels, descriptions and functionalities, which can be customized for specific departments to align with terminology and compliance requirements. This endpoint supports retrieving comprehensive information on bot profiles, such as those for Finance, HR, and IT Assistance, which offer instant access to company policies and procedures.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobConfig"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the bot CMDB configuration profile to be viewed or edited. Admins can navigate to 'Infraon configuration -> Bots -> Bots Assistance' to manage these configurations. The bot configurations typically include details like 'Bot Name' and 'Description', which can be found in the system's 'Bots Configuration' settings. While the current description focuses on viewing/editing, the context implies a broader management capability for 'bot cmdb configurations'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "This API allows administrators to view and manage existing bot CMDB configurations, providing granular control over bot settings, labels, descriptions, and functionalities."}, "content_for_embedding": "This API endpoint is designed for administrators to retrieve and manage detailed configurations of bots within the CMDB. It enables granular control over bot properties such as labels, descriptions, and functionalities, which can be customized for specific departments to meet terminology and compliance requirements. The API supports accessing comprehensive information for various bot profiles, including those for Finance, HR, and IT Assistance, identified by a unique ID.", "semantic_keywords": ["Bot Configuration", "CMDB Configuration", "Configuration Management"], "ontology_classification": {"features": ["ai_bot_assistance", "ci_relationship_management_(cmdb)", "agent_management", "customizable_asset_properties_and_fields"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/ims/jobs/profile/{id}/", "method": "PUT", "details": {"operationId": "ux_ims_jobs_profile_update", "description": "This API endpoint allows for viewing and editing the configuration profiles of bots within the system. Specifically, it enables modification of properties associated with individual bot jobs, which can include details like bot name, description, and other relevant fields as per the `Jobs serializers` request body. The original description stated 'bot cmdb configurations' which is further clarified by context showing 'Bots Configuration' and fields like 'Bot Name' and 'Description'. This endpoint is integral for managing and customizing automated bots such as Finance, HR Assistant, and IT Assistance bots, which offer instant access to company policies and procedures.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobConfig"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/JobConfig"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/JobConfig"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobConfig"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` in the path parameter refers to the unique identifier for the bot job profile being viewed or edited. The request body requires `Jobs serializers`, which likely refers to the structured data used to define or update the bot's configuration, including its label and description. This operation is critical for administrators to customize default bots for specific departments to align with their terminology and compliance requirements. For detailed guidance on bot management, refer to the 'Bots module' as mentioned in the admin guide, or navigate through 'Infraon configuration -> Bots -> Bots Assistance' to manage bot assistance settings."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Users with privileges to manage bot configurations"], "primary_use_case": "To allow administrators to view and edit the configuration profiles of automated bots, including details like bot name and description, to customize them for specific departmental needs and compliance."}, "content_for_embedding": "This API endpoint facilitates the management of automated bot configurations. It enables administrators to view and update specific properties of bot job profiles, such as bot name and description, identified by a unique ID. This functionality is crucial for tailoring bots like Finance, HR Assistant, and IT Assistance to meet departmental requirements and ensure compliance, by modifying their configuration settings.", "semantic_keywords": ["Bot Configuration", "Edit", "Configuration Management"], "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/jobs/profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_ims_jobs_profile_destroy", "description": "This API endpoint facilitates the deletion of a specific bot CMDB configuration profile identified by its unique ID. While the original description mentioned viewing or editing, the 'DELETE' method clearly indicates its primary function is removal. Bot configurations, as described in the Infinity user guide, involve details such as bot names and descriptions. This operation is crucial for managing and maintaining the lifecycle of defined bots within the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter in the path is a mandatory string that uniquely identifies the bot CMDB configuration profile to be deleted. Successful deletion results in no response body. For detailed guidance on managing bots, including their creation and configuration, users should refer to the 'Bots module' as highlighted in the administrative guide. Further relevant information related to bot configurations, including adding new bots, is available in the Infinity user guide under 'Infraon configuration -> Bots -> Bots Assistance'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Administrator"], "primary_use_case": "To manage and maintain the lifecycle of defined bots within the system by allowing the deletion of specific bot CMDB configuration profiles."}, "content_for_embedding": "This API deletes a specific bot CMDB configuration profile using its unique ID. It is essential for managing and maintaining the lifecycle of defined bots within the system, allowing for the removal of unwanted or outdated bot configurations. This operation is part of the overall bot management and configuration within the Infinity system.", "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Bot Configuration", "CMDB Configuration"]}}, {"path": "/ux/ims/mib-explorer/", "method": "GET", "details": {"operationId": "ux_ims_mib_explorer_list", "description": "This endpoint, found at `/ux/ims/mib-explorer/`, is used to retrieve a paginated list of MIB (Management Information Base) explorer entries for the current organization. The MIB Explorer is a crucial tool for managing IT assets, allowing for detailed insights into device configurations and installed applications. This endpoint facilitates searching and filtering capabilities, similar to those found in the user interface, which enable filtering based on fields like asset name, device type, vendor, and version. It also aligns with the broader asset management functionalities described in the documentation, which include displaying essential details such as hostname, device type, asset status, and IP address for various devices like routers, switches, and firewalls. The results can be sorted and paginated to efficiently navigate through large datasets.", "summary": "Gets a list of mib_explorer", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["MIB Explorer"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/MibExplorer"}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination and sorting to manage large result sets. The `items_per_page` and `page` parameters are mandatory for controlling the pagination. For sorting, `sort` specifies the key (e.g., 'name', 'type', 'vendor', 'version' from context) and `reverse` (boolean) defines the order. Although specific sortable fields are not explicitly listed in the API spec, context from the user guide suggests fields like 'name', 'type', 'vendor', and 'version' as common search/filter criteria, which are likely candidates for sorting. This API is commonly used to programmatically access and manage MIB data, aiding in inventory, configuration management, and asset tracking within an organization."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Network Administrator", "IT Operations", "Developer"], "primary_use_case": "To programmatically retrieve, search, filter, and sort MIB (Management Information Base) explorer entries for IT asset management, device configuration insights, inventory, and asset tracking within an organization."}, "content_for_embedding": "This API retrieves a paginated list of MIB (Management Information Base) explorer entries for IT asset management. It provides detailed insights into device configurations and installed applications, supporting searching, filtering by asset name, device type, vendor, and version, as well as sorting and pagination. It's essential for inventory, configuration management, and asset tracking of network devices like routers, switches, and firewalls.", "ontology_classification": {"features": ["asset.asset_search_and_filtering", "asset.inventory_data_collection", "asset.unified_asset_repository", "asset.customizable_asset_properties_and_fields", "infraon_configuration.network_configuration_management_(nccm)"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["Asset Management", "Configuration Management", "Search and Filter"]}}, {"path": "/ux/ims/mib-explorer/", "method": "POST", "details": {"operationId": "ux_ims_mib_explorer_create", "description": "This endpoint is used to save a new MIB explorer for the current organization. A MIB explorer likely involves the management and deployment of configuration changes across network devices such as routers, switches, and firewalls, similar to how OS images function (Context Rank 1, 5). This process could be part of a broader configuration profile management (Context Rank 3) within an organization's IT asset management, potentially relating to structured changes handled by the IMACD framework (Install, Move, Add, Change, Dispose) (Context Rank 4).", "summary": "Creates a new mib_explorer", "tags": ["MIB Explorer"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "While the API specification indicates 'no response body', successful creation of a MIB explorer would typically entail saving the process (Context Rank 6). The description from Context Rank 3 suggests that configuration profiles, which might be related to MIB explorers, have associated actions like 'Edit', 'Delete', 'Download'/Export to CSV, and 'Copy'. Although not directly part of this 'POST' endpoint, these actions hint at the lifecycle management capabilities surrounding MIB explorers. This endpoint primarily focuses on the 'creation' aspect, analogous to adding new configuration profiles or managing changes within an asset management module (Context Rank 7)."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Asset Managers", "System Administrators"], "primary_use_case": "To create and save new MIB explorers for an organization, facilitating the management and deployment of configuration changes across network devices as part of IT asset management and configuration profile management."}, "content_for_embedding": "This API endpoint allows for the creation and saving of a new MIB explorer within an organization. A MIB explorer is crucial for managing and deploying configuration changes to network devices like routers, switches, and firewalls. This process is analogous to managing OS images and is an integral part of broader configuration profile management and IT asset management, aligning with the IMACD (Install, Move, Add, Change, Dispose) framework. While the API primarily focuses on creation, it supports the lifecycle management of configuration profiles.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "process_creation", "configuration_download_jobs", "asset_lifecycle_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["MIB Explorer", "Configuration Management", "Network Configuration"]}}, {"path": "/ux/ims/mib-explorer/{id}/", "method": "GET", "details": {"operationId": "ux_ims_mib_explorer_retrieve", "description": "This API endpoint provides functionality to manage MIB (Management Information Base) files. Specifically, it enables users to 'Add' new MIB files, similar to adding attachments or other configurations as seen in the user guide, and 'Delete' existing MIB files, mirroring the process for removing assets or configurations from the system. While the primary action described in the original API spec is 'add or delete,' this GET method specifically focuses on interactions within the MIB explorer, likely allowing for retrieval or initial interaction before add/delete operations.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["MIB Explorer"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string, likely representing a specific MIB file or a unique identifier within the MIB explorer context. The user guide contexts frequently mention 'Add' and 'Delete' functionalities across various modules (attachments, assets, OS images), indicating a common pattern of management operations. This endpoint, as a GET request, might be used to retrieve details of a specific MIB file identified by the `id`, or to prepare for an add/delete operation by providing relevant information. Although the initial description mentions 'add or delete', for a GET method, this would typically involve retrieving information about the MIB files or the MIB explorer itself, which could then precede an actual add (via a POST) or delete (via a DELETE) operation on a separate endpoint. The provided contexts suggest that adding and deleting operations often involve confirmation steps or specific file types/sizes, although this endpoint doesn't directly handle the payload for such operations, making the `id` parameter crucial for targeting the MIB file."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer"], "primary_use_case": "Retrieving MIB file information for management operations within a MIB explorer."}, "content_for_embedding": "This API endpoint allows for the retrieval of information related to MIB (Management Information Base) files within the MIB explorer. It uses a unique `id` to identify a specific MIB file, providing details that can be used as a precursor to 'Add' (via POST) or 'Delete' (via DELETE) operations on MIB files. The endpoint facilitates the management of MIB files by enabling users to view their details, similar to how other attachments or configurations are managed in the system.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "search_functionality", "attachment_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["MIB Explorer", "Retrieval", "Network Configuration"]}}, {"path": "/ux/ims/mib-explorer/{id}/", "method": "PUT", "details": {"operationId": "ux_ims_mib_explorer_update", "description": "This API endpoint facilitates the management of MIB (Management Information Base) files within the system. It allows users to upload new MIB files or remove existing ones, enhancing the system's ability to interpret and utilize data from network devices. This endpoint is crucial for maintaining up-to-date MIB definitions, enabling proper network monitoring and management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["MIB Explorer"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter in the path is a mandatory string that identifies the specific MIB file to be modified or deleted. While the current specification mentions `PUT` method for both adding and deleting, typical REST practices suggest `POST` for adding and `DELETE` for removing; developers should clarify the exact operation semantics with the API provider. The request body is described as a 'Serializer for Documents', supporting a wide range of primitive and compound document fields. For MIB file uploads, the `FileField` and `BinaryField` types are noted as 'not well supported or untested', indicating potential issues or limitations when handling the MIB file content directly in the request body. Users should ensure MIB files are provided in a compatible format and size. Similar to other asset management functions described in the user guides, operations on MIB files likely involve typical add, edit, and delete workflows, where 'Add - Click to add new attachments' and 'Delete - Click to remove the asset' are common operations."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "System administrators", "Developers"], "primary_use_case": "Managing MIB (Management Information Base) files to enable network monitoring and device data interpretation."}, "content_for_embedding": "This API endpoint, PUT /ux/ims/mib-explorer/{id}/, is designed for the comprehensive management of MIB (Management Information Base) files within the system. It allows users to upload new MIB files and remove existing ones, which is critical for maintaining up-to-date MIB definitions. This functionality directly enhances the system's capability to interpret and utilize data from network devices, supporting robust network monitoring and management. While the PUT method is used for both adding and deleting, the core purpose revolves around updating and maintaining the MIB file repository. The API handles file content, although specific file types like FileField and BinaryField might have limitations. It supports typical add, edit, and delete workflows for MIB assets.", "semantic_keywords": ["MIB Explorer", "Configuration Management", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "attachment_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/mib-explorer/{id}/", "method": "DELETE", "details": {"operationId": "ux_ims_mib_explorer_destroy", "description": "This endpoint is used to delete an existing MIB Explorer instance associated with the current organization. Deleting a MIB Explorer is analogous to removing a Multi-Index, which typically involves deleting a field within the Multi-Index. Exercise caution when using this option as it permanently removes the specified MIB Explorer instance.", "summary": "Deletes the mib_explorer with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["MIB Explorer"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and represents the unique identifier of the MIB Explorer instance to be deleted. This operation is considered a 'delete' action, similar to deleting a process or an asset from inventory. Further details on the MIB Explorer and Multi-Index functionality can be found in the Infinity User Guide under sections related to Multi-Index management and field operations. While the response body is empty, a successful deletion is typically indicated by a 204 No Content status code."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations personnel", "Users responsible for managing MIB Explorer instances or Multi-Indexes"], "primary_use_case": "To permanently remove a specific MIB Explorer instance, which is analogous to deleting a Multi-Index or a field within it, or removing a process/asset from inventory."}, "content_for_embedding": "This API endpoint facilitates the permanent removal of a specific MIB Explorer instance by its unique identifier. This action is comparable to deleting a Multi-Index, removing a field from a Multi-Index, or eliminating a process or asset from an inventory system. It is a critical and irreversible operation within the system's management capabilities.", "ontology_classification": {"features": ["process_deletion"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "MIB Explorer", "Multi-Index"]}}, {"path": "/ux/ims/mib-explorer/multidelete/", "method": "POST", "details": {"operationId": "ux_ims_mib_explorer_multidelete_create", "description": "This API endpoint facilitates the management of MIB (Management Information Base) files by enabling users to perform bulk delete operations. While the initial API description suggests both adding and deleting, the context strongly indicates a focus on deletion functionalities, particularly for system components like OS images or jobs after their execution. The endpoint is part of the `mib-explorer` utility, suggesting its role in managing MIB files relevant to network devices and their configurations, often requiring 'multidelete' capabilities for efficient system maintenance. The deletion process is typically confirmed, as seen in other related deletion contexts for OS images or jobs.", "tags": ["MIB Explorer"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint expects a request body that can handle various primitive and compound field types. Given the 'multidelete' nature, the request body is likely to contain a list of MIB file identifiers (e.g., IDs, names, or paths) to be deleted. The system can process standard fields like `StringField`, `IntField`, `ListField`, and `DictField`, which would be crucial for specifying multiple files. While the provided contexts do not specify the exact structure of the MIB file identifiers for deletion, they do highlight a pattern of confirming delete operations. Developers should anticipate a request body containing an array of identifiers for the MIB files intended for deletion. Note that fields like `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested for this serializer, implying that direct file uploads as part of the request body for MIB management are not the primary mechanism."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "System administrators", "IT operations personnel"], "primary_use_case": "To efficiently manage network device configurations by enabling the bulk deletion of MIB (Management Information Base) files for system maintenance."}, "content_for_embedding": "This API endpoint enables the bulk deletion of MIB (Management Information Base) files, which are crucial for managing network device configurations. It is part of the MIB Explorer utility and is designed for efficient system maintenance, allowing users to remove multiple MIB file identifiers simultaneously. The operation typically involves a confirmation step, similar to other bulk deletion processes for system components.", "semantic_keywords": ["Bulk Delete", "MIB Explorer", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/mib-explorer/options/", "method": "GET", "details": {"operationId": "ux_ims_mib_explorer_options_retrieve", "description": "This API endpoint provides functionalities to manage MIB files within the system. It enables users to upload (add) new MIB files and delete existing ones. Similar to other attachment handling within the application, it is anticipated that privileged users will utilize this feature, likely supporting common file formats such as PNG, JPEG, and JPG, with a maximum file size of 20 MB per upload. This aligns with the system's overall approach to attachment management as seen in other modules.", "tags": ["MIB Explorer"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/MibExplorer"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body, given the functionality of 'add or delete MIB files', it is highly probable that the 'add' operation would support file uploads (potentially via drag-and-drop or browse functionality as seen in other attachment contexts, with support for formats like PNG, JPEG, JPG, and a 20 MB size limit). The 'delete' operation would likely require an identifier for the MIB file to be removed. These details are not explicitly detailed in the current API spec, but inferred from the context. These operations are typically associated with privileged user actions for system configuration."}, "llm_generated": {"business_context": {"user_personas": ["Privileged Users"], "primary_use_case": "This API endpoint is designed for managing MIB (Management Information Base) files within the system, specifically allowing privileged users to upload new MIB files and delete existing ones. It supports common image file formats (PNG, JPEG, JPG) with a maximum size of 20 MB per upload, aligning with the system's general attachment handling."}, "content_for_embedding": "This API endpoint, part of the MIB Explorer, facilitates the management of MIB files. It enables privileged users to upload new MIB files and delete existing ones. The functionality is similar to general attachment handling within the application, supporting file formats such as PNG, JPEG, and JPG, with a maximum file size of 20 MB per upload. While the GET method is specified, the description implies capabilities for adding and deleting files, likely through associated operations or parameters.", "semantic_keywords": ["MIB Explorer", "Attachments", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "attachment_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/purge_configuration/", "method": "GET", "details": {"operationId": "ux_ims_purge_configuration_list", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Purge"}}}}, "description": ""}}, "description": "This endpoint allows users to initiate the purge or deletion of a configuration profile. It is designed to permanently remove selected configuration profiles from the system. Users must confirm the deletion action. This operation cannot be completed if the configuration profile is currently associated with a download job.", "summary": "", "additional_info": "Commonly used for cleanup and maintenance, ensuring that only relevant and active configuration profiles remain. This API aligns with the general 'Delete' functionality described in various contexts for removing schedules, templates, assets, or other system components. It's crucial to note the restriction: a profile cannot be deleted if it is linked to a download job, as highlighted in the user guide (Context Rank 1), which is a key dependency to be aware of."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel"], "primary_use_case": "To retrieve a list of configuration profiles, potentially indicating their purge status or eligibility for deletion, aiding in system cleanup and maintenance."}, "content_for_embedding": "This API retrieves a list of configuration profiles that can be purged or are in the process of being purged. It provides details on configuration profiles, including their association with download jobs, which is a critical factor determining their eligibility for deletion. This endpoint is crucial for system cleanup and maintenance, allowing users to identify and manage irrelevant or outdated configuration profiles. A profile cannot be deleted if it is linked to a download job.", "semantic_keywords": ["Configuration Profiles", "Configuration retrieval", "Delete"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/purge_configuration/", "method": "POST", "details": {"operationId": "ux_ims_purge_configuration_create", "description": "This endpoint is used to save a new Purge configuration for the current organization. A purge configuration defines policies for archiving or deleting various types of data and job histories, such as raw data, daily data, events, traps, syslog entries, download and upload jobs, incidents, problems, requests, changes, audits, and asset scan histories. This configuration plays a crucial role in managing data retention and system performance by systematically disposing of outdated or irrelevant information, aligning with the Dispose aspect of the IMACD (Install, Move, Add, Change, Dispose) framework for streamlined organizational change management. It helps ensure compliance and optimizes resource utilization.", "summary": "Creates a new purge Configuration ", "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreatePurgeConfigurationSample": {"value": {"rawdata": 31, "hoursdata": 32, "daydata": 366, "events": 366, "traps": 366, "syslog": 366, "download jobs": 92, "upload job": 92, "incident": 2000, "problem": 2000, "request": 2000, "change": 2000, "audits": 366, "assets scan history": 92}, "summary": "Create Purge configuration sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The example usage provided in the API specification indicates that the purge configuration defines retention periods in numerical units (likely days, weeks, or months, given the context of 'hoursdata' and 'daydata') for different data types. For instance, 'incident', 'problem', 'request', and 'change' data are set to 2000 units, while 'rawdata' and 'hoursdata' have shorter retention periods. 'Download jobs' and 'upload job' retention settings are also part of this configuration. This feature is critical for maintaining system health, managing storage, and ensuring data compliance by allowing organizations to define how long various types of operational and historical data are kept on the system before being purged.", "parameters": [{"name": "rawdata", "in": "body", "description": "Inferred parameter: rawdata", "required": true, "schema": {"type": "string"}}, {"name": "hoursdata", "in": "body", "description": "Inferred parameter: hoursdata", "required": true, "schema": {"type": "string"}}, {"name": "daydata", "in": "body", "description": "Inferred parameter: daydata", "required": true, "schema": {"type": "string"}}, {"name": "events", "in": "body", "description": "Inferred parameter: events", "required": true, "schema": {"type": "string"}}, {"name": "traps", "in": "body", "description": "Inferred parameter: traps", "required": true, "schema": {"type": "string"}}, {"name": "syslog", "in": "body", "description": "Inferred parameter: syslog", "required": true, "schema": {"type": "string"}}, {"name": "download jobs", "in": "body", "description": "Inferred parameter: download jobs", "required": true, "schema": {"type": "string"}}, {"name": "upload job", "in": "body", "description": "Inferred parameter: upload job", "required": true, "schema": {"type": "string"}}, {"name": "incident", "in": "body", "description": "Inferred parameter: incident", "required": true, "schema": {"type": "string"}}, {"name": "problem", "in": "body", "description": "Inferred parameter: problem", "required": true, "schema": {"type": "string"}}, {"name": "request", "in": "body", "description": "Inferred parameter: request", "required": true, "schema": {"type": "string"}}, {"name": "change", "in": "body", "description": "Inferred parameter: change", "required": true, "schema": {"type": "string"}}, {"name": "audits", "in": "body", "description": "Inferred parameter: audits", "required": true, "schema": {"type": "string"}}, {"name": "assets scan history", "in": "body", "description": "Inferred parameter: assets scan history", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Managers", "Compliance Officers", "Data Governance Teams"], "primary_use_case": "To define and save data retention policies for various types of organizational data and job histories, ensuring compliance, optimizing storage, and maintaining system performance through systematic data disposal."}, "content_for_embedding": "This API endpoint allows for the creation and saving of a new Purge configuration within an organization. A purge configuration specifies retention policies for different data types, including raw data, daily data, events, traps, syslog entries, download and upload job histories, incidents, problems, requests, changes, audits, and asset scan histories. It is crucial for managing data lifecycle, ensuring data compliance, and optimizing system resources by automatically disposing of outdated or irrelevant information. This functionality aligns with the Dispose aspect of the IMACD (Install, Move, Add, Change, Dispose) framework, contributing to streamlined organizational change management and overall system health.", "semantic_keywords": ["Configuration", "Purge", "Data Retention"], "ontology_classification": {"features": ["disposal_workflow", "content_archiving_&_deletion", "audit_log", "log_management", "asset_lifecycle_management", "ticket_deletion"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/purge_configuration/{id}/", "method": "GET", "details": {"operationId": "ux_ims_purge_configuration_retrieve", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Purge"}}}, "description": ""}}, "description": "This endpoint allows for the retrieval of a specific configuration profile based on its unique identifier (`id`). The purpose of this retrieval is to facilitate the purging or deletion of the configuration. This action is part of the system's management of configuration profiles, which includes tasks such as adding, editing, copying, and deleting profiles. It's critical to note that a configuration profile cannot be deleted if it is currently associated with a download job.", "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the configuration profile to be purged or deleted. This operation is analogous to clicking the delete icon in the UI for a selected configuration profile, followed by a 'Yes' confirmation to proceed with the deletion. Users should be aware of the restriction: 'Profile cannot be deleted if associated with a download job.' The broader context of configuration management includes handling commands for uploading jobs, managing OS images, and applying changes to network devices."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Administrator", "IT Operations"], "primary_use_case": "Retrieving a specific configuration profile to facilitate its purging or deletion within a network configuration management system."}, "content_for_embedding": "This API retrieves a specific configuration profile by its unique ID. This retrieval is a prerequisite for purging or deleting the configuration. It is part of the broader configuration profile management system, which includes adding, editing, copying, and deleting profiles. A key constraint is that a profile cannot be deleted if it's linked to an active download job. This operation mirrors the UI action of selecting a profile for deletion and is used by network administrators for managing network device configurations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "Purge", "Configuration retrieval"]}}, {"path": "/ux/ims/purge_configuration/{id}/", "method": "PUT", "details": {"operationId": "ux_ims_purge_configuration_update", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Purge"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Purge"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Purge"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Purge"}}}, "description": ""}}, "description": "This endpoint allows for the purging (deletion) of a specific IMS (Installation, Move, Add, Change, and Dispose) configuration profile by its unique identifier. This action permanently removes the selected configuration profile from the system. As highlighted in the Infinity User Guide (Context Ranks 1 and 4), configurations can be deleted via a 'Delete' action. It's crucial to note that, as per Context Rank 1, a configuration profile cannot be deleted if it is currently associated with a download job.", "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the configuration profile to be purged. The request body description outlines various recognized primitive and compound field types for serializers (e.g., StringField, IntField, ListField, DictField, ReferenceField, EmbeddedDocumentField). While a PUT method typically implies updating or replacing a resource, in the context of purging, this endpoint effectively acts as a delete operation for the specified configuration, particularly given the strong contextual cues around deletion. Be aware that the Infinity User Guide (Context Rank 1) explicitly states: 'Profile cannot be deleted if associated with a download job.' Developers should ensure no active download jobs are linked to the configuration before attempting to purge it to avoid operational failures. This operation aligns with the 'Dispose' stage of IMACD, which involves the retirement or removal of resources."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "IT Operations Staff"], "primary_use_case": "To permanently remove specific IMS configuration profiles from the system."}, "content_for_embedding": "This API endpoint is used to permanently delete a specific IMS (Installation, Move, Add, Change, and Dispose) configuration profile from the system using its unique identifier. Although it uses a PUT method, its function is strictly for purging, acting as a delete operation. A critical constraint is that a configuration profile cannot be deleted if it is currently linked to an active download job. This operation is integral to the 'Dispose' stage of the IMACD process, allowing administrators to remove obsolete or unused configurations.", "semantic_keywords": ["Purge", "Configuration Profiles", "IMACD"], "ontology_classification": {"features": ["process_deletion", "disposal_workflow", "network_configuration_management_(nccm)", "configuration_download_jobs"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}}}, {"path": "/ux/ims/purge_configuration/{id}/", "method": "DELETE", "details": {"operationId": "ux_ims_purge_configuration_destroy", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "description": "This endpoint allows for the permanent deletion of a specific Configuration Profile by its unique identifier. This action is part of the IMACD (Install, Move, Add, Change, and Dispose) framework's 'Dispose' stage, ensuring the organized retirement of outdated or unused configurations. Deleting a configuration profile removes it from the system and is irreversible.", "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the Configuration Profile to be purged. A Configuration Profile cannot be deleted if it is currently associated with a download job. Users should confirm the deletion as the action is permanent. This endpoint is analogous to the 'Delete' action available in the user interface for Configuration Profiles."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Administrators"], "primary_use_case": "To permanently delete specific Configuration Profiles as part of the IMACD (Install, Move, Add, Change, and Dispose) framework's Dispose stage."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific Configuration Profile using its unique identifier. It is a critical component of the 'Dispose' stage within the IMACD framework, ensuring the organized retirement of outdated or unused configurations. Users must confirm the deletion due to its permanent nature. A Configuration Profile cannot be deleted if it is currently linked to a download job. This functionality mirrors the 'Delete' action available for Configuration Profiles in the user interface.", "ontology_classification": {"features": ["disposal_workflow", "process_deletion"], "primary_module": "imacd_(beta)", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Configuration Profiles", "IMACD"]}}, {"path": "/ux/ims/purge_configuration/fetch-save-data/", "method": "GET", "details": {"operationId": "ux_ims_purge_configuration_fetch_save_data_retrieve", "description": "This endpoint is used to fetch purge configuration details within the current organization. It allows users to retrieve information about a specific 'purge configuration' which, based on related contexts, seems to be a type of configuration associated with download jobs. While the original summary indicates fetching by `config_id`, the full JSON specification for this GET request does not include any parameters. This suggests the endpoint might be designed to retrieve all available purge configurations or a default one as part of a fetch-save process.", "summary": "Gets a purge Configuration with the given config_id", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Purge"}}}, "description": ""}}, "additional_info": "The retrieved contexts frequently mention 'Configuration Profiles' which are templates for network device settings, and 'Configuration Search' focusing on 'download jobs' to view or export configurations. Although this endpoint is named 'purge_configuration', its relation to 'fetch-save-data' implies a process involving retrieving existing configurations, possibly with an intent to save them. The lack of specific parameters (like `config_id` mentioned in the summary) in the `parameters` array of the JSON specification suggests that, for this particular GET request, it might fetch all purge configurations or a predefined set without requiring a specific ID as input."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Administrator"], "primary_use_case": "To fetch and retrieve purge configuration details associated with network download jobs for management and potential saving."}, "content_for_embedding": "This API endpoint retrieves purge configuration details within the current organization. These configurations are related to network download jobs, and the endpoint supports fetching existing configurations, potentially for a fetch-save process. It allows users to view information about these configurations, which are crucial for managing network device settings and download job processes.", "semantic_keywords": ["Purge", "Configuration Retrieval", "Download Job Management"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/ims/purge_configuration/options/", "method": "GET", "details": {"operationId": "ux_ims_purge_configuration_options_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Purge"}}}, "description": ""}}, "description": "This endpoint, `/ux/ims/purge_configuration/options/`, is a GET request designed to retrieve available options related to purging IMS (Infinity Management System) configurations. Based on the provided contexts, 'purging configuration' likely refers to deletion operations for configuration profiles, templates, or related system settings within the IMS. The endpoint would provide the necessary data or choices to facilitate the permanent removal of these configurations, similar to how deletion functionalities are presented for configuration profiles in the user guide, which emphasizes confirmation and the inability to delete profiles associated with download jobs.", "summary": "", "additional_info": "While the API specification shows no parameters, the contexts suggest that deletion operations typically involve selecting a specific profile or template, and there might be restrictions, such as a profile not being deletable if associated with a download job. This endpoint would therefore likely provide the data points or options relevant to initiating such a deletion process, possibly including lists of deletable configurations or status checks. Common use cases would involve system administrators or advanced users managing and cleaning up configuration artifacts within the Infinity system."}, "llm_generated": {"business_context": {"user_personas": ["System administrators", "Advanced users"], "primary_use_case": "To provide options for purging/deleting configurations within the Infinity Management System (IMS)."}, "content_for_embedding": "This API endpoint, `/ux/ims/purge_configuration/options/`, is a GET request that retrieves available options for purging or deleting configurations within the Infinity Management System (IMS). It provides essential data and choices to system administrators and advanced users for the permanent removal of configuration profiles, templates, or related system settings. This includes information relevant to initiating deletion processes, such as lists of deletable configurations or status checks, taking into account potential restrictions like associations with download jobs. It supports the management and cleanup of configuration artifacts within the Infinity system.", "semantic_keywords": ["Purge", "Configuration Options", "Configuration Management"], "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ims/seasonal_events/seasonal_events/", "method": "GET", "details": {"operationId": "ux_ims_seasonal_events_seasonal_events_retrieve", "description": "This API endpoint provides functionalities for viewing and editing seasonal events within the system. While the initial description broadly mentions 'users to be viewed or edited', the context suggests a focus on submitting, viewing, and managing various requests akin to 'access requests or catalog items' within a calendar or chronological framework. This endpoint likely allows administrators or privileged users to manage these seasonal event entries, potentially involving capabilities like viewing past and current requests, and making edits. Given the context emphasizing 'calendar view' and 'daily activity', it's probable that these 'seasonal events' are represented or managed in a time-based manner.", "tags": ["Seasonal Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint's functionality is likely privilege-based, meaning access to view, add, edit, delete, or execute operations on seasonal events requires specific administrator-assigned privileges. These roles and privileges are typically defined elsewhere in the system (e.g., 'roles and privileges' documented in Context Rank 2, 3). Although the API specification lists no specific parameters, the nature of 'viewing or editing' suggests that parameters for filtering by date, event ID, or user might be implicitly supported or handled internally within the system's broader request management framework, as hinted by filtering capabilities for 'Requests by a specific day, date, or date range' (Context Rank 4). The 'seasonal events' could metaphorically or directly relate to scheduled 'requests' or 'configurations' that occur periodically or seasonally within the system. Quick actions for editing or deleting might be available, similar to the 'Quick Edit' and 'Detailed Edit' functionalities described for 'Requests' (Context Rank 6)."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user"], "primary_use_case": "This API endpoint is designed for viewing, editing, and managing \"seasonal events\" which are analogous to scheduled requests or catalog items within a time-based or calendar framework. It allows privileged users to manage these entries, including filtering by date and performing quick actions like editing or deleting."}, "content_for_embedding": "This API endpoint, ux_ims_seasonal_events_seasonal_events_retrieve, is a GET method used for viewing and editing seasonal events. These events are described as similar to access requests or catalog items, managed within a calendar or chronological framework. The functionality is privilege-based, allowing administrators or privileged users to manage these entries. It supports viewing past and current requests and making edits. Although no explicit parameters are listed, it implicitly supports filtering by date, event ID, or user, aligning with capabilities for filtering requests by day, date, or date range. Quick actions for editing and deleting are also implied, similar to those available for requests.", "semantic_keywords": ["Seasonal Events", "Request Management", "Calendar"], "ontology_classification": {"features": ["request_editing_&_quick_actions", "detailed_request_information_display", "request_search_&_filtering", "request_management_actions_(delete,_copy,_merge)", "request_monitoring_&_tracking", "request_display_views_(panel_&_grid)"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/ims/seasonal_events/seasonal_events/", "method": "POST", "details": {"operationId": "ux_ims_seasonal_events_seasonal_events_create", "description": "This API endpoint allows for the management (viewing and editing) of seasonal events within the system. While the initial description referred to 'users', the context suggests a broader application to 'requests' and 'calendar view' related activities which are performed by users. Given the path and method, it is likely used to update or submit new seasonal event records. It functions as a privilege-based feature, meaning access, viewing, adding, editing, deleting, executing, and exporting capabilities are subject to administrator-defined roles and privileges.", "tags": ["Seasonal Events"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is likely integrated with a calendar view, which summarizes daily activities, including configurations (successful, failed, completed, total). Administrators have control over user privileges for interaction with these seasonal events. This API might be used by users to submit or view older requests or catalog items related to seasonal events. The 'request_body_description' is empty in the specification, but context suggests that 'edit' actions might involve 'quick edit actions' or 'detailed edit' for the requests themselves."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To manage (view, edit, add, delete) seasonal events within the system, including updating and submitting new event records, often integrated with a calendar view and subject to administrator-defined user privileges."}, "content_for_embedding": "This API endpoint is designed for the comprehensive management of seasonal events, enabling users with appropriate privileges to view, add, edit, delete, and submit new seasonal event records. It is closely integrated with a calendar view that summarizes daily activities and configurations. Administrators control user access and capabilities related to these events, which may also involve interaction with requests and catalog items.", "semantic_keywords": ["Seasonal Events", "Calendar", "User Privileges"], "ontology_classification": {"features": ["calendar_view", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ims/seasonal_events/seasonal_events/{id}/", "method": "GET", "details": {"operationId": "ux_ims_seasonal_events_seasonal_events_retrieve_2", "description": "This API endpoint allows for the viewing and editing of specific seasonal events. It leverages the underlying system's capability to manage requests, similar to how users can submit and view older requests or catalog items. This endpoint is part of a broader system that enables privileged users (administrators) to access, view, add, edit, delete, execute, and export various configurations and data, including those related to calendar views which summarize daily activity.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Seasonal Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and must be a string representing the unique identifier of the seasonal event. While the API specification mentions viewing and editing, the provided contexts indicate that user privileges are defined by roles, meaning access to view or edit seasonal events is likely restricted to users with appropriate administrative or specific event management roles. The 'calendar view' context suggests that seasonal events might be integrated into a calendar feature for visualizing activity, possibly allowing filtering by specific days, dates, or date ranges. This endpoint is analogous to functionalities managing requests, tickets, or changes within the system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Event Manager", "Privileged User"], "primary_use_case": "To view and edit specific seasonal events, integrated with calendar views for activity visualization."}, "content_for_embedding": "This API retrieves and allows editing of specific seasonal events by their unique ID. It supports privileged users (administrators) in managing these events, including viewing, adding, editing, deleting, executing, and exporting. The functionality is closely tied to calendar views that summarize daily activity and can be filtered by date. It functions similarly to managing requests or tickets within the system.", "ontology_classification": {"features": ["event_listing_and_filtering", "event_management_actions", "calendar_view"], "primary_module": "event_management", "confidence_score": 0.9}, "semantic_keywords": ["Seasonal Events", "Calendar", "Edit"]}}, {"path": "/ux/ims/seasonal_events/seasonal_events/{id}/", "method": "PUT", "details": {"operationId": "ux_ims_seasonal_events_seasonal_events_update", "description": "This API endpoint allows for the viewing and editing of seasonal events within the UX IMS. Specifically, it enables administrators or privileged users to submit and view seasonal event requests, similar to how they would handle access requests or catalog items as described in the admin guide. The endpoint facilitates detailed management, including quick edits or full detailed edits, and can be used to update various parameters associated with a seasonal event. Access to this feature is privilege-based, meaning users can only view, add, edit, or delete if granted the necessary permissions by an administrator, which are defined under roles and privileges.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Seasonal Events"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the seasonal event to be viewed or edited. While the API specification initially describes the endpoint as allowing 'users' to be viewed or edited, the context strongly indicates it pertains to the viewing and editing of specific seasonal events or requests themselves, managed by users with appropriate privileges. Operations such as 'Quick Edit' (for status, priority, urgency, etc.) and 'Detailed Edit' are implied for updating event details. This PUT method is primarily for modifying existing seasonal event records. The feature operates within a calendar view context, where daily activity and configurations are summarized."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Privileged User"], "primary_use_case": "To allow administrators and privileged users to view and update existing seasonal event records, including performing quick edits and detailed modifications, within a calendar-based management system."}, "content_for_embedding": "This API endpoint facilitates the viewing and updating of seasonal event records within the UX IMS. It supports both quick and detailed edits of various parameters associated with a seasonal event. Access is privilege-based, enabling administrators or authorized users to manage seasonal event requests. The functionality operates within a calendar view, allowing for the summary and management of daily activities and configurations related to seasonal events. This PUT method is specifically for modifying existing seasonal event entries identified by a unique ID.", "ontology_classification": {"features": ["detailed_ticket_editing", "quick_edit_(key_attributes)", "ticket_deletion", "ticket_detail_view_(via_id)", "calendar_filter", "roles_&_privileges_management"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Seasonal Events", "Update", "Detailed Edit"]}}, {"path": "/ux/ims/seasonal_events/seasonal_events/{id}/", "method": "DELETE", "details": {"operationId": "ux_ims_seasonal_events_seasonal_events_destroy", "description": "This API endpoint facilitates the deletion of a specific seasonal event. It is a GET method, implying that while the name of the method states \"DELETE\" it may also be used in conjunction with the calendar view to summarize and manage daily activities, including processed events. Access to this functionality is privilege-based; users must have explicit administrative privileges to perform delete operations, as well as view, add, edit, execute, and export seasonal events. The endpoint uses a unique identifier (`id`) to specify which seasonal event to target for deletion. This aligns with the broader system's capability to filter and manage requests and events by date, date range, or specific IDs.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Seasonal Events"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path variable, and it is a string representing the unique identifier of the seasonal event to be deleted. Similar to other system operations, deleting an event is an irreversible action. This endpoint is crucial for managing the lifecycle of seasonal events within the system, especially when integrated with features like the calendar view for chronological event organization. Users with appropriate roles and privileges (defined under 'roles and privileges' in the administrator settings) are granted the ability to utilize this powerful feature. While the method is described as 'DELETE', the summary suggests it could also be part of a broader 'view or edit' functionality, hinting at a potential dual-purpose or an underlying system design where 'DELETE' is an action within a 'view/edit' context. However, for a DELETE operation, no request body is expected, and the response is indicated as having no body."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Event Manager", "Users with administrative privileges"], "primary_use_case": "To permanently remove specific seasonal events from the system, facilitating event lifecycle management and data hygiene."}, "content_for_embedding": "This API endpoint enables the irreversible deletion of a specific seasonal event identified by its unique ID. It is a crucial tool for managing the lifecycle of seasonal events, often used in conjunction with a calendar view for chronological organization. Access to this functionality is restricted to users with explicit administrative privileges or specific roles, ensuring secure and controlled event data management.", "semantic_keywords": ["Delete", "Seasonal Events", "Event Management"], "ontology_classification": {"features": ["event_management_actions", "calendar_view", "roles_&_privileges_management"], "primary_module": "event_management", "confidence_score": 0.95}}}, {"path": "/ux/ipam/ipam/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_retrieve", "description": "This endpoint provides a paginated list of 'containers' within the current organization. While the term 'containers' is not explicitly defined in the provided contexts, the broader theme of managing 'items', 'products', 'services', and 'components' within an 'organization' as seen in Context Rank 1 suggests this endpoint is likely used for retrieving various managed entities. It allows for efficient retrieval of data by specifying the number of items per page and the page number. Additionally, the results can be sorted by a specified key in either ascending or descending order.", "summary": "Gets a list of containers", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "The API endpoint uses query parameters for pagination and sorting:\n- `items_per_page`: Specifies the number of items to return in a single page. This parameter is mandatory.\n- `page`: Specifies the page number to retrieve. This parameter is mandatory.\n- `reverse`: A boolean flag indicating the sorting order (true for descending, false for ascending). This parameter is optional.\n- `sort`: Defines the key by which the results should be sorted. This parameter is optional.\n\nBased on Context Rank 1, which discusses a 'service catalogue' where 'items' or 'components' are defined and managed, this 'list of containers' could potentially refer to logical groupings of these service catalogue items or other organizational units within the system. Developers should consult the broader system documentation for specific definitions of 'containers' in this context.\n\nFurther context on 'service catalogue' (Context Rank 1) suggests that these 'containers' might be related to the 'backend of the services provided', where administrators 'define and manage products or services'. This implies the returned list could represent collections of configurable items or services within the organization."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Developer"], "primary_use_case": "To retrieve a paginated and sortable list of managed entities or organizational units, referred to as \"containers,\" within an organization."}, "content_for_embedding": "This API endpoint allows for the retrieval of a paginated list of \"containers\" within the current organization. These \"containers\" are understood to be various managed entities, potentially including service catalog items, products, services, or other organizational components. The endpoint supports efficient data retrieval through pagination parameters (items_per_page, page) and sorting capabilities (sort, reverse). It is designed for listing and accessing structured data related to managed organizational resources.", "semantic_keywords": ["Pagination", "Retrieval", "Search", "Asset Management"], "ontology_classification": {"features": ["asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/", "method": "POST", "details": {"operationId": "ux_ipam_ipam_create", "description": "This API endpoint, `/ux/ipam/ipam/`, facilitates the viewing and editing of bot CMDB (Configuration Management Database) configurations. It allows administrators and authorized users to manage various settings related to bots, including their names, descriptions, and potentially their functionalities within the system. This endpoint is central to managing bot services and integrating them with IPAM (IP Address Management) functionalities, ensuring proper access control and configuration as highlighted in the bot configuration guides. For detailed guidance on bot functionalities, refer to the Bots module.", "tags": ["IPAM"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Container"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Container"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to contain 'Container serializers', which implies structured data for bot configurations. Users should ensure they have the necessary 'contributor' permissions for the bot via 'Access Control (IAM)' to perform edits, as outlined in the provided guide contexts. This includes navigating to 'Bot Services > Your Bot' and assigning 'Role Assignment'. Common use cases include defining new bots, updating existing bot descriptions (e.g., Finance, HR Assistant, IT Assistance bots), and managing their integration into the system. While the API specification does not list explicit parameters, the request body should adhere to the expected structure for 'Bot Configuration' details, including 'Bot Name' and 'Description'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Authorized User", "User with Contributor Permissions"], "primary_use_case": "This API is used for managing and configuring bot services and their associated CMDB (Configuration Management Database) configurations, including integration with IP Address Management (IPAM) functionalities."}, "content_for_embedding": "This API endpoint allows for the viewing and editing of bot Configuration Management Database (CMDB) configurations. It enables administrators and authorized users to manage bot settings such as names, descriptions, and functionalities. The endpoint facilitates the integration of bot services with IP Address Management (IPAM) functionalities, ensuring proper access control and configuration. It supports defining new bots and updating existing bot descriptions (e.g., Finance, HR Assistant, IT Assistance bots). The request body expects structured data for bot configurations, including 'Bot Name' and 'Description'. Users require 'contributor' permissions via 'Access Control (IAM)' for editing.", "semantic_keywords": ["Bot Configuration", "CMDB Management", "Access Control"], "ontology_classification": {"features": ["ai_bot_assistance", "platform_account_configuration", "roles_&_privileges_management", "ci_relationship_management_(cmdb)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/{id}/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_retrieve_2", "description": "This endpoint is used to retrieve comprehensive details for a specific container identified by its unique ID within the current organization. The 'id' parameter corresponds to a container's identifier, allowing users to fetch granular inventory information, including basic details, additional properties, and potentially related component specifics like port status, utilization, and SFP details. This aligns with the inventory information described in the user guides, offering a deep dive into the container's configuration and status.", "summary": "Gets a container with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is a mandatory string that uniquely identifies the container. The retrieved information for a container is analogous to the detailed inventory information for a device, which typically includes device details (hostname, type, tags, asset ID, IP Address, make, model, owner details), and potentially component-level data such as serial numbers, vendor, name, type, location, capacity, layer rate, and SFP details (type, status, serial number, product code). This endpoint is critical for users needing to understand the full breakdown and operational status of a specific container within their infrastructure."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Asset managers", "Support engineers"], "primary_use_case": "Retrieving detailed inventory and operational status for a specific container or asset within the infrastructure."}, "content_for_embedding": "This API endpoint retrieves comprehensive and granular inventory information for a specific container identified by its unique ID. The details include basic properties, additional attributes, and component-level specifics such as port status, utilization, and SFP details. It provides a deep dive into the container's configuration and operational status, analogous to detailed device inventory, including hostname, type, tags, asset ID, IP Address, make, model, owner details, serial numbers, vendor, name, type, location, capacity, and layer rate. This is crucial for understanding the full breakdown and operational state of a container.", "semantic_keywords": ["Inventory Retrieval", "Asset Management", "Container Details"], "ontology_classification": {"features": ["inventory_data_collection", "customizable_asset_properties_and_fields", "real-time_asset_performance_monitoring", "asset_search_and_filtering", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.95}}}, {"path": "/ux/ipam/ipam/{id}/", "method": "PUT", "details": {"operationId": "ux_ipam_ipam_update", "description": "This API endpoint facilitates the viewing and editing of configurations for a specific bot within the IPAM (IP Address Management) system. It allows administrators to manage bot-related settings and details, such as bot name, description, and permissions. This is crucial for maintaining and customizing bot functionalities within the system, especially those related to IPAM operations.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IPAM"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Container"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Container"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the bot whose configurations are to be viewed or edited. This endpoint supports `PUT` operations, implying full replacement of the bot's configuration. The request body is expected to contain 'Container serializers', which are the detailed configuration parameters for the bot. Users should refer to the 'Bots Configuration' and 'Bot Services' sections in the Infinity User Guide for comprehensive details on bot setup, permission management (e.g., 'Contributor' role, 'Access Control (IAM)', 'Role Assignment'), and expected configuration fields (e.g., `Bot Name`, `Description`). Accessing the 'Bots module' for detailed guidance is recommended."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "This API allows administrators to view and update configuration settings for specific bots within the IP Address Management (IPAM) system, ensuring proper functioning and customization of bot functionalities."}, "content_for_embedding": "This API endpoint, `PUT /ux/ipam/ipam/{id}/`, is designed for viewing and editing configurations of a specific bot within the IPAM (IP Address Management) system. It enables administrators to manage bot-related settings such as bot name, description, and permissions. The `id` path parameter uniquely identifies the bot. The PUT operation implies a full replacement of the bot's configuration, with detailed configuration parameters expected in the request body as 'Container serializers'. Users should consult the 'Bots Configuration' and 'Bot Services' sections in the Infinity User Guide for comprehensive details on bot setup, permission management (e.g., Contributor role, Access Control (IAM), Role Assignment), and expected configuration fields like Bot Name and Description. Accessing the 'Bots module' is recommended for detailed guidance.", "ontology_classification": {"features": ["ai_bot_assistance", "platform_account_configuration", "roles_&_privileges_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Bot Configuration", "Configuration Management", "Update"]}}, {"path": "/ux/ipam/ipam/{id}/", "method": "DELETE", "details": {"operationId": "ux_ipam_ipam_destroy", "description": "This endpoint permanently removes an existing IPAM (IP Address Management) container, identified by its unique `id`, from the inventory for the current organization. Deleting a container is a final action, akin to decommissioning or retiring an asset, and ensures its complete removal from active records. This process is irreversible and can be compared to the secure and compliant removal of devices or assets from a network upon reaching end-of-life or no longer being needed.", "summary": "Deletes the Container with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the IPAM container to be deleted. Confirming the deletion is crucial as this action is permanent and cannot be undone, similar to how other assets like consumable assets or templates are permanently deleted from the system. This endpoint is typically used when an IPAM container is no longer required or has been decommissioned from the network infrastructure."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Administrator"], "primary_use_case": "To permanently remove or decommission an existing IPAM (IP Address Management) container from the inventory, ensuring its complete and irreversible deletion from active records."}, "content_for_embedding": "This API permanently removes an existing IPAM (IP Address Management) container, identified by its unique ID, from the inventory for the current organization. This is a final and irreversible action, similar to decommissioning or retiring an asset, ensuring its complete removal from active records. It is typically used when an IPAM container is no longer required or has been decommissioned from the network infrastructure.", "semantic_keywords": ["Delete", "IPAM", "Asset Management"], "ontology_classification": {"features": ["disposal_workflow", "process_deletion"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/agent_list/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_agent_list_retrieve", "description": "This `/ux/ipam/ipam/agent_list/` API endpoint is designed to manage configurations related to bots within the system. It allows for viewing and potentially editing bot configurations, which can include details like bot labels, descriptions, and their specific functionalities (e.g., Finance Bot, HR Assistant Bot). This endpoint is crucial for administrators to manage and customize the behavior of bots in the system, including those integrated with CMDB or other modules like 'Agent Configuration'.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "While the API definition specifies `summary` and `response_description` as empty, contextual information suggests this endpoint likely returns a list or details of configured agents/bots rather than IPAM-specific agent details, despite its path. It is closely related to 'Bots Configuration' as per context 'Rank 4' and 'Rank 6', and the 'Agent' module as per 'Rank 6', which also lists `Bot Configuration`. For further guidance on bot management and configuration, users are advised to visit the 'Bots module' (Context Rank 1) or 'Bot Services' for access control (Context Rank 3). Admins can also customize default bots, as mentioned in 'Rank 10'."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To allow administrators to view and manage configurations of bots and agents within the system, including their labels, descriptions, and functionalities."}, "content_for_embedding": "This API endpoint retrieves a list of configured bots and agents, along with their configuration details such as labels, descriptions, and functionalities. It is primarily used by administrators to manage and customize the behavior of bots, including those integrated with CMDB or other modules. Despite its path, it focuses on bot/agent configuration rather than IPAM-specific details, aligning with 'Bots Configuration' and 'Agent' modules for comprehensive bot management.", "ontology_classification": {"features": ["agent_management", "ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "Agent Management", "Configuration"]}}, {"path": "/ux/ipam/ipam/check_inventory_scan/", "method": "POST", "details": {"operationId": "ux_ipam_ipam_check_inventory_scan_create", "description": "This API endpoint is designed to check the inventory scan status within the IPAM (IP Address Management) module, specifically in relation to agentless inventory. It plays a crucial role in enabling the viewing or editing of bot CMDB (Configuration Management Database) configurations. This allows administrators to manage and monitor data collector agents, which can be pre-configured with Infraon's token for successful registration and subsequent monitoring of network devices. The endpoint facilitates the verification of agent status and aids in the overall management of automated bot configurations, which are essential for various Infraon Infinity modules.", "tags": ["IPAM"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Container"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Container"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The primary focus of this endpoint, despite its 'bot cmdb' description, appears to intersect heavily with agentless inventory scanning and data collector management. It is likely used in conjunction with the Agent API Token generated for manual agent configuration and installation. While the API specification mentions 'Container serializers' for the request body, specific details are not provided in the pulled contexts. Users should refer to the 'Bots' module for detailed guidance on bot configurations within Infraon, as highlighted in the admin guide. This endpoint is crucial for managing the agents responsible for inventory data collection and ensuring their proper functioning within the Infraon ecosystem."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To monitor and manage the status of agentless inventory scans and associated bot CMDB configurations, ensuring the proper functioning of data collector agents for inventory data collection within the IPAM module."}, "content_for_embedding": "This API endpoint checks the status of inventory scans, specifically for agentless inventory within the IPAM module. It is used to view or edit bot CMDB configurations and manage data collector agents, ensuring their proper functioning for inventory data collection across various Infraon Infinity modules. This includes verifying agent status and managing automated bot configurations, often in conjunction with Agent API Tokens for manual agent setup.", "ontology_classification": {"features": ["inventory_data_collection", "ci_relationship_management_(cmdb)", "real-time_asset_performance_monitoring"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Inventory", "Agent Management", "CMDB Configuration"]}}, {"path": "/ux/ipam/ipam/container-entities/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_container_entities_retrieve", "description": "This API endpoint provides functionalities to view and manage configurations for bots within the system. It allows users to retrieve details like Bot Name, Description, and other relevant fields associated with bot configurations. This is crucial for managing bot entities and their settings, as highlighted in the various contexts related to 'Bot Configuration' and 'Bots Assistance'.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is particularly relevant for tasks such as adding new bot details, editing existing bot configurations, and managing specific fields like 'Bot Handle', 'Subscription', and 'Resource Group' for Azure Bots. Users can find more guidance on bot configuration in the 'Bots module' or by navigating to 'Infraon configuration -> Bots -> Bots Assistance', where they can also 'Create New Bot' and add necessary details. Fields marked as mandatory, such as 'Bot Handle', 'Subscription', and 'Resource Group' for Azure Bots, must be filled out for successful operations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Bot Manager"], "primary_use_case": "To view and manage configurations for AI bots within the system, enabling users to retrieve and update bot details and settings."}, "content_for_embedding": "This API endpoint allows users to retrieve and manage configurations for AI bots, including details such as Bot Name, Description, Bot Handle, Subscription, and Resource Group for Azure Bots. It supports viewing existing bot settings and is crucial for managing bot entities and their associated configurations within the system, particularly for tasks like adding or editing bot details.", "semantic_keywords": ["Bot Configuration", "AI Bot Assistance", "Details retrieval"], "ontology_classification": {"features": ["ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/ipam/ipam/dependency-status/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_dependency_status_retrieve", "description": "This GET API endpoint, `/ux/ipam/ipam/dependency-status/`, is designed to retrieve and potentially allow for the editing of configuration details related to bots within the system. It specifically focuses on Bot CMDB (Configuration Management Database) configurations.\n\nBased on highly relevant context documents, this endpoint likely interacts with or provides insights into how bot services are set up, including details like 'Bot Handle,' 'Subscription,' and 'Resource Group.' It may also involve the concept of 'Access Control (IAM)' and 'Role Assignment' for bots. This endpoint serves as a gateway for managing the foundational settings and permissions of various bots, which can include functionalities such as Finance bots, HR Assistant bots, and IT Assistance bots, as suggested by the context.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "While the original description mentions editing, this is a GET endpoint, suggesting that its primary function is retrieval. Any editing capabilities would likely be exposed via a different HTTP method (e.g., PUT or POST) on a related endpoint. However, the presence of 'edit' in the description implies that the data viewed through this endpoint is indeed manageable. \n\nKey details for bot configuration, as highlighted in the context, involve fields such as 'Label', 'Description', and 'Bot Name'. Users looking to understand or modify bot configurations via related endpoints should refer to the 'Bots module' for detailed guidance. The context also points towards the importance of enabling 'App Registration' and assigning 'contributor' permissions for bots via 'Access Control (IAM)' and 'Role Assignment' steps, which are crucial for bot functionality."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Bot Developer"], "primary_use_case": "To retrieve and manage configuration details and dependency status for various types of bots (e.g., Finance, HR, IT) within the system's Configuration Management Database (CMDB), including aspects like Access Control (IAM) and Role Assignment."}, "content_for_embedding": "This API retrieves configuration details and dependency status for bots within the system's Configuration Management Database (CMDB). It provides insights into how bot services are set up, including 'Bot Handle,' 'Subscription,' 'Resource Group,' 'Access Control (IAM),' and 'Role Assignment.' The endpoint supports various bot types like Finance, HR, and IT assistance bots, allowing for the viewing of manageable foundational settings and permissions.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "asset_search_and_filtering", "inventory_data_collection"], "primary_module": "asset", "confidence_score": 0.95}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Retrieval"]}}, {"path": "/ux/ipam/ipam/do_availability_scan/", "method": "POST", "details": {"operationId": "ux_ipam_ipam_do_availability_scan_create", "description": "This API endpoint, `/ux/ipam/ipam/do_availability_scan/`, facilitates the initiation of an availability scan within the IPAM module. While the initial description broadly mentions viewing or editing CMDB configurations related to 'bots', the primary function, given the endpoint path name, appears to be an availability scan. The context suggests that 'bots' are integral to various Infraon Infinity modules, including configuration and data collection, implying that this scan could be crucial for validating their operational status and network device configurations managed by these bots. For more detailed guidance on bot configurations, users are directed to the 'Bots module'.", "tags": ["IPAM"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Container"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Container"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The request method for this endpoint is POST. Although specific parameters are not detailed in the provided API specification, the `request_body_description` indicates the use of 'Container serializers'. This implies that the request body will likely contain structured data, potentially defining the scope or parameters for the availability scan. Given the strong association with 'bots' and their configuration (as noted in context ranks 1, 3, 4, 5, 6, 8), the scan might be related to the availability of bot-managed devices or the integrity of configurations handled by these bots. Users should consult the 'Bots module' for specific details on bot configurations and their role in network and configuration management."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Engineer"], "primary_use_case": "To proactively monitor and verify the operational status and network device configurations managed by bots within the IPAM module, ensuring network health and availability."}, "content_for_embedding": "This API initiates an availability scan for network devices and their configurations, specifically those managed by 'bots' within the IPAM module. It is used to verify the operational status and integrity of network configurations, contributing to proactive monitoring and network health. The scan parameters are expected in the request body.", "ontology_classification": {"features": ["device_discovery", "diagnosis_tools", "real-time_asset_performance_monitoring"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Availability Scan", "Bot Configuration", "Network Diagnosis"]}}, {"path": "/ux/ipam/ipam/do_inventory_scan/", "method": "POST", "details": {"operationId": "ux_ipam_ipam_do_inventory_scan_create", "description": "This API endpoint initiates an inventory scan using pre-configured Linux data collector agents that are directly added to the system. These agents are equipped with Infraon's token and are capable of performing agentless inventory. This scan is crucial for monitoring devices within the network and managing their configurations. While the original description mentioned \"bot cmdb configurations,\" the context strongly suggests that this endpoint is more broadly involved in triggering inventory scans via data collectors, which aligns with 'Bot Configuration' or 'Bot Assistance' modules mentioned in the user guides for automation and management purposes.", "tags": ["IPAM"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Container"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Container"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The process leverages pre-configured Linux data collector agents for inventory scanning. These agents are registered successfully and are designed to monitor network devices. Users can download these agents and configure them manually using an 'Agent API Token' generated specifically for their organization. This endpoint is part of the 'Infraon Configuration' module, specifically related to 'Bots' and 'Bots Assistance', suggesting integration with automated configuration and management functionalities. While the endpoint's direct link to editing 'bot cmdb configurations' is present in the original description, the richer context points towards its role in initiating inventories, which in turn could feed into or update CMDB configurations related to discovered devices and their capabilities. Further details about bot configuration can be found in the 'Admin Guide' and 'Infinity User Guide', especially concerning customizing default bots and managing bot services."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "This API initiates inventory scans using pre-configured data collector agents to monitor network devices, manage their configurations, and update CMDB configurations. It is central to automated network device discovery and asset management."}, "content_for_embedding": "This API endpoint initiates an inventory scan utilizing pre-configured Linux data collector agents. These agents, equipped with Infraon's token, perform agentless inventory to monitor network devices and manage their configurations. The process is crucial for device discovery and updating CMDB configurations. It is part of the 'Infraon Configuration' module, specifically related to 'Bots' and 'Bots Assistance', suggesting integration with automated configuration and management functionalities. The API facilitates the triggering of inventory scans which feed into CMDB, supporting automated configuration and management.", "semantic_keywords": ["Inventory", "Agent Management", "Bot Configuration"], "ontology_classification": {"features": ["agent_management", "ai_bot_assistance", "device_discovery"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/get-subnet-name/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_get_subnet_name_retrieve", "description": "This API endpoint is designed to manage bot CMDB (Configuration Management Database) configurations, allowing for both viewing and editing of these settings. While the immediate endpoint '/ux/ipam/ipam/get-subnet-name/' suggests IPAM (IP Address Management) related functionality focusing on subnet names, the broader description and contextual information indicate its connection to bot configurations within a network change and configuration management (NCCM) system. This includes aspects related to how discovered network devices are added to NCCM for management, backup, change, compliance, and monitoring, and how agent details and device credentials play a role in this configuration process.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The relationship between 'ipam/get-subnet-name' and 'bot cmdb configurations' is not explicitly detailed in the provided contexts, suggesting that 'bot cmdb configurations' might be a high-level description for the '/ux' path segment's functionality rather than a direct function of this specific IPAM endpoint. Contexts primarily highlight NCCM's role in managing network devices, where bots, agents, and device credentials are key for discovery and configuration. For instance, Infraon agents collect data from devices, supporting protocols like SSH, SNMP, and WMI. Device credentials, which must be pre-configured, are crucial for accessing devices. While 'bot cmdb configurations' implies a generic management capability, the specific endpoint related to 'subnet names' suggests it might extract or manipulate IPAM-specific data that is part of a device's configuration or a bot's operational parameters. Users should refer to external documentation regarding the specific bot CMDB schema and how subnet names are integrated into these configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Network engineers"], "primary_use_case": "To retrieve subnet names, which are IPAM-specific data, as part of managing network device configurations and bot CMDB configurations within a Network Change and Configuration Management (NCCM) system."}, "content_for_embedding": "This API endpoint, `/ux/ipam/ipam/get-subnet-name/`, retrieves subnet names as part of IP Address Management (IPAM) functionality. It is contextualized within the broader management of bot CMDB (Configuration Management Database) configurations and network change and configuration management (NCCM) systems. This involves extracting IPAM-specific data that contributes to a device's configuration or a bot's operational parameters within a network infrastructure.", "semantic_keywords": ["IPAM", "Subnet", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "ci_relationship_management_(cmdb)"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/get_audit_options/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_get_audit_options_retrieve", "description": "This API endpoint provides access to audit options, primarily related to IPAM (IP Address Management) and potentially configuration management activities. It allows users to view detailed audit logs, including information such as Timestamp, Task Name, IP Address, and relevant messages, as described in the user guide. While the initial description mentions 'bot cmdb configurations,' the stronger contextual evidence points towards an 'Audit' functionality, especially within IPAM.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is integral for auditing various activities within the system, particularly those related to IP management. Users can expect to see details similar to those displayed in a 'View Audit' pop-up, encompassing Timestamps, Task Names, IP Addresses, and messages. Although the initial description mentions 'bot cmdb configurations,' the retrieved contexts consistently highlight a general 'Audit' functionality, especially within the context of tasks and IP addresses. The API likely presents options for filtering or searching these audit records, given the mention of 'Search for the required audits based on timesta' in related documentation. It's also linked to general 'Audit' modules within Infraon Infinity, as seen in Context Rank 4 and 7."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Engineer", "Auditor"], "primary_use_case": "Retrieving and viewing audit options and logs for system activities and IP Address Management (IPAM)."}, "content_for_embedding": "This API endpoint retrieves configuration options and detailed logs for auditing purposes, specifically focusing on IP Address Management (IPAM) and general system activities. Users can access comprehensive audit trails including timestamps, task names, IP addresses, and messages. The API supports capabilities for searching and filtering these audit records based on various criteria such as timestamp, job name, task name, IP address, and message.", "semantic_keywords": ["Audit", "IPAM", "Log Management"], "ontology_classification": {"features": ["audit_log", "log_search_module"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/get_container_options/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_get_container_options_retrieve", "description": "This API endpoint is designed to facilitate the viewing and editing of bot configurations within the system. It allows users to manage details such as the Bot Name and its associated Description/Example, which are crucial for defining bot functionalities. This endpoint is part of the 'Bots Configuration' module, enabling administrators to set up and customize various bots, including default ones, to align with specific departmental terminology and compliance requirements. It supports the creation, viewing, and potential modification of bot settings.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body for this GET endpoint, the broader context suggests its role in managing bot configurations. Therefore, it's likely used for retrieving a list of existing bot configurations or details about a specific bot, given appropriate query parameters in a real-world scenario (though not specified here). Users should refer to the 'Bots Configuration' section in the user guide for detailed guidance on bot management, including mandatory fields like 'Bot Handle,' 'Subscription,' and 'Resource Group' for specific bot types (e.g., Azure Bot). The process involves navigating to 'Infraon configuration -> Bots -> Bots Assistance' and then using the 'Create New Bot' option, which this API might underpin for data retrieval related to configuration options."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Users responsible for configuring and managing AI bots"], "primary_use_case": "To retrieve configuration options and details for bots, facilitating the viewing, editing, and customization of bot settings within the system."}, "content_for_embedding": "This API endpoint is designed to retrieve configuration options and details for bots, enabling administrators to view, edit, and customize bot settings such as bot name and description. It is a core component of the \"Bots Configuration\" module, supporting the setup and management of both default and custom AI bots to align with specific departmental terminology and compliance requirements. This GET endpoint underpins data retrieval for bot configuration options.", "semantic_keywords": ["Bot Configuration", "AI Bot Assistance", "Configuration retrieval"], "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/get_ip_addresses/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_get_ip_addresses_retrieve", "description": "This API endpoint is designed to retrieve details related to IP addresses within the system. While the initial description suggests viewing or editing bot CMDB configurations, the primary function, as highlighted by multiple relevant contexts, is to access comprehensive IP address information. This includes details such as Timestamp, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message, which can be viewed in a pop-up window or tabular format. It facilitates searching and filtering IP details based on various criteria.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for viewing IP details, often related to bot configurations and session management. For detailed guidance on bot configurations, users are advised to visit the 'Bots module' as per relevant administrative documentation. Users can search for specific IP details by timestamp or job name. This API is commonly utilized for monitoring and troubleshooting within the network, allowing users to investigate specific IP addresses and their associated events or sessions. For more in-depth insights into specific events or assets, users can refer to the Event Page settings or asset page for targeted information, which may include IP addresses relevant to system details."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Technicians", "Support Staff", "Asset Managers"], "primary_use_case": "This API retrieves comprehensive IP address details, including associated device information and job execution status, to facilitate network monitoring, troubleshooting, and asset management activities. It supports searching and filtering of IP details."}, "content_for_embedding": "This API endpoint, `/ux/ipam/ipam/get_ip_addresses/`, is designed for retrieving detailed information about IP addresses within the system. It provides comprehensive IP address data such as Timestamp, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message. The retrieved information can be viewed in a pop-up window or tabular format. This endpoint is crucial for searching and filtering IP details based on various criteria, supporting network monitoring, troubleshooting, and asset management. It is often used in the context of bot configurations, session management, and viewing results of configuration download jobs, allowing users to investigate specific IP addresses and their associated events or sessions.", "ontology_classification": {"features": ["unified_asset_repository", "inventory_data_collection", "asset_search_and_filtering", "detailed_asset_activity_log", "configuration_download_jobs"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["IPAM", "IP Address", "Asset Management"]}}, {"path": "/ux/ipam/ipam/group-summary/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_group_summary_retrieve", "description": "This API endpoint is designed to view or edit the configurations of CMDB bots. It provides access to details such as the bot's name and description, which are crucial for managing and understanding the functionality of various automated bots within the system. This includes both default bots like Finance and HR Assistant, with their comprehensive functionalities, and newly created ones.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint is part of the IPAM (IP Address Management) module within the UX (User Experience) interface, indicating its role in managing network-related automated configurations. When editing, details like 'Bot Handle,' 'Subscription,' and 'Resource Group' might be relevant, as they are mandatory for bot configuration in related contexts. While the current specification shows no parameters, future enhancements or specific actions might require them, aligning with the general bot configuration process described in the user guides. For more detailed guidance, users should refer to the 'Bots' module documentation, which covers adding suitable names and descriptions to respective created bots and managing their roles and permissions."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Network Engineer"], "primary_use_case": "This API endpoint is used to view and potentially edit the configurations of CMDB bots, including their names and descriptions, within the IPAM module. It helps in managing automated bots and their network-related configurations."}, "content_for_embedding": "This API endpoint is designed to view or edit the configurations of CMDB bots, providing access to details such as the bot's name and description. These details are crucial for managing and understanding the functionality of various automated bots within the system, including default bots like Finance and HR Assistant, and newly created ones. The endpoint is part of the IPAM (IP Address Management) module within the UX (User Experience) interface, indicating its role in managing network-related automated configurations. When editing, details like 'Bot Handle,' 'Subscription,' and 'Resource Group' might be relevant, as they are mandatory for bot configuration in related contexts. While the current specification shows no parameters, future enhancements or specific actions might require them, aligning with the general bot configuration process described in the user guides. For more detailed guidance, users should refer to the 'Bots' module documentation, which covers adding suitable names and descriptions to respective created bots and managing their roles and permissions.", "ontology_classification": {"features": ["ai_bot_assistance", "advanced_resource_configuration_(aiops)", "network_configuration_management_(nccm)", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Retrieval"]}}, {"path": "/ux/ipam/ipam/group-summary-widget-options/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_group_summary_widget_options_retrieve", "description": "This API endpoint, `/ux/ipam/ipam/group-summary-widget-options/`, is designed to manage and configure 'group-summary' widgets. These widgets are likely part of a broader 'Views' system, providing device status summaries and network topology visualizations in a glanceable format. While the original description mentioned 'bot cmdb configurations,' the stronger contextual evidence points towards its role in managing UI widgets related to IPAM group summaries. It allows for viewing and potentially editing the options associated with these summary widgets, integrating seamlessly with other view widget functionalities like Device Status Summary, Text Panel, and Network Diagram.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The current API specification indicates no parameters are required for this GET request. The endpoint appears to be part of an IPAM (IP Address Management) system's user experience (UX) interface. Given its likely relation to 'Views' widgets, a common use case would involve fetching configuration settings for a dashboard's IPAM group summary display. Although the initial API description referred to 'bot cmdb configurations,' higher-ranked contexts strongly suggest its primary function is tied to UI widgets, especially those providing 'device status summaries' and 'network topology visualizations'. Developers should note this endpoint's potential role in dynamic UI configuration and data representation within the IPAM module."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Developers"], "primary_use_case": "Retrieving configuration options for IPAM group summary widgets used in dashboards."}, "content_for_embedding": "This API retrieves configuration options for 'group-summary' widgets within an IPAM (IP Address Management) system's user experience (UX) interface. These widgets are crucial for displaying device status summaries and network topology visualizations on dashboards, allowing users to view and potentially edit their display settings. It integrates with other view widget functionalities like Device Status Summary, Text Panel, and Network Diagram, providing dynamic UI configuration for IPAM group summaries.", "ontology_classification": {"features": ["widget-based_design", "dashboard_customization", "visual_data_representation"], "primary_module": "dashboard", "confidence_score": 0.9}, "semantic_keywords": ["IPAM", "Dashboard", "Configuration Retrieval"]}}, {"path": "/ux/ipam/ipam/ip-container-details/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ip_container_details_retrieve", "description": "This API endpoint provides a comprehensive view of IP container details, allowing users to retrieve and potentially manage configuration information for IP addresses. It displays critical IP details such as Timestamp, IP Address, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message. Users can search and filter these details based on criteria like timestamp or IP Address, facilitating detailed IP management and visibility within network configurations.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is primarily for viewing detailed IP information. While the original description mentioned configurations could be 'edited', the highly relevant contexts primarily detail 'viewing' capabilities and search/filter actions for IP details. The focus of this endpoint appears to be on detailed IP address information retrieval and management within an IPAM (IP Address Management) context, rather than direct configuration editing via the API. The API might also be linked to the 'Bots' module for managing CMDB configurations, as hinted in the original description, although the provided contexts do not elaborate on direct API-based editing of 'bot cmdb configurations'. Common use cases include troubleshooting, inventory management, and auditing IP address assignments and their statuses."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Security Analysts"], "primary_use_case": "Retrieving and managing IP container details within an IP Address Management (IPAM) context."}, "content_for_embedding": "This API endpoint provides a comprehensive view of IP container details, including Timestamp, IP Address, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message. It allows users to retrieve, search, filter, and potentially export detailed IP information for network configurations. Common use cases include troubleshooting, inventory management, and auditing IP address assignments and their statuses within an IPAM system.", "semantic_keywords": ["IPAM", "IP Address", "Details retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "asset_search_and_filtering", "report_export_capabilities"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/ip-details-grid-view/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ip_details_grid_view_retrieve", "description": "This API endpoint retrieves details of IP addresses in a tabular or grid view format. It displays comprehensive information such as \"Timestamp\", \"IP Address\", \"Vendor\", \"Model\", \"Serial Number\", \"Task Owner\", \"Device Account\", \"Execution Identifier\", \"Task Status\", \"Task Started\", \"Task Ended\", and \"Error Message\". Users can search for specific IP details based on criteria like timestamp or IP Address, and apply filters based on various fields. This endpoint is designed to provide a detailed overview of IP configurations within the system.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on the 'Grid View' for displaying IP details in a tabular format, as opposed to a 'Map View'. While the original description mentioned 'bot cmdb configurations', the more relevant contexts highlight the viewing of IP details. Users can search and filter the displayed information based on various fields, similar to what's described in the user guide's search and filter functionalities for IP details."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Staff", "System Administrators"], "primary_use_case": "To provide a comprehensive, tabular view of IP address details, enabling users to search and filter this information efficiently."}, "content_for_embedding": "This API retrieves detailed information about IP addresses in a grid or tabular format. It allows users to view comprehensive IP details including Timestamp, IP Address, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message. Users can effectively search for specific IP details by criteria like timestamp or IP Address, and apply various filters to refine the displayed information. This endpoint is specifically designed for displaying IP details in a 'Grid View' for easy overview and management within an IP Address Management (IPAM) system.", "semantic_keywords": ["IP Address", "IPAM", "View"], "ontology_classification": {"features": ["asset_search_and_filtering", "unified_asset_repository", "multiple_data_display_views_(grid_&_card)", "customizable_asset_properties_and_fields"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/ip-reservation/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ip_reservation_retrieve", "description": "This API endpoint, `/ux/ipam/ipam/ip-reservation/`, is designed to manage configurations related to bots within the CMDB (Configuration Management Database). It allows for the viewing and editing of bot CMDB settings. The 'Bots module' mentioned in the documentation provides detailed guidance for managing these configurations.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "While the core purpose is bot CMDB configuration, the broader context of 'Bots' in the guides suggests functionalities like bot assistance, bot handle, subscription, and resource group details. For detailed guidance on bot management, users are advised to visit the 'Bots module' directly within the application. The API does not have any specified parameters or request body for this GET method, meaning it likely retrieves a general overview or a default set of configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To view and manage configurations of bots within the Configuration Management Database (CMDB)."}, "content_for_embedding": "This API endpoint is designed for retrieving and managing configurations of bots within the Configuration Management Database (CMDB). It allows users to view and edit bot-related CMDB settings, providing a general overview or default configurations for bot assistance, handles, subscriptions, and resource group details.", "ontology_classification": {"features": ["ai_bot_assistance", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Configuration Retrieval"]}}, {"path": "/ux/ipam/ipam/ip-reservation-config/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ip_reservation_config_retrieve", "description": "This API endpoint is designed to view and manage configurations within the CMDB (Configuration Management Database) specifically for 'bot' entities. It provides functionalities related to how bots interact with IP address reservations (`ip-reservation-config`). This allows for granular control over bot-related configurations within the system. While the primary function is viewing and editing, the broader context suggests it's integral to managing IP addresses for devices, including potentially network changes and configuration management. This endpoint is crucial for tasks like assigning IP addresses, defining IP ranges, or managing subnets for automated bot operations.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint relates to the 'Bots' module, as indicated by Context Rank 3, suggesting that 'bot cmdb configurations' are managed within that module. It is also tied to IPAM (IP Address Management) as per the path `/ux/ipam/ipam/ip-reservation-config/`. While editing configurations is possible, specific details regarding the editable fields or request body schema are not available in the provided contexts or the API specification. Given the mentions of 'Configuration Parameters' and 'Configuration Download Job' in Context Ranks 2 and 4, this endpoint might be part of a larger system for managing network configurations, allowing users to define and control parameters for bots. The API description states that configurations can be 'viewed or edited'."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Administrators", "DevOps Engineers", "System Administrators"], "primary_use_case": "This API endpoint is used for viewing and managing IP address reservation configurations for bot entities within a Configuration Management Database (CMDB). It provides granular control over how bots interact with IP addresses, supporting tasks like assigning IP addresses, defining IP ranges, and managing subnets for automated bot operations. It is integral to network configuration and change management."}, "content_for_embedding": "This API endpoint allows for the retrieval and management of IP address reservation configurations specifically for bot entities within a Configuration Management Database (CMDB). It is integral to network configuration management, enabling users to view, edit, assign IP addresses, define IP ranges, and manage subnets for automated bot operations. This endpoint supports granular control over bot-related network parameters and is part of a larger system for managing network configurations and download jobs.", "semantic_keywords": ["IPAM", "Configuration Management", "Bot Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "ai_bot_assistance", "agent_management", "ci_relationship_management_(cmdb)", "configuration_download_jobs", "advanced_resource_configuration_(aiops)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/ip-reservation-list/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ip_reservation_list_retrieve", "description": "This API endpoint provides functionalities related to IP address reservations within the IPAM (IP Address Management) system. While the initial description mentions CMDB configurations for 'bots,' the primary function, as indicated by its path `/ux/ipam/ipam/ip-reservation-list/`, is to manage and view IP reservations. It allows for detailed management of IP address bookings, linking to overall CMDB configurations where 'bots' might represent automated systems or devices requiring specific IP assignments. Users can expect to view and potentially edit existing IP reservation details, which could include IP addresses, associated devices, or 'bot' configurations. For detailed guidance, further information might be available in the Bots module.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "Although the initial description vaguely mentions 'bot cmdb configurations,' the endpoint path explicitly points to 'ip-reservation-list' within IPAM. This suggests its core purpose is IP address reservation management. Contexts mentioning 'Bots configuration' and 'managing network changes and configurations' (NCCM) support the idea that IP reservations might be tied to automated deployments or network device configurations, where bots could signify automated agents or systems. Users can expect to view IP details (e.g., Timestamp, IP Address, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message) that are likely associated with these reservations.\n\nWhile the `/ux/ipam/ipam/ip-reservation-list/` path typically implies listing, the mention of 'viewed or edited' in the original description suggests it might also support modifications. However, without specific parameters or request body details for editing, this GET method is primarily for viewing."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "To retrieve and view a list of IP address reservations within the IPAM system, including associated device and bot configurations linked to CMDB."}, "content_for_embedding": "This API retrieves a list of IP address reservations within the IPAM (IP Address Management) system. It provides detailed information about reserved IP addresses, associated devices, and bot configurations, linking to CMDB for comprehensive asset and network management.", "semantic_keywords": ["IPAM", "IP Address", "CMDB Configuration"], "ontology_classification": {"features": ["inventory_data_collection", "asset_search_and_filtering", "ci_relationship_management_(cmdb)"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/ipam_audit_list/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ipam_audit_list_retrieve", "description": "This API endpoint provides functionalities to view and manage audit logs specifically related to Bot Configuration settings within the IPAM (IP Address Management) module. It allows administrators to track changes, updates, and activities performed on their defined bots. This includes details like timestamps, responsible users, and the nature of the modifications.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for auditing and compliance, offering transparency into how bot configurations are managed within the system. While the current specification does not list parameters, it is implied that filtering or searching capabilities (e.g., by timestamp, bot name, or user) would be beneficial for auditing. Refer to the 'Bots Configuration' and 'View Audit' sections in the Infinity User Guide for broader context on bot management and general auditing functionalities within Infraon Infinity modules."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Auditor", "Network Engineer"], "primary_use_case": "This API endpoint allows administrators to view and manage audit logs related to Bot Configuration settings within the IPAM module, enabling them to track changes, updates, and activities for compliance and transparency."}, "content_for_embedding": "This API retrieves audit logs specifically for Bot Configuration settings within the IP Address Management (IPAM) module. It provides administrators with a detailed history of changes, updates, and activities performed on bots, including timestamps, responsible users, and modification details. This is crucial for auditing, compliance, and ensuring transparency in bot configuration management, with implied capabilities for filtering and searching these logs by criteria such as timestamp, bot name, or user.", "semantic_keywords": ["Audit Trail", "Bot Configuration", "IPAM"], "ontology_classification": {"features": ["audit_log", "ai_bot_assistance", "log_search_module"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/ipam/ipam/ipasset-interfaces-list/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ipasset_interfaces_list_retrieve", "description": "This API endpoint provides functionalities to view and edit configurations related to 'Bot CMDB' and 'IP Asset Interfaces'. It allows administrators to manage and update the settings for various bots within the system, including details such as Bot Name and Description, as indicated in the Bots Configuration section of the Infinity user guide. The endpoint is part of the IPAM (IP Address Management) module.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "For detailed guidance on bot configurations and related functionalities, users should refer to the 'Bots module' as mentioned in the Admin Guide. Specifically, the 'Bot Configuration' section within Infraon Infinity modules is highly relevant for understanding the scope of this endpoint's capabilities. This includes management of default bots and assignment of permissions."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "network administrator"], "primary_use_case": "To view and manage configurations related to Bot CMDB and IP Asset Interfaces within the IPAM module, allowing administrators to update bot settings and permissions."}, "content_for_embedding": "This API endpoint, part of the IPAM module, allows administrators to view and manage configurations for 'Bot CMDB' and 'IP Asset Interfaces'. It enables the retrieval and updating of settings for various bots, including their names and descriptions, as detailed in the Bots Configuration section of the Infinity user guide. It also covers the management of default bots and assignment of permissions, aligning with functionalities found in the 'Bots module' within the Admin Guide.", "ontology_classification": {"features": ["bot_configuration", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Bot Configuration", "Configuration retrieval", "IPAM"]}}, {"path": "/ux/ipam/ipam/ipasset-menu-details/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ipasset_menu_details_retrieve", "description": "This API endpoint provides functionalities for viewing and editing Bot CMDB (Configuration Management Database) configurations. This includes managing details such as Bot Name, Label, and Description, which are crucial for defining bot behaviors and roles within the system. It is specifically designed to interact with bot configurations, enabling administrators and developers to manage how bots are set up and integrated, aligning with the broader Bots module.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "For comprehensive guidance on utilizing this endpoint and managing bots, refer to the 'Bots module' as detailed in the admin guide. Developers should be familiar with the various fields involved in bot configuration, including 'Bot Name', 'Label', and 'Description', to effectively view or edit these settings. This endpoint is central to managing the array of configurable bots within the Infraon Infinity system, such as Finance, HR Assistant, and other departmental bots, allowing for customization and integration into automated workflows."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "This API endpoint is used for managing (viewing and editing) bot configurations within the Configuration Management Database (CMDB). It allows administrators and developers to define bot behaviors and roles by managing details such as bot name, label, and description, facilitating customization and integration into automated workflows."}, "content_for_embedding": "This API endpoint provides functionalities for viewing and editing Bot CMDB (Configuration Management Database) configurations. It enables management of bot details such as Bot Name, Label, and Description, which are crucial for defining bot behaviors and roles within the system. This endpoint is central to managing configurable bots within the Infraon Infinity system, allowing for customization and integration into automated workflows.", "ontology_classification": {"features": ["ai_bot_assistance", "agent_management", "ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "CMDB Management", "Edit"]}}, {"path": "/ux/ipam/ipam/ipasset-port-details/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ipasset_port_details_retrieve", "description": "This API endpoint provides functionalities to view or edit configuration details related to 'Bot CMDB' (Configuration Management Database) items. The description also mentions that it integrates with IPAM (IP Address Management) and IP asset port details. It allows for management and retrieval of configuration jobs from network devices like routers, switches, and firewalls, including details such as job status, device information (IP addresses, versions), and timestamps. This aligns with the 'Configuration Download' and 'Bots Configuration' concepts found in the provided context, suggesting its role in managing device configurations and bot-related settings.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "Based on the context, particularly 'Context Rank 6' which details 'Bots Configuration' fields like 'Bot Name' and 'Description', it's highly likely that this endpoint interacts with or manages these types of configuration attributes for bots. The repeated mentions of 'Configuration Download' and session details (Context Rank 1, 2, 3) suggest its relevance in the device configuration management workflow. While the API specification itself does not list parameters, it's implied that operations for viewing or editing would likely involve parameters to identify specific bots, configurations, or devices (e.g., Device IP Address, Bot Name as mentioned in Context Rank 2, 6). The endpoint path `/ux/ipam/ipam/ipasset-port-details/` further indicates a focus on IP Address Management and network port details, which would be crucial for device configuration. Users looking to use this API should refer to the 'Bots module' for detailed guidance (Context Rank 4)."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Technicians", "System Engineers"], "primary_use_case": "To manage and retrieve configuration details for network devices and \"Bot CMDB\" items, including IP Address Management (IPAM) and port-specific configurations, ensuring efficient device setup, control, and compliance."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of configuration details for network devices such as routers, switches, and firewalls, as well as \"Bot CMDB\" items. It integrates with IPAM (IP Address Management) and IP asset port details, allowing for the management and retrieval of configuration jobs, including their status, device information (IP addresses, versions), and timestamps. This functionality is central to device configuration management workflows and bot-related settings.", "semantic_keywords": ["Configuration Management", "IPAM", "Network Devices"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "centralized_management", "download_job_status_drill-down"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/ipam/ipam/ipasset-portmapper-details/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_ipasset_portmapper_details_retrieve", "description": "This API endpoint provides functionalities to view and manage configurations related to 'bots' and 'CMDB' (Configuration Management Database). While the primary function is to view or edit these configurations, the context suggests a focus on the details of IP asset and port mapper settings within the IPAM (IP Address Management) system. This includes aspects like discovery details, configuration download processes, and profile management for devices found in the CMDB, which are often configured using bots.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint's path `/ux/ipam/ipam/ipasset-portmapper-details/` specifically points to details concerning IP assets and their port mappings within the IPAM framework. Although the API specification doesn't list explicit parameters, typical use cases based on the context would involve retrieving configurations for specific bot names or profiles. The 'Bots Configuration' as mentioned in Context Rank 2 would likely involve fields like 'Label', 'Description/Example', and 'Bot Name'. Further details on configuring bots can be found in the 'Bots module' mentioned in Context Rank 4. The broader context of 'configuration download' and 'profile details' (Context Rank 1 and 3) suggests this endpoint might be used to retrieve or modify settings relevant to how configurations are discovered and applied to devices."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Technicians", "System Administrators"], "primary_use_case": "To view and manage detailed configurations of IP assets and port mappers within the IPAM system, including discovery details, configuration download processes, and profile management for devices in the CMDB, often configured using bots."}, "content_for_embedding": "This API endpoint allows for the retrieval and management of detailed configurations pertaining to IP assets and their port mappings within an IP Address Management (IPAM) system. It integrates with Configuration Management Database (CMDB) functionalities, enabling users to access discovery details, manage configuration download processes, and oversee device profiles. The API specifically addresses settings for devices that are often configured and managed by automated bots, providing a centralized interface for viewing and editing these critical network configurations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "centralized_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration retrieval", "IPAM", "Bot Configuration"]}}, {"path": "/ux/ipam/ipam/license-check/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_license_check_retrieve", "description": "This `/ux/ipam/ipam/license-check/` API endpoint serves to verify the licensing status within the IPAM (IP Address Management) module. While the original description mentioned CMDB configurations, the path and lack of relevant context for 'bot cmdb' suggest its primary function is licensing. This endpoint is crucial for ensuring proper authorization and feature access within the IPAM environment, preventing unauthorized usage or feature restrictions. It enables a check of the license's validity and compliance.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint uses the `GET` method and does not require any parameters or request body. It is specifically for license checks within the IPAM module. While the provided contexts extensively discuss 'Bot Services' and 'Bot Configuration', these appear to be unrelated to the IPAM license check functionality of this specific endpoint. The references to 'Bot Services > Your Bot', 'Access Control (IAM)', 'Role Assignment', and 'Bot Handle' thus do not apply here. Similarly, mentions of 'Default bots with their functionalities' and 'Instructions to add Bot Assistance' are outside the scope of this IPAM license check API."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT personnel", "IPAM Manager"], "primary_use_case": "To verify the licensing status and ensure proper authorization and feature access within the IPAM (IP Address Management) module."}, "content_for_embedding": "This API endpoint, `/ux/ipam/ipam/license-check/`, uses the GET method to verify the licensing status within the IPAM (IP Address Management) module. It is crucial for ensuring proper authorization and feature access within the IPAM environment by checking the validity and compliance of licenses. This endpoint does not require any parameters or a request body and is specifically designed for license checks, distinct from bot services or CMDB configurations.", "semantic_keywords": ["IPAM", "Software License", "Retrieval"], "ontology_classification": {"features": ["software_license_management"], "primary_module": "asset", "confidence_score": 1}}}, {"path": "/ux/ipam/ipam/options/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_options_retrieve", "description": "This API endpoint provides functionalities to view or edit configuration details for bots within the system. It is specifically designed for managing the setup and settings of various bots, which can include details like bot names, descriptions, and other related parameters. For more comprehensive guidance, users are directed to visit the dedicated \"Bots\" module.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is central to managing bot configurations. It supports the setup of bots, such as default bots, and allows for customization. Notably, administrators can customize these bots to align with specific departmental terminology and compliance requirements. For further details on bot configurations and access control, users may refer to sections that discuss app registration and bot services, including 'Access Control (IAM)' and 'Role Assignment' within the Bot Services module. This endpoint likely interacts with fields such as 'Bot Name' and 'Description' during the configuration process."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer"], "primary_use_case": "To manage and configure the settings and parameters of bots within the system, allowing administrators to view, edit, and customize bot functionalities."}, "content_for_embedding": "This API endpoint allows for the retrieval, viewing, editing, and customization of configuration details for various bots within the system. It supports managing bot names, descriptions, and other related parameters, enabling administrators to tailor bot settings to specific departmental and compliance requirements. The functionality includes aspects of access control and role assignment for bot services.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings", "roles_&_privileges_management", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Bot Configuration", "Configuration", "Customization"]}}, {"path": "/ux/ipam/ipam/save-ip-allocated/", "method": "POST", "details": {"operationId": "ux_ipam_ipam_save_ip_allocated_create", "description": "This API endpoint facilitates the viewing and editing of configurations for 'bot CMDBs'. It is specifically designed to manage and save allocated IP addresses within the IP Address Management (IPAM) system. The endpoint's functionality is closely related to the broader 'Bots' module, which provides detailed guidance on bot management, including configuration and interaction within the system. This allows for granular control over how these bot configurations are managed.", "tags": ["IPAM"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Container"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Container"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "For detailed guidance on interacting with bots and their configurations, users are encouraged to visit the 'Bots' module within the system. This API's operation is connected to the management of network changes and configurations (NCCM) as it involves IP address allocation, a critical component in network setup. The request body is expected to conform to 'Container serializers', indicating that it will likely involve structured data for defining or updating bot CMDB configurations and IP allocations. While the primary focus is ipam/save-ip-allocated, the broader context links it to bot services and access control, suggesting that permissions may be required for a 'contributor' role for the bot."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Bot Configuration Managers", "System Integrators"], "primary_use_case": "To manage and save allocated IP addresses for bot configurations within the IP Address Management (IPAM) system, contributing to network configuration and change management."}, "content_for_embedding": "This API endpoint facilitates the management and saving of allocated IP addresses within the IP Address Management (IPAM) system. It is specifically designed to handle configurations for 'bot CMDBs', allowing for the viewing and editing of these settings. The functionality is closely linked to network configuration and change management (NCCM) processes, involving structured data for defining or updating bot CMDB configurations and IP allocations.", "ontology_classification": {"features": ["ci_relationship_management_(cmdb)", "customizable_asset_properties_and_fields", "inventory_data_collection", "multiple_asset_addition_methods", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["IP Address", "Configuration Management", "IPAM"]}}, {"path": "/ux/ipam/ipam/schedule/", "method": "POST", "details": {"operationId": "ux_ipam_ipam_schedule_create", "description": "This API endpoint facilitates the scheduling of IPAM (IP Address Management) configurations. While the general summary indicates it allows viewing or editing of 'bot cmdb configurations', the context strongly suggests its primary purpose is related to scheduling tasks within the NCCM (Network Change & Configuration Management) module, specifically for 'Baseline Scheduler' and 'Configuration Download Job'. This includes setting execution schedules like 'Execute Now', 'At' (specific date/time), 'After Every' (recurring intervals), 'Weekly', or 'Daily'. The endpoint enables the configuration and management of these scheduled bot actions.", "tags": ["IPAM"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Container"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Container"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint's core functionality revolves around the 'schedule' aspect, likely controlling 'Baseline Scheduler' and 'Configuration Download Job' permissions as mentioned in Context Ranks 4 and 5. This implies it interacts with the underlying 'bot' infrastructure to apply configurations based on defined schedules. For detailed guidance on bots and their configurations, users are directed to the 'Bots module' (Context Rank 1). The request body is described as 'Container serializers', which implies it will contain structured data representing the schedule parameters for the IPAM configuration. This API is likely used by administrators to define and manage automated network configuration tasks."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "This API enables administrators to schedule and manage automated network configuration tasks, specifically IPAM configurations, Baseline Scheduler, and Configuration Download Jobs within the NCCM module. It supports various execution schedules like immediate, specific time, recurring intervals, weekly, or daily."}, "content_for_embedding": "This API endpoint is designed for scheduling IP Address Management (IPAM) configurations and automated network configuration tasks. It specifically facilitates the scheduling of \"Baseline Scheduler\" and \"Configuration Download Job\" within the Network Change & Configuration Management (NCCM) module. Users, primarily administrators, can define various execution schedules including \"Execute Now\", \"At\" a specific date/time, \"After Every\" recurring interval, \"Weekly\", or \"Daily\". The API allows for the configuration and management of these scheduled bot actions, interacting with the underlying bot infrastructure to apply configurations based on the defined schedules. It is crucial for automating network configuration tasks and managing scheduled operations.", "semantic_keywords": ["IPAM", "Configuration Management", "Scheduling"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/ipam/ipam/scheduler-data/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_scheduler_data_retrieve", "description": "This API endpoint provides access to scheduler data within the IPAM (IP Address Management) system, specifically related to bot configurations. It allows for advanced viewing and editing of these configurations, enabling administrators to manage the scheduling of automated tasks and network configurations. This aligns with functionalities like the 'Baseline Scheduler' found in NCCM (Network Change & Configuration Management), which controls access to scheduling tasks for network baseline configuration. The endpoint is integral to managing bot assistance and automated processes.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "For detailed guidance on managing bot configurations and utilizing automated bot functionalities, users are encouraged to visit the 'Bots module' within the application. This module provides a comprehensive interface for setting up and managing bot assistance, which is directly linked to the configuration data exposed by this API. While the API specification does not list explicit parameters, developers should be aware that interactions with scheduler data typically involve considerations around execution schedules (e.g., 'Execute Now', 'At', 'After Every', 'Weekly', 'Daily') and task details as seen in various scheduling contexts. The API facilitates the programmatic management of these complex scheduling scenarios for bots."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "This API endpoint provides access to and management of scheduler data for bot configurations within the IPAM system, enabling administrators to view and edit automated tasks and network configurations. It is crucial for managing bot assistance and automated processes."}, "content_for_embedding": "This API endpoint retrieves and manages scheduler data related to bot configurations within the IPAM (IP Address Management) system. It facilitates the viewing and editing of automated tasks and network configurations, aligning with functionalities like the Baseline Scheduler in NCCM (Network Change & Configuration Management). The API is essential for programmatic management of complex scheduling scenarios for bots and automated processes.", "ontology_classification": {"features": ["ai_bot_assistance", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "IPAM", "Scheduling"]}}, {"path": "/ux/ipam/ipam/show-ip-reservation/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_show_ip_reservation_retrieve", "description": "This API endpoint, `/ux/ipam/ipam/show-ip-reservation/`, is designed to facilitate the viewing and potential editing of IP reservation configurations within the system. While the initial description mentions 'bot cmdb configurations,' a deeper analysis of the provided contexts, particularly relevant to IP details and bot interactions, clarifies its primary focus. It allows users to retrieve details like Timestamp, IP Address, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message for IP entries, serving as a central point for managing reserved IP addresses within the IP Address Management (IPAM) system. It can also be linked to 'Bots' functionalities for automated configuration or management as noted in the provided contexts.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body for this GET endpoint, the contexts suggest that typical searches or filters for IP details might involve criteria such as Timestamp, Job name, IP Address, Requester Name, Client IP Address, Device IP Address, Device Group, and Device Account, as seen in Context Rank 1 and Context Rank 3. Users interested in 'bot' specific configurations related to IPAM should be aware that the 'Bots module' (Context Rank 2) and 'Azure Bot' configuration steps (Context Rank 4, 9) could provide further context on how bots interact with IP reservations, implying this endpoint might show configurations pertaining to IP reservations managed or viewed through bot processes. Integration with CMDB configurations is also implied, suggesting this endpoint contributes to a comprehensive view of network assets and their associated IP reservations."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Administrator"], "primary_use_case": "This API endpoint allows users to view and potentially edit IP reservation configurations within an IP Address Management (IPAM) system. It provides detailed information about reserved IP addresses, including their status, associated devices, and historical data. It also integrates with bot functionalities for automated management and CMDB for a comprehensive view of network assets."}, "content_for_embedding": "This API, `/ux/ipam/ipam/show-ip-reservation/`, is a GET endpoint designed for retrieving and managing IP reservation configurations within an IP Address Management (IPAM) system. It provides comprehensive details for IP entries such as Timestamp, IP Address, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message. While primarily for viewing, it supports potential editing of these configurations. The API also facilitates searching and filtering of IP details by criteria like Timestamp, Job name, IP Address, Requester Name, Client IP Address, Device IP Address, Device Group, and Device Account. It integrates with bot functionalities for automated configuration and management, and contributes to CMDB configurations for a holistic view of network assets and their associated IP reservations.", "ontology_classification": {"features": ["asset_search_and_filtering", "detailed_asset_activity_log", "ci_relationship_management_(cmdb)", "configuration_download_jobs", "customizable_asset_properties_and_fields", "unified_asset_repository", "inventory_data_collection", "asset_lifecycle_management"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["IPAM", "IP Address", "Search"]}}, {"path": "/ux/ipam/ipam/subnet_agent_list/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_subnet_agent_list_retrieve", "description": "This API endpoint provides a mechanism to view or edit configurations related to 'bots' and 'CMDB' (Configuration Management Database) within the system. While the original description generally refers to viewing/editing, the context specifically points towards managing 'bot configurations' and linking them to agents. It implies a capability to list or manage the agents associated with subnets in the IPAM (IP Address Management) context, with a focus on how bots interact with or manage these configurations. The endpoint is likely used to retrieve details about agents integrated into the IPAM system for configuration and monitoring purposes.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint's path '/ux/ipam/ipam/subnet_agent_list/' strongly suggests its purpose is to list agents associated with subnets within the IPAM module. The 'Bots module' (Context Rank 1) is highlighted as a key area for detailed guidance regarding bot configurations. The 'Infraon agent' (Context Ranks 2, 3, 5) is relevant as it collects data from devices, which could be related to how agents function within the IPAM and CMDB context. The general concept of 'Bots Configuration' (Context Rank 4) and their labels and descriptions further support the endpoint's role in managing these bot-related settings. This endpoint is crucial for understanding which agents are deployed and their corresponding configurations from a bot perspective within network device management and IPAM."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations", "system administrators", "professionals responsible for IP Address Management (IPAM) and Configuration Management Database (CMDB)"], "primary_use_case": "To retrieve details about agents associated with subnets within the IPAM system, specifically focusing on their bot configurations and integration with CMDB for network device management and monitoring."}, "content_for_embedding": "This API retrieves a list of agents associated with subnets in the IP Address Management (IPAM) system. It provides details on bot configurations and their integration with the Configuration Management Database (CMDB), enabling network administrators to manage and monitor agents deployed for network device management.", "ontology_classification": {"features": ["unified_asset_repository", "inventory_data_collection", "ci_relationship_management_(cmdb)", "configuration_download_jobs", "real-time_asset_performance_monitoring"], "primary_module": "asset", "confidence_score": 0.9}, "semantic_keywords": ["Agent Management", "Bot Configuration", "IPAM"]}}, {"path": "/ux/ipam/ipam/tree-data/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_tree_data_retrieve", "description": "This API endpoint, `/ux/ipam/ipam/tree-data/`, is designed to manage bot configurations. It allows administrators to view, edit, and potentially add details for created bots within the system. The endpoint supports viewing various bot fields such as 'Label', 'Description', and 'Bot Name', crucial for defining and customizing bot functionalities. This management is integral to the 'Bot Configuration' module, as referenced in the Infiniti User Guide, enabling centralized control over the system's automated processes and conversational agents.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is part of the broader 'Bots Configuration' module within Infraon Infinity, as highlighted in Context Rank 4. For detailed guidance on utilizing and managing bots effectively, users should refer to the 'Bots module' as indicated in Context Rank 1. Default bots and their functionalities, such as Finance and HR Assistant bots, can also be customized via this configuration, allowing specific departments to align bot terminology and compliance requirements. This flexibility is key for tailoring automated responses to specific organizational needs, as noted in Context Rank 9."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To manage bot configurations, allowing administrators to view, edit, and add details for created bots within the system."}, "content_for_embedding": "This API endpoint, `/ux/ipam/ipam/tree-data/`, is designed for managing bot configurations. It enables administrators to view, edit, and potentially add details for created bots, including fields like 'Label', 'Description', and 'Bot Name'. It is an integral part of the 'Bot Configuration' module within Infraon Infinity, supporting centralized control over automated processes and conversational agents. The endpoint also facilitates the customization of default bots, such as Finance and HR Assistant bots, to align with departmental terminology and compliance requirements.", "ontology_classification": {"features": ["ai_bot_assistance", "general_settings", "agent_management", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Bot Configuration", "AI Bot Assistance", "Configuration Retrieval"]}}, {"path": "/ux/ipam/ipam/unmanaged_ip_list/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_unmanaged_ip_list_retrieve", "description": "This API endpoint, `/ux/ipam/ipam/unmanaged_ip_list/`, serves as a gateway for viewing and managing configurations related to Bot CMDB (Configuration Management Database) and IPAM (IP Address Management). While the original description specified viewing and editing bot CMDB configurations, the context strongly indicates its association with IP addresses. Specifically, it allows users to view details of unmanaged IP addresses, including data such as Timestamp, IP Address, Vendor, Model, Serial Number, Task Owner, Device Account, Execution Identifier, Task Status, Task Started, Task Ended, and Error Message, as detailed in the 'View IP Details' section of the user guide. It also implies capabilities for searching and filtering based on IP details. The endpoint is integral to managing network configurations and bot-related functionalities within the system, potentially linking unmanaged IPs to bot configurations or providing a list of IPs that bots might interact with.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "To gain detailed guidance related to bot configurations, users are advised to visit the Bots module. This endpoint likely complements other IPAM functionalities by providing a list of IPs not currently under active management, which may be candidates for future bot configuration or integration. Users can search for specific IP details based on criteria like IP Address or Timestamp. This API plays a role in managing network change and configuration, allowing administrators to maintain an overview of IP assets and manage their association with bot operations."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System administrators"], "primary_use_case": "This API is used for viewing and managing unmanaged IP addresses and their associated configurations within IPAM and Bot CMDB systems. It enables network administrators to gain an overview of IP assets not currently under active management, facilitating network change and configuration management, and potential integration with bot operations."}, "content_for_embedding": "This API retrieves a list of unmanaged IP addresses and their detailed configurations, including timestamp, vendor, model, serial number, task owner, and status. It supports searching and filtering of IP details and is crucial for managing network configurations, IP Address Management (IPAM), and Bot CMDB functionalities. Network administrators can use this to gain an overview of IP assets not currently under active management, facilitating network change and configuration management and potential integration with bot operations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "asset_search_and_filtering", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["IPAM", "Configuration Management", "IP Address"]}}, {"path": "/ux/ipam/ipam/visibility-data/", "method": "GET", "details": {"operationId": "ux_ipam_ipam_visibility_data_retrieve", "description": "This API endpoint provides functionalities to view and manage configurations for 'bots' within the system. It enables users to access and modify settings related to bot names, descriptions, and other associated details. The endpoint is integral for customizing default bots to align with specific departmental terminology and compliance requirements, as described in the 'Bots Configuration' sections of the documentation.", "tags": ["IPAM"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Container"}}}, "description": ""}}, "summary": "", "additional_info": "For comprehensive guidance on utilizing bot configurations, users are advised to refer to the 'Bots module' mentioned in the Admin Guide. Specifically, the 'Infraon configuration -> Bots -> Bots Assistance' navigation path leads to the interface where new bots can be created and detailed information, such as bot names and descriptions, can be added and customized. Admins can leverage this endpoint to tailor bot behaviors and responses to better suit their organizational needs, including setting up specialized bots like HR Assistant or Finance bots."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To enable administrators to view, manage, and customize the configurations of AI bots, including their names and descriptions, to align with specific departmental needs and compliance requirements."}, "content_for_embedding": "This API endpoint provides functionalities for administrators to view and manage configurations for AI bots. It allows for accessing and modifying bot names, descriptions, and other details, enabling customization to align with departmental terminology and compliance requirements. This includes tailoring specialized bots like HR Assistant or Finance bots.", "ontology_classification": {"features": ["ai_bot_assistance"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Bot Configuration", "AI Bot Assistance", "Configuration Management"]}}, {"path": "/ux/log_agent/log_agent_config/", "method": "GET", "details": {"operationId": "ux_log_agent_log_agent_config_retrieve", "description": "This API endpoint allows for the retrieval and management of configuration settings for the Log Agent. Specifically, it enables administrators or users with appropriate roles and privileges to view and potentially edit configurations related to how logs are managed and processed within the system. Access to these functionalities is governed by roles and permissions configured within the Log Management module, ensuring appropriate access control. Users with specific roles can perform tasks within the Log Management module based on their assigned privileges.", "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Access to modify Log Agent configurations is dependent on the 'Roles and Privileges' enabled by an administrator within the Log Management module. For instance, specific roles are configured for the Log Management module to update these roles and permissions, ensuring proper access control. While this endpoint is described as allowing users to be 'viewed or edited', in the context of '/ux/log_agent/log_agent_config/', it refers to the viewing and editing of the *configuration itself*, not user accounts directly. For user management, refer to the 'Users' module as mentioned in related documentation. Currently, the API definition indicates no response body for this GET request, which might imply the configuration details are retrieved through other means or not directly through this specific endpoint's response."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with specific roles"], "primary_use_case": "Manage and retrieve configuration settings for the Log Agent to control log processing."}, "content_for_embedding": "This API endpoint, `ux_log_agent_log_agent_config_retrieve`, is designed for the retrieval and management of configuration settings specifically for the Log Agent. It allows administrators and users with appropriate roles and privileges to view and potentially modify how logs are managed and processed within the system. Access to these functionalities is governed by roles and permissions set within the Log Management module. The endpoint facilitates viewing and editing of the configuration parameters themselves, with supporting documentation highlighting capabilities such as searching, filtering, editing, and deleting these configurations.", "semantic_keywords": ["Configuration", "Log Management", "Access Control"], "ontology_classification": {"features": ["log_management", "general_settings", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/log_agent/log_agent_config/", "method": "POST", "details": {"operationId": "ux_log_agent_log_agent_config_create", "description": "This API endpoint allows for the viewing and editing of configurations related to the Log Agent within the Log Management module. It plays a crucial role in defining how logs are managed and processed, ensuring appropriate access control based on user roles and permissions. Administrators can configure specific roles for the Log Management module, which this system updates to ensure proper access. Access to log data and various features depends on the privileges and permissions enabled for the user.", "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to the 'Privileges' module, which grants access to various Infraon Infinity modules, including the 'Agent' module. While the current specification indicates 'no response body', successful operations generally imply the configuration has been updated. Users' ability to interact with this endpoint and the Log Management module is contingent on their assigned credentials, roles, and privileges, which are managed by administrators. Higher-level roles allow administrators to add or edit users with specific roles and permissions to manage log agent configurations. This API is relevant to how log data from systems, applications, and services within an IT infrastructure is collected, stored, analyzed, and monitored. The original summary stating 'allows users to be viewed or edited' likely pertains to the **configurations** related to log agents rather than user accounts directly, given the context of log agent configuration and log management."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations personnel", "Users with Log Management privileges"], "primary_use_case": "To manage and configure settings for the Log Agent within the Log Management module, including defining how logs are processed and ensuring appropriate access control based on user roles and permissions."}, "content_for_embedding": "This API allows for the creation, viewing, and editing of configurations for the Log Agent, which is part of the Log Management module. It enables administrators to define how log data is managed, processed, collected, stored, analyzed, and monitored. The API also handles access control by updating specific user roles and permissions within the Log Management system, ensuring that users have appropriate privileges to interact with log data and features. It is integral to the overall log management and access control framework.", "semantic_keywords": ["Log Management", "Configuration", "Access Control"], "ontology_classification": {"features": ["log_management", "log_rule_configuration", "agent_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/log_agent/log_agent_config/{id}/", "method": "GET", "details": {"operationId": "ux_log_agent_log_agent_config_retrieve_2", "description": "This API endpoint provides read and write access to the configuration settings for a specific log agent identified by its unique `id`. It is part of the Log Management module, allowing administrators to manage log agent configurations. Access to this endpoint and the ability to view or edit configurations are controlled by user roles and privileges within the system, ensuring appropriate access control for log data management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the log agent whose configuration is being accessed. Users must have appropriate roles and permissions enabled by an administrator to interact with this endpoint. This aligns with the broader Log Management module's emphasis on role-based access control, where privileges dictate access to various features, including agent configuration. While the standard operation allows viewing and editing, specific details about request body structure for 'editing' are not detailed in the provided API spec but would depend on the user's assigned credentials and privileges within the Log Management module."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "System Engineer"], "primary_use_case": "To retrieve and manage the configuration settings for specific log agents, enabling administrators to control log data management and agent behavior."}, "content_for_embedding": "This API endpoint allows for the retrieval of configuration settings for a specific log agent, identified by its unique ID. It is an integral part of the Log Management module, providing administrators with the capability to view and potentially modify log agent configurations. Access to this endpoint is strictly governed by user roles and privileges, ensuring secure and appropriate control over log data management.", "semantic_keywords": ["Log Agent Configuration", "Configuration Retrieval", "User Privileges"], "ontology_classification": {"features": ["log_management", "agent_management", "roles_&_privileges_management", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/log_agent/log_agent_config/{id}/", "method": "PUT", "details": {"operationId": "ux_log_agent_log_agent_config_update", "description": "This API endpoint allows for the viewing and editing of configurations for a specific log agent identified by its unique `id`. It is part of the Log Management module, which manages the collection, storage, analysis, and monitoring of log data. This endpoint facilitates the configuration of log agents, which are crucial for reporting agent health and managing their operational settings within the IT infrastructure. Access and specific functionalities are governed by user roles and privileges, ensuring appropriate access control within the Log Management module, similar to other modules where roles are configured.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the log agent whose configuration is to be viewed or edited. Users must have appropriate roles and permissions within the Log Management module to access and modify log agent configurations. Administrators enable these roles and privileges, which dictate access to various features. While the API specification indicates 'No response body' for this PUT method, successful operations typically imply that the configuration has been updated. This endpoint is essential for maintaining and managing the health and operational parameters of agents sending logs."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations"], "primary_use_case": "To allow administrators or authorized users to modify the operational settings and health reporting configurations of specific log agents within the IT infrastructure."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of configuration settings for individual log agents, identified by a unique ID. It is crucial for managing agent health and operational parameters within the Log Management module. Access and modification capabilities are strictly governed by user roles and privileges, which are managed by administrators. Successful operations imply the configuration has been updated.", "semantic_keywords": ["Configuration", "Update", "Agent Management"], "ontology_classification": {"features": ["agent_management", "log_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/log_agent/log_agent_config/{id}/", "method": "DELETE", "details": {"operationId": "ux_log_agent_log_agent_config_destroy", "description": "This API endpoint provides functionalities for deleting an agent configuration within the Log Management module. While the original description specified viewing or editing users, the path `/ux/log_agent/log_agent_config/{id}/` and the 'DELETE' method, combined with relevant contexts, indicate its primary function is the removal of agent configurations. Access to this functionality is controlled by roles and permissions within the Log Management module, ensuring appropriate access control. This aligns with the broader log management system's capability to collect, store, analyze, and monitor log data generated by systems and applications.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter in the path is a required string that uniquely identifies the agent configuration to be deleted. Users must possess the necessary privileges and roles, as enabled by an administrator, to perform this operation within the Log Management module. For more details on managing roles and permissions, refer to the relevant sections of the Infinity User Guide. This endpoint is crucial for maintaining and managing agent configurations within the log management infrastructure."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Operator", "User"], "primary_use_case": "This API endpoint is used to delete a specific agent configuration within the Log Management module, ensuring proper management and removal of unneeded or problematic log agent setups."}, "content_for_embedding": "This API allows for the deletion of an agent configuration identified by a unique ID within the Log Management module. It is crucial for maintaining and managing log agent setups, enabling administrators and authorized users to remove configurations that are no longer needed or are causing issues. Access is controlled by roles and permissions within the Log Management system.", "ontology_classification": {"features": ["agent_management", "log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Log Agent Configuration", "Log Management"]}}, {"path": "/ux/log_agent/log_agent_config/get_log_agent_config/", "method": "GET", "details": {"operationId": "ux_log_agent_log_agent_config_get_log_agent_config_retrieve", "description": "This endpoint is used to retrieve the configuration details of a specific Log Agent within the Infraon Infinity system. It provides a comprehensive view of how the log agent is set up to monitor devices like routers, switches, and firewalls, and collect critical log data. This operation is integral to managing IT infrastructure logs, ensuring proper data collection for real-time analysis, auditing, and compliance.", "summary": "gets a Log Agent Configuration", "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "Log Management is a core function in Infraon Infinity, collecting logs from various IT infrastructure components (Routers, Switches, firewalls, IDS/IPS, Servers, Databases, Web Servers). This endpoint is part of the 'Log Management' module, which emphasizes configuration retrieval and the overall health and management of agents. While the current specification indicates no parameters, in a real-world scenario, a specific log agent would likely be identified by its ID or name for configuration retrieval. The retrieved configurations are crucial for understanding how logs are extracted and prepared for download and analysis, often summarized in 'configuration retrieval jobs'. This configuration process ensures that logs are correctly formatted and available for export in various formats (e.g., PDF, CSV, XLS) for offline analysis."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrator", "Network Engineer", "IT Operations Personnel"], "primary_use_case": "To enable IT administrators and operations personnel to understand and manage how log agents are configured for collecting and analyzing IT infrastructure logs, ensuring compliance and real-time insights."}, "content_for_embedding": "This API retrieves the configuration details of a specific Log Agent within the Infraon Infinity system. It provides a comprehensive view of how the log agent is set up to monitor devices like routers, switches, and firewalls, and collect critical log data. This operation is integral to managing IT infrastructure logs, ensuring proper data collection for real-time analysis, auditing, and compliance. This endpoint is part of the 'Log Management' module, which emphasizes configuration retrieval and the overall health and management of agents. The retrieved configurations are crucial for understanding how logs are extracted and prepared for download and analysis, often summarized in 'configuration retrieval jobs'.", "ontology_classification": {"features": ["log_management", "agent_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Log Agent Configuration", "Configuration retrieval", "Log Management"]}}, {"path": "/ux/log_agent/log_agent_config/get_options/", "method": "GET", "details": {"operationId": "ux_log_agent_log_agent_config_get_options_retrieve", "description": "This endpoint, `/ux/log_agent/log_agent_config/get_options/`, is designed to retrieve configuration options for the Log Agent. It is part of the system's overall Log Management functionality, which is crucial for IT infrastructure management and process. This API facilitates the fetching of various settings and preferences that can be applied to Log Agents, which are responsible for collecting logs from diverse network devices such as routers, switches, firewalls, IDS/IPS, servers, and databases. The options retrieved via this endpoint are fundamental for configuring how log data is processed and managed within the system.", "summary": "Gets a options response of Log Agent Configuration", "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "While the immediate scope of this endpoint is to get configuration options, the broader context of Log Management, as highlighted in the provided documentation, encompasses functionalities like viewing configuration retrieval job results, defining how logs are exported (e.g., format, size), and managing access privileges related to log management configurations. This endpoint does not require any parameters or request body, and its response does not contain a specific response body, implying that the 'options' might be part of a broader system-level configuration or a setting within the UI that this call supports. It's integral to ensuring proper functionality related to log collection and configuration from agents."}, "llm_generated": {"business_context": {"user_personas": ["IT infrastructure managers", "System administrators", "Network engineers"], "primary_use_case": "To retrieve configuration options for Log Agents, enabling effective management and processing of log data within the system."}, "content_for_embedding": "This API, `/ux/log_agent/log_agent_config/get_options/`, retrieves configuration options for Log Agents. These agents are responsible for collecting logs from various network devices such as routers, switches, firewalls, IDS/IPS, servers, and databases. The endpoint is a crucial part of the system's overall Log Management functionality, facilitating the fetching of settings and preferences that dictate how log data is processed and managed. While its immediate scope is to get configuration options, the broader context encompasses functionalities like viewing configuration retrieval job results, defining log export parameters (e.g., format, size), and managing access privileges related to log management configurations. It is integral to ensuring proper functionality related to log collection and configuration from agents within the Infraon Infinity system, which also includes tools like Log Stream and Log Search for real-time log analysis, filtering, and pattern identification.", "ontology_classification": {"features": ["log_management", "agent_management"], "primary_module": "log_management", "confidence_score": 0.9}, "semantic_keywords": ["Log Agent Configuration", "Configuration retrieval", "Log Management"]}}, {"path": "/ux/log_agent/log_agent_config/save_config/", "method": "POST", "details": {"operationId": "ux_log_agent_log_agent_config_save_config_create", "description": "This endpoint is used to save a Log Agent Configuration. It allows users to persist changes to the configuration of log agents, which are integral for collecting and managing log data from various sources like routers, switches, firewalls, and servers. This includes saving details for new log sources, updates to existing log source configurations (e.g., connection parameters), or modifications to log column customizations, ensuring that the right data is collected and managed effectively within the Log Management system.", "summary": "saves a Log Agent Configuration", "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is part of the Log Management module, which is crucial for IT infrastructure management. While the API specification indicates no specific request body description or parameters, based on context, a successful save operation implies the backend processes the provided log agent configuration details. Users would typically interact with this to finalize any changes made to log sources or log management settings, ensuring they are persistently applied. There is no response body expected upon successful saving."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "System administrators", "Network engineers"], "primary_use_case": "Persisting configuration changes for log data collection and management within the IT infrastructure."}, "content_for_embedding": "This API endpoint is designed to save and persist configuration settings for Log Agents. These agents are vital for collecting and managing log data from diverse IT infrastructure components like routers, switches, firewalls, and servers. The functionality includes saving new log source details, updating existing log source configurations (e.g., connection parameters), and customizing log columns. This ensures that all changes made to log management settings are effectively applied and maintained within the Log Management system, supporting IT infrastructure management.", "ontology_classification": {"features": ["log_rule_configuration", "agent_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Log Agent Configuration", "Configuration", "Save"]}}, {"path": "/ux/log_agent/log_agent_config/upload_log_agent_config/", "method": "POST", "details": {"operationId": "ux_log_agent_log_agent_config_upload_log_agent_config_create", "description": "This endpoint facilitates the upload of a Log Agent configuration. The Log Agent is a critical component within Infraon Infinity that supports various logging functions, including real-time log streaming, searching, filtering, and tailoring logs directly from the Elasticsearch database, without requiring direct server logins. By uploading a configuration, users can manage how log data is collected and processed from different sources.", "summary": "uploads a Log Agent Configuration", "tags": ["Log Agent Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is part of the 'Log Stream' module, a centralized tool in Infraon Infinity for unified access to all logs. It complements features like configuring log sources, managing log indices (Log Multi-Index), and customizing log columns. While the request body description is currently empty, it is expected to contain the actual log agent configuration data to be uploaded. The upload process likely prepares the assigned agent for the configuration download, similar to how configuration retrieval jobs are summarized after download. This operation is crucial for ensuring the proper collection and management of log data from various IT infrastructure components such as routers, switches, firewalls, and servers."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "IT Operations Personnel", "Network Administrators", "Security Analysts"], "primary_use_case": "This API allows users to upload and manage Log Agent configurations, which are essential for controlling how log data is collected, processed, streamed, searched, and filtered within Infraon Infinity. It solves the problem of centralizing log data management and enabling real-time analysis without direct server access."}, "content_for_embedding": "This API facilitates the upload of configuration data for the Log Agent in Infraon Infinity. The Log Agent is crucial for real-time log streaming, searching, filtering, and tailoring logs from the Elasticsearch database without requiring direct server logins. This operation enables users to manage log data collection and processing from various IT infrastructure components like routers, switches, firewalls, and servers, and is part of the Log Stream module for unified log access.", "ontology_classification": {"features": ["log_management", "log_rule_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Log Agent Configuration", "Configuration", "Log Management"]}}, {"path": "/ux/log_grok_pattern/log_grok_pattern_configuration/", "method": "GET", "details": {"operationId": "ux_log_grok_pattern_log_grok_pattern_configuration_retrieve", "description": "This API endpoint, `/ux/log_grok_pattern/log_grok_pattern_configuration/`, is designed for the management and configuration of Grok patterns within the Log Management module. It allows users to view and edit log Grok pattern configurations. This functionality is crucial for streamlining log analysis and pattern identification, providing unified access to logs in the Elasticsearch database, similar to how Log Stream enables searching, filtering, and tailing logs in real-time without direct server access.", "tags": ["Log Grok Pattern Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the API specification indicates it allows viewing or editing, the primary context (webhook configuration steps) suggests a focus on the 'Edit' action for settings. This API is likely used in scenarios where users need to configure or update patterns for parsing structured log data, which is a core component of Log Management and Log Stream functionality. No specific parameters or request body details are provided in the current API spec, but configurations usually involve defining how logs are processed and categorized."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Log Analysts"], "primary_use_case": "To enable users to configure and manage Grok patterns for efficient log analysis and pattern identification within the Log Management module."}, "content_for_embedding": "This API endpoint is designed for the management and configuration of Grok patterns within the Log Management module. It allows users to view and edit log Grok pattern configurations, which is crucial for streamlining log analysis and pattern identification, providing unified access to logs in the Elasticsearch database. This functionality supports real-time log analysis and pattern identification features of Log Stream.", "ontology_classification": {"features": ["real-time_log_analysis", "pattern_identification_(log_stream)", "log_rule_configuration"], "primary_module": "log_management", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "Configuration", "Edit"]}}, {"path": "/ux/log_grok_pattern/log_grok_pattern_configuration/", "method": "POST", "details": {"operationId": "ux_log_grok_pattern_log_grok_pattern_configuration_create", "description": "This API endpoint, `/ux/log_grok_pattern/log_grok_pattern_configuration/` with a POST method, is related to the configuration of Log Grok Patterns within Infraon Infinity. While the initial description suggests viewing or editing users, the context strongly indicates its connection to Log Stream, a centralized tool for accessing and managing logs in the Elasticsearch database for tasks such as searching, filtering, and pattern identification. The API likely facilitates the creation, modification, or management of grok patterns which are crucial for structuring and analyzing log data, akin to how webhooks are configured (e.g., copying URLs and tokens related to configuration steps).", "tags": ["Log Grok Pattern Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "Given the path `/ux/log_grok_pattern/log_grok_pattern_configuration/`, this endpoint is almost certainly used to set up or modify Grok patterns for log parsing within the Log Stream module. Grok patterns help categorize and analyze log messages by identifying patterns. The reference to 'Configure webhooks' in the contexts (Rank 1, 2, 3, and 4) implies that this configuration might involve similar steps of editing and saving specific parameters, such as 'Callback URL' or 'Verify token' if applicable to Grok patterns, or it might be a POST operation to save a newly defined or updated Grok pattern. Users should expect to send configuration data in the request body, although the current specification marks it as empty. There is no response body expected currently. This API is critical for effective log management and analysis within Infraon Infinity, particularly for streamlining log analysis and pattern identification as mentioned in the Log Stream context (Rank 5, 6)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Log Analyst", "IT Operations User"], "primary_use_case": "To enable users to define and manage Log Grok Patterns for structuring and analyzing log data within the Log Stream module, facilitating efficient log analysis and pattern identification."}, "content_for_embedding": "This API endpoint, `/ux/log_grok_pattern/log_grok_pattern_configuration/` with a POST method, is used for the creation, modification, and management of Log Grok Patterns within Infraon Infinity's Log Stream module. Grok patterns are essential for parsing, structuring, and analyzing raw log data from the Elasticsearch database, enabling efficient searching, filtering, and particularly, pattern identification. This configuration is crucial for streamlining log analysis and enhancing the visibility of system status and processes within the Log Management system.", "ontology_classification": {"features": ["pattern_identification_(log_stream)", "log_stream_module", "real-time_log_analysis"], "primary_module": "log_management", "confidence_score": 1}, "semantic_keywords": ["Log Management", "Configuration", "Pattern Identification"]}}, {"path": "/ux/log_grok_pattern/log_grok_pattern_configuration/{id}/", "method": "GET", "details": {"operationId": "ux_log_grok_pattern_log_grok_pattern_configuration_retrieve_2", "description": "This endpoint retrieves detailed information about a specific Grok pattern identified by its unique ID within the current organization. Grok patterns are essential for Log Management, enabling the system to interpret and categorize log data efficiently, especially when dealing with unstructured log events. These patterns are fundamental for defining how the log management server interacts with data stored in Elasticsearch, ultimately helping users identify patterns in their log events for effective log search and analysis.", "summary": "Gets a grok pattern with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Grok Pattern Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a required string representing the unique identifier for the Grok pattern to be retrieved. This endpoint is primarily used in the context of Log Management, where Grok patterns contribute to organizing and making sense of generated logs from various IT infrastructure components (e.g., Routers, Switches, firewalls, Servers). While the API specification states 'No response body', a successful GET request to this endpoint is expected to return the details of the requested Grok pattern, likely in a JSON format. This functionality supports the broader Log Management module by allowing users to understand the configuration of existing log interpretation patterns."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Log analysts", "System engineers"], "primary_use_case": "To retrieve and understand the configuration details of specific Grok patterns used for log data interpretation and analysis within the log management system."}, "content_for_embedding": "This API retrieves detailed information about a specific Grok pattern by its unique ID. Grok patterns are crucial for Log Management, enabling efficient interpretation and categorization of unstructured log data. This functionality supports defining how the log management server interacts with Elasticsearch data, aiding users in identifying patterns for effective log search and analysis. A successful request returns the Grok pattern's details, likely in JSON format, allowing users to understand existing log interpretation configurations.", "ontology_classification": {"features": ["log_rule_configuration", "log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "Configuration Retrieval", "Pattern Identification"]}}, {"path": "/ux/log_grok_pattern/log_grok_pattern_configuration/{id}/", "method": "PUT", "details": {"operationId": "ux_log_grok_pattern_log_grok_pattern_configuration_update", "description": "This API endpoint, `/ux/log_grok_pattern/log_grok_pattern_configuration/{id}/`, allows for the update and management of a specific log Grok pattern configuration. Grok patterns are essential for parsing unstructured log data into structured and queryable formats within log management systems. This `PUT` method is used for editing or viewing the configuration of an existing Grok pattern, identified by its unique `id`.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Grok Pattern Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` in the path parameter is a required string that uniquely identifies the log Grok pattern configuration to be updated. While the original API description mentions 'users to be viewed or edited,' the path `/ux/log_grok_pattern/log_grok_pattern_configuration/{id}/` strongly suggests manipulation of Grok pattern configurations rather than user accounts. \n\nNo request body description is provided in the API specification, but for a `PUT` operation, it is expected that the request body would contain the updated Grok pattern configuration details. This likely includes fields similar to those described in the webhooks configuration context (e.g., 'Callback URL', 'Verify token'), but specifically applied to log pattern configuration rather than webhooks. \n\nThe contexts related to 'Configuring webhooks' (especially Ranks 1-4) provide examples of an 'Edit' action and 'Verify and Save' process, which could be analogous to how a log Grok pattern configuration is updated using this `PUT` endpoint. This operation would be part of managing log configurations, which, as per the broader context (Ranks 5-10), is crucial for effective log stream analysis, pattern identification, and data retrieval from Elasticsearch."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "DevOps Engineers", "Log Analysts"], "primary_use_case": "To update and manage specific log Grok pattern configurations for parsing unstructured log data into structured and queryable formats within log management systems."}, "content_for_embedding": "This API endpoint allows for the update and management of a specific log Grok pattern configuration, identified by its unique ID. Grok patterns are crucial for parsing unstructured log data into structured and queryable formats, enabling effective log stream analysis, pattern identification, and data retrieval within log management systems. This PUT operation facilitates editing and saving these configurations, analogous to a \"Verify and Save\" process for log rules.", "ontology_classification": {"features": ["log_rule_configuration", "pattern_identification_(log_stream)", "real-time_log_analysis", "update", "edit"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Log Management", "Configuration", "Pattern Identification"]}}, {"path": "/ux/log_grok_pattern/log_grok_pattern_configuration/{id}/", "method": "DELETE", "details": {"operationId": "ux_log_grok_pattern_log_grok_pattern_configuration_destroy", "description": "This endpoint facilitates the deletion of an existing Grok pattern within the system for the current organization. Grok patterns are essential components of Log Management, functioning as collections of patterns that link the log management server with data stored in Elasticsearch. By configuring these index patterns, users define how the system interprets and displays log data, ultimately allowing for efficient searching and analysis of log data. This operation is analogous to deleting 'Log indices' or 'index patterns' as described in the user guide, which are critical for organizing logs efficiently within an Elastic database. Deleting a Grok pattern means invalidating the corresponding log index configuration, impacting how log data associated with that pattern is interpreted and displayed.", "summary": "Deletes the grok pattern with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Grok Pattern Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the Grok pattern to be deleted. The system will remove the corresponding log index pattern associated with this ID. As detailed in the user guide, the overall Log Management module allows users to add, edit, or delete these patterns as needed. Users should exercise caution when deleting patterns, as it will affect the interpretation and display of logs that depend on the deleted pattern. No response body is expected upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Log administrators", "System administrators", "IT operations personnel"], "primary_use_case": "To manage and delete Grok patterns that define how log data is interpreted and indexed for efficient searching and analysis within the log management system."}, "content_for_embedding": "This API deletes a specific Grok pattern, which is a configuration used in log management to define how log data is interpreted and indexed in Elasticsearch. Deleting a Grok pattern invalidates the corresponding log index, affecting the searching and analysis of log data.", "ontology_classification": {"features": ["pattern_identification_(log_stream)", "index-based_elastic_search_architecture"], "primary_module": "log_management", "confidence_score": 1}, "semantic_keywords": ["Delete", "Log Management", "Pattern Identification"]}}, {"path": "/ux/log_grok_pattern/log_grok_pattern_configuration/get_grok_pattern_list/", "method": "GET", "details": {"operationId": "ux_log_grok_pattern_log_grok_pattern_configuration_get_grok_pattern_list_retrieve", "description": "This API endpoint is designed to retrieve a list of configured Grok patterns. While the original description mentioned viewing or editing users, the path and related contexts suggest its primary function is to manage Grok patterns. Users can access comprehensive details and management options for these patterns, similar to how Multi-Index details are viewed.", "tags": ["Log Grok Pattern Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification indicates no parameters or request body (which is typical for a GET request to retrieve a list). The provided contexts primarily focus on webhook configuration and user-related APIs, which appear to be unrelated to `log_grok_pattern_list`. The connection to 'User.Read.All' in lower-ranked contexts (Rank 5, 8) seems to be a misdirection when looking for user/edit functionality. The most relevant context, though still distant, is related to 'Log Multi-Index View' (Rank 7), which describes viewing detailed information and management options. Therefore, this endpoint likely fetches a list of Grok patterns for similar viewing and potential management within the UX. No specific usage notes or common use cases can be derived directly from the provided contexts for this *specific* endpoint, other than aiding in the configuration and management of log parsing."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Log Analyst", "System Integrator"], "primary_use_case": "To enable users to view and manage configured Grok patterns for log parsing and analysis."}, "content_for_embedding": "This API retrieves a list of configured Grok patterns, which are essential for log parsing and structured log data management. It allows users to view comprehensive details of these patterns, similar to how Multi-Index details are accessed for viewing and management. This endpoint supports the configuration and ongoing management of log parsing within the system, enabling efficient storage and retrieval of log data.", "semantic_keywords": ["Log Management", "Configuration", "Pattern Identification"], "ontology_classification": {"features": ["log_rule_configuration", "pattern_identification_(log_stream)", "log_search_module"], "primary_module": "log_management", "confidence_score": 0.9}}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_retrieve", "description": "This API endpoint provides functionalities related to viewing and editing User Log Management configurations within Infraon Infinity. It allows administrators to manage user access to various Log Management features and define specific roles and permissions. This includes configurations for Log Multi-Index (to create and manage indexes for retrieving data from Elasticsearch) and Log Export Configs (to define how logs are exported, including format, size, and downloaded exported log files). The endpoint is crucial for controlling user privileges within the Log Management module, ensuring appropriate access to log data and its related functionalities.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the Log Management module. Access to its features depends on the roles and privileges assigned to the user. Administrators can use this API in conjunction with the user management functionalities to enable or disable different Log Management features for specific user roles. The Log Management module enables the collection, storage, analysis, and monitoring of log data from various IT infrastructure components."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with specific roles and privileges"], "primary_use_case": "This API allows administrators to view and edit configurations for User Log Management, including managing user access, roles, and permissions for features like Log Multi-Index and Log Export Configs within Infraon Infinity. It ensures appropriate control over log data functionalities."}, "content_for_embedding": "This API endpoint retrieves and allows for the configuration of User Log Management settings within Infraon Infinity. It enables administrators to define and modify user access, roles, and permissions for various Log Management features, such as Log Multi-Index for Elasticsearch data retrieval and Log Export Configs for defining log export formats and sizes. The endpoint is crucial for controlling user privileges and ensuring secure and appropriate access to log data and its related functionalities within the Log Management module.", "semantic_keywords": ["Log Management", "Configuration", "User Privileges"], "ontology_classification": {"features": ["log_management", "user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/", "method": "POST", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_create", "description": "This API endpoint, `/ux/log_pipeline/log_pipeline_configuration/`, facilitates the management of user access and configurations within the Log Management module. It enables administrators to view and edit Log Pipeline configurations. This is crucial for managing user privileges and permissions related to Log Management functionalities, ensuring appropriate access control to features such as creating and managing Log Multi-Indexes and defining Log Export Configs.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the larger Log Management module in Infraon Infinity, which focuses on collecting, storing, analyzing, and monitoring log data. Access to this API, and the functionalities it controls, is governed by the roles and privileges assigned to users within the Log Management module. For more details on adding or editing users with specific roles and permissions related to Log Management, refer to the relevant sections in the Infraon Infinity user guide. This endpoint is distinct from Log Stream functionalities that allow searching, filtering, and tailing logs in real-time, although both are part of Log Management within Infraon Infinity."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "This API manages user access, privileges, and configurations for the Log Pipeline within the Log Management module, allowing administrators to view and edit Log Pipeline configurations, including Log Multi-Indexes and Log Export Configs."}, "content_for_embedding": "This API endpoint, `/ux/log_pipeline/log_pipeline_configuration/`, facilitates the management of user access and configurations within the Log Management module. It enables administrators to view and edit Log Pipeline configurations. This is crucial for managing user privileges and permissions related to Log Management functionalities, ensuring appropriate access control to features such as creating and managing Log Multi-Indexes and defining Log Export Configs. This endpoint is part of the larger Log Management module in Infraon Infinity, which focuses on collecting, storing, analyzing, and monitoring log data. Access to this API, and the functionalities it controls, is governed by the roles and privileges assigned to users within the Log Management module. It is distinct from Log Stream functionalities. Administrators are responsible for adding or editing user roles and privileges to manage logs, ensuring appropriate access control.", "ontology_classification": {"features": ["infraon_configuration.log_management", "infraon_configuration.user_management", "infraon_configuration.roles_&_privileges_management", "log_management.index-based_elastic_search_architecture"], "primary_module": "log_management", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "Configuration", "Access Control"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/{id}/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_retrieve_2", "description": "This endpoint retrieves the configuration details for a specific log pipeline within the current organization. It is part of the Log Management module, which provides functionalities for managing user access to log-related configurations, including creating and managing multi-indexes for Elasticsearch data retrieval, defining log export configurations (format, size), and enabling rapid log searching and analysis. The pipeline configuration defines how logs are processed and managed.", "summary": "Gets a pipeline with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and uniquely identifies the log pipeline configuration to be fetched. Log Management, especially pipeline configurations, is crucial for monitoring, documenting, and analyzing system events within Infraon Infinity, supporting security intelligence (SI) and compliance regulations like PCI. These configurations dictate how logs are ingested, stored, and made accessible for analysis, similar to how Log Stream provides unified access to logs in the Elasticsearch database for searching, filtering, and real-time tailing."}, "llm_generated": {"business_context": {"user_personas": ["System Administrators", "Security Analysts", "Compliance Officers", "Log Managers"], "primary_use_case": "To retrieve the configuration details of a specific log pipeline, enabling effective management of log processing, storage, and analysis for monitoring, security intelligence, and compliance."}, "content_for_embedding": "This API retrieves the configuration details for a specific log pipeline, identified by its unique ID, within the current organization. This configuration is crucial for defining how logs are processed, ingested, stored, and made accessible for analysis. It supports functionalities such as managing multi-indexes for Elasticsearch data retrieval, defining log export configurations, and enabling rapid log searching and analysis. This endpoint is a core component of the Log Management module, facilitating monitoring, security intelligence, and compliance by dictating log flow and accessibility.", "semantic_keywords": ["Log Management", "Configuration retrieval", "Pipeline configuration"], "ontology_classification": {"features": ["index-based_elastic_search_architecture", "log_search_module", "real-time_log_analysis"], "primary_module": "log_management", "confidence_score": 0.9}}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/{id}/", "method": "PUT", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_update", "description": "This API endpoint allows for the viewing and editing of configurations related to a log pipeline. Specifically, it enables users to manage aspects of Log Management, including permissions for 'Log Multi-Index' (creating/managing multi-indexes for Elasticsearch data retrieval) and 'Log Export Configs' (defining log export formats, sizes, and handling of downloaded exported logs). This endpoint is crucial for tailoring how logs are processed and managed within the system, linking into the broader Log Management module mentioned in the user guides.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the specific log pipeline configuration to be viewed or updated. While the original description mentioned 'users to be viewed or edited', the context strongly suggests this endpoint pertains to the configurations of the log pipeline itself, including access management and settings for log management functionalities, rather than user entities directly. Access to this functionality is dependent on assigned user credentials and privileges within the Log Management module. There is no specific request body defined for this PUT operation, and the response body is empty."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "System Configurators"], "primary_use_case": "Managing log pipeline configurations, including multi-index settings and export formats, to tailor how logs are processed and managed within the system."}, "content_for_embedding": "This API endpoint is used to update and manage specific log pipeline configurations identified by an `id`. It allows for the modification of settings related to Log Multi-Index, which involves creating and managing multi-indexes for Elasticsearch data retrieval, and Log Export Configs, which defines log export formats, sizes, and handling. This is crucial for customizing how logs are processed, managed, and exported within the system, including access management and settings for log management functionalities. It directly impacts log stream settings and requires appropriate user privileges.", "ontology_classification": {"features": ["index-based_elastic_search_architecture", "log_rule_configuration"], "primary_module": "log_management", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "Pipeline configuration", "Multi-Index"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/{id}/", "method": "DELETE", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_destroy", "description": "This endpoint is used to permanently delete an existing log pipeline for the current organization. Deleting a log pipeline means it will no longer process or collect logs, similar to how individual log sources can be removed when they are no longer needed or are causing issues. This action ensures that the log management system only retains configurations for active and relevant log processing requirements.", "summary": "Deletes the pipeline with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` parameter in the path is required and identifies the specific log pipeline to be deleted. This operation is analogous to 'Remove Log Source' functionality where a log source is deleted if it's no longer needed. There is no request body, and a successful deletion will result in no response body. This action should be taken carefully as it removes the pipeline's configuration."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations", "Log Management personnel"], "primary_use_case": "To permanently remove an existing log pipeline configuration, ensuring that the log management system only retains active and relevant configurations."}, "content_for_embedding": "This API endpoint allows for the permanent deletion of a specific log pipeline configuration by its ID. This operation is critical for maintaining an efficient log management system, enabling users to remove outdated or problematic log processing setups. It functions similarly to removing a log source, stopping log collection and processing for the specified pipeline.", "ontology_classification": {"features": ["log_management", "log_rule_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Log Management", "Pipeline configuration"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/get_asset_Preview_data/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_get_asset_Preview_data_retrieve", "description": "This API endpoint is designed to retrieve and preview data related to asset configurations within the log pipeline. Based on the context, it likely provides a view of relevant IT assets associated with an end-user, enabling users to view or edit them. The functionality of this endpoint is closely tied to 'User' related APIs, specifically 'User. Read.All', which must be enabled for full details to be displayed.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint seems to be part of a larger system that allows for the management and auditing of user logins and logouts within the asset management module. Although the API specification states 'No response body', the context suggests that details will be 'displayed per the reference' once permissions (like 'User. Read.All') are added. This implies that while the API call itself might not return a direct body, its effect is to populate data within the application's UI, allowing for viewing or editing of user-associated assets. There are no parameters or request body mentioned in the API specification, reinforcing that this endpoint primarily configures or displays asset data based on enabled permissions and user context."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Technicians"], "primary_use_case": "To retrieve and preview asset configuration data, specifically focusing on user login and logout activities associated with IT assets, enabling auditing, troubleshooting, and monitoring of asset usage and security compliance."}, "content_for_embedding": "This API endpoint retrieves and previews asset configuration data, particularly user login and logout details for specific IT assets. It is part of an asset management system designed to display this information within the application's UI, allowing users to view and potentially manage user-associated assets. The functionality supports auditing user access, troubleshooting issues, and monitoring asset usage and security compliance. It requires specific user permissions, such as 'User. Read.All', to display full details.", "semantic_keywords": ["Asset Management", "Log Management", "Retrieval"], "ontology_classification": {"features": ["user_access_auditing", "detailed_asset_activity_log", "asset_search_and_filtering"], "primary_module": "asset", "confidence_score": 0.9}}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/get_asset_filter_data/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_get_asset_filter_data_retrieve", "description": "This API endpoint is designed to display relevant data for asset filtering within the Log Pipeline configuration, enabling users to view or edit specific asset filter data. It facilitates the narrowing down of displayed data by applying various filters, such as date ranges (e.g., Current Hour, Last 30 minutes), and allows for searching assets by name, ID, or user responsible for changes. While the primary function revolves around presenting data that aids in asset filtering, it also implicitly supports the viewing and editing aspects by providing the necessary underlying data.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The date filtering functionality is crucial for technicians to narrow down displayed data to a desired timeframe. Users can apply filters based on various criteria such as asset ID, IP address, device type, asset type, IT asset status, location, and more, as indicated by the supported custom filters. This endpoint is particularly relevant for use cases related to asset lifecycle tracking, history analysis, and general log analysis within the Log Stream feature of Infraon Infinity, which provides centralized access to logs in the Elasticsearch database, allowing search and filtering in real-time. For a comprehensive understanding of specific asset filters, refer to the relevant sections in the Infinity user guide detailing asset history and filtering options."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Administrator", "Log Analyst"], "primary_use_case": "This API retrieves relevant data for asset filtering within the Log Pipeline configuration, enabling users to view or edit specific asset filter data. It facilitates narrowing down displayed data by applying various filters and supports asset lifecycle tracking, history analysis, and general log analysis within the Log Stream feature."}, "content_for_embedding": "This API endpoint retrieves relevant data for asset filtering within the Log Pipeline configuration. It allows users to view and edit asset filter data, apply various filters such as date ranges (e.g., Current Hour, Last 30 minutes), and search assets by name, ID, or user responsible for changes. This functionality is crucial for technicians to narrow down displayed data to a desired timeframe, supporting asset lifecycle tracking, history analysis, and general log analysis within the Log Stream feature of Infraon Infinity. The Log Stream provides centralized access to logs in the Elasticsearch database, enabling real-time search and filtering. Supported custom filters include Asset ID, IP Address, Device Type, Asset Type, IT Asset Status, and Location.", "semantic_keywords": ["Filter", "Asset Data", "Log Management"], "ontology_classification": {"features": ["asset_search_and_filtering", "log_search_module", "log_stream_module", "auto-complete_filtering_(log_stream)"], "primary_module": "log_management", "confidence_score": 0.9}}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/get_child_pipeline_data/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_get_child_pipeline_data_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Security Administrator"], "primary_use_case": "To manage user accounts, roles, and associated privileges within the system, enabling administrators to control access and permissions."}, "content_for_embedding": "This API endpoint is designed for managing user accounts and their associated privileges. It allows authorized users, typically administrators, to view existing user profiles and modify their details, including roles and permissions. This functionality is crucial for maintaining system security and ensuring proper access control based on assigned privileges.", "semantic_keywords": ["User Management", "User Privileges", "Access Control"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/get_logstash_health/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_get_logstash_health_retrieve", "description": "This API endpoint allows users to retrieve the health status of Logstash within the Log Management module. Logstash acts as a critical pipeline component for collecting, processing, and forwarding log data into the Elasticsearch database in Infraon Infinity. Understanding its health is crucial for ensuring the reliable ingestion and accessibility of log data, which is then made available for search, filtering, and real-time analysis through the Log Stream.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The Log Management module, which this endpoint falls under, manages user access and offers permissions for key functionalities such as Log Multi-Index creation and management, Export Configs for defining how logs are exported, and Log Search capabilities. Logstash's role is to pre-process and dump logs into Elasticsearch, facilitating features like live log streaming, auto-complete filtering, and log graph navigation within the Log Stream module. This endpoint is particularly useful for administrators or users with appropriate privileges to monitor the health of the log pipeline infrastructure."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with appropriate privileges to monitor log pipeline infrastructure"], "primary_use_case": "To monitor and retrieve the health status of Logstash, a critical component for collecting, processing, and forwarding log data to Elasticsearch, ensuring reliable log ingestion and accessibility for search, filtering, and real-time analysis within the Log Management module."}, "content_for_embedding": "This API endpoint retrieves the health status of Logstash, which is a vital pipeline component in the Log Management module. Logstash is responsible for collecting, processing, and forwarding log data into the Elasticsearch database within Infraon Infinity. Its operational health is crucial for ensuring the reliable ingestion and accessibility of log data, which is then used for search, filtering, and real-time analysis via the Log Stream module. This endpoint is primarily used by administrators and privileged users to monitor the overall health and functionality of the log pipeline infrastructure, supporting features like Log Multi-Index creation, Export Configs, Log Search, live log streaming, auto-complete filtering, and log graph navigation.", "ontology_classification": {"features": ["real-time_log_analysis", "diverse_log_source_processing", "log_search_module", "index-based_elastic_search_architecture", "log_stream_module", "live_streaming_(log_stream)", "auto-complete_filtering_(log_stream)", "navigation_log_graph_(log_stream)", "quick_message_categorization_(log_stream)", "pattern_identification_(log_stream)"], "primary_module": "log_management", "confidence_score": 0.95}, "semantic_keywords": ["Log Management", "Status", "Pipeline configuration"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/get_options/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_get_options_retrieve", "description": "This API endpoint provides configuration options for the log pipeline. While the description initially suggests user management, the path and related context (Log Management module, privileges, and Log Stream) indicate its primary function is related to the log pipeline and its settings. It allows users to view or edit configurations pertinent to how logs are processed.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification lists an empty `parameters` array, `request_body_description`, and `response_description` of 'No response body'. This suggests the endpoint may be a simple GET request to retrieve default or current log pipeline configuration options, or specific user-related log pipeline settings. Based on Context Rank 1 and 2, actions like 'User. Read.All' are relevant for enabling permissions. While the endpoint's path clearly indicates 'log_pipeline_configuration', the original description's focus on 'users to be viewed or edited' might imply that this endpoint facilitates configuring log pipeline access or viewing user-specific log settings, rather than directly managing user accounts. Further details on specific configuration elements would be needed to clarify the exact return data. Given the lack of parameters or a request body, it likely returns a default or general configuration related to the log pipeline options."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Log Analyst"], "primary_use_case": "To retrieve configuration options for the log pipeline, including settings for log processing, log sources, and log columns, to manage how logs are handled and viewed."}, "content_for_embedding": "This API retrieves configuration options for the log pipeline, which includes settings for log processing, log sources, and log columns. It enables administrators to manage how logs are handled and viewed, and potentially allows users to view their specific log settings or customized log views within the Log Management module, particularly related to Log Stream settings.", "ontology_classification": {"features": ["log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration", "Log Management", "Pipeline configuration"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/get_pipeline_list/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_get_pipeline_list_retrieve", "description": "This API endpoint is designed to retrieve the list of configured log pipelines. While the initial description mentions viewing or editing users, the path and related contexts strongly suggest its true purpose is to manage log pipeline configurations. Specifically, it enables users to view details about existing log pipelines within the system, which are crucial for managing how logs are processed and forwarded. This aligns with the broader 'Log Management' module aspects discussed in the documentation, including permissions related to log configurations. Access to this functionality is governed by user privileges, potentially requiring specific 'Log Management' permissions.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint performs a GET operation, implying it's used for fetching data only. There are no parameters or request body required for this specific call, suggesting it returns a comprehensive list of all applicable log pipelines. While the original description mentioned 'User' related APIs and permissions (Contexts 1 & 2), the specific path `/ux/log_pipeline/log_pipeline_configuration/get_pipeline_list/` redirects the focus more towards 'Log Management' and its configurations (Contexts 3, 6, 9, 10). Users interact with functionalities related to Log Management and its configurations, which would include viewing the pipelines configured for log processing and export. Permissions for this module are crucial and are generally managed within the Log Management module itself."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Log Manager"], "primary_use_case": "To retrieve and view the list of configured log pipelines for managing log processing and forwarding within the system."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of configured log pipelines, which are essential for managing how logs are processed and forwarded within the system. It allows users to view details about existing log pipeline configurations, aligning with the broader log management and configuration aspects. Access is governed by specific log management permissions.", "ontology_classification": {"features": ["log_management", "log_rule_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Log Pipeline", "Configuration Retrieval", "Log Management"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/grok_pattern/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_grok_pattern_retrieve", "description": "This API endpoint is designed to manage Grok patterns within the Log Management module. Grok patterns are essential for parsing and structuring unstructured log data, enabling efficient log analysis, searching, filtering, and pattern identification in the Infraon Infinity Log Stream. This endpoint allows users to view or edit existing Grok pattern configurations. Grok patterns contribute to the overall Log Stream functionality, which provides centralized access to logs in the Elasticsearch database, supports live streaming, auto-complete filtering, and message categorization.", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the log pipeline configuration, falling under the broader Log Management module. The Log Management sub-module offers permissions for functionalities like Log Multi-Index creation and management, and Log Export Configurations. Grok patterns are crucial for enhancing the log analysis capabilities offered by the Log Stream, allowing users to categorize log messages quickly and identify patterns in log events effectively."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Log Analyst"], "primary_use_case": "To manage and configure Grok patterns for parsing and structuring unstructured log data, enabling efficient log analysis, searching, filtering, and pattern identification within the Log Management module and Log Stream functionality."}, "content_for_embedding": "This API endpoint manages Grok patterns, which are crucial for parsing and structuring unstructured log data within the Log Management module. It enables efficient log analysis, searching, filtering, and pattern identification in the Infraon Infinity Log Stream. Users can view or edit existing Grok pattern configurations. Grok patterns enhance Log Stream's capabilities, providing centralized access to logs in the Elasticsearch database, supporting live streaming, auto-complete filtering, and message categorization. This endpoint is part of the log pipeline configuration, vital for improving log analysis and categorizing log messages effectively.", "ontology_classification": {"features": ["real-time_log_analysis", "log_search_module", "log_stream_module", "pattern_identification_(log_stream)", "log_rule_configuration"], "primary_module": "log_management", "confidence_score": 0.9}, "semantic_keywords": ["Grok patterns", "Log Management", "Configuration"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/grok_response/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_grok_response_retrieve", "description": "This endpoint, `/ux/log_pipeline/log_pipeline_configuration/grok_response/`, is designed to retrieve the grok response for a given grok pattern. Grok patterns are fundamental in log analysis, especially within systems like Infraon Infinity that utilize Elasticsearch for log management. This feature is crucial for streamlining log analysis and pattern identification, helping users effectively categorize log messages. The API aids in understanding how a defined grok pattern interprets and processes log data, which is essential for working with features like Log Stream and Log Search, both of which centralize and facilitate the analysis of various logs.", "summary": "Gets a grok response of grok pattern", "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "While the API specification indicates no parameters or request body, the typical use case for obtaining a 'grok response' involves providing a grok pattern to be parsed. Developers should anticipate that in a real-world scenario, this endpoint would likely either accept a grok pattern as a query parameter or within a request body (for POST methods, though this is a GET) or rely on a previously configured pattern. The context suggests that the system helps users 'identify patterns in your log events' and 'categorize log messages', reinforcing the importance of grok patterns. Given the API endpoint is under 'log_pipeline_configuration', it's plausible that this endpoint fetches the response for a pattern already configured or stored within the system, rather than requiring the pattern to be sent in each request. The related modules like 'Log Stream' and 'Log Search' are central to unified log access and analysis in Infraon Infinity, indicating that grok patterns play a vital role in organizing and querying the log data stored in the Elasticsearch database."}, "llm_generated": {"business_context": {"user_personas": ["Log analysts", "System administrators", "Developers working with log data", "IT operations personnel"], "primary_use_case": "To retrieve the processed response of a grok pattern, enabling users to understand how log data is interpreted and categorized for log analysis and pattern identification within log management systems."}, "content_for_embedding": "This API endpoint retrieves the grok response for a specified grok pattern. It is crucial for log analysis and pattern identification, helping users categorize log messages within systems that use Elasticsearch for log management, such as Infraon Infinity. The API supports understanding how a defined grok pattern processes log data, which is vital for features like Log Stream and Log Search, centralizing and facilitating log data analysis.", "ontology_classification": {"features": ["pattern_identification_(log_stream)", "quick_message_categorization_(log_stream)", "log_search_module", "log_stream_module", "real-time_log_analysis"], "primary_module": "log_management", "confidence_score": 0.95}, "semantic_keywords": ["Grok patterns", "Log Management", "Pattern Identification"]}}, {"path": "/ux/log_pipeline/log_pipeline_configuration/upload_pipeline/{id}/", "method": "GET", "details": {"operationId": "ux_log_pipeline_log_pipeline_configuration_upload_pipeline_retrieve", "description": "This API endpoint provides functionalities related to 'uploading pipeline configurations' within the Log Management module. Specifically, it appears to allow users to view or perform 'add' operations for pipeline configurations, consistent with the \u2018Upload\u2019 privilege described in the documentation for adding services or content within a module. The `id` path parameter is used to identify the specific pipeline configuration.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Pipeline Configuration"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is required and expected to be a string representing the unique identifier for the pipeline configuration. While the original `description` mentions 'viewed or edited', the ranked contexts, particularly Context Rank 1, suggest that 'Upload' privileges primarily enable 'view and perform add operations'. Therefore, this endpoint is likely geared towards viewing existing pipeline configurations and initiating the addition of new ones, rather than comprehensive editing of existing configurations. The endpoint is part of the `/ux/log_pipeline/log_pipeline_configuration/` path, indicating its specific scope within log management functionalities related to pipeline setup. There is no request body, and it returns no response body, suggesting actions are initiated or information is conveyed primarily through the URL and possibly subsequent calls."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Operations personnel", "Log Management specialists"], "primary_use_case": "To retrieve and view existing log pipeline configurations, and to initiate the addition of new ones within the Log Management module."}, "content_for_embedding": "This GET API endpoint, located at '/ux/log_pipeline/log_pipeline_configuration/upload_pipeline/{id}/', is designed for retrieving and viewing specific log pipeline configurations identified by an 'id'. It also facilitates the initiation of new log pipeline configuration additions within the Log Management module. It does not support direct editing of existing configurations and returns no response body, implying further actions or information are conveyed through subsequent interactions.", "ontology_classification": {"features": ["log_management", "log_rule_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "Pipeline configuration", "Configuration"]}}, {"path": "/ux/logmanagement/log_integration/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_retrieve", "description": "Retrieves information about user access and configurations within the Log Management module. This endpoint allows administrators to view and potentially manage specific user permissions and roles related to log management functionalities. Access to various Log Management features, such as Log Multi-Index, Log Export Configs, and Log Search, is determined by the configured roles and privileges assigned to users. This ensures appropriate access control for tasks like collecting, storing, analyzing, and monitoring log data.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for managing user access and permissions within the Log Management module. Users can log in with assigned credentials and perform tasks based on their privileges. Access to specific features within the module depends on the roles and privileges an administrator enables. While the endpoint description mentions 'viewed or edited', the current specification for a 'GET' method implies retrieval of user information. Configuration of user roles and permissions is essential for controlling who can perform actions like exporting logs, managing log indexes, or searching logs within the Log Management system. (Refer to the user guide for details on how to add or edit users with specific roles and permissions.)"}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To retrieve information about user access, roles, and permissions within the Log Management module, enabling administrators to manage access control for log management functionalities."}, "content_for_embedding": "This API retrieves information about user access, roles, and configurations specifically within the Log Management module. It enables administrators to view assigned permissions and privileges that dictate access to various log management functionalities like Log Multi-Index, Log Export Configs, and Log Search, ensuring proper access control for log data handling.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "Access Control", "User Privileges"]}}, {"path": "/ux/logmanagement/log_integration/", "method": "POST", "details": {"operationId": "ux_logmanagement_log_integration_create", "description": "This API endpoint facilitates the viewing and editing of user configurations within the Log Management module. It ensures that system administrators can manage user access, roles, and privileges, thereby controlling who can log in and what tasks they can perform, such as managing multi-indexes, exporting configurations, and searching logs, based on their assigned permissions.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for maintaining appropriate access control within the Log Management module. User privileges and roles configured via this API directly impact the features accessible to users, including functionalities like creating/managing multi-indexes for Elasticsearch data retrieval, defining log export formats and settings, and enabling log searching capabilities. The process of adding or editing users with specific roles and permissions via this API directly aligns with the Log Management module's design, ensuring users can only interact with log data and configurations according to their authorized access levels."}, "llm_generated": {"business_context": {"user_personas": ["system administrator"], "primary_use_case": "This API enables system administrators to manage user access, roles, and privileges within the Log Management module, ensuring appropriate control over who can view, edit, and perform tasks such as managing multi-indexes, exporting configurations, and searching logs."}, "content_for_embedding": "This API endpoint facilitates the viewing, adding, and editing of user configurations, roles, and privileges specifically within the Log Management module. It empowers system administrators to define and control user access to critical functionalities like managing multi-indexes for Elasticsearch data retrieval, configuring log export formats, and enabling log searching capabilities. The endpoint is crucial for maintaining granular access control and ensuring users interact with log data and configurations according to their assigned permissions, aligning with privilege-based feature access.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "log_management", "log_search_module"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Log Management", "Access Control", "User Configuration"]}}, {"path": "/ux/logmanagement/log_integration/{id}/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_retrieve_2", "description": "This API endpoint is designed to retrieve details for a specific user within the Log Management module. It enables administrators to view or edit user configurations, including their assigned credentials, roles, and privileges, which dictate their access and functionalities within the Log Management system. Access to various features within the module is dependent on the roles and permissions configured for the user. This endpoint is crucial for managing user access control and ensuring appropriate privileges are maintained for log data management activities.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter in the path is a mandatory string that uniquely identifies the user whose details are to be retrieved or modified. While the API description mentions viewing or editing, this specific GET endpoint is primarily for viewing user details. Any subsequent editing actions would typically be handled by a separate PUT or POST endpoint, which is not described here. Roles and permissions are fundamental to how users interact with the Log Management module, ensuring only authorized individuals can collect, store, analyze, and monitor log data. For information on adding or editing users with specific roles and permissions, refer to the relevant sections in the Infinity User Guide."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Security Personnel"], "primary_use_case": "To retrieve detailed user configurations, including roles and privileges, within the Log Management module for access control and management purposes."}, "content_for_embedding": "This API endpoint allows administrators to retrieve comprehensive details about a specific user's configuration, including their assigned credentials, roles, and privileges, specifically within the Log Management module. This is crucial for managing user access control and ensuring appropriate permissions for log data management activities.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "User Roles", "Access Control"]}}, {"path": "/ux/logmanagement/log_integration/{id}/", "method": "PUT", "details": {"operationId": "ux_logmanagement_log_integration_update", "description": "This API endpoint allows administrators to view or edit specific user configurations within the Log Management module. It builds upon the existing API endpoint that allows users to be viewed or edited by integrating relevant context from the user guides. The Log Management module is where users with assigned credentials perform tasks based on their privileges and permissions, which are configured via roles. This PUT method specifically facilitates the modification of user settings linked to these roles and permissions, ensuring appropriate access control within the log management system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the user whose settings are to be viewed or edited. Access to various features within the Log Management module depends on the roles and privileges enabled by the administrator. This endpoint is crucial for managing user access and ensuring that users have the correct permissions to collect, store, analyze, and monitor log data. While the original API description mentions viewing and editing users, the context emphasizes the importance of roles and privileges in the Log Management module, suggesting that the edits would primarily pertain to these access controls. There is no response body for this endpoint (as per the API specification)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "To enable administrators to manage and update user configurations, roles, and privileges specifically within the Log Management module, ensuring appropriate access control for log-related tasks."}, "content_for_embedding": "This API endpoint facilitates the modification of specific user configurations, including roles and permissions, within the Log Management module. It allows administrators to update user settings to ensure appropriate access control and privileges for tasks performed within the log management system. The endpoint builds on existing user management functionalities by integrating context from user guides, focusing on how roles and privileges govern access to various features for collecting, storing, analyzing, and monitoring log data.", "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "User Management", "Roles & Privileges"]}}, {"path": "/ux/logmanagement/log_integration/{id}/", "method": "DELETE", "details": {"operationId": "ux_logmanagement_log_integration_destroy", "description": "This API endpoint facilitates the deletion of a specific log integration configuration identified by its unique ID. While the original description mentioned viewing or editing users, the path and method indicate a DELETE operation for a log integration. This endpoint is crucial for managing log management configurations, where appropriate access control is ensured through configured roles and permissions within the Log Management module, as highlighted in the user guides. Deleting a log integration removes its setup, impacting how log data is collected, stored, analyzed, and monitored.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the log integration to be deleted. Users operating this endpoint must have the necessary privileges and permissions within the Log Management module, as access to various features depends on the roles and privileges enabled by an administrator. This ensures controlled management of log configurations. There is no response body expected upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Users with Log Management privileges"], "primary_use_case": "To delete specific log integration configurations, which is essential for managing how log data is collected, stored, and analyzed within the system."}, "content_for_embedding": "This API allows for the permanent deletion of a specific log integration configuration using its unique identifier. It is a critical component for administrators and authorized users to manage log data collection, storage, and analysis settings within the Log Management module, ensuring appropriate access control and configuration hygiene.", "ontology_classification": {"features": ["log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Log Management", "Configuration"]}}, {"path": "/ux/logmanagement/log_integration/_url/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration__url_retrieve", "description": "Retrieves or allows for the editing of user configurations specifically within the Log Management module. This endpoint ensures that access to various features and the ability to perform tasks for a user within the Log Management module are dictated by their assigned roles, privileges, and permissions as configured by an administrator. This is crucial for managing access control and user functionalities related to log collection, storage, analysis, and monitoring activities.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to managing user access and capabilities within the Log Management system. Administrators can use it to view or modify user roles and permissions, ensuring appropriate access control. Roles and privileges configure what users can do, including tasks like viewing, editing, or exporting logs (e.g., in PDF, CSV, or XLS formats if the 'Download' privilege is enabled). The API allows for dynamic updates to these configurations, which are critical for maintaining system security and operational integrity. While the current specification indicates 'No response body' and an empty 'parameters' array, in a real-world scenario for viewing or editing users, it would typically involve providing user identifiers and potentially receiving user-specific configuration details or a confirmation of an update. Therefore, future enhancements might include parameters for user identification and a structured response body."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User"], "primary_use_case": "To manage user access, roles, and privileges within the Log Management module."}, "content_for_embedding": "This API is designed for managing user configurations, including roles, privileges, and permissions, specifically for the Log Management module. It allows administrators to retrieve and modify user access controls, ensuring that users can perform tasks like viewing, editing, or exporting logs based on their assigned roles. This is crucial for maintaining security and operational integrity within the log management system.", "semantic_keywords": ["Log Management", "User Management", "Roles & Privileges"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/logmanagement/log_integration/cmdb_filter/", "method": "POST", "details": {"operationId": "ux_logmanagement_log_integration_cmdb_filter_create", "description": "This API endpoint facilitates the viewing and editing of user configurations within the Log Management module. It is integral for administrators to manage user access, define privileges, and assign roles, thereby controlling what tasks users can perform within the system. The endpoint supports granular control over user permissions, aligning with the system's access control mechanisms.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Access to specific features within the Log Management module, including the ability to add or edit users, is dependent on the Roles and Privileges enabled by the administrator. This endpoint is crucial for maintaining appropriate access control and ensuring that users can only perform tasks for which they have assigned credentials and permissions. While the API specification currently lists no specific parameters or describes a request body, effective user management through this endpoint would typically involve specifying user identifiers, new roles, updated permissions, or filter criteria for viewing existing users."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "To manage user access, roles, and privileges for configurations within the Log Management module, ensuring appropriate access control and user permissions."}, "content_for_embedding": "This API endpoint is used by administrators to view, edit, add, and manage user configurations, access, roles, and privileges specifically within the Log Management module, particularly concerning CMDB filters. It ensures granular access control and proper user permissions for performing tasks within the system.", "semantic_keywords": ["User Management", "Roles & Privileges", "Log Management"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/logmanagement/log_integration/export_data/", "method": "POST", "details": {"operationId": "ux_logmanagement_log_integration_export_data_create", "description": "This API endpoint facilitates the export of log data from the Log Management module. Users with the appropriate 'Download' privilege can export logs in various formats such as PDF, CSV, or XLS. This functionality is crucial for offline analysis, reporting, sharing, and integration of log data with external tools. The exports are listed on the log export page for convenient download.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the 'Log Management' module. Access to this feature is governed by user privileges and permissions, specifically the 'Download' privilege. Logs or data exported from the log search and log stream pages will be accessible via the log export page. The export process is designed to streamline log data presentation and provide utility for offline data handling. No request body or specific parameters are required for initiating the export process through this endpoint; the logged-in user's privileges and the system's export configurations largely determine the outcome."}, "llm_generated": {"business_context": {"user_personas": ["Users with \"Download\" privileges", "Administrators", "IT Operations Personnel", "Analysts"], "primary_use_case": "To enable users to export log data from the Log Management module for offline analysis, reporting, sharing, and integration with external tools."}, "content_for_embedding": "This API endpoint facilitates the export of log data from the Log Management module. Users with the appropriate 'Download' privilege can export logs in various formats such as PDF, CSV, or XLS. This functionality is crucial for offline analysis, reporting, sharing, and integration of log data with external tools. The exports are listed on the log export page for convenient download. No request body or specific parameters are required for initiating the export process through this endpoint; the logged-in user's privileges and the system's export configurations largely determine the outcome.", "semantic_keywords": ["Data Export", "Log Management", "Download"], "ontology_classification": {"features": ["report_export_capabilities"], "primary_module": "log_management", "confidence_score": 1}}}, {"path": "/ux/logmanagement/log_integration/get_data_view/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_get_data_view_retrieve", "description": "This API endpoint, located within the Log Management module, is designed to facilitate the viewing and editing of user data. It enables administrators to manage user access and permissions, which are crucial for defining what tasks users can perform within the Log Management module. Access to specific features, including the ability to view or edit user details, is determined by the roles and privileges configured. This API likely interacts with the system to display user details based on assigned permissions, similar to how 'User. Read.All' permissions are enabled for API access.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is integral to managing user access and roles within the Log Management module. Users can log in with assigned credentials, and their capabilities within Log Management are dictated by their privileges and permissions. Administrators should ensure the necessary 'User' related APIs, such as 'User. Read.All', are enabled to fully leverage this endpoint's functionality for viewing user details. The API is expected to display user details in accordance with the configured permissions, ensuring appropriate access control. No specific request body or parameters are detailed in the provided API specification for this GET request, implying it might retrieve a general data view, or parameters are handled through different mechanisms not outlined here. Common use cases include viewing a list of users, checking their assigned roles, or preparing to modify their permissions."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "user"], "primary_use_case": "To enable administrators to view and manage user access, roles, and permissions specifically within the Log Management module, ensuring appropriate access control for tasks performed in log management."}, "content_for_embedding": "This API retrieves and allows editing of user data, access, roles, and permissions within the Log Management module. It is crucial for administrators to manage user capabilities and ensure proper access control for log management tasks, including viewing user lists and modifying their assigned privileges. This functionality is similar to enabling 'User. Read.All' permissions for API access.", "semantic_keywords": ["User Management", "Access Control", "Log Management"], "ontology_classification": {"features": ["user_management", "roles_&_privileges_management", "log_management"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/logmanagement/log_integration/get_export_configs/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_get_export_configs_retrieve", "description": "This API endpoint is designed to retrieve export configurations within the Log Management module. These configurations define how logs are exported, including aspects like format (PDF, CSV, XLS), size, and the download process for generated log files. This feature supports offline analysis, reporting, and sharing of log data, allowing users with appropriate 'Download' privileges to export logs.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically focuses on 'Export Configs Details' from the Log Management module. The ability to export logs is governed by the 'Download' privilege in the Log Management module. Users can export logs in formats such as PDF, Excel, and CSV for offline analysis, reporting, or sharing. Any data exported from the log search and log stream pages will be listed on a dedicated log export page, where users can download them. This API does not require any parameters or request body."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Users with Log Management \"Download\" privileges"], "primary_use_case": "To retrieve existing export configurations for log data, enabling users to understand how logs are set up for offline analysis, reporting, and sharing."}, "content_for_embedding": "This API endpoint retrieves export configurations within the Log Management module. These configurations define how logs are exported, including format (PDF, CSV, XLS), size, and the download process for generated log files. It supports offline analysis, reporting, and sharing of log data, allowing users with appropriate \"Download\" privileges to export logs. The endpoint focuses on \"Export Configs Details\" and does not require any parameters or request body. Exported data from log search and log stream pages are listed on a dedicated log export page for download.", "ontology_classification": {"features": ["log_management", "report_export_capabilities"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Log Management", "Export", "Configuration retrieval"]}}, {"path": "/ux/logmanagement/log_integration/get_log_columns/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_get_log_columns_retrieve", "description": "This API endpoint allows users to retrieve the configurable columns displayed within the Log Management module. Users can customize these columns to better suit their analytical needs, including adding new fields for more detailed log information or removing obsolete ones. This enables the display of relevant data points for analysis.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically relates to the visualization and customization of log data within the Log Management system, allowing users to tailor their view. The ability to modify these columns is part of ensuring appropriate access control, as highlighted by discussions around roles and permissions within the Log Management module. Refer to the user guide for more details on user roles and privileges related to log management, as access to certain features may depend on administrative configurations."}, "llm_generated": {"business_context": {"user_personas": ["Log Analysts", "Administrators"], "primary_use_case": "To enable users to customize the display of log data for analytical purposes."}, "content_for_embedding": "This API retrieves the configurable columns available for display within the Log Management module, enabling users to customize their log view for better analysis and tailoring of relevant data points.", "semantic_keywords": ["Log Management", "Column Configuration", "Retrieval"], "ontology_classification": {"features": ["log_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/logmanagement/log_integration/get_log_columns_for_pipeline/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_get_log_columns_for_pipeline_retrieve", "description": "This API endpoint, `/ux/logmanagement/log_integration/get_log_columns_for_pipeline/`, allows users to manage the display of log entries within the Log Management module. It enables the adjustment of columns by introducing new fields for more detailed log information or removing obsolete ones. This functionality is crucial for tailoring the log data presentation to specific analytical needs, enhancing the user's ability to analyze, store, and monitor log data generated by systems and applications.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint contributes to the broader Log Management module, where users perform tasks based on their assigned credentials, privileges, and roles. The ability to modify log columns is part of optimizing log analysis and integration. Users can add new fields by defining field names and specifying their types to capture additional data points or delete existing fields to streamline data presentation. This function is integral to the comprehensive log management system that collects, stores, analyzes, and monitors logs within the IT infrastructure."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Log Analyst"], "primary_use_case": "This API allows users to manage and customize the display of log entries within the Log Management module by adjusting columns, including adding new fields for detailed information or removing obsolete ones. This is crucial for tailoring log data presentation to specific analytical needs and optimizing log analysis."}, "content_for_embedding": "This API endpoint, `/ux/logmanagement/log_integration/get_log_columns_for_pipeline/`, is designed to manage the display of log entries within the Log Management module. It enables users to adjust columns by introducing new fields for more detailed log information or removing obsolete ones, thereby tailoring log data presentation to specific analytical needs. This functionality is integral to optimizing log analysis and integration within the comprehensive log management system that collects, stores, analyzes, and monitors logs. Users can add new fields by defining field names and specifying their types, or delete existing fields to streamline data presentation. This contributes to Log Columns Customization, allowing users to adjust columns displayed in log entries, and supports adding new fields for analysis. It also relates to customizing columns displayed on the log search page and within the Log Stream section settings.", "semantic_keywords": ["Log Management", "Column Configuration", "Field Configuration"], "ontology_classification": {"features": ["log_search_module", "log_stream_module"], "primary_module": "log_management", "confidence_score": 0.9}}}, {"path": "/ux/logmanagement/log_integration/get_log_filter_suggestions/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_get_log_filter_suggestions_retrieve", "description": "This API endpoint provides suggestions for log filters, enhancing the user's ability to search and analyze logs within the Log Stream module of Infraon Infinity. It leverages features like auto-complete filtering, as described in the Log Stream documentation, to streamline log analysis and pattern identification. This helps users effectively search, filter, and tail logs in real-time without needing to log into individual servers.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint contributes to the 'Log Management' module's functionalities by improving the user experience for filtering logs. Access to this functionality, like other features within the Log Management module, is based on user privileges and permissions configured by an administrator. While the current API specification does not list any parameters, the broader context of 'Log Stream' and 'Log Search' suggests that filter suggestions would be particularly useful when crafting queries with custom inputs and time ranges."}, "llm_generated": {"business_context": {"user_personas": ["User", "Administrator"], "primary_use_case": "To enhance log analysis and search capabilities by providing intelligent filter suggestions within the Log Stream module, streamlining real-time log analysis and pattern identification."}, "content_for_embedding": "This API endpoint provides intelligent suggestions for log filters, specifically designed to enhance the user experience within the Log Stream module of Infraon Infinity. It leverages auto-complete filtering to streamline real-time log analysis, pattern identification, and efficient searching across log data without requiring direct server access. This functionality is crucial for effectively searching, filtering, and tailing logs, contributing significantly to the overall Log Management module by improving log filtering and query crafting.", "semantic_keywords": ["Filter", "Log Management", "Search"], "ontology_classification": {"features": ["auto-complete_filtering_(log_stream)", "log_stream_module", "log_search_module", "real-time_log_analysis"], "primary_module": "log_management", "confidence_score": 0.95}}}, {"path": "/ux/logmanagement/log_integration/get_log_filter_suggestions_for_pipeline/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_integration_get_log_filter_suggestions_for_pipeline_retrieve", "description": "This API endpoint facilitates the retrieval of filter suggestions for log management pipelines within Infraon Infinity's Log Stream module. It enables users to efficiently search, filter, and analyze logs collected in the Elasticsearch database. The suggestions provided support features like live streaming and auto-complete filtering, streamlining log analysis and pattern identification without requiring direct access to individual servers or log files. This feature enhances the user experience by providing relevant filtering options for a specific log pipeline, aligning with the Log Stream's goal of unified and accessible log data.", "tags": ["Log Integraion"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The Log Stream module is a centralized tool within Infraon Infinity designed for unified access to all logs in the Elasticsearch database. This endpoint's functionality contributes to its auto-complete filtering capability, which is crucial for quick search and analysis. The API assists users in identifying patterns in log events and categorizing messages efficiently. While the current API specification does not detail parameters, the context suggests that these suggestions would be pertinent to a specific pipeline or a set of log data, supporting effective log management and analysis by providing dynamic filtering options."}, "llm_generated": {"business_context": {"user_personas": ["Log analysts", "IT administrators", "DevOps engineers"], "primary_use_case": "To provide filter suggestions for log management pipelines, enabling efficient log search, filtering, and analysis."}, "content_for_embedding": "This API retrieves filter suggestions for log management pipelines within the Log Stream module of Infraon Infinity. It assists users in efficiently searching, filtering, and analyzing logs from Elasticsearch, supporting features like live streaming and auto-complete filtering to streamline log analysis and pattern identification.", "ontology_classification": {"features": ["log_stream_module", "auto-complete_filtering_(log_stream)", "pattern_identification_(log_stream)", "real-time_log_analysis", "log_search_module"], "primary_module": "log_management", "confidence_score": 0.95}, "semantic_keywords": ["Log Management", "Filter", "Search"]}}, {"path": "/ux/logmanagement/log_search/log_search/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_search_log_search_retrieve", "description": "This API endpoint provides access to the Log Search functionality within the UX Log Management module. It enables users to efficiently search, filter, and analyze log data ingested into the Elasticsearch database. This includes the ability to apply custom inputs, filters, and time ranges to queries, and to save these queries for reuse across dashboards, visualizations, or for sharing results via link or CSV. This module centralizes log access, eliminating the need to log into different servers or tail individual files.", "tags": ["Log Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The Log Search module is a powerful tool designed for navigating and analyzing large volumes of structured and unstructured log data, providing results quickly. Key features supported include live log streaming, auto-complete filtering, and a log graph for efficient navigation and pattern identification. The API facilitates operations similar to those performed within the Log Stream, which offers unified access to all logs in the Elasticsearch database in real time. While the original description mentioned users being 'viewed or edited', the context strongly indicates this endpoint is for log searching and management, not user management. Access to this functionality is based on user privileges and permissions configured within the Log Management module. This endpoint forms part of the 'Log Search' sub-module which offers permissions for rapid log searching."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "IT Support", "Security Analyst"], "primary_use_case": "This API provides comprehensive log search capabilities, allowing users to efficiently search, filter, analyze, save, and share log data from an Elasticsearch database. It centralizes log access and supports real-time log streaming and advanced navigation."}, "content_for_embedding": "This API endpoint provides access to the Log Search functionality within the UX Log Management module. It enables users to efficiently search, filter, and analyze log data ingested into the Elasticsearch database. Key features include the ability to apply custom inputs, filters, and time ranges to queries, save these queries for reuse across dashboards or visualizations, and share results via link or CSV. It supports live log streaming, auto-complete filtering, and log graph navigation, centralizing log access and eliminating the need to access individual servers or files.", "semantic_keywords": ["Log Management", "Search", "Filter", "Export"], "ontology_classification": {"features": ["log_search_module", "index-based_elastic_search_architecture", "real-time_log_analysis", "live_streaming_(log_stream)", "auto-complete_filtering_(log_stream)", "navigation_log_graph_(log_stream)"], "primary_module": "log_management", "confidence_score": 0.95}}}, {"path": "/ux/logmanagement/log_search/log_search/", "method": "POST", "details": {"operationId": "ux_logmanagement_log_search_log_search_create", "description": "This API endpoint provides a powerful interface for interacting with the Log Search module, enabling users to efficiently search, filter, and analyze large volumes of structured and unstructured log data stored in the Elasticsearch database within Infraon Infinity. It allows for quick and effective querying across extensive log collections, delivering results swiftly. Key functionalities include saving queries with custom inputs, filters, and time ranges for reuse, embedding them in dashboards, creating visualizations, or sharing results via link or CSV.", "tags": ["Log Search"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "The current API specification indicates no request body or response body. However, given the nature of log search and the features described in the context (saving custom queries, filters, time ranges, and sharing results), it is highly probable that future iterations or associated endpoints will involve a request body for defining search parameters and potentially a response body containing the search results or a reference to them. The Log Search module is part of the broader Log Management functionality, with access dependent on user privileges and assigned roles. All logs are conveniently accessible within the Log Stream, which supports live log streaming, filtering with auto-complete, and log graph navigation. This API is commonly used for rapid analysis, pattern identification within log events, and general log management."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Security analysts", "Developers", "Operations teams"], "primary_use_case": "This API endpoint enables users to efficiently search, filter, and analyze large volumes of structured and unstructured log data stored in Elasticsearch, allowing for rapid analysis, pattern identification, and the ability to save and share queries for reuse in dashboards and visualizations."}, "content_for_embedding": "This API endpoint provides a powerful interface for interacting with the Log Search module within Infraon Infinity. It allows users to efficiently search, filter, and analyze large volumes of structured and unstructured log data stored in the Elasticsearch database. Key functionalities include quick and effective querying across extensive log collections, saving queries with custom inputs, filters, and time ranges for reuse, embedding them in dashboards, creating visualizations, or sharing results via link or CSV. It is part of the broader Log Management functionality and integrates with the Log Stream for live log streaming, filtering with auto-complete, and log graph navigation, facilitating rapid analysis and pattern identification within log events.", "ontology_classification": {"features": ["log_search_module", "index-based_elastic_search_architecture", "real-time_log_analysis", "diverse_log_source_processing", "log_stream_module", "live_streaming_(log_stream)", "auto-complete_filtering_(log_stream)", "navigation_log_graph_(log_stream)", "pattern_identification_(log_stream)"], "primary_module": "log_management", "confidence_score": 1}, "semantic_keywords": ["Log Management", "Search", "Filter"]}}, {"path": "/ux/logmanagement/log_search/log_search/{id}/", "method": "GET", "details": {"operationId": "ux_logmanagement_log_search_log_search_retrieve_2", "description": "This API endpoint provides access to the management and analysis of saved log searches within the Log Search module. Specifically, it allows for viewing or editing a previously saved log search query. The Log Search module is a powerful tool designed for efficient navigation and analysis of large volumes of structured and unstructured log data stored in an Elasticsearch database, enabling rapid searching across extensive log collections and delivering results within seconds. Saved queries can include custom inputs, filters, and a time range, and can be embedded in dashboards, used for visualizations, or shared via link or CSV.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter represents the unique identifier for the specific log search query to be viewed or edited. While the API specification mentions 'users to be viewed or edited,' this appears to be a generic description from a template. Based on the highly relevant contexts, this specific endpoint relates to managing 'log search queries' rather than individual users. The `id` likely corresponds to a saved log search query. There is 'No response body' explicitly stated, suggesting the operation might confirm success via status code, or the 'view' aspect is handled differently within the system context.\n\nCommon use cases include retrieving details of a saved log search to understand its configuration (filters, time range) or to modify its definition for updated analysis or reporting needs. The Log Search feature facilitates efficient searching across vast log collections by querying and analyzing data in an index-based storage architecture."}, "llm_generated": {"business_context": {"user_personas": ["Users who need to manage, view, or modify pre-configured log search queries", "IT administrators", "security analysts", "operations teams", "developers", "anyone involved in log data analysis and troubleshooting"], "primary_use_case": "To enable users to retrieve and manage previously saved log search queries, facilitating efficient access and modification of pre-defined search configurations for log data analysis and reporting within the Log Search module."}, "content_for_embedding": "This API endpoint allows for the retrieval and potential editing of a previously saved log search query within the Log Search module. It uses a unique identifier (`id`) to access specific saved queries, which can include custom inputs, filters, and time ranges. These saved queries are integral for efficient navigation and analysis of large volumes of structured and unstructured log data stored in an Elasticsearch database, enabling their use in dashboards, visualizations, or sharing.", "ontology_classification": {"features": ["log_search_module"], "primary_module": "log_management", "confidence_score": 0.9}, "semantic_keywords": ["Log Search", "Retrieval", "Saved Queries"]}}, {"path": "/ux/logmanagement/log_search/log_search/{id}/", "method": "PUT", "details": {"operationId": "ux_logmanagement_log_search_log_search_update", "description": "This API endpoint allows for the viewing and editing of saved log search queries within the Log Search module. The Log Search module is a powerful tool designed for efficient navigation and analysis of large volumes of structured and unstructured log data stored in the Elastic database. After building a specific query in Log Search with custom inputs, filters, and a time range, users can save it for various purposes, such as embedding in dashboards, creating visualizations, or sharing results via link or CSV. This PUT operation facilitates the update or modification of these previously saved log search queries. The `id` in the path refers to the unique identifier of the specific saved log search query to be updated.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path string that uniquely identifies the saved log search entry to be edited. The exact structure of the request body for the `PUT` operation, which would define the editable fields of the log search query (e.g., query string, filters, time range, name, description), is not detailed in the provided specification but is implied by the 'editing' functionality. This functionality is crucial for managing and reusing complex log analysis queries, enhancing efficiency in troubleshooting and pattern identification. The API currently returns no response body upon successful execution."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Network engineers", "Security analysts", "Data analysts"], "primary_use_case": "This API allows users to update and modify previously saved log search queries, which are essential for managing and reusing complex log analysis tasks, improving efficiency in troubleshooting and identifying patterns in log data."}, "content_for_embedding": "This API allows users to update and modify previously saved log search queries within the Log Search module. These queries, which include custom inputs, filters, and time ranges, are used for efficient navigation and analysis of large volumes of structured and unstructured log data stored in an Elastic database. Updating these saved queries is essential for managing and reusing complex log analysis tasks, improving efficiency in troubleshooting and identifying patterns in log data. The API uses a unique identifier (`id`) to specify which saved query to update.", "semantic_keywords": ["Log Search", "Saved Queries", "Update"], "ontology_classification": {"features": ["log_search_module"], "primary_module": "log_management", "confidence_score": 0.9}}}, {"path": "/ux/logmanagement/log_search/log_search/{id}/", "method": "DELETE", "details": {"operationId": "ux_logmanagement_log_search_log_search_destroy", "description": "This `DELETE` API endpoint is used to interact with a specific saved log search query within the Log Search module. While the original description incorrectly states it allows users to be viewed or edited, the `DELETE` method strongly implies it's for removal. The Log Search module is a powerful tool designed to help users efficiently navigate and analyze large volumes of structured and unstructured log data. It enables quick and effective searching across extensive log collections, providing results within seconds. Log Search queries and analyzes log data stored in the Elastic database, built on an index-based storage architecture. This endpoint allows for the deletion of a specific saved query, which can be queries with custom inputs, filters, and a time range that were previously saved for reuse, embedding in dashboards, creating visualizations, or sharing.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Log Search"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the saved log search query to be deleted. The Log Search feature is part of Infraon Infinity, which focuses on providing unified access to logs in the Elasticsearch database, allowing users to search, filter, and tail logs without directly logging into different servers. After building a query in Log Search, it can be saved and this endpoint would be used to manage (specifically, delete) those saved queries. There is no request body for this operation, and a successful deletion will result in no response body."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Log Analysts", "DevOps Engineers", "System Administrators"], "primary_use_case": "To delete specific saved log search queries, allowing users to manage and clean up their log analysis configurations."}, "content_for_embedding": "This API endpoint allows for the deletion of a specific saved log search query within the Log Search module. Saved queries are custom inputs, filters, and time ranges used for efficient searching and analysis of structured and unstructured log data stored in an Elastic database. This operation helps users manage their saved log search configurations by removing no longer needed queries.", "semantic_keywords": ["Delete", "Log Search", "Saved Queries"], "ontology_classification": {"features": ["log_search_module"], "primary_module": "log_management", "confidence_score": 1}}}, {"path": "/ux/logmanagement/log_search/log_search/logs/", "method": "POST", "details": {"operationId": "ux_logmanagement_log_search_log_search_logs_create", "description": "This endpoint enables users to efficiently fetch detailed log data for a specific device, specifically identified by its IP address. It queries and analyzes log data stored within the Elasticsearch database, leveraging an index-based storage architecture. This functionality is part of a broader Log Search module designed for rapid querying and analysis of large volumes of structured and unstructured log data, providing detailed results quickly. It allows users to access logs without needing to log into different servers or tail individual files.", "summary": "Gets a log details with the given IP", "tags": ["Log Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The Log Search module, which this endpoint is a part of, is optimized for quick and effective searching across extensive log collections. Logs are conveniently accessible within the Log Stream. Although the current specification indicates \"No response body,\" in a live system, this endpoint would typically return the fetched log details. The underlying Log Search capabilities include live log streaming, filtering with auto-complete, and a log graph for efficient navigation and pattern identification. Log indices, structured based on timestamps (e.g., `windows-yyyy.mm.dd`), are critical for organizing and retrieving logs from Elasticsearch."}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "Security Analysts", "System Administrators", "Developers"], "primary_use_case": "To efficiently fetch and analyze detailed log data for specific devices identified by their IP address, leveraging an Elasticsearch-based Log Search module for rapid querying of large volumes of structured and unstructured logs."}, "content_for_embedding": "This API endpoint is designed for the Log Search module, enabling users to quickly retrieve and analyze detailed log data for a specific device using its IP address. It queries an Elasticsearch database with an index-based storage architecture, supporting rapid searching across large volumes of structured and unstructured logs. The functionality includes capabilities for live log streaming, auto-complete filtering, and log graph navigation, providing efficient access to log details without direct server access.", "semantic_keywords": ["Log Search", "IP Address", "Retrieval"], "ontology_classification": {"features": ["log_search_module", "index-based_elastic_search_architecture", "real-time_log_analysis", "diverse_log_source_processing", "live_streaming_(log_stream)", "auto-complete_filtering_(log_stream)", "navigation_log_graph_(log_stream)"], "primary_module": "log_management", "confidence_score": 1}}}, {"path": "/ux/nccm/authentication_profile/", "method": "GET", "details": {"operationId": "ux_nccm_authentication_profile_retrieve", "description": "This endpoint retrieves a paginated list of authentication profiles configured within the current organization. Authentication profiles are crucial for managing user authentication when accessing network devices via Command Line Interface (CLI) sessions. They ensure that only authorized users can establish CLI sessions by verifying their identity.\n\nThis module aligns with the AAA (Authentication, Authorization, and Accounting) security framework and can integrate with features like Single Sign-On (SSO) to provide streamlined access to network devices.", "summary": "Gets a list of authentication profiles", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This API endpoint provides standard pagination and sorting capabilities:\n- **`items_per_page`**: Specifies the number of items to return per page. This is a mandatory query parameter.\n- **`page`**: Indicates the specific page number to retrieve. This is a mandatory query parameter.\n- **`reverse`**: An optional boolean parameter to specify the sorting order. If true, the results will be sorted in reverse order.\n- **`sort`**: An optional string parameter that defines the key by which the results should be sorted.\n\nUsers must have appropriate permissions assigned by an administrator to view these profiles. The system-defined default authorization profile, which applies default access policies when no specific profile is assigned, can also be viewed via this mechanism."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Administrators", "IT Operations"], "primary_use_case": "To retrieve and manage user authentication profiles for secure access to network devices via CLI, supporting AAA and SSO frameworks."}, "content_for_embedding": "This API retrieves a paginated and sortable list of authentication profiles used for managing user authentication and access to network devices via CLI sessions. These profiles are integral to the AAA security framework and support Single Sign-On (SSO) integration within network configuration and change management.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "search_functionality"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Authentication Profiles", "Network Configuration", "User Authentication"]}}, {"path": "/ux/nccm/authentication_profile/", "method": "POST", "details": {"operationId": "ux_nccm_authentication_profile_create", "description": "This endpoint facilitates the creation of a new **Authentication Profile** within the NCCM (Network Configuration Change Management) application. An Authentication Profile is crucial for managing user authentication when accessing network devices via CLI (Command Line Interface) sessions (SSH or Telnet). It ensures that only authorized users can establish CLI sessions with network devices by verifying their identity prior to granting access, aligning with AAA (Authentication, Authorization, and Accounting) security frameworks. This profile defines user access levels and permissions for network devices, integrating with NCCM\u2019s 'Block, Notify, and Terminate' actions to enforce security policies and restrict unauthorized actions.", "summary": "Creates a new configuration profile", "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body for this endpoint is a JSON object representing the new authentication profile. It leverages a serializer that recognizes various primitive fields such as `StringField`, `URLField`, `EmailField`, `IntField`, `BooleanField`, `DateTimeField`, and more, including specific fields for geographic data (`GeoPointField`, `GeoJsonBaseField`) and unique identifiers (`ObjectIdField`, `UUIDField`). Compound fields like `ListField` and `DictField` are also supported, mapping to corresponding DRF (Django REST Framework) fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. This endpoint is a privilege-based feature; users must have the necessary administrative permissions to add authentication profiles. An example use case would be adding a profile for 'Network_Admins_Profile' or 'Admin-Access' with specific device access rules. Users can also duplicate existing profiles and modify them using a 'Clone' feature, and then save the new profile via this endpoint. Not well-supported or untested fields include `FileField`, `ImageField`, and `BinaryField`."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Administrators"], "primary_use_case": "To create and manage authentication profiles for secure user access and policy enforcement on network devices within the NCCM application."}, "content_for_embedding": "This API creates new Authentication Profiles within the NCCM (Network Configuration Change Management) application. These profiles are essential for managing user authentication and access to network devices via CLI sessions (SSH/Telnet), ensuring only authorized users can establish connections. It supports defining user access levels and permissions, integrating with NCCM's security policy enforcement. Network administrators use this privilege-based feature to add profiles with unique names and descriptions, such as 'Admin-Access' for specific device access rules.", "semantic_keywords": ["Authentication Profiles", "Network Configuration", "Access Control"], "ontology_classification": {"features": ["centralized_management", "network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/authentication_profile/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_authentication_profile_retrieve_2", "description": "This endpoint retrieves the detailed information of a specific authentication profile within the current organization, identified by its unique ID. Authentication profiles are crucial for managing user authentication when accessing network devices via CLI (Command Line Interface) sessions. They ensure that only authorized users can establish CLI sessions by verifying their identity and can leverage Single Sign-On (SSO) for network device access as per configurations. This process is part of the broader NCCM application's security framework, ensuring controlled access to network devices.", "summary": "Gets a authentication profile details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The 'id' path parameter is required and represents the unique identifier of the authentication profile to be retrieved. This API supports the functionality of the Authentication Profile module, which is a privilege-based feature; users must have the necessary permissions assigned by an administrator to view authentication profiles. This endpoint helps in understanding how users are authenticated before gaining access to network devices and how those authentication settings align with network configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Security Administrator"], "primary_use_case": "This API retrieves detailed information about a specific authentication profile, which is used to manage user authentication for accessing network devices via CLI sessions and supports Single Sign-On (SSO). It ensures controlled and authorized access to network devices."}, "content_for_embedding": "This API endpoint, a GET request to /ux/nccm/authentication_profile/{id}/, retrieves comprehensive details of an authentication profile identified by its unique ID. Authentication profiles are critical for managing user authentication for network device access, particularly for CLI sessions, and can integrate with Single Sign-On (SSO). This functionality is integral to the NCCM application's security framework, ensuring only authorized users can establish CLI sessions. The 'id' path parameter is mandatory. Users require specific administrative permissions to view these profiles, which helps in understanding and aligning user authentication settings with network configurations.", "ontology_classification": {"features": ["privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Authentication Profiles", "Retrieval", "Access Control"]}}, {"path": "/ux/nccm/authentication_profile/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_authentication_profile_update", "description": "This endpoint is used to edit an existing authentication profile for the current organization within the NCCM (Network Configuration and Change Management) application. Authentication profiles are crucial for managing user authentication when accessing network devices via CLI (Command Line Interface) sessions, ensuring that only authorized users can establish such sessions by verifying their identity. This aligns with the broader AAA (Authentication, Authorization, and Accounting) security framework by enforcing security policies.", "summary": "Edits the authentication profile with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and uniquely identifies the authentication profile to be edited.\n\nThe request body for this PUT operation expects a serializer for documents, supporting various primitive and compound fields. Primitive fields include `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, and `DateField`. Compound fields like `ListField` and `DictField` are mapped to corresponding DRF fields with nested specifications. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth.\n\nThis is a privilege-based feature; users must have the necessary permissions assigned by an administrator to perform edit operations on authentication profiles. Common use cases include updating credentials, access parameters, or other configuration details for an existing profile. To duplicate an existing profile with minor modifications, the 'Clone' feature described in the user guide (Context Rank 5) might be an alternative or precursor to using this endpoint programmatically."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "User"], "primary_use_case": "To edit existing authentication profiles within the NCCM application, enabling secure and authorized user access to network devices via CLI sessions by managing credentials and enforcing security policies."}, "content_for_embedding": "This API endpoint allows for the editing of an existing authentication profile within the Network Configuration and Change Management (NCCM) application. Authentication profiles are critical for managing user authentication for CLI (Command Line Interface) sessions to network devices, ensuring only authorized users can establish sessions. This operation supports updating credentials, access parameters, and other configuration details, aligning with AAA security frameworks. It is a privilege-based feature, requiring necessary permissions.", "semantic_keywords": ["Authentication Profiles", "NCCM", "User Authentication"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "device_credential_management", "roles_&_privileges_management", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/authentication_profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_authentication_profile_destroy", "description": "This endpoint permanently removes an existing authentication profile from the current organization. Authentication profiles, which are part of the NCCM AAA (Authentication, Authorization, and Accounting) security framework, define how users can access network devices. Deleting an authentication profile means it will no longer be available for use and cannot be recovered. This action is irreversible.", "summary": "Deletes the authentication profile with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and represents the unique identifier of the authentication profile to be deleted. Similar to bulk delete operations, this API facilitates the removal of obsolete or unnecessary profiles. Note that this endpoint performs an immediate and permanent deletion of the specified profile."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Security administrators", "IT operations personnel"], "primary_use_case": "To permanently delete an existing authentication profile, which is part of the NCCM AAA security framework, to manage user access to network devices and clean up obsolete configurations."}, "content_for_embedding": "This API permanently deletes a specific authentication profile by its unique ID. These profiles are integral to the NCCM AAA security framework, controlling user access to network devices. The deletion is irreversible and contributes to managing network configurations by removing obsolete or unnecessary profiles. This action is typically performed by network administrators with appropriate privileges.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Authentication Profiles", "NCCM"]}}, {"path": "/ux/nccm/authentication_profile/bulk-opration/", "method": "POST", "details": {"operationId": "ux_nccm_authentication_profile_bulk_opration_create", "description": "This POST API endpoint facilitates bulk operations on NCCM authentication profiles. It allows users to manage multiple profiles simultaneously, supporting actions such as enabling, disabling, and deleting. Specifically, this endpoint can be used to activate a selection of profiles by marking them 'Active', deactivate them by marking them 'Inactive', or remove multiple profiles permanently. It is designed to streamline administrative tasks by applying changes to numerous authentication profiles in a single request, thereby improving efficiency in managing user access and security configurations within the NCCM application.", "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The request body for this endpoint is expected to contain a serialized representation of documents related to the bulk operation. It supports various primitive field types including StringField, URLField, EmailField, IntField, FloatField, BooleanField, DateTimeField, and ObjectIdField. Compound fields like ListField and DictField are also supported, mapping to corresponding DRF fields. ReferenceField acts like a ForeignKey, with nested serializers generated based on depth, or otherwise handled by ID. EmbeddedDocumentField similarly generates nested serializers for non-zero depth. Generic fields (GenericReferenceField, GenericEmbeddedDocumentField) are handled with their own serializer fields. Fields like FileField, ImageField, and BinaryField are not well-supported or untested. This endpoint is crucial for administrative workflows requiring mass updates or deletions of authentication profiles, such as cleaning up outdated profiles or quickly activating a set of new user profiles."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "IT Operations"], "primary_use_case": "Streamline administrative tasks by performing bulk operations (enable, disable, delete) on NCCM authentication profiles."}, "content_for_embedding": "This API endpoint allows for efficient bulk management of NCCM authentication profiles. Users can simultaneously enable, disable, or delete multiple profiles, streamlining administrative workflows related to user access and security configurations within the NCCM application. It supports various field types for serialized document representation in the request body, facilitating mass updates and deletions.", "semantic_keywords": ["Authentication Profiles", "Bulk Operations", "NCCM"], "ontology_classification": {"features": ["bulk_actions", "network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/authentication_profile/detail-view/", "method": "GET", "details": {"operationId": "ux_nccm_authentication_profile_detail_view_retrieve", "description": "This endpoint is used to get the data for the users with device for Authentication profile.", "summary": "Get the data for the users with device for the Authentication Profile.", "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Administrators", "IT Support Staff"], "primary_use_case": "This API retrieves comprehensive details of an authentication profile, including associated users and devices. It is used to view specific information about an authentication profile for management and auditing purposes."}, "content_for_embedding": "This API retrieves comprehensive details of an authentication profile, including associated users, devices, IP addresses, and status. It supports the 'Detail View' functionality, allowing users to open a pop-up with detailed profile information such as User Name(s), Email, Profile Name, IP Address, and Status. This is crucial for managing and auditing access configurations within the NCCM application.", "semantic_keywords": ["Authentication Profiles", "Details retrieval", "User Authentication"], "ontology_classification": {"features": ["authentication_profiles", "detailed_record_view", "user_access_auditing"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/authentication_profile/device-cred-details/", "method": "GET", "details": {"operationId": "ux_nccm_authentication_profile_device_cred_details_retrieve", "description": "This endpoint is used to get the default options for authentication profile ", "summary": "Get the options for the Authentication Profile", "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Security Personnel", "NCCM Administrators"], "primary_use_case": "To retrieve default configuration options for authentication profiles, enabling the setup and management of authentication settings for network devices and user access within the NCCM system."}, "content_for_embedding": "This API retrieves the default configuration options for authentication profiles within the NCCM (Network Configuration and Change Management) system. These profiles are crucial for defining how users and devices authenticate, including credential details and security protocols. It facilitates the initial setup and ongoing management of authentication settings for network devices and user access, ensuring secure and compliant operations.", "semantic_keywords": ["Authentication Profiles", "Configuration Retrieval", "Device Credentials"], "ontology_classification": {"features": ["device_credential_management", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/authentication_profile/get-cvs-ips/", "method": "POST", "details": {"operationId": "ux_nccm_authentication_profile_get_cvs_ips_create", "description": "This endpoint provides functionality to retrieve IP addresses from a CSV file. It is specifically designed for use within the NCCM (Network Configuration and Change Management) module, aiding in processes like device discovery and report generation. Users can upload a CSV file containing lists of device management IPs, which serves as an alternative to manually entering IP addresses or ranges. This is particularly useful for importing multiple IP addresses efficiently, for example, when setting up discovery profiles or preparing data for NCCM reports such as configuration download activities or jobs account audits.", "summary": "Get the data for the Ip address from csv.", "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The request body for this endpoint is expected to contain a document, likely a file upload (CSV), based on the `request_body_description`. Although the detailed structure of the expected CSV is not explicitly defined in the API spec, context from user guides (Rank 2, 3) indicates that the CSV should contain IP addresses. It is highly recommended to download the sample CSV template before uploading to ensure correct formatting. This import mechanism is an alternative to entering IP addresses manually, IP ranges, or subnets, and is essential for efficiently managing device lists within the NCCM system. The API is central to operations involving large sets of device IPs, such as configuration downloads and detailed reporting on network devices. While the 'request_body_description' broadly discusses primitive and compound fields for document serialization, the direct relevance to this specific endpoint context points towards the file being a CSV input for IP addresses."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "This API allows users to efficiently import a list of IP addresses from a CSV file into the NCCM (Network Configuration and Change Management) system. This streamlines processes such as device discovery, configuration downloads, and report generation by providing an alternative to manual IP entry for bulk operations."}, "content_for_embedding": "This API facilitates the bulk import of IP addresses for network devices into the NCCM module by allowing users to upload a CSV file. It is crucial for automating and scaling device discovery, managing configuration download jobs, and generating comprehensive reports within the network infrastructure. This method serves as an efficient alternative to manual IP address entry, supporting large-scale network management tasks.", "semantic_keywords": ["CSV Import", "IP Address", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "device_discovery", "multiple_asset_addition_methods", "nccm_reports_(configuration_download_&_jobs_account_audit)"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/authentication_profile/multi-delete/", "method": "POST", "details": {"operationId": "ux_nccm_authentication_profile_multi_delete_create", "description": "This API endpoint facilitates the bulk deletion of multiple authentication profiles within the NCCM application. It allows users to efficiently remove outdated, unnecessary, or unneeded authentication profiles in a single operation. This is crucial for maintaining a clean and secure network environment by managing user access levels and permissions for network devices.", "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically supports the removal of *multiple* authentication profiles at once, aligning with the 'Bulk Actions' described in the context guides. While the full API specification mentions a generic serializer for 'Documents' and various primitive and compound field types, for this specific endpoint's purpose of bulk deletion, the request body is expected to contain identifiers (likely a list of IDs) of the authentication profiles to be deleted. The exact structure of the request body for specifying the profiles to be deleted is implicitly handled by the Document serializer. Common use cases include cleanup after user migration, decommissioning of devices, or periodic security audits where obsolete profiles need to be purged.\n\nNote that general serializer information is provided in the `request_body_description`, but the specific structure of the delete request (e.g., how the list of profile IDs is passed) is not explicitly detailed beyond 'Serializer for Documents'. Developers should refer to specific implementation examples or further documentation to understand the expected request body format for multi-delete operations."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT security personnel", "Administrators"], "primary_use_case": "This API enables the efficient bulk deletion of multiple authentication profiles within the NCCM application, crucial for maintaining a clean and secure network environment by managing user access levels and permissions for network devices. It addresses the need to remove outdated, unnecessary, or unneeded profiles in a single operation, supporting tasks like cleanup after user migration, device decommissioning, or security audits."}, "content_for_embedding": "This API endpoint, `/ux/nccm/authentication_profile/multi-delete/`, facilitates the bulk deletion of multiple authentication profiles within the NCCM application via a POST request. It is designed to efficiently remove outdated, unnecessary, or unneeded authentication profiles in a single operation, which is vital for maintaining a clean and secure network environment and managing user access levels and permissions for network devices. The operation ID is `ux_nccm_authentication_profile_multi_delete_create`. This endpoint specifically supports the removal of multiple authentication profiles at once, aligning with \"Bulk Actions\" for authentication profiles. The request body is expected to contain identifiers (likely a list of IDs) of the authentication profiles to be deleted, implicitly handled by a Document serializer. Common use cases include cleanup after user migration, decommissioning of devices, or periodic security audits where obsolete profiles need to be purged.", "semantic_keywords": ["Bulk Delete", "Authentication Profiles", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/authentication_profile/options/", "method": "GET", "details": {"operationId": "ux_nccm_authentication_profile_options_retrieve", "description": "This endpoint retrieves the default options and necessary components for setting up or managing an 'Authentication Profile' within the NCCM application. An Authentication Profile is crucial for managing user authentication when accessing network devices via CLI (Command Line Interface) sessions, ensuring only authorized users can establish secure connections. The options returned facilitate the creation of new profiles, including system-defined default access policies that apply when no specific profile is assigned.", "summary": "Get the options for the Authentication Profile", "tags": ["Authentication Profile"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "An 'Authentication Profile' functions similarly to a gateway, verifying user identity before granting access to network devices. This endpoint provides the foundational elements required to define user access levels and permissions, ensuring adherence to security policies. It is a privilege-based feature, meaning users will only be able to view or utilize these options if they possess the necessary permissions assigned by an administrator. While this endpoint does not require specific parameters, the retrieved options will be instrumental in subsequently adding or configuring authentication profiles, which typically involve defining a unique profile name (e.g., \"Admin-Access\"), a brief description, and setting its status (Active/Inactive), as well as associating IP addresses."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Security Administrator"], "primary_use_case": "To retrieve default options and necessary components for setting up or managing user authentication profiles for network devices via CLI sessions, ensuring secure and authorized access."}, "content_for_embedding": "This API retrieves the necessary default options and components to create or manage an 'Authentication Profile' within the NCCM application. An 'Authentication Profile' is essential for controlling user authentication when accessing network devices through CLI sessions, ensuring only authorized users can establish secure connections. The options returned facilitate the definition of user access levels and permissions, including system-defined default access policies. This is a privilege-based feature, providing foundational elements for subsequent configuration of profiles, including name, description, status, and associated IP addresses.", "semantic_keywords": ["Authentication Profiles", "Network Configuration", "Access Control"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "device_credential_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/cli_jobs/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_list", "description": "This endpoint provides a comprehensive list of CLI Job/Sessions within the current organization. CLI Jobs/Sessions in NCCM facilitate direct Command Line Interface (CLI) sessions (SSH or TELNET) between a network device and a user, akin to using an application like PuTTY. These sessions enable users to execute direct commands on devices for tasks such as configuration, diagnostics, and software updates. It's a privilege-based feature, allowing users to request and manage CLI connections by specifying the Device IP Address and other details. The endpoint supports pagination and sorting to efficiently retrieve the list of these direct device interaction sessions.", "summary": "Gets a list of CLI Jos/Sessions", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/CliJobs"}}}}, "description": ""}}, "additional_info": "The `items_per_page` and `page` query parameters are mandatory for pagination, allowing clients to control the number of results per page and navigate through the dataset. The `reverse` and `sort` query parameters provide flexibility in ordering the returned list of CLI jobs, with `sort` defining the key for sorting and `reverse` specifying the sorting order (ascending or descending). This API is crucial for monitoring and auditing direct device command executions managed through the NCCM application."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Auditor", "Network Engineer", "System Administrator"], "primary_use_case": "This API allows users to retrieve a paginated and sortable list of Command Line Interface (CLI) Job/Sessions within the current organization. This enables monitoring and auditing of direct device interactions, facilitating tasks such as network configuration, diagnostics, and software updates on network devices through SSH or TELNET sessions."}, "content_for_embedding": "This GET endpoint, `/ux/nccm/cli_jobs/`, provides a comprehensive, paginated, and sortable list of CLI Job/Sessions managed by the NCCM application. These sessions enable direct command-line interaction (SSH or TELNET) with network devices for configuration, diagnostics, and software updates. It is a privilege-based feature, allowing users to request and manage CLI connections by specifying device IP addresses and other details. The API supports pagination via `items_per_page` and `page` parameters, and sorting using `reverse` and `sort` parameters. This endpoint is crucial for monitoring and auditing direct device command executions within the NCCM environment.", "semantic_keywords": ["NCCM", "CLI Jobs", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "cli_session_initiation", "configuration_download_jobs", "asset_search_and_filtering"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/cli_jobs/", "method": "POST", "details": {"operationId": "ux_nccm_cli_jobs_create", "description": "This API endpoint facilitates the creation and management of CLI Jobs within the NCCM (Network Change & Configuration Management) application. CLI Jobs establish direct CLI sessions (SSH or Telnet) between network devices and users, allowing users to execute commands on devices similarly to a PuTTY application. The endpoint enables administrators or privileged users to request CLI connections by providing the device IP address, device account username (for SSH), and the reason for connection. Depending on the user's role (administrator privileged, CLI whitelisted, or normal user), the CLI job will either open a direct connection or queue the request for change approval. All device commands and responses are audited. While the original description mentioned 'users to be viewed or edited,' the specific context strongly indicates a focus on CLI Job creation and interaction for network device management.", "tags": ["CLI Download Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CliJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various document types, as detailed by the `request_body_description`. It supports a wide range of primitive fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others, mapping them to corresponding Dragon Rest Framework (DRF) fields. Compound fields like `ListField` and `DictField` are also supported with respect to nested field specifications. `ReferenceField` and `EmbeddedDocumentField` generate nested serializers based on the serializer depth, with `ReferenceField` defaulting to `str(id)` for zero depth. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own corresponding serializer fields.\n\nUsage Notes:\n*   **User Privilege:** The functionality of this endpoint is privilege-based. User roles (administrator, CLI whitelisted, or normal user) determine how CLI job requests are processed (direct connection vs. approval queue).\n*   **Auditing:** All commands executed through a CLI Job and their corresponding device responses are audited.\n*   **Command Restrictions:** NCCM does not impose command restrictions for policy violations directly at the time of execution; instead, the NCCM Policy engine periodically remediates policy violation commands.\n*   **Untested Fields:** `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, and their use may not yield expected results. Other unspecified fields will map to `DocumentField` and may work incorrectly.\n*   **Common Use Case:** Commonly used by network administrators to directly interact with network devices for troubleshooting, configuration changes, or monitoring, with an audit trail."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Privileged users", "Network technicians"], "primary_use_case": "To enable network administrators and privileged users to securely initiate and manage direct Command Line Interface (CLI) sessions (SSH or Telnet) to network devices for executing commands, troubleshooting, configuration changes, and monitoring, with comprehensive auditing and role-based access control, including an approval workflow for non-privileged users."}, "content_for_embedding": "This API endpoint facilitates the creation and management of CLI Jobs within the NCCM (Network Change & Configuration Management) application. It allows users to establish direct CLI sessions (SSH or Telnet) with network devices, enabling them to execute commands similar to a PuTTY application. Users request a CLI connection by providing the device IP address, device account username (for SSH), and the reason for connection. The system enforces privilege-based access control: administrators or privileged users can initiate direct connections, while normal users or technicians may require change approval via a request queue. All device commands and responses executed through a CLI Job are comprehensively audited for compliance and security. The API supports various request body field types and is commonly used by network administrators for direct interaction with network devices for troubleshooting, configuration changes, and monitoring, with an audit trail.", "ontology_classification": {"features": ["centralized_management", "network_configuration_and_change_management", "privilege-based_access_control", "cli_session_initiation", "audit_log", "roles_&_privileges_management", "approval_workflow", "nccm_reports_(configuration_download_&_jobs_account_audit)"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CLI Jobs", "Network Configuration", "Privilege-based Access"]}}, {"path": "/ux/nccm/cli_jobs/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_retrieve", "description": "This endpoint allows users to retrieve details for a specific Network Change and Configuration Management (NCCM) CLI job. CLI jobs in NCCM facilitate direct CLI sessions (SSH or Telnet) between a user and a network device, similar to using applications like PuTTY. This API enables viewing of an individual CLI job's configuration and status, utilizing its unique identifier.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier for the CLI job to be viewed. CLI jobs record direct user commands and device responses. Depending on the user's role (e.g., administrator privileged, CLI whitelisted, or normal user), a CLI job might open a direct connection or enter a Change Approval process. This feature is privilege-based, meaning user access, viewing, adding, editing, and deleting capabilities are controlled by assigned permissions within NCCM."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Privileged Users"], "primary_use_case": "To retrieve details and monitor the status and configuration of specific Network Change and Configuration Management (NCCM) CLI jobs, which facilitate direct CLI sessions with network devices."}, "content_for_embedding": "This API allows users to retrieve comprehensive details for a specific Network Change and Configuration Management (NCCM) CLI job using its unique identifier. CLI jobs enable direct command-line interface sessions (SSH or Telnet) between a user and a network device, similar to tools like PuTTY. The retrieved information includes the job's configuration, status, and audited commands/responses. Access to this feature is privilege-based, controlled by user roles and permissions within NCCM.", "semantic_keywords": ["CLI Jobs", "NCCM", "Details retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "cli_session_initiation", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/cli_jobs/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_cli_jobs_update", "description": "This API endpoint allows for the viewing and editing of specific CLI (Command Line Interface) jobs within the NCCM (Network Change & Configuration Management) application. CLI Jobs facilitate direct SSH or TELNET sessions between a device and a user, enabling users to execute direct commands on devices, similar to a PuTTY application. The endpoint supports detailed management of these job instances.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CLI Download Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CliJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is required and represents the unique identifier for a specific CLI job. When editing a CLI job, the request body should conform to the serializer for 'Documents'. This serializer recognizes various primitive fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `UUIDField`, along with compound fields such as `ListField` and `DictField`. Special handling is provided for `ReferenceField` and `EmbeddedDocumentField`, with nested serializers autogenerated for non-zero depth. CLI jobs are a privilege-based feature, meaning user roles (administrator, CLI whitelisted, or normal user) determine access and behavior, including whether a direct connection is opened or a request is placed in a change approval queue. All device user commands and responses are audited. Other fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "CLI whitelisted user", "normal user"], "primary_use_case": "To enable the viewing and editing of specific CLI (Command Line Interface) jobs for direct command execution on network devices within the NCCM application."}, "content_for_embedding": "This API endpoint allows for the viewing and editing of specific CLI (Command Line Interface) jobs within the NCCM (Network Change & Configuration Management) application. CLI Jobs facilitate direct SSH or TELNET sessions between a device and a user, enabling users to execute direct commands on devices, similar to a PuTTY application. The endpoint supports detailed management of these job instances. The `id` path parameter is required and represents the unique identifier for a specific CLI job. When editing a CLI job, the request body should conform to the serializer for 'Documents'. This is a privilege-based feature, meaning user roles (administrator, CLI whitelisted, or normal user) determine access and behavior, including whether a direct connection is opened or a request is placed in a change approval queue. All device user commands and responses are audited.", "semantic_keywords": ["CLI Jobs", "Update", "Configuration Download Jobs"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "cli_session_initiation", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/cli_jobs/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_cli_jobs_destroy", "description": "This API endpoint allows for the deletion of a specific CLI Job entry in NCCM. CLI Jobs facilitate direct command-line interface (CLI) sessions, such as SSH or Telnet, between a device and a user via the NCCM application, enabling users to execute commands similar to PuTTY. This endpoint is part of a privilege-based feature where users can access, view, add, edit, and delete CLI Jobs, managing these direct sessions.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the CLI Job to be deleted. CLI Jobs are crucial for direct device interaction, and their deletion should be handled with care. The NCCM Policy engine periodically remediates policy violation commands, even though the NCCM itself does not provide command restrictions in case of policy violations during a CLI session. This API allows for the management of these sessions by enabling their removal, which is a privilege-based action."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "IT Operations Staff"], "primary_use_case": "To manage and delete direct command-line interface (CLI) sessions to network devices within the NCCM application."}, "content_for_embedding": "This API endpoint allows for the deletion of a specific CLI Job entry in the Network Configuration and Change Management (NCCM) application. CLI Jobs facilitate direct command-line interface (CLI) sessions, such as SSH or Telnet, between a device and a user via NCCM, enabling users to execute commands similar to PuTTY. This is a privilege-based feature where users can access, view, add, edit, and delete CLI Jobs, managing these direct sessions. The deletion requires a unique CLI Job ID. CLI Jobs are crucial for direct device interaction, and their removal should be handled with care.", "semantic_keywords": ["CLI Jobs", "Delete", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/cli_jobs/approval-default-data/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_approval_default_data_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer"], "primary_use_case": "To retrieve default approval data for CLI download jobs, with a focus on user-related information and privilege-based access."}, "content_for_embedding": "This API retrieves default approval data for CLI download jobs within the Network Configuration and Change Management (NCCM) module. It provides information that allows users to be viewed or edited, and access is controlled by defined roles and privileges.", "ontology_classification": {"features": ["privilege-based_access_control", "download_job_management", "network_configuration_and_change_management", "user_management", "roles_&_privileges_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CLI Jobs", "User Management", "Privilege-based Access"]}}, {"path": "/ux/nccm/cli_jobs/approve/", "method": "POST", "details": {"operationId": "ux_nccm_cli_jobs_approve_create", "description": "This endpoint is used to update the approval status of the CLI Job for the current organization", "summary": "Update the CLI Job Approval Status", "tags": ["CLI Download Jobs"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CLIJobApprovalStatus": {"value": {"job_id": "CLIJOBxxxx", "organization": "13113501882xxxxxxxxxx", "approval_status": "Approved/Rejected", "approved_by": "xyz@gmail.com"}, "summary": "CLI Job Approval Status"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "parameters": [{"name": "job_id", "in": "body", "description": "Inferred parameter: job_id", "required": true, "schema": {"type": "string"}}, {"name": "organization", "in": "body", "description": "Inferred parameter: organization", "required": true, "schema": {"type": "string"}}, {"name": "approval_status", "in": "body", "description": "Inferred parameter: approval_status", "required": true, "schema": {"type": "string"}}, {"name": "approved_by", "in": "body", "description": "Inferred parameter: approved_by", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Manager"], "primary_use_case": "To manage and update the approval status of Command Line Interface (CLI) jobs within an organization."}, "content_for_embedding": "This API updates the approval status of Command Line Interface (CLI) jobs. It allows users to approve or reject a specific CLI job for an organization, identified by `job_id` and `organization`. The `approval_status` can be 'Approved' or 'Rejected', and the `approved_by` field records the user who performed the action. This is crucial for managing and tracking CLI job workflows and ensuring proper authorization.", "ontology_classification": {"features": ["download_job_management", "privilege-based_access_control", "download_job_status_drill-down"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CLI Jobs", "Approval Workflow", "Status"]}}, {"path": "/ux/nccm/cli_jobs/cli-file-remove/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_cli_file_remove_retrieve", "description": "This API endpoint facilitates the management and interaction with CLI Jobs within the NCCM application. CLI Jobs allow users to establish direct CLI sessions (SSH or TELNET) between a device and the user, enabling the execution of direct commands on devices similar to applications like PuTTY. This specific endpoint is designed to allow users to view or edit aspects related to these CLI operations, particularly concerning file removal operations (e.g., related to CLI-generated files or scripts). It integrates with NCCM's command auditing and policy engines, although it does not inherently restrict commands for policy violations but rather audits them for later remediation. Access to this functionality is privilege-based, meaning users can view or edit only if they have been granted the necessary permissions by an administrator.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "As a 'GET' method for '/ux/nccm/cli_jobs/cli-file-remove/', this endpoint is likely used to retrieve information about files that can be removed, or to prepare for a file removal operation within the CLI Jobs context. Although the API specification states 'allows users to be viewed or edited,' the path '/cli-file-remove/' strongly suggests its purpose is more specific to file management within CLI jobs, rather than general user management. It is important to note that the CLI Job functionality is privilege-based; users must have explicit administrative privileges to access, view, or edit these operations. CLI Jobs audit all device user commands and responses. While NCCM's policy engine remediates policy violations periodically, direct command restrictions are not provided at the point of execution through CLI Jobs. Whitelisted users might have pre-approved CLI operations, bypassing the change approval process."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Privileged User"], "primary_use_case": "To manage and retrieve information about CLI-generated files for removal within the NCCM application, specifically for privileged users."}, "content_for_embedding": "This API endpoint is a GET request for /ux/nccm/cli_jobs/cli-file-remove/, designed to retrieve information related to file removal operations within NCCM's CLI Jobs functionality. CLI Jobs enable direct CLI sessions (SSH/TELNET) to network devices for executing commands, similar to PuTTY. This specific endpoint focuses on viewing or preparing for the removal of CLI-generated files or scripts. It integrates with NCCM's auditing and policy engines, auditing commands for later remediation rather than direct restriction. Access is privilege-based, requiring explicit administrative permissions. It is used by administrators and privileged users to manage files associated with CLI operations on network devices.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "download_job_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["CLI Jobs", "Privilege-based Access", "Download Job Management"]}}, {"path": "/ux/nccm/cli_jobs/cli-session/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_cli_session_retrieve", "description": "This API endpoint provides an interface to manage CLI (Command Line Interface) sessions within the NCCM (Network Change and Configuration Management) application. It facilitates the viewing and editing of direct CLI sessions (SSH or TELNET) established between network devices and users, similar to how a PuTTY application works. Users can initiate CLI connections by providing the Device IP Address, device account username (for SSH), and a reason for the connection. The endpoint supports functionalities to audit all device user commands and their responses, ensuring comprehensive session management.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "Usage Note: The behavior of a CLI job, whether it opens a direct connection or queues the request for change approval, is determined by the user's role (administrator privileged, CLI whitelisted, or normal user). While this API allows viewing and editing, NCCM itself does not provide command restrictions in case of policy violations; the NCCM Policy engine remediates such violations periodically. This is a privilege-based feature, meaning user access to view, add, edit, or delete CLI session-related data is governed by their profile. This endpoint is commonly used for managing direct command execution on network devices and for auditing purposes."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Technicians", "Network Engineers", "Users (with varying privilege levels)"], "primary_use_case": "Managing and auditing direct CLI sessions (SSH/TELNET) to network devices for configuration, diagnostics, and troubleshooting within the NCCM application."}, "content_for_embedding": "This API endpoint facilitates the management of direct Command Line Interface (CLI) sessions (SSH or TELNET) to network devices within the Network Change and Configuration Management (NCCM) application. It enables users to initiate CLI connections by providing device details, execute commands, and comprehensively audit all device user commands and their responses. Access and session behavior are determined by user roles and privileges, supporting direct connections or routing requests for change approval. The API is crucial for direct command execution, configuration, diagnostics, troubleshooting, and auditing purposes on network devices.", "semantic_keywords": ["CLI Jobs", "Configuration Management", "Audit"], "ontology_classification": {"features": ["centralized_management", "network_configuration_and_change_management", "privilege-based_access_control", "cli_session_initiation", "configuration_download_jobs", "user_access_auditing", "nccm_reports_(configuration_download_&_jobs_account_audit)", "audit_log", "roles_&_privileges_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/cli_jobs/cli-url/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_cli_url_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Manager", "Network Engineer"], "primary_use_case": "To manage user access and privileges within the NCCM module, specifically for CLI download jobs, by allowing administrators to view and potentially edit user permissions related to these operations."}, "content_for_embedding": "This GET API retrieves information about users, potentially allowing for their viewing and editing, within the context of NCCM CLI download jobs. It is a privilege-based feature, meaning access to view or modify user details, roles, and privileges related to CLI jobs is controlled by administrator-assigned permissions. This API is crucial for overseeing and managing user access and roles for CLI operations.", "ontology_classification": {"features": ["privilege-based_access_control", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["User Management", "Roles & Privileges", "CLI Jobs"]}}, {"path": "/ux/nccm/cli_jobs/cli_kill_session/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_cli_kill_session_retrieve", "description": "This API endpoint facilitates the termination of active CLI sessions within the Network Configuration and Change Management (NCCM) application. CLI sessions (SSH or TELNET) enable users to directly enter commands on devices, similar to a PuTTY application. This endpoint specifically targets and kills an ongoing session, which is crucial for managing device access and enforcing security policies, especially when unauthorized actions are detected or when a session needs to be forcibly closed.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "CLI Jobs/sessions in NCCM create direct CLI sessions between the Device and the User through the NCCM application. These sessions are privilege-based, meaning user roles (e.g., administrator privileged, CLI whitelisted, or normal user) determine access. The kill session functionality is implied to be part of the broader CLI Jobs management, which also includes auditing device user commands and potentially remediating policy violations. Although no specific parameters are listed in the provided API spec, typical usage would likely involve identifying the session to be killed (e.g., by session ID, device IP, or user details). This aligns with NCCM's capabilities to block, notify, and terminate actions for security enforcement."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Security Personnel"], "primary_use_case": "To terminate active CLI sessions within the Network Configuration and Change Management (NCCM) application, enabling administrators to manage device access, enforce security policies, and respond to unauthorized or unresponsive sessions."}, "content_for_embedding": "This API terminates active CLI sessions (SSH or TELNET) within the Network Configuration and Change Management (NCCM) application. It allows administrators to kill ongoing sessions on network devices, crucial for managing device access, enforcing security policies, and responding to unauthorized or unresponsive sessions. The functionality is part of broader CLI Jobs management, including auditing and policy enforcement, and sessions are privilege-based. Sessions can be identified by ID, device IP, or user details.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CLI Jobs", "NCCM", "Terminate Session"]}}, {"path": "/ux/nccm/cli_jobs/download-clisession-audit/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_download_clisession_audit_retrieve", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Auditor"], "primary_use_case": "To provide administrators and auditors with historical audit logs of CLI session downloads for compliance, security, and troubleshooting within network configuration management."}, "content_for_embedding": "This API retrieves audit logs for CLI session downloads within the Network Configuration Change Management (NCCM) system. It provides historical data on CLI job activities, enabling administrators and auditors to review and track these operations for security, compliance, and troubleshooting purposes.", "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "report_export_capabilities", "real-time_and_historical_reporting", "granular_data_filtering"], "primary_module": "report", "confidence_score": 1}, "semantic_keywords": ["Download", "Audit", "CLI Jobs"]}}, {"path": "/ux/nccm/cli_jobs/kill-active-sessions/", "method": "POST", "details": {"operationId": "ux_nccm_cli_jobs_kill_active_sessions_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["CLI Download Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/CliJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations"], "primary_use_case": "To allow authorized users, typically network administrators, to terminate active CLI sessions on network devices for operational control, troubleshooting, or security purposes."}, "content_for_embedding": "This API endpoint is used to terminate active Command Line Interface (CLI) sessions associated with network devices. It falls under the Network Configuration and Change Management (NCCM) module, specifically for managing CLI jobs. This functionality is crucial for administrators to control ongoing network operations, resolve issues by ending unresponsive sessions, or enforce security policies by disconnecting unauthorized access. Access to this feature is privilege-based, ensuring only authorized personnel can perform such critical actions.", "ontology_classification": {"features": ["download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Terminate Session", "CLI Jobs", "NCCM"]}}, {"path": "/ux/nccm/cli_jobs/options/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_options_retrieve", "description": "This API endpoint provides options related to CLI Jobs within the NCCM (Network Change & Configuration Management) application. CLI Jobs allow direct CLI sessions (SSH or TELNET) between a device and a user, similar to the functionality of PuTTY, enabling users to execute direct commands on network devices. This endpoint might be used to retrieve available options or configurations pertinent to setting up or managing these CLI sessions.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "CLI Jobs are a core feature of NCCM, facilitating direct device interaction for authorized users. The NCCM module manages user access to various network change and configuration functionalities, including CLI Jobs. While the API specification mentions 'users to be viewed or edited,' the context strongly suggests this endpoint is specifically tied to the 'options' or parameters governing 'CLI Jobs,' rather than general user management. This could include profile names, descriptions, or choices for blacklisting/whitelisting related to CLI connection requests."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "To retrieve available options and configurations for setting up and managing direct CLI sessions (SSH/TELNET) on network devices within the NCCM application."}, "content_for_embedding": "This API endpoint allows for the retrieval of options and configurations pertinent to CLI Jobs within the NCCM (Network Change & Configuration Management) application. CLI Jobs facilitate direct CLI sessions (SSH or TELNET) between a device and a user, enabling the execution of direct commands on network devices, similar to PuTTY functionality. This includes obtaining details such as profile names, descriptions, and choices for blacklisting/whitelisting related to CLI connection requests. CLI Jobs are a core feature of NCCM, managing user access to network change and configuration functionalities and are privilege-based, requiring specific permissions for access and operation.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "cli_session_initiation", "software_blacklist_&_whitelist", "device_credential_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CLI Jobs", "NCCM", "Configuration Options"]}}, {"path": "/ux/nccm/cli_jobs/tail-audits/", "method": "GET", "details": {"operationId": "ux_nccm_cli_jobs_tail_audits_retrieve", "description": "This API endpoint provides real-time access to and allows tailing of audit logs specifically related to CLI (Command Line Interface) jobs within NCCM. It captures and displays detailed activity logs of device user commands and their responses, offering critical oversight for security and compliance. This feature is privilege-based, meaning access is restricted to users with appropriate roles (administrator, privileged, or whitelisted CLI users). The endpoint facilitates auditing of CLI job executions, enabling administrators to identify changes, the responsible user, and the time of the change. It is distinct from other reports focusing on configuration downloads, specifically targeting the interactive CLI sessions and device command audits.", "tags": ["CLI Download Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CliJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The CLI Job 'tail-audits' functionality monitors all device user commands and responses, even though NCCM's policy engine handles command restrictions and remediates policy violations periodically. The system tracks all activities performed in the terminal during CLI sessions and makes these logs accessible. This allows for live monitoring of the download audit log without needing a manual refresh. Access to this feature requires a privilege-based role. The API endpoint does not currently detail specific query parameters for filtering audits, but typical use cases would involve monitoring ongoing CLI sessions or reviewing recent command executions."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "privileged user", "whitelisted CLI user"], "primary_use_case": "To provide real-time access and live tailing of audit logs for CLI (Command Line Interface) jobs within NCCM, enabling administrators and privileged users to monitor device user commands and responses for security and compliance purposes."}, "content_for_embedding": "This API provides real-time access to and live tailing of audit logs specifically for CLI (Command Line Interface) jobs within NCCM. It captures and displays detailed activity logs of device user commands and their responses, offering critical oversight for security and compliance. This feature is privilege-based, allowing administrators and other authorized users to monitor ongoing CLI sessions and review recent command executions without manual refresh.", "semantic_keywords": ["CLI Jobs", "Audit", "Live Streaming"], "ontology_classification": {"features": ["nccm.privilege-based_access_control", "report.nccm_reports_(configuration_download_&_jobs_account_audit)", "log_management.live_streaming_(log_stream)", "infraon_configuration.audit_log"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration-profile/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_profile_list", "description": "This endpoint retrieves a paginated list of all configuration profiles defined within the current organization. Configuration profiles are templates or predefined sets of configuration settings that network administrators create and customize. These profiles include critical information such as device details and connection protocols (e.g., SSH, Telnet). They are fundamental to NCCM operations, used by features like Configuration Download Jobs to manage configurations, inventories, and operational data, and are automatically found by NCCM during device discovery to apply the correct profile for each device.", "summary": "Gets a list of configuration profile", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Configuration Profiles"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination and sorting to manage the retrieved list of configuration profiles. Parameters include:\n- `items_per_page` (required integer): Defines the number of configuration profiles to return per page.\n- `page` (required integer): Specifies the page number to retrieve.\n- `reverse` (optional boolean): Controls the sorting order. If set to true, the results will be sorted in descending order based on the `sort` key.\n- `sort` (optional string): Specifies the key by which the results should be sorted (e.g., a profile name or creation date). \n\nConfiguration profiles are crucial for tasks such as OS Image Download and Upgrade, and serve as templates for various NCCM operations, enabling administrators to standardize network settings, security policies, access controls, and performance configurations across devices."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Integrator"], "primary_use_case": "To retrieve a paginated and sortable list of network configuration profiles, which serve as templates for standardizing network settings, managing device configurations, and supporting NCCM operations like Configuration Download Jobs."}, "content_for_embedding": "This API endpoint allows for the retrieval of a paginated and sortable list of all configuration profiles within an organization. These profiles are essential templates containing device details and connection protocols (e.g., SSH, Telnet), crucial for Network Configuration and Change Management (NCCM) operations. They are utilized by features such as Configuration Download Jobs for managing configurations, inventories, and operational data, and are automatically applied during device discovery. The endpoint supports pagination via `items_per_page` and `page` parameters, and sorting using `reverse` and `sort` parameters. Configuration profiles are fundamental for tasks like OS Image Download and Upgrade, enabling administrators to standardize network settings, security policies, access controls, and performance configurations across devices.", "semantic_keywords": ["Configuration Profiles", "NCCM", "Retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/configuration-profile/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_profile_create", "description": "This endpoint enables the creation of a new configuration profile within the NCCM (Network Change & Configuration Management) application. A configuration profile serves as a template or a predefined set of configuration settings crucial for network device management. These profiles are used by the Configuration Download Job to retrieve Configurations, Inventories, and Operational Data from network devices. Network administrators create and customize these profiles with information such as device details and connection protocols (like SSH or Telnet) to streamline configuration management, facilitate OS image downloads/upgrades, and support various automation tasks.", "summary": "Creates a new configuration profile", "tags": ["Configuration Profiles"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateConfigurationProfileSample": {"value": {"profile_name": "", "description": "", "vendor": "", "os_type": "", "series": "", "connection": "", "config_download": "", "config_upload": "", "os_download": "", "os_upload": "", "operational_data": "", "other_configuration": "", "syslog": "", "comment": "", "is_deleted": ""}, "summary": "Create configuration profile Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "Configuration profiles are central to NCCM's functionality, acting as a critical component that NCCM can automatically discover and associate with devices. This API is essential for establishing these foundational templates, which can be further utilized for tasks like Configuration Search (focusing on download jobs for startup or running configurations) and to govern CLI access to devices. The request body for this POST operation is expected to define various aspects of the profile, including `profile_name`, `description`, `vendor`, `os_type`, `connection` details, and paths for `config_download`, `config_upload`, `os_download`, `os_upload`, among others, as indicated by the example usage. While the `is_deleted` field is present in the example, it's typically managed internally rather than set during creation. This endpoint is distinct from different template types like Command Execution or HTTP REST-API Configuration, focusing specifically on establishing a device configuration template.", "parameters": [{"name": "profile_name", "in": "body", "description": "Inferred parameter: profile_name", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "vendor", "in": "body", "description": "Inferred parameter: vendor", "required": true, "schema": {"type": "string"}}, {"name": "os_type", "in": "body", "description": "Inferred parameter: os_type", "required": true, "schema": {"type": "string"}}, {"name": "series", "in": "body", "description": "Inferred parameter: series", "required": true, "schema": {"type": "string"}}, {"name": "connection", "in": "body", "description": "Inferred parameter: connection", "required": true, "schema": {"type": "string"}}, {"name": "config_download", "in": "body", "description": "Inferred parameter: config_download", "required": true, "schema": {"type": "string"}}, {"name": "config_upload", "in": "body", "description": "Inferred parameter: config_upload", "required": true, "schema": {"type": "string"}}, {"name": "os_download", "in": "body", "description": "Inferred parameter: os_download", "required": true, "schema": {"type": "string"}}, {"name": "os_upload", "in": "body", "description": "Inferred parameter: os_upload", "required": true, "schema": {"type": "string"}}, {"name": "operational_data", "in": "body", "description": "Inferred parameter: operational_data", "required": true, "schema": {"type": "string"}}, {"name": "other_configuration", "in": "body", "description": "Inferred parameter: other_configuration", "required": true, "schema": {"type": "string"}}, {"name": "syslog", "in": "body", "description": "Inferred parameter: syslog", "required": true, "schema": {"type": "string"}}, {"name": "comment", "in": "body", "description": "Inferred parameter: comment", "required": true, "schema": {"type": "string"}}, {"name": "is_deleted", "in": "body", "description": "Inferred parameter: is_deleted", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT Operations", "DevOps Engineers"], "primary_use_case": "Streamlining network device configuration and management through the creation of reusable configuration profiles."}, "content_for_embedding": "This API creates new configuration profiles within the Network Change & Configuration Management (NCCM) application. These profiles act as templates for network device settings, enabling streamlined configuration management, automated configuration downloads, OS image management, and various automation tasks. It supports defining device details, connection protocols (SSH/Telnet), and paths for configuration and OS downloads/uploads. This is a foundational API for managing network device configurations.", "semantic_keywords": ["Configuration Profiles", "NCCM", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "network_configuration_management_(nccm)"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration-profile/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_profile_retrieve", "description": "This endpoint retrieves the detailed information of a specific configuration profile within the current organization, identified by its unique ID. A configuration profile is a template or predefined set of configuration settings used by network administrators. These profiles are crucial for various NCCM functions, including Configuration Download Jobs to manage configurations, inventories, and operational data, OS Image Download and Upgrade, Configuration Triggers, and Policy Rule/Remedy Execution. They typically include details like device information and connection protocols (e.g., SSH, Telnet). This feature is privilege-based, ensuring that users can only access or modify profiles based on their assigned permissions.", "summary": "Gets a configuration profile details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Profiles"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the configuration profile to be retrieved. Configuration profiles are central to automating network management tasks and ensuring consistency across devices. During device discovery, NCCM can automatically find the appropriate profile for each device. They allow administrators to create and customize settings for Network Configuration and Change Management (NCCM) operations. This API is essential for understanding the specific settings and parameters defined within a configuration profile before it is applied or modified in the network infrastructure."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "Developer"], "primary_use_case": "This API allows network administrators and IT operations personnel to retrieve detailed information about specific configuration profiles, which are essential templates for managing network devices and automating NCCM functions like configuration downloads, OS upgrades, and policy execution. It enables users to understand the precise settings of a profile before applying or modifying it within the network infrastructure."}, "content_for_embedding": "This API retrieves comprehensive details of a specific configuration profile identified by its unique ID. Configuration profiles are predefined sets of network configuration settings used in Network Configuration and Change Management (NCCM) operations, including configuration download jobs, OS image upgrades, and policy rule execution. The retrieved information includes device details and connection protocols, providing critical insights for automating network management tasks and ensuring consistency across devices. Access to this feature is privilege-based.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "Configuration retrieval", "Network Configuration"]}}, {"path": "/ux/nccm/configuration-profile/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_configuration_profile_update", "description": "This endpoint allows network administrators to modify an existing configuration profile identified by its unique ID. Configuration profiles are critical templates that define predefined sets of configuration settings, including device details and connection protocols for SSH and Telnet. They are used by various NCCM (Network Change & Configuration Management) functions, such as Configuration Download Jobs, to download configurations, inventories, and operational data. Users can customize these profiles to manage how network devices are accessed and configured, especially for tasks like OS image download and upgrade and policy rule execution.", "summary": "Edits the configuration profile with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Profiles"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "additional_info": "The `id` path parameter is essential and must be a string representing the unique identifier of the configuration profile to be edited. The request body is expected to contain the updated configuration profile data. The API supports various primitive and compound field types for the request body, including `StringField`, `IntField`, `BooleanField`, `ListField`, and `DictField`. While `ReferenceField` and `EmbeddedDocumentField` are handled, fields like `FileField`, `ImageField`, and `BinaryField` are not well supported or tested. This endpoint is a privilege-based feature, meaning user access levels and permissions, often defined by authorization profiles, dictate whether they can modify network configuration parameters. NCCM will automatically find the right profile for each device during discovery, but this endpoint provides direct control over editing these profiles."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Users with appropriate privileges"], "primary_use_case": "To enable network administrators to modify existing network configuration profiles, which are templates defining device settings and connection protocols for network devices, used by NCCM functions like Configuration Download Jobs."}, "content_for_embedding": "This API allows network administrators to update or modify an existing network configuration profile identified by a unique ID. These profiles are crucial templates containing device details and connection protocols (SSH/Telnet) used by NCCM functions like Configuration Download Jobs for managing network devices, including OS image downloads and policy rule execution. The endpoint supports various data types for the request body and is a privilege-based feature, requiring specific user access levels.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "Network Configuration", "Edit"]}}, {"path": "/ux/nccm/configuration-profile/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_configuration_profile_destroy", "description": "This endpoint is used to delete an existing configuration profile for the current organization. Configuration Profiles are critical templates used by the NCCM Application for various operations, including Configuration Download Jobs (to download Configurations, Inventories, and Operation Data), OS Image Download and Upgrades, Configuration Triggers, Policy Rule and Remedy Execution, and providing direct CLI (SSH or Telnet) access to devices. Deleting a profile will remove its associated settings and prevent its future use in these processes.", "summary": "Deletes the configuration profile with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Profiles"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter identifies the specific configuration profile to be deleted. It is important to note that a Configuration Profile cannot be deleted if it is currently associated with an active download job. Users should confirm the deletion action, as this operation permanently removes the profile from the system. This is a privilege-based feature, meaning specific user permissions are required to perform this action."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "To enable network administrators to delete existing configuration profiles within the NCCM application, which are essential for various network operations like configuration download jobs and CLI access. This ensures proper management and removal of outdated or unused profiles."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a specific configuration profile identified by its unique ID within the NCCM application. Configuration profiles are critical templates used for various network operations, including configuration download jobs, OS image downloads and upgrades, configuration triggers, policy rule and remedy execution, and providing direct CLI access to devices. Deleting a profile removes its associated settings and prevents its future use. This operation is privilege-based, requiring specific user permissions, and a profile cannot be deleted if it is currently associated with an active download job. Users must confirm the deletion action.", "semantic_keywords": ["Delete", "Configuration Profiles", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration-profile/check-profile-config/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_profile_check_profile_config_retrieve", "description": "This API endpoint facilitates the checking of a configuration profile within the NCCM (Network Change & Configuration Management) application. It allows users to view an existing configuration profile and is crucial for managing user access to functionalities related to network changes and configurations. This includes defining access levels and permissions for network devices, ensuring only authorized users can execute commands or modify configurations, and aligns with the AAA (Authentication, Authorization, and Accounting) security framework by enforcing security policies. Users can view profile names, status (Active/Inactive), and associated descriptions.", "tags": ["Configuration Profiles"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is primarily for viewing existing configuration profiles. While the original description mentioned 'viewed or edited,' the context strongly indicates a focus on 'viewing' system-defined and user-created configuration or authorization profiles. It is particularly useful for understanding the details of how policies are applied, including default access policies when no specific profile is assigned. The NCCM system can apply default authorization profiles and displays profile names (e.g., 'Network_Admins_Profile'), status ('Active' or 'Inactive'), and descriptions (e.g., 'Admin profile for core routers')."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Administrators", "IT Operations Staff"], "primary_use_case": "This API allows users to view and check existing configuration profiles within the NCCM application, crucial for managing user access, defining access levels, and enforcing security policies for network devices."}, "content_for_embedding": "This API endpoint is designed for checking and viewing existing configuration profiles within the Network Change & Configuration Management (NCCM) application. It enables users to retrieve details such as profile names, status (Active/Inactive), and associated descriptions. The endpoint is vital for managing user access, defining access levels, and enforcing security policies (AAA framework) for network devices, ensuring only authorized users can execute commands or modify configurations. It focuses on viewing system-defined and user-created configuration or authorization profiles and understanding how policies are applied.", "semantic_keywords": ["Configuration Profiles", "NCCM", "Configuration retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration-profile/create-csv/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_profile_create_csv_create", "description": "This API endpoint facilitates the creation of a CSV file for configuration profiles within the Network Change & Configuration Management (NCCM) module. It is integral for managing user access to network changes and configurations, including functionalities related to baseline scheduling and configuration download jobs. The endpoint is designed to process document information, recognizing various primitive and compound fields such as StringField, URLField, EmailField, IntField, ListField, and DictField, enabling flexible data input for profile creation. This allows for the definition of configuration profiles, potentially including details like profile names and descriptions, which are crucial for organizing and applying network settings.", "tags": ["Configuration Profiles"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the supported data types that can be included in the document used to create the CSV. Developers should note the comprehensive list of recognized primitive fields (e.g., `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `UUIDField`) and compound fields (`ListField`, `DictField`). Special handling for `ReferenceField`, `EmbeddedDocumentField`, `GenericReferenceField`, and `GenericEmbeddedDocumentField` is also outlined. It is critical to be aware of the fields that are 'not well supported or untested' including `FileField`, `ImageField`, and `BinaryField`, as mapping these to `DocumentField` might lead to unexpected behavior. This API would typically be used by administrators to export pre-defined configuration profile data, which can then be imported or analyzed elsewhere to manage network settings more efficiently, aligning with privilege-based features as mentioned in the NCCM context."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "network administrator"], "primary_use_case": "This API allows administrators to export network configuration profiles into a CSV file for efficient management, analysis, or import into other systems. It facilitates the management of network changes and configurations by providing a structured export of profile data."}, "content_for_embedding": "This API endpoint is designed to create and export configuration profiles as a CSV file within the Network Change & Configuration Management (NCCM) module. It supports various data types for defining configuration profiles, including details like profile names and descriptions. This functionality is crucial for managing user access to network changes, configurations, baseline scheduling, and configuration download jobs. It is primarily used by administrators to export pre-defined configuration profile data for further analysis or import, aligning with privilege-based features for efficient network setting management.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "report_export_capabilities"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Profiles", "CSV Export", "NCCM"]}}, {"path": "/ux/nccm/configuration-profile/csv_cols/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_profile_csv_cols_create", "description": "This POST endpoint is part of the NCCM (Network Change & Configuration Management) module and is used to handle CSV columns related to configuration profiles. While the original description broadly stated it allows users to be viewed or edited, the context strongly suggests its function is related to the processing and manipulation of configuration profiles, specifically in the context of import or export operations involving CSV data. It likely supports defining or parsing column structures for importing/exporting configuration profiles, potentially for managing network device configurations, baselines, and parameter definitions. The endpoint handles various primitive and compound field types as described in the request body, allowing for flexible data structuring within the CSV columns.", "tags": ["Configuration Profiles"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the supported primitive and compound field types for document serialization, which is crucial for understanding how the CSV column data should be structured. This supports fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. `ReferenceField` and `EmbeddedDocumentField` are also supported with specific handling for nested serialization based on depth. Developers should pay close attention to the mapping of Python types to the serializable fields and note that fields like `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested. Given the context of 'Profile Import' and 'Profile Export' from the guide documents, this endpoint likely plays a role in defining the structure for such operations, rather than directly managing user permissions. It is part of the broader NCCM capabilities for managing network configurations, and the `csv_cols` path suggests its role in defining the schema or processing logic for CSV-based data transfers."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Developers"], "primary_use_case": "This API enables network administrators to define and manage the structure of CSV columns for importing and exporting network configuration profiles, facilitating efficient bulk management and transfer of device configurations."}, "content_for_embedding": "This API endpoint, part of the NCCM (Network Change & Configuration Management) module, is designed to manage the structure and definition of CSV columns for network configuration profiles. It facilitates the import and export of configuration data by allowing the definition or parsing of column structures, supporting various primitive and compound field types. This is crucial for network administrators to efficiently transfer and manage network device configurations, baselines, and parameter definitions via CSV files.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "CSV Import", "CSV Export"]}}, {"path": "/ux/nccm/configuration-profile/download_csv/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_profile_download_csv_retrieve", "description": "This API endpoint allows users to download Network Change and Configuration Management (NCCM) configuration profiles. Specifically, it facilitates the export of NCCM's configured Profiles to a CSV file. This functionality is part of the 'Download' privilege, which enables users to perform export operations within selected modules, including Configuration Profiles, as highlighted in the user guide. It serves as a method to obtain current configuration profiles in a structured data format for further analysis or archiving.", "tags": ["Configuration Profiles"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is a GET request and does not require any parameters or a request body. It is integral to the Profile Export functionality within NCCM, where users can click an icon to export configured profiles. The output file format is specified as CSV, which aligns with 'download_csv' in the path. This functionality is distinct from 'Profile Import', which allows uploading template files, typically in .xls format. Users must have the 'Download' privilege in the NCCM module to access this API. It enables users to download and perform export operations."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Users with Download privilege in NCCM module"], "primary_use_case": "This API allows users to download Network Change and Configuration Management (NCCM) configuration profiles as a CSV file for analysis or archiving purposes."}, "content_for_embedding": "This API endpoint facilitates the download and export of Network Change and Configuration Management (NCCM) configured profiles into a CSV file. It is a GET request that enables users with the necessary 'Download' privilege to obtain current configuration data in a structured format for further analysis or archiving. This functionality is integral to the profile export feature within the NCCM module.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "Download", "CSV Export"]}}, {"path": "/ux/nccm/configuration-profile/multidelete/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_profile_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of configuration profiles within the Network Change & Configuration Management (NCCM) module. It allows users to remove multiple authentication or configuration profiles simultaneously, similar to bulk-deleting outdated or unnecessary profiles as described in the NCCM documentation. This functionality is crucial for managing network configurations and user access related to network changes, ensuring efficient cleanup and administration of profiles that define access policies and configurations.", "tags": ["Configuration Profiles"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to contain a list of identifiers for the configuration profiles to be deleted. As indicated in the `request_body_description`, various primitive and compound fields are supported for serialization, though the specific structure for this multi-delete operation would likely involve a `ListField` of profile IDs or similar identifiers. Ensure that you have the necessary privileges (e.g., 'Delete' privilege) to perform this operation, as access to delete functionality within NCCM is privilege-based. This endpoint handles concepts such as `ReferenceField` and `EmbeddedDocumentField`, though specific details for implementing the multi-delete payload should align with the expected array of profile IDs, potentially mapping to `ObjectIdField` if profiles are identified by MongoDB Object IDs."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT administrators", "Users with network configuration management responsibilities"], "primary_use_case": "To efficiently manage and clean up network configurations by enabling the bulk deletion of outdated or unnecessary authentication and configuration profiles."}, "content_for_embedding": "This API allows for the bulk deletion of configuration and authentication profiles within the Network Change & Configuration Management (NCCM) module. It is designed for efficient cleanup and administration of network configurations, enabling users with appropriate privileges to remove multiple outdated or unnecessary profiles simultaneously. The request body expects a list of profile identifiers for deletion.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Configuration Profiles", "Bulk Delete"]}}, {"path": "/ux/nccm/configuration-profile/options/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_profile_options_retrieve", "description": "This endpoint allows users to retrieve the available options for creating and managing configuration profiles within the NCCM (Network Configuration and Change Management) system. Configuration profiles serve as templates or predefined sets of configuration settings used by Network Administrators. They define information such as device details and connection protocols (e.g., SSH, Telnet) for various network devices. These profiles are critical for tasks like Configuration Download Jobs, which download configurations, inventories, and operation data, and assist NCCM in automatically finding the correct profile for each device during discovery. Users can select a specific profile if devices share the same management profile, or let NCCM automatically determine the appropriate profile during discovery.", "tags": ["Configuration Profiles"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "summary": "Get the options for the configuration profiles", "additional_info": "This endpoint provides the foundational default options necessary for defining new configuration profiles. Understanding these options is crucial for setting up Configuration Download Jobs, which are central to managing device configurations. Configuration profiles also support various template types such as Command Execution, Configuration Merge, Configuration Replace, and OS Image Upgrade, implicitly suggesting the breadth of options that might be returned. While this endpoint directly provides options, other related functionalities include managing configuration templates and setting access controls for profiles, as described in the provided contexts."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations"], "primary_use_case": "To enable network administrators to retrieve available options and templates for creating and managing configuration profiles within the Network Configuration and Change Management (NCCM) system, supporting efficient device setup, connection protocol definition, and Configuration Download Jobs."}, "content_for_embedding": "This API endpoint retrieves the available options for creating and managing configuration profiles within the NCCM (Network Configuration and Change Management) system. These profiles serve as templates for network device configuration, including details like device information and connection protocols (e.g., SSH, Telnet). They are crucial for tasks such as Configuration Download Jobs, which involve downloading configurations, inventories, and operational data, and for NCCM to automatically identify the correct profile during device discovery. The endpoint provides the foundational default options necessary for defining new configuration profiles, supporting various template types like Command Execution, Configuration Merge, Configuration Replace, and OS Image Upgrade. This functionality is central to managing device configurations and setting up Configuration Download Jobs.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "device_credential_management", "device_discovery"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "NCCM", "Configuration Options"]}}, {"path": "/ux/nccm/configuration-profile/upload-csv/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_profile_upload_csv_create", "description": "This API endpoint facilitates the upload of CSV files for configuration profiles within the Network Change and Configuration Management (NCCM) tool. It allows users to create new upload jobs, specifying configuration, device details, and scheduling parameters. The process enables the import of template files, typically in .xls format, for managing predefined configuration templates. This function is critical for deploying new devices, updating existing ones, or upgrading device firmware by transferring configuration files or specific snippets from the Infraon NCCM server to network devices. Users must have appropriate privileges to access and perform upload operations.", "tags": ["Configuration Profiles"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationProfiles"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle document serializers, supporting a wide range of primitive field types including StringField, IntField, BooleanField, DateTimeField, and specialized fields like ObjectIdField and UUIDField. Compound fields such as ListField and DictField are also supported, mapping to corresponding DRF fields. ReferenceField and EmbeddedDocumentField are handled with nested serializers where depth is greater than 0. Specifically, for profile imports, accepted file formats commonly include .xls, .xlsx, and .csv. Users are typically expected to prepare a CSV file with respective fields and then upload the edited file. The system allows for viewing and performing 'add' operations within the selected module/page. Note that certain fields like FileField, ImageField, and BinaryField may not be well supported or are untested through this API."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "Network Engineer"], "primary_use_case": "This API facilitates the bulk upload of configuration profiles via CSV files to network devices within the Network Change and Configuration Management (NCCM) system. It enables IT administrators and network engineers to deploy new devices, update existing configurations, or upgrade device firmware efficiently by creating and managing upload jobs."}, "content_for_embedding": "This API endpoint, `/ux/nccm/configuration-profile/upload-csv/`, is designed for creating new upload jobs within the Network Change and Configuration Management (NCCM) tool. It specifically handles the upload of CSV files containing configuration profiles, allowing users to define configuration, device details, and scheduling parameters. The functionality supports the import of template files (including .xls, .xlsx, and .csv) for managing predefined configuration templates. It is crucial for tasks such as deploying new network devices, updating existing device configurations, or upgrading device firmware by transferring configuration files or specific snippets from the Infraon NCCM server to target network devices. The API supports various primitive and compound field types for document serialization and requires appropriate user privileges for operation. It is primarily used for bulk resource updates by uploading prepared CSV files.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "bulk_operations", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["CSV Import", "Configuration Management", "Bulk Operations"]}}, {"path": "/ux/nccm/configuration_policies/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_policies_list", "description": "This endpoint provides a comprehensive list of all configuration policies available within the current organization's NCCM (Network Change & Configuration Management) module. These policies are fundamental for managing network configurations, ensuring compliance, and automating various network tasks. The returned list mirrors what is displayed on the 'Policies' page within the NCCM application, which offers various filter options and quick action panels for managing policies. Policies can be used for diverse purposes such as Configuration Profiles for downloading configurations, OS Image Upgrades, and defining Policy Rules for command execution scope or remedy execution.", "summary": "Gets a list of configuration policies", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Configuration Policies"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination for efficient retrieval of policy lists, allowing users to specify the number of items per page and the desired page number. Sorting of the results is also supported, enabling users to sort the list by a specified key and in a defined order (ascending or descending). Configuration Policies are distinct from Configuration Templates but serve a similar framework in managing network device configurations. The NCCM module utilizes various types of policies, including but not limited to those for Configuration Profiles, Triggers, and Policy Rules, which are integral to network automation and compliance checks. This endpoint is crucial for administrators needing to view or manage the array of policies configured within their NCCM environment. Search and filter options are typically available in the UI when viewing these policies."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "This API provides a comprehensive, paginated, and sortable list of configuration policies within the NCCM (Network Change & Configuration Management) module, enabling administrators to view and manage network configurations, ensure compliance, and automate network tasks."}, "content_for_embedding": "This API retrieves a paginated and sortable list of all configuration policies available within the current organization's NCCM (Network Change & Configuration Management) module. These policies are fundamental for managing network configurations, ensuring compliance, and automating various network tasks. The returned list mirrors what is displayed on the 'Policies' page within the NCCM application, which offers various filter options and quick action panels for managing policies. It supports specifying items per page, page number, sorting order, and sorting key for efficient retrieval and display of policy data.", "semantic_keywords": ["Configuration Policies", "NCCM", "Pagination"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_policies/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_policies_create", "description": "This endpoint facilitates the creation of new configuration policies within the NCCM (Network Change & Configuration Management) module for the current organization. These policies are crucial for ensuring network security compliance and meeting organizational standards by defining rules and rule sets for device configurations. The created policies can be associated with Rule Groups and define the policy check timeline. NCCM's default package includes various Policy Compliance standards like PCI DSS v3.2, NIST, CIS v7, DISA, and CISP, but users can customize and add new compliances through these policy rules and rule set configurations.", "summary": "Creates a new configuration policies", "tags": ["Configuration Policies"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "Configuration policies are an integral part of NCCM, influencing functionalities like Configuration Profile downloads and aiding in policy rule execution. These policies are privilege-based features; therefore, user access to view, add, edit, delete, execute, and export rules within these policies is controlled. Once rules are added and rule groups are configured, these policies govern the policy check timeline. Users can manage these policies through functionalities like enable and disable actions, and they are critical for features allowing users to customize defaults and add new Compliances. Although the API specification currently lists no parameters, they are implied to be part of the request for defining the policy details, rule associations, and timeline settings."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Engineers", "Compliance Officers"], "primary_use_case": "To establish and manage network configuration policies for security compliance and organizational standards within the NCCM module."}, "content_for_embedding": "This API creates new configuration policies within the Network Change & Configuration Management (NCCM) module. These policies define rules and rule sets for device configurations, ensuring network security compliance and adherence to organizational standards. They can be associated with Rule Groups and govern the policy check timeline. The API supports customization and addition of new compliances, building upon default standards like PCI DSS v3.2 and NIST. Access to this functionality is privilege-based, allowing administrators to control user permissions for managing these policies.", "semantic_keywords": ["Configuration Policies", "NCCM", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_policies/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_policies_retrieve", "description": "This endpoint is used to retrieve the detailed configuration policy information for a specific policy identified by its unique `id`. These policies are central to NCCM (Network Change & Configuration Management) operations, governing aspects such as Configuration Profiles used for downloading configurations, inventories, and operational data, OS Image Download and Upgrade processes, Configuration Triggers, Policy Rule command execution scopes, and Policy Remedy Execution. It allows users to fetch comprehensive details of a policy, which is part of the larger set of policies displayed on the NCCM 'Policies' page, influencing how configurations are managed and devices are accessed.", "summary": "Gets a configuration policy details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Policies"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string that uniquely identifies the configuration policy being queried. Configuration policies are fundamental to NCCM, defining aspects such as CLI (Command Line Interface) job parameters and direct CLI access to devices. They are distinct from the various template types (e.g., Command Execution, Configuration Merge) supported by NCCM but work in conjunction with them to define network automation and compliance standards. This endpoint provides granular insight into the structure and rules of a specific policy."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Network Engineers", "Compliance Officers"], "primary_use_case": "To retrieve detailed information about specific network configuration policies within the Network Change and Configuration Management (NCCM) system, enabling users to understand how configurations are managed and devices are accessed."}, "content_for_embedding": "This API endpoint retrieves comprehensive details for a specific configuration policy identified by its unique ID within the Network Change and Configuration Management (NCCM) system. These policies are crucial for governing configuration profiles, OS image management, configuration triggers, and policy rule execution, influencing network automation and compliance standards. It provides granular insight into the structure and rules of a policy, including CLI job parameters and direct CLI access to devices.", "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Policies", "Details retrieval", "Network Configuration"]}}, {"path": "/ux/nccm/configuration_policies/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_configuration_policies_update", "description": "This PUT endpoint is used to edit or update an existing configuration policy within the NCCM (Network Change & Configuration Management) module for the current organization. Configuration policies in NCCM are crucial for defining and maintaining network compliance standards and operational rules, ensuring security and adherence to organizational policies. These policies can be customized and built upon default compliance standards such as PCI DSS v3.2, NIST, CIS v7, DISA, and CISP. Updating a configuration policy can involve associating Rule Groups and defining policy check timelines, which are essential for its functionality and enforcement within the network.", "summary": "Edits the configuration policies with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Policies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the configuration policy to be edited.\n\nThe request body for this endpoint will utilize a serializer for Documents, supporting a wide range of primitive data types including strings (`StringField`, `URLField`, `EmailField`), numeric types (`IntField`, `LongField`, `FloatField`, `DecimalField`), boolean (`BooleanField`), date/time (`DateTimeField`, `ComplexDateTimeField`, `DateField`), and identifiers (`ObjectIdField`, `UUIDField`). Compound fields like `ListField` and `DictField` are mapped to corresponding DRF fields, allowing for structured data updates. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers when the serializer depth is greater than 0. Generic fields such as `GenericReferenceField` and `GenericEmbeddedDocumentField` are also supported.\n\nUpdating policies is a privilege-based feature within NCCM, impacting how network devices are configured and managed. This API is essential for administrators to modify or refine the 'Policy rules' and 'Rule set configurations' that dictate network behavior and compliance, as highlighted in the user guides regarding NCCM's capabilities for customizing default and adding new compliances."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Security Administrators"], "primary_use_case": "To update and manage network configuration policies within the NCCM module, ensuring compliance with standards and adherence to operational rules."}, "content_for_embedding": "This API endpoint allows for the modification and update of existing configuration policies within the Network Change & Configuration Management (NCCM) module. These policies are fundamental for establishing and maintaining network compliance standards and operational guidelines, supporting adherence to various industry standards like PCI DSS v3.2, NIST, CIS v7, DISA, and CISP. Updates can involve associating Rule Groups and setting policy check timelines. The API requires a unique policy ID for modification and supports various data types for the request body, including strings, numbers, booleans, dates, and structured data. This is a privilege-based feature crucial for administrators to refine network behavior and compliance rules.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Configuration Policies", "Update", "Network Configuration"]}}, {"path": "/ux/nccm/configuration_policies/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_configuration_policies_destroy", "description": "This endpoint permanently deletes an existing configuration policy identified by its unique `id` within the current organization. Deleting a policy removes it from NCCM, ensuring it no longer applies to compliance checks. This action is irreversible once confirmed. Policies typically involve associating Rule Groups and defining a policy check timeline, and their removal ensures that the associated checks and configurations are no longer enforced.", "summary": "Deletes the configuration policies with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Policies"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and represents the unique identifier of the configuration policy to be deleted. Similar to deleting Rule Groups, the removal of a configuration policy is permanent. Before deletion, users often select the policy and click 'Delete' to confirm its removal in the NCCM interface. There is no response body for a successful deletion operation. This action is typically performed for policies that are no longer needed or have been superseded."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Compliance Officers", "IT Operations Personnel"], "primary_use_case": "To permanently remove an existing network configuration policy from NCCM, ensuring it no longer applies to compliance checks and maintaining system hygiene."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a specific network configuration policy within the NCCM (Network Configuration and Change Management) system. Identified by its unique ID, the removal of a policy is irreversible and ensures that associated compliance checks and configurations are no longer enforced. This action is typically performed when a policy is no longer needed or has been superseded, contributing to the streamlined management of network configurations.", "semantic_keywords": ["Delete", "Configuration Policies", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_policies/bulk-opration/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_policies_bulk_opration_create", "description": "This API endpoint facilitates the bulk viewing and editing of configuration policies within the NCCM (Network Change & Configuration Management) system. It allows users with appropriate privileges to manage and modify multiple configuration policies simultaneously. This includes actions such as viewing existing policies or making necessary changes to them, similar to how rules or profiles can be edited in bulk in other parts of the system. The endpoint supports complex data structures for request bodies, built upon various primitive and compound field types.", "tags": ["Configuration Policies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the extensive range of field types supported for the request body, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Special handling is noted for `ReferenceField` (like `ForeignKey` in DRF) and `EmbeddedDocumentField`, with nested serialization for non-zero depths. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. The bulk operation nature implies that multiple policy configurations can be processed in a single request, offering efficiency in managing NCCM configurations. Privileges for bulk operations (view, add, edit, delete, execute, export) are typically granted by an administrator, aligning with the privilege-based features mentioned in the contexts."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator"], "primary_use_case": "To enable network administrators to efficiently manage and modify multiple network configuration policies simultaneously within the NCCM system, supporting bulk viewing and editing operations."}, "content_for_embedding": "This API endpoint facilitates the bulk viewing and editing of configuration policies within the Network Change & Configuration Management (NCCM) system. It allows users with appropriate privileges, typically network administrators, to manage and modify multiple configuration policies simultaneously. The endpoint supports complex data structures for request bodies, including various primitive and compound field types, and is designed for efficient bulk operations. Access to these bulk operations (view, add, edit, delete, execute, export) is privilege-based and granted by an administrator.", "ontology_classification": {"features": ["nccm.network_configuration_and_change_management", "nccm.centralized_management", "nccm.privilege-based_access_control", "infraon_configuration.network_configuration_management_(nccm)", "asset.bulk_actions_on_assets", "asset.configuration_download_jobs", "change_management.bulk_actions"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Policies", "Bulk Operations", "NCCM"]}}, {"path": "/ux/nccm/configuration_policies/multi-delete/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_policies_multi_delete_create", "description": "This API endpoint provides a mechanism for users to delete multiple configuration policies within the Network Change & Configuration Management (NCCM) module. While the original description suggested viewing or editing users, the path and relevant contexts clearly indicate a multi-delete operation specifically for configuration policies in the NCCM system. This operation aligns with the NCCM capabilities to 'Remove a rule permanently from NCCM' or 'Deletes the selected rule from the system,' as highlighted in the user guides. This multi-delete functionality is privilege-based, meaning a user must have the appropriate 'Delete' privilege to perform this action.", "tags": ["Configuration Policies"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint serializes documents, suggesting that the request body will likely contain a list of identifiers (e.g., policy IDs) for the configuration policies to be deleted. Supported field types for serialization include `StringField`, `IntField`, `ObjectIdField`, and `UUIDField`, which are common for passing identifiers. Given the purpose, it's probable that `ListField` containing identifiers would be used. The API allows viewing and performing delete operations if the 'Delete' privilege for the relevant module/page is granted, as per the user guide. This endpoint is crucial for managing and maintaining NCCM configuration policies by enabling bulk removal of unnecessary or outdated policies."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel"], "primary_use_case": "To enable users to efficiently delete multiple network configuration policies within the Network Change & Configuration Management (NCCM) module, streamlining policy management and bulk removal of outdated or unnecessary configurations."}, "content_for_embedding": "This API endpoint facilitates the bulk deletion of network configuration policies within the NCCM system. It allows users with appropriate 'Delete' privileges to remove multiple policies simultaneously by providing a list of identifiers. This is crucial for maintaining a clean and relevant set of network configurations.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Configuration Policies", "Bulk Delete"]}}, {"path": "/ux/nccm/configuration_policies/options/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_policies_options_retrieve", "description": "This endpoint retrieves the default options and configurations for NCCM (Network Change & Configuration Management) configuration policies, specifically for 'Jobs Account Audit' related functions. It provides settings and standards, such as policy compliance standards (e.g., PCI DSS, NIST, CIS v7, DISA, CISP) and rule set configurations, that are crucial for defining and customizing network policies. This includes options for triggering configuration downloads, managing user actions during download job executions, and potentially execution schedules. This endpoint is vital for understanding the baseline setup for configuration policy rule management within the NCCM system.", "summary": "Get the options for the Configuration Polocies", "tags": ["Configuration Policies"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationPolicies"}}}, "description": ""}}, "additional_info": "While the API specification indicates no explicit parameters, the context suggests that these options are fundamental to 'Jobs Account Audit' reports, which summarize user actions during network device configuration download activities. Relevant details captured in these audits include device IP addresses and account information. Developers should be aware that the retrieved options will likely define the framework for creating or modifying NCCM rules and policy compliance standards, which are privilege-based features within the NCCM application. The endpoint provides the current default options that can be customized for specific organizational standards and security compliance."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Compliance Officers"], "primary_use_case": "To retrieve default options and configurations for Network Change & Configuration Management (NCCM) configuration policies, especially for 'Jobs Account Audit' reports, enabling users to understand and customize network policy frameworks and compliance standards."}, "content_for_embedding": "This API retrieves the default options and configurations necessary for Network Change & Configuration Management (NCCM) configuration policies, particularly those related to 'Jobs Account Audit' functions. It provides baseline settings for policy compliance standards (e.g., PCI DSS, NIST) and rule set configurations, which are crucial for defining and customizing network policies. The options retrieved define the framework for managing NCCM rules and policy compliance standards, which are privilege-based features within the NCCM application. This endpoint is essential for understanding the foundational setup for configuration policy rule management and audit reporting within the NCCM system.", "ontology_classification": {"features": ["nccm.network_configuration_and_change_management", "report.nccm_reports_(configuration_download_&_jobs_account_audit)", "infraon_configuration.network_configuration_management_(nccm)", "nccm.privilege-based_access_control", "asset.configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Configuration Policies", "NCCM", "Configuration Options"]}}, {"path": "/ux/nccm/configuration_rules/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_rules_list", "description": "This endpoint provides a paginated list of all configured Configuration Rules within the current organization in NCCM (Network Configuration and Change Management). These rules are fundamental conditions or basic checkpoints used to ensure security compliance and meet organizational standards in the network. NCCM allows users with appropriate roles and privileges to view, add, edit, delete, execute, and export these rules. The retrieved list of rules will display search fields for Rule ID, name, or description, supporting case-insensitive and partial word matches for easier identification, as well as action icons for user interactions.", "summary": "Gets a list of configuration Rules", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Configuration Rules"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ConfigurationRule"}}}}, "description": ""}}, "additional_info": "Access to these rules is privilege-based; only users with administrator-assigned roles and privileges can view or interact with them. While this endpoint retrieves individual rules, it's important to understand their role within NCCM's hierarchical structure: rules are simple conditions, multiple rules can be grouped into a 'Rule Group', and multiple 'Rule Groups' form a 'Policy' (e.g., PCI DSS v3.2, NIST). The query parameters `items_per_page` and `page` are mandatory for pagination, while `reverse` (boolean for sorting order) and `sort` (string for sorting key) are optional parameters to control the order of the results. This API effectively mirrors the 'Rules' page within the NCCM UI, providing similar filtering and display capabilities programmatically."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Engineers", "Compliance Officers"], "primary_use_case": "To retrieve and manage a paginated list of network configuration rules within the Network Configuration and Change Management (NCCM) system, ensuring network security compliance and adherence to organizational standards."}, "content_for_embedding": "This API endpoint provides a paginated list of all configured Configuration Rules within the current organization in NCCM (Network Configuration and Change Management). These rules are fundamental conditions or basic checkpoints used to ensure security compliance and meet organizational standards in the network. The endpoint supports searching by Rule ID, name, or description, and allows for sorting of results. Access is privilege-based, mirroring the 'Rules' page in the NCCM UI.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "search_functionality"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Rules", "NCCM", "Pagination"]}}, {"path": "/ux/nccm/configuration_rules/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_rules_create", "description": "This API endpoint facilitates the creation or update of configuration rules within the NCCM (Network Change & Configuration Management) system. It enables authorized users to define, modify, and manage parameters for network configuration and access control. This POST request is used to establish new rules or apply changes to existing ones, playing a critical role in managing network changes and ensuring proper user access to various functionalities such as Baseline Scheduler, Configuration Download Jobs, and other network configuration parameters as specified in the NCCM module. The ability to add and edit rules is a privilege-based feature, meaning only users with appropriate roles and permissions can utilize this endpoint.", "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is a serialized representation of a 'Document' object, supporting a wide range of primitive and compound data types. Primitive fields include StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, GeoJsonBaseField, and DateField. Compound fields like ListField and DictField are mapped to corresponding Django REST Framework fields, with support for nested field specifications. ReferenceField and EmbeddedDocumentField are handled with nested serializers depending on the depth. Generic fields such as GenericReferenceField and GenericEmbeddedDocumentField are also supported. Note that FileField, ImageField, and BinaryField are either not well supported or untested. Any other unrecognized fields will be mapped to DocumentField and may not function as expected. This endpoint is crucial for administrators to manage network security policies, define user access levels, and ensure compliance within the NCCM framework. Changes made via this endpoint require saving to take effect, similar to the 'Save' action in the UI for editing rules."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Authorized User"], "primary_use_case": "This API endpoint is used to create or update configuration rules within the NCCM (Network Change & Configuration Management) system. It allows administrators and authorized users to define, modify, and manage network configuration parameters, access control, network security policies, and user access levels, ensuring compliance and effective network change management."}, "content_for_embedding": "This API creates or updates configuration rules in the NCCM system. It allows authorized users and administrators to define, modify, and manage network configuration parameters, access control, network security policies, and user access levels. It is crucial for managing network changes and ensuring compliance within the NCCM framework, similar to saving changes in the UI.", "semantic_keywords": ["Configuration Rules", "NCCM", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_rules/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_rules_retrieve", "description": "This API endpoint allows users to retrieve or modify specific NCCM (Network Change & Configuration Management) configuration rules. It provides a means to view the details of an existing rule or to update its parameters. The endpoint is part of the NCCM module, which manages user access to functionalities related to network changes and configurations, including Baseline Scheduling, Configuration Download Jobs, and Configuration Parameters. The `id` parameter refers to the unique identifier of the configuration rule to be accessed or modified.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Rules"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "summary": "", "additional_info": "The ability to access, view, add, edit, delete, execute, and export rules within NCCM is a privilege-based feature, meaning users can only perform these actions if an administrator has assigned the appropriate roles and privileges. When editing a rule, users can navigate to the 'Edit Rule' page by clicking the Rule ID or selecting the rule and clicking 'Edit', making necessary changes, and then clicking 'Save'. This endpoint is crucial for managing network configuration parameters and ensuring network device access aligns with defined authorization profiles."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "IT Operations Staff"], "primary_use_case": "This API endpoint is used for retrieving and modifying specific Network Change & Configuration Management (NCCM) configuration rules, enabling users to view details of existing rules and update their parameters. It is crucial for managing network configuration parameters and ensuring network device access aligns with defined authorization profiles."}, "content_for_embedding": "This API endpoint, part of the NCCM module, allows users to retrieve or modify specific NCCM (Network Change & Configuration Management) configuration rules. It provides functionality to view details of existing rules and update their parameters. The endpoint is crucial for managing network configuration parameters and ensuring network device access aligns with defined authorization profiles. The ability to access, view, add, edit, delete, execute, and export rules within NCCM is a privilege-based feature, requiring appropriate roles and privileges assigned by an administrator. Users can edit rules by navigating to the 'Edit Rule' page via the Rule ID or by selecting the rule and clicking 'Edit', making necessary changes, and then saving them.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["NCCM", "Configuration Rules", "Privilege-based Access"]}}, {"path": "/ux/nccm/configuration_rules/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_configuration_rules_update", "description": "This API endpoint allows for the viewing and editing of specific Configuration Rules within the NCCM (Network Change & Configuration Management) module. It provides granular control over network configurations and is essential for managing user access to functionalities such as Baseline Scheduler, Configuration Download Jobs, and other network configuration parameters. Users with appropriate privileges can specifically modify existing rules, which are typically accessed via their unique Rule ID.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter in the path refers to the unique identifier of the Configuration Rule being viewed or edited. Changes made through this endpoint must conform to the serializer specifications outlined in the request body description. The serializer supports a wide range of primitive and compound field types, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Special attention is paid to `ReferenceField` and `EmbeddedDocumentField`, which can auto-generate nested serializers based on depth. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or tested, and their behavior may be unpredictable. This endpoint is crucial for administrators to manage and refine the application of network policies and access controls."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer"], "primary_use_case": "To allow administrators and network engineers to modify and manage specific network configuration rules within the NCCM module, ensuring granular control over network policies and user access to functionalities like Baseline Scheduler and Configuration Download Jobs."}, "content_for_embedding": "This API endpoint facilitates the viewing and, more importantly, the editing and updating of specific Configuration Rules within the Network Change & Configuration Management (NCCM) module. It provides administrators and network engineers with granular control over network configurations, enabling them to manage user access to functionalities such as Baseline Scheduler and Configuration Download Jobs. The API uses a unique Rule ID for modification and supports various field types for the request body, allowing for comprehensive changes to existing rules. This is crucial for refining network policies and access controls.", "ontology_classification": {"features": ["network_configuration_and_change_management", "Configuration Rules", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Configuration Rules", "Update", "Network Configuration"]}}, {"path": "/ux/nccm/configuration_rules/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_configuration_rules_destroy", "description": "This API endpoint allows for the permanent deletion of a specific configuration rule from the Network Change & Configuration Management (NCCM) system. This action is privilege-based, meaning the user must have appropriate administrative roles and privileges assigned to execute rule deletions within NCCM.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Rules"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is mandatory and represents the unique identifier of the configuration rule to be deleted. Successful deletion results in no response body. This endpoint is crucial for managing and maintaining clean, up-to-date network configuration rules by removing obsolete or incorrect entries. Users should exercise caution as deletion is permanent."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "IT Operations"], "primary_use_case": "This API allows for the permanent deletion of specific configuration rules within the Network Change & Configuration Management (NCCM) system, ensuring the removal of obsolete or incorrect entries to maintain clean and up-to-date network configurations."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a specific configuration rule from the Network Change & Configuration Management (NCCM) system. This is a privilege-based action, requiring appropriate administrative roles and privileges. The 'id' path parameter is mandatory, representing the unique identifier of the configuration rule to be deleted. Successful deletion results in a 204 No Content response. This endpoint is critical for managing and maintaining accurate network configuration rules by removing outdated or erroneous entries. Users must exercise caution as this deletion is irreversible.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Configuration Rules", "NCCM"]}}, {"path": "/ux/nccm/configuration_rules/import-txt/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_rules_import_txt_create", "description": "This POST endpoint allows users to import a configuration rule from an older Network Configuration Change Management (NCCM) version, facilitating the migration of existing rules into the current system. It is one of three recognized methods for creating new configuration rules, alongside adding a new rule directly or importing a JSON file, as highlighted in the user guide. The successful execution of this import contributes to making the rule functional, as rules must be enabled for execution and use in configurations. The endpoint processes text-based rule definitions to integrate them into the NCCM framework.", "summary": "Return JSON for Configuration Rule", "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to process various data types required for documents, including primitive fields such as `StringField`, `IntField`, `BooleanField`, and `DateTimeField`, as well as compound fields like `ListField` and `DictField`. Special handling is provided for `ReferenceField` and `EmbeddedDocumentField`, with nested serializers automatically generated for non-zero depth. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or tested, and other unmapped fields might result in incorrect behavior. This import functionality is crucial for users managing configurations from legacy NCCM systems, allowing them to bring their existing rule sets forward. After importing, rules can be edited to make necessary changes, enabled, disabled, copied, or deleted via other NCCM functionalities."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Configuration managers"], "primary_use_case": "To enable users to import existing configuration rules from older Network Configuration Change Management (NCCM) versions into the current system, facilitating migration and integration of legacy network configurations."}, "content_for_embedding": "This API endpoint allows users to import text-based configuration rules from older Network Configuration Change Management (NCCM) systems. It serves as a crucial method for migrating existing rule definitions into the current NCCM framework, alongside direct rule creation and JSON import. The imported rules become functional within the system, supporting various data types for rule definitions, though specific file types like FileField, ImageField, and BinaryField are noted as not well-supported.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["NCCM", "Configuration Rules", "Rule Import"]}}, {"path": "/ux/nccm/configuration_rules/is_disabled/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_rules_is_disabled_create", "description": "This API endpoint (`/ux/nccm/configuration_rules/is_disabled/`) facilitates the management of configuration rules within the Network Change & Configuration Management (NCCM) application. While the original description states it allows users to be 'viewed or edited', the context strongly indicates its primary function is related to the status and management of NCCM configuration rules. This endpoint likely allows for operations such as enabling or disabling specific configuration rules, which aligns with 'editing' their status or 'viewing' their current disabled state within the NCCM system. The NCCM module governs user access to network change and configuration functionalities, including baseline scheduling and configuration download jobs. Rules, once added, can be edited to apply necessary changes, reinforcing the modification aspect of this endpoint.", "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "summary": "", "additional_info": "The NCCM Rules page is a privilege-based feature, meaning users require specific administrator-granted privileges (access, view, add, edit, delete, execute, export) to interact with these rules. The request body, though not explicitly defined by standard parameters, points to a flexible serializer (Serializer for Documents) capable of handling various primitive and compound fields. This implies the endpoint could accept diverse data structures for modifying rule properties or querying their status. Primitive fields include `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields like `ListField` and `DictField` are supported for nested data. The `ReferenceField` and `EmbeddedDocumentField` suggest relations to other NCCM entities or nested document structures relevant to configuration rules. Potential fields related to disabling a rule could include a rule ID (StringField/ObjectIdField), a boolean flag for 'isDisabled' (`BooleanField`), or similar state-modifying parameters. Users should refer to specific implementation details for the exact structure of the request body, given the generic serializer description. The system's ability to 'edit rules' and manage 'status' (Context Rank 1) significantly points to how this endpoint might be used to control the active state of NCCM configuration rules."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator"], "primary_use_case": "To enable or disable specific configuration rules within the Network Change & Configuration Management (NCCM) application."}, "content_for_embedding": "This API endpoint allows for the management of configuration rules within the Network Change & Configuration Management (NCCM) application. Specifically, it facilitates enabling or disabling existing configuration rules by modifying their active status. This is a privilege-based feature, primarily used by administrators to control the functionality of network configuration rules.", "semantic_keywords": ["Configuration Rules", "Disable", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/configuration_rules/is_enabled/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_rules_is_enabled_create", "description": "This API endpoint is part of the NCCM (Network Change & Configuration Management) sub-module, which is crucial for managing user access to network changes and configurations. Specifically, it enables the viewing and editing of 'configuration rules' within the system. These rules are privilege-based features, meaning users can access, view, add, edit, delete, execute, and export them only if they have been assigned appropriate roles and privileges by an administrator. This endpoint likely plays a role in determining if a specific configuration rule related functionality is enabled or accessible, contributing to the granular control over network configuration management.", "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "summary": "", "additional_info": "The request body, as described, is a 'Serializer for Documents' and supports various primitive fields such as `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, and `DateField`. It also supports compound fields like `ListField` and `DictField` for nested structures. `ReferenceField` is handled like a `ForeignKey`, with nested serializers generated for depths greater than 0, otherwise returning an ID string. `EmbeddedDocumentField` also generates nested serializers for non-zero depth, but the specification notes this behavior might be incorrect and require fixing. `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own corresponding serializer fields. Fields like `FileField`, `ImageField`, and `BinaryField` are not well supported or untested. This endpoint is central to managing user permissions and the lifecycle (viewing, editing) of configuration rules within the NCCM framework, enabling authorized users to make necessary changes to network configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT security personnel", "Users with network configuration management privileges"], "primary_use_case": "To manage and determine the enabled or accessible status of configuration rules within the Network Change & Configuration Management (NCCM) system, ensuring granular control over network configurations and user permissions."}, "content_for_embedding": "This API endpoint, part of the NCCM (Network Change & Configuration Management) module, is used to manage and determine the enabled status of configuration rules. These rules are privilege-based and control user access to network changes and configurations, ensuring granular control over network management.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Rules", "NCCM", "Privilege-based Access"]}}, {"path": "/ux/nccm/configuration_rules/multidelete/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_rules_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of configuration rules within the Network Change and Configuration Management (NCCM) system. It allows users with appropriate privileges to permanently remove multiple selected rules from the system. This is a critical function for managing network configurations and ensuring that obsolete or incorrect rules can be efficiently purged. The operation is privilege-based, requiring the user to have 'delete' access within the NCCM module, specifically for configuration rules.", "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to define the selection criteria for the rules to be deleted. While the current `request_body_description` details general serializer fields, it implies a complex structure for handling document serialization, including primitive and compound fields. Users should note that `FileField`, `ImageField`, and `BinaryField` are not well supported, and other fields might not work as expected. Ensure that the IDs or identifiers of the rules to be deleted are correctly passed within the request body, likely as a list within a compound field. This endpoint is typically utilized from the 'Rules' page within the NCCM interface, where multiple rules can be selected for a bulk delete operation."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "NCCM users with delete privileges"], "primary_use_case": "To efficiently manage and purge obsolete or incorrect network configuration rules within the NCCM system through bulk deletion."}, "content_for_embedding": "This API endpoint enables the multi-deletion of configuration rules within the Network Change and Configuration Management (NCCM) system. It allows authorized users to permanently remove multiple selected rules, which is crucial for maintaining accurate network configurations and purging obsolete or incorrect entries. The operation requires specific delete privileges within the NCCM module. The request body expects the IDs or identifiers of the rules to be deleted, typically used for bulk operations initiated from the 'Rules' page of the NCCM interface.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Configuration Rules", "Bulk Delete"]}}, {"path": "/ux/nccm/configuration_rules/options/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_rules_options_retrieve", "description": "This API endpoint is part of the NCCM (Network Change & Configuration Management) module and specifically manages functionalities related to configuration rules. It allows users with appropriate privileges to view and edit existing configuration rules. This includes the ability to modify rule parameters, similar to how users can access, view, add, edit, delete, execute, and export configuration rules within the system, as long as they have the administrator-granted permissions.", "tags": ["Configuration Rules"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint focuses on the management of 'Configuration Rules' within NCCM. While the initial description mentioned 'users to be viewed or edited', the context clarifies that the 'configuration_rules' within the path indicates this relates to the viewing and editing of *rules* themselves, rather than user profiles. This is supported by contexts mentioning 'added rules can be edited' and 'define user access to view or modify network configuration parameters'. The functionality aligns with the broader access-control capabilities (view, add, edit, delete) described for privilege-based features in NCCM. While the current specification indicates no parameters or request body, typical usage would involve identifying the specific rule to be edited or viewed. For adding new rules, a separate endpoint would likely be utilized."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with appropriate privileges"], "primary_use_case": "To view and edit existing configuration rules within the NCCM (Network Change & Configuration Management) module."}, "content_for_embedding": "This API endpoint is designed for the management of configuration rules within the NCCM (Network Change & Configuration Management) module. It enables users with the necessary administrator-granted permissions to view, edit, and modify parameters of existing configuration rules. The functionality is privilege-based, allowing actions such as accessing, viewing, adding, editing, deleting, executing, and exporting configuration rules. This endpoint specifically pertains to the rules themselves, not user profiles, and is a core component for managing network configurations.", "semantic_keywords": ["Configuration Rules", "NCCM", "Privilege-based Access"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "privilege-based_access_control"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_rules/save-txt/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_rules_save_txt_create", "description": "This endpoint facilitates the process of saving configuration rules that have been imported from an older version of NCCM (Network Configuration Change Management). It is one of three methods available for creating rules in NCCM, alongside adding a new configuration rule directly or importing a JSON file. The API specifically handles the conversion and saving of text-based configuration rules originating from legacy NCCM systems, allowing them to be integrated and managed within the current NCCM environment.", "summary": "Return JSON for Configuration Rule", "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "additional_info": "This endpoint accepts a request body that corresponds to a 'Serializer for Documents'. The serializer supports various primitive fields such as StringField, URLField, EmailField, IntField, FloatField, BooleanField, DateTimeField, and more. Compound fields like ListField and DictField are also supported, mapping to Django Rest Framework (DRF) equivalents. Special handling is provided for ReferenceField and EmbeddedDocumentField, which can result in nested serializers based on depth. Developers should note that fields like FileField, ImageField, and BinaryField are not well supported or are untested. The primary use case for this endpoint is to migrate existing configuration rules from an older NCCM system into the current one, ensuring continuity and functionality of these rules. Once saved, these rules must be explicitly enabled to become functional for execution and use in configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Integrators"], "primary_use_case": "Migrating and saving legacy network configuration rules into the current NCCM system."}, "content_for_embedding": "This API endpoint allows for the creation and saving of network configuration rules within the NCCM (Network Configuration Change Management) system. Specifically, it handles the import and conversion of text-based configuration rules from older, legacy NCCM versions, integrating them into the current environment. This is a crucial method for rule creation, complementing direct rule addition and JSON imports. The primary use case is the migration of existing configuration rules, ensuring their continued functionality after being saved and subsequently enabled.", "ontology_classification": {"features": ["centralized_management", "network_configuration_and_change_management", "configuration_rules"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Rules", "Save", "Rule Import"]}}, {"path": "/ux/nccm/configuration_rules/validate-json/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_rules_validate_json_create", "description": "This endpoint facilitates the creation of a new Configuration Rule within NCCM by allowing users to directly import the rule's definition in JSON format. It is one of three primary methods available for adding configuration rules to NCCM, alongside adding a configuration rule manually or importing from an older NCCM version. This method is particularly useful for programmatic rule creation or for migrating rule definitions.", "summary": "Return JSON for Configuration Rule", "tags": ["Configuration Rules"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationRule"}}}, "description": ""}}, "additional_info": "The request body for this endpoint expects a JSON document representing the configuration rule. The structure of this JSON is critical and should conform to the types detailed in the `request_body_description`. Supported primitive fields include StringField, IntField, BooleanField, DateTimeField, and more. Compound fields like ListField and DictField are also supported. Special handling is noted for ReferenceField and EmbeddedDocumentField. Developers should be aware that FileField, ImageField, and BinaryField are not well supported or untested by this serializer and may not work as expected."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Developers", "System Integrators"], "primary_use_case": "To enable programmatic creation and migration of network configuration rules within the NCCM system."}, "content_for_embedding": "This API endpoint allows users to create new Configuration Rules within NCCM by importing rule definitions in JSON format. It is a key method for programmatic rule creation and migration, supporting various data types for rule definition.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Rules", "Rule Import", "NCCM"]}}, {"path": "/ux/nccm/configuration_search/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_search_retrieve", "description": "This API endpoint facilitates the search and management of network configurations within the NCCM (Network Change & Configuration Management) module. It allows users to view and potentially modify various network configuration parameters, and manage access to functionalities like Baseline Scheduler and Configuration Download Jobs, streamlining network change and configuration management workflows.", "tags": ["Configuration Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the NCCM application, which allows for direct CLI sessions (SSH/Telnet) between a device and a user. While the current specification indicates no parameters, typical usage within NCCM for search functionalities involves entering at least three characters for an existing profile, and applying filters based on fields such as 'Profile Name', 'Default Action', 'Status', 'Asset Tag', 'User Tag', 'Device IP Address', and 'Device Credential'. Search operations are generally not case-sensitive and support partial word matches. Further details on specific search/filter capabilities can be inferred from the NCCM module's user interface documentation regarding configuration management."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "To enable users to efficiently search, view, and manage network configurations within the NCCM module, including access to functionalities like Baseline Scheduler and Configuration Download Jobs, thereby streamlining network change and configuration management workflows."}, "content_for_embedding": "This API endpoint allows for searching and managing network configurations within the NCCM (Network Change & Configuration Management) module. Users can view and modify network configuration parameters, manage access to Baseline Scheduler and Configuration Download Jobs. It supports searching with a minimum of three characters and filtering by 'Profile Name', 'Default Action', 'Status', 'Asset Tag', 'User Tag', 'Device IP Address', and 'Device Credential'. Search operations are case-insensitive and support partial word matches. It also facilitates direct CLI sessions (SSH/Telnet) to devices.", "semantic_keywords": ["Configuration Search", "Network Configuration", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "asset_search_and_filtering", "cli_session_initiation", "device_credential_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_search/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_search_retrieve_2", "description": "This API endpoint allows users to view or edit specific configurations within the Network Change & Configuration Management (NCCM) system. It enables interaction with and management of network changes and configurations, potentially including details related to baseline scheduling, configuration download jobs, and configuration parameters. The `id` in the path corresponds to a specific configuration entry or profile, allowing for granular access and modification within the NCCM framework.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string identifier for the specific configuration or profile to be accessed. This endpoint is crucial for managing various aspects of network infrastructure through NCCM, such as defining user access to view or modify network configuration parameters. While the description mentions editing, the method is GET, meaning it primarily supports viewing the configuration details associated with the provided `id`. Editing might be handled by a different method (e.g., PUT or POST) on the same path. Users interact with this to manage permissions related to network configurations within the NCCM module."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System administrators"], "primary_use_case": "This API allows users to retrieve specific network configurations by their unique identifier within the Network Change & Configuration Management (NCCM) system. It supports viewing and managing network configuration details, including those related to baseline scheduling and configuration download jobs."}, "content_for_embedding": "This API endpoint, accessible via a GET request, is designed for retrieving specific configuration entries or profiles within the Network Change & Configuration Management (NCCM) system. Users can view detailed network configurations by providing a unique ID. While the description mentions editing, the GET method indicates its primary function is to provide read-only access to configuration parameters, baseline schedules, and configuration download job details. It is crucial for managing and accessing network infrastructure configurations and associated user permissions within the NCCM module.", "semantic_keywords": ["Configuration Search", "Configuration retrieval", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_search/configuration-search-result/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_search_configuration_search_result_retrieve", "description": "This endpoint retrieves a paginated list of configuration search results within the current organization. Configuration Search specifically focuses on download jobs, allowing users to view or export 'startup' or 'running' configurations within these jobs to identify any configuration differences or specific commands. It can also be used to assess configuration differences between two devices based on their startup or running configuration types.", "summary": "Gets a list of configuration search", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Configuration Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The search results can be paginated using the `items_per_page` and `page` query parameters, both of which are required. Optionally, the results can be sorted by a `sort` key in either ascending or descending order (controlled by the `reverse` boolean parameter). This API is crucial for network administrators to efficiently manage and audit network configurations by providing access to detailed search results of device configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Auditors"], "primary_use_case": "This API retrieves paginated search results of network configurations from download jobs, enabling users, particularly network administrators, to view, export, and compare device configurations for auditing and identifying differences."}, "content_for_embedding": "This API endpoint retrieves a paginated list of configuration search results within the current organization. It specifically focuses on download jobs, allowing users to view or export 'startup' or 'running' configurations to identify configuration differences or specific commands. It can also be used to assess configuration differences between two devices based on their startup or running configuration types. The results can be paginated using `items_per_page` and `page` parameters, and sorted by a `sort` key in ascending or descending order. This is crucial for network administrators to efficiently manage and audit network configurations by providing access to detailed search results of device configurations.", "semantic_keywords": ["Configuration Search", "Network Configuration", "Download Job Management"], "ontology_classification": {"features": ["nccm.network_configuration_and_change_management", "nccm.download_job_management", "asset.configuration_download_jobs", "asset.asset_search_and_filtering", "report.nccm_reports_(configuration_download_&_jobs_account_audit)"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_search/filter/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_search_filter_retrieve", "description": "This GET endpoint retrieves a list of configuration search data within the current organization. Primarily, it supports filtering of NCCM (Network Configuration and Change Management) policies, which are displayed on the 'Policies' page. Users can apply filters based on various fields and conditions, similar to how policies can be searched and filtered in the UI for specific criteria like name or description. This functionality is crucial for identifying configurations, particularly 'startup' or 'running' configurations from download jobs, to assess configuration differences.", "summary": "Gets a list of configuration search data", "tags": ["Configuration Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is part of the NCCM configuration search functionality. While the API specification doesn't list specific parameters, context suggests that similar to the UI, filters would be applied based on selected fields and conditions. The search functionality generally supports non-case-sensitive and partial word searches. It's used for viewing or exporting configuration data from download jobs. Although this endpoint is for filtering, other related 'Configuration Search' functionalities in NCCM allow comparing configuration types (startup or running) between devices and searching for specific commands within configurations. This API is commonly employed to refine the list of configurations displayed on the 'Policies' page, mirroring the 'Apply filter' action described in the user guide."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations Staff", "Configuration Manager"], "primary_use_case": "To enable users to efficiently search and filter network configuration data, including NCCM policies and configurations from download jobs, based on various criteria to identify specific configurations or assess differences."}, "content_for_embedding": "This GET API endpoint retrieves and filters network configuration search data within the current organization. It specifically supports filtering of NCCM (Network Configuration and Change Management) policies and configurations obtained from download jobs. Users can apply filters based on various fields and conditions, such as name, description, IP address, configuration type (startup/running), vendor, and status. This functionality is crucial for identifying specific configurations, assessing configuration differences, and refining the list of configurations displayed on the \"Policies\" page, mirroring UI search and filter capabilities.", "semantic_keywords": ["Configuration Search", "Filter", "NCCM"], "ontology_classification": {"features": ["nccm.network_configuration_and_change_management", "asset.configuration_download_jobs", "asset.asset_search_and_filtering"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_search/options/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_search_options_retrieve", "description": "This endpoint (GET /ux/nccm/configuration_search/options/) retrieves the default or available options that can be used to set up or filter 'Download Jobs' within the Network Configuration Change Management (NCCM) system. Download Jobs involve retrieving configuration files from network devices (such as routers, switches, and firewalls) to centralize their storage, providing up-to-date backups, ensuring compliance, and tracking configuration changes. The options provided by this endpoint are crucial for functionalities like searching (e.g., by device credentials, asset ID, or name) and filtering (based on field conditions) existing download jobs, as seen on the 'Download Job' page.", "summary": "Get the options for the Download Jobs", "tags": ["Configuration Search"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint specifically provides the 'options' for configuring or interacting with Download Jobs, rather than listing the jobs themselves or their details. These options could include various protocols (e.g., Inventory Download protocol, OS Image Download protocol, or other configuration download protocols) and parameters that NCCM might automatically set by default from system parameters. While the API specification indicates no request body or response body for this endpoint, the context suggests its output would inform how users can refine searches or apply filters on the Download Job page. There are no parameters required for this GET request."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Integrators"], "primary_use_case": "To retrieve available options for configuring, searching, and filtering Network Configuration Change Management (NCCM) Download Jobs."}, "content_for_embedding": "This API endpoint retrieves the default and available options necessary for setting up, searching, and filtering \"Download Jobs\" within the Network Configuration Change Management (NCCM) system. These options are crucial for defining parameters for configuration file retrieval from network devices and for refining search and filter operations on the \"Download Job\" page, enabling effective management of network configurations.", "ontology_classification": {"features": ["download_job_management", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Options", "Download Job Management", "NCCM"]}}, {"path": "/ux/nccm/configuration_template/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_template_list", "description": "This endpoint retrieves a paginated list of all Configuration Templates available within the current organization. Configuration Templates are fundamental in NCCM (Network Configuration and Change Management) for automating various network tasks. NCCM supports nine distinct types of templates, each designed for specific requirements, including Command Execution, Configuration Merge, Configuration Replace, Configuration Rollback, OS Image Upgrade, Network Task Automation, NETCONF Merge, NETCONF Replace, Network Diagnosis, HTTP REST-API Configuration, and Golden Template. This API provides the necessary details to view and manage these templates, which are crucial for making configuration changes on networking devices for tasks like provisioning, OS upgrades, and service creation. The results can be sorted by a specified key and in a defined order.", "summary": "Gets a list of configuration template", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Configuration Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}}, "description": ""}}, "additional_info": "The `items_per_page` and `page` query parameters are required for pagination. The `reverse` parameter, if true, sorts the results in descending order, while the `sort` parameter specifies the key by which the results should be sorted. Admin-privileged users control who can view, edit, or delete specific templates in NCCM. The Configuration Template Grid typically displays Template ID, Name, Vendor, and OS Type. Configuration templates can also be used as building blocks to create Service Templates, which are used to fulfill broader services within NCCM. This endpoint directly supports the functionality seen in the 'Configuration Template Grid' in the NCCM UI, allowing programmatic access to the list of templates."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Developers"], "primary_use_case": "To retrieve a paginated list of network configuration templates used for automating network tasks, provisioning, OS upgrades, and general configuration changes on networking devices within an organization."}, "content_for_embedding": "This API retrieves a paginated and sortable list of Configuration Templates used in Network Configuration and Change Management (NCCM). These templates are essential for automating various network tasks, including command execution, configuration merge/replace/rollback, OS image upgrades, network task automation, and service creation on networking devices. It provides programmatic access to the list of templates displayed in the NCCM UI's Configuration Template Grid, allowing users to view and manage these crucial configuration assets.", "semantic_keywords": ["Configuration retrieval", "NCCM", "Configuration Management"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_template/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_create", "description": "This API endpoint facilitates the management of NCCM (Network Change & Configuration Management) configuration templates. It allows users to create, view, or edit various types of configuration templates, crucial for automating network tasks and fulfilling services within NCCM. These templates are privilege-based, meaning user access (view, add, edit, delete, execute, export) is controlled by administrator-defined roles and privileges. The endpoint supports nine distinct template types, including Command Execution, Configuration Merge, Configuration Replace, Configuration Rollback, OS Image Upgrade, Network Task Automation, NETCONF Merge, NETCONF Replace, Network Diagnosis, HTTP REST-API Configuration, and Golden Template. Each template serves specific requirements within network change and configuration management workflows.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various data types for defining configuration templates. It recognizes a wide range of primitive fields such as StringField, IntField, BooleanField, DateTimeField, and specialized fields like ObjectIdField and UUIDField. Compound fields like ListField and DictField are supported for complex data structures. Special handling is implemented for ReferenceField (similar to DRF's ForeignKey) and EmbeddedDocumentField, generating nested serializers based on depth. Generic fields (GenericReferenceField, GenericEmbeddedDocumentField) are also supported. The API is designed to integrate with NCCM's features, enabling functionalities like scheduling tasks for network baselines, initiating downloads of network configuration data, and defining user access to view or modify network configuration parameters. Users should be aware that certain fields (FileField, ImageField, BinaryField) are not well supported or untested, and other unspecified fields may lead to incorrect behavior."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "IT Operations Personnel"], "primary_use_case": "This API endpoint is used for managing (creating, viewing, and editing) NCCM (Network Change & Configuration Management) configuration templates. These templates are crucial for automating network tasks and fulfilling services, supporting various types like Command Execution, OS Image Upgrade, and Network Task Automation. Access is controlled by administrator-defined roles and privileges."}, "content_for_embedding": "This API endpoint facilitates the creation, viewing, and editing of NCCM (Network Change & Configuration Management) configuration templates. These templates are essential for automating diverse network tasks and service fulfillment, including command execution, configuration merges/replaces, OS image upgrades, and network task automation. The API supports various data types for template definition and integrates with NCCM features for scheduling network baselines, downloading configuration data, and managing user access based on defined privileges.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "download_job_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["NCCM", "Configuration Templates", "Network Automation"]}}, {"path": "/ux/nccm/configuration_template/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_template_retrieve", "description": "This API endpoint allows for viewing and potentially editing a specific Configuration Template within the NCCM (Network Change & Configuration Management) system. It supports granular control over who can view, edit, or delete templates in NCCM, providing permissions related to network changes and configurations. Configuration Templates, of which NCCM supports nine different types (e.g., Command Execution, Configuration Merge, Network Task Automation), are crucial for automating and standardizing network operations. Each template has a unique ID, Name, Vendor, and OS Type. This endpoint is primarily used for retrieving the details of a specific template identified by its unique ID.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string representing the unique Template ID. This endpoint integrates with the NCCM's capability to manage user access to functionalities, ensuring only authorized users can interact with specific configuration templates. Access control for templates, which allows administrators to define visibility (e.g., 'Private' where specific users or user groups are enabled), is managed by privileged users. This endpoint is fundamental for administrators and automation engineers to manage and inspect specific network configuration automation artifacts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Automation Engineer", "Privileged User"], "primary_use_case": "To retrieve and view details of specific network configuration templates within the NCCM system, enabling administrators and automation engineers to manage and inspect these critical artifacts for network automation and standardization."}, "content_for_embedding": "This API retrieves detailed information for a specific network configuration template by its unique ID within the Network Change & Configuration Management (NCCM) system. These templates are fundamental for automating and standardizing network operations, facilitating tasks like device provisioning, OS upgrades, and service modifications. The endpoint supports granular access control, ensuring only authorized administrators and automation engineers can view and manage these essential network configuration artifacts.", "semantic_keywords": ["Configuration Templates", "NCCM", "Configuration retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/configuration_template/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_configuration_template_update", "description": "This API endpoint allows for the viewing and editing of a specific Configuration Template within the NCCM (Network Change & Configuration Management) module. These templates are crucial for automating network tasks such as command execution, configuration merge/replace/rollback, OS image upgrades, and network diagnosis. The endpoint facilitates the management of user access to functionalities related to network changes and configurations, including the ability to define user access to view or modify network configuration parameters. It supports various data types for the request body, including primitive fields like StringField and IntField, as well as compound fields like ListField and DictField.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` in the path parameter refers to the unique identifier of the Configuration Template to be viewed or updated. Access control in NCCM for Configuration Templates is granular, allowing admin-privileged users to control who can view or edit specific templates. The request body for modifying the configuration template can utilize a wide range of field types for serializing documents, covering basic data types, URLs, emails, dates, and geometric points. Note that `FileField`, `ImageField`, and `BinaryField` are not well supported or untested, and other unspecified fields might behave unexpectedly. Authentication and Authorization profiles within NCCM ensure that only authorized users can access and modify these configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Admin-privileged users"], "primary_use_case": "This API allows network administrators to view and update specific configuration templates within the Network Change & Configuration Management (NCCM) module, enabling automation of network tasks and granular control over user access to network configuration parameters."}, "content_for_embedding": "This API allows network administrators to view and update specific configuration templates within the Network Change & Configuration Management (NCCM) module. These templates are essential for automating network tasks such as command execution, configuration merge/replace/rollback, OS image upgrades, and network diagnosis. The endpoint supports granular access control, enabling admin-privileged users to manage user access and modify various configuration parameters using diverse data types.", "ontology_classification": {"features": ["nccm.network_configuration_and_change_management", "nccm.privilege-based_access_control", "infraon_configuration.network_configuration_management_(nccm)"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Templates", "Network Configuration", "Update"]}}, {"path": "/ux/nccm/configuration_template/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_configuration_template_destroy", "description": "This API endpoint allows for the deletion of a specific Configuration Template within the NCCM (Network Change & Configuration Management) module. Configuration Templates are fundamental to NCCM, supporting various network operations such as Command Execution, Configuration Merge, and OS Image Upgrade. Deleting a template using this endpoint ensures that it is no longer available for use in network changes and configurations.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Template"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string identifier for the Configuration Template to be deleted. In NCCM, module lets admin-privileged users decide who can view, edit, or delete any specific templates in NCCM. Successful deletion will result in no response body, indicating the template has been removed from the system. This action permanently removes the template; users should verify the correct template ID before initiating a delete request."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "Admin-privileged Users"], "primary_use_case": "This API endpoint is designed to permanently remove a specific Configuration Template from the Network Change & Configuration Management (NCCM) system. This is essential for maintaining an accurate and clean repository of network configurations, preventing the accidental use of outdated or incorrect templates in network operations such as command execution, configuration merges, or OS image upgrades."}, "content_for_embedding": "This API facilitates the deletion of a specific Configuration Template identified by its unique ID within the NCCM (Network Change & Configuration Management) module. Configuration Templates are foundational for various network operations, including command execution, configuration merging, and OS image upgrades. Deleting a template ensures it is no longer available for use in network changes and configurations. This action is permanent, and successful deletion results in a 204 No Content response. Only admin-privileged users are authorized to perform this operation, and they must verify the correct template ID before initiating the delete request.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "privilege-based_access_control"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Configuration Templates", "NCCM"]}}, {"path": "/ux/nccm/configuration_template/create-csv/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_create_csv_create", "description": "This POST API endpoint facilitates the creation of a CSV file for configuration templates within the NCCM (Network Change & Configuration Management) module. It supports the management of network changes and configurations by allowing users with appropriate privileges to export configuration template data. The endpoint handles a wide range of document fields for flexible data serialization, including primitive types (String, Int, Boolean, DateTime) and complex structures (List, Dict, Reference, EmbeddedDocument). Access to this feature, including the ability to export, is privilege-based, meaning users can only perform this action if granted the necessary permissions by an administrator, typically defined under roles and privileges.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various Document fields for data serialization. Developers should be aware of the supported primitive and compound fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, `DictField`, and `ReferenceField`. While many fields are well-supported, caution should be exercised with `FileField`, `ImageField`, and `BinaryField` as they are noted as 'not well supported or untested'. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own corresponding serializer fields. This API is commonly used for auditing, backup, or migrating configuration data within the NCCM system, complementing functionalities like creating, editing, or managing predefined templates. Users need to ensure they have the 'export' privilege for configuration templates to successfully utilize this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Users with export privileges"], "primary_use_case": "Exporting configuration template data from the NCCM module for purposes such as auditing, backup, and migration."}, "content_for_embedding": "This API endpoint allows users with appropriate privileges to export configuration template data from the NCCM module into a CSV file. It supports various document fields for data serialization and is commonly used for auditing, backup, or migrating configuration data within the NCCM system.", "semantic_keywords": ["Configuration Templates", "CSV Export", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/configuration_template/csv_cols/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_csv_cols_create", "description": "This API endpoint is part of the NCCM (Network Change & Configuration Management) module and is designed to manage CSV column configurations for configuration templates. It allows users to view, edit, add, and delete CSV column definitions, which are critical for defining and managing predefined templates for configuration uploads. The endpoint supports granular control over how users interact with these configurations, ensuring that only authorized personnel can make changes related to network configuration parameters and data.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint, while not explicitly detailed for specific parameters beyond the generic serializer fields, expects data formatted using recognized primitive and compound fields. Developers should be aware of the supported field types listed in the `request_body_description`, such as `StringField`, `IntField`, `BooleanField`, `ListField`, and `DictField`. Special handling is noted for `ReferenceField` and `EmbeddedDocumentField` based on serializer depth. Fields like `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested. This endpoint plays a role in creating, editing, and managing configuration upload templates, which can be exported and imported (e.g., as XLS files), as hinted by related NCCM functionalities. Privileges for accessing and modifying these configurations are managed through roles and privileges within the NCCM system."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Developers"], "primary_use_case": "This API manages CSV column configurations for network configuration templates within the NCCM module, enabling users to view, edit, add, and delete these definitions. This is crucial for defining and managing predefined templates for configuration uploads."}, "content_for_embedding": "This API endpoint, part of the NCCM (Network Change & Configuration Management) module, is designed to manage CSV column configurations for network configuration templates. It facilitates CRUD operations (view, edit, add, delete) on CSV column definitions, which are essential for defining and managing predefined templates used in configuration uploads. The endpoint also supports customization of columns and handles CSV data for both import and export functionalities, ensuring granular control over network configuration parameters and data by authorized personnel.", "semantic_keywords": ["Configuration Templates", "Column Configuration", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "network_configuration_management_(nccm)"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_template/download_csv/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_template_download_csv_retrieve", "description": "This API endpoint facilitates the download of a CSV template, primarily intended for importing configuration profiles within the Network Change & Configuration Management (NCCM) system. Users can leverage this template to structure and prepare data for bulk profile uploads, enabling efficient management of network configurations. The 'Download' privilege is essential for users to export such templates from the NCCM module.", "tags": ["Configuration Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically provides a template file, likely in CSV format, for profile import operations. It is analogous to the 'download icon' functionality described in the user guide, which redirects to an upload window for importing template files. While the context mentions .xls support for template files, this endpoint explicitly provides a .csv template. The API plays a role in the 'Profile Import' process within NCCM, allowing users to obtain the necessary format for defining configuration profiles before uploading them. There are no specific parameters required for this GET request."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations"], "primary_use_case": "Enable users to download a CSV template for importing network configuration profiles within the NCCM system."}, "content_for_embedding": "This API allows users to download a CSV template specifically designed for importing network configuration profiles into the Network Change & Configuration Management (NCCM) system. This template is crucial for preparing data for bulk profile uploads, enabling efficient management of network configurations. It serves as a standardized format for defining configuration profiles before their upload.", "ontology_classification": {"features": ["network_configuration_and_change_management", "configuration_templates", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Templates", "Download", "NCCM"]}}, {"path": "/ux/nccm/configuration_template/download_xls/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_template_download_xls_retrieve", "description": "This API endpoint facilitates the download of a configuration template in XLS file format. It is specifically designed for integration with the Network Configuration Change Management (NCCM) module, allowing users to export predefined configuration templates. This function is essential for managing and reusing network device configurations offline or with other tools, aligning with the privilege to 'Download' as defined in the system's access control, which enables export operations.", "tags": ["Configuration Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint serves a similar purpose to the 'Template Export' functionality mentioned in the user guides, allowing users to obtain NCCM's configured templates as an Excel file. While the API specification does not list any parameters, in a typical usage flow, this endpoint would likely be triggered by a download icon within the UI. The downloaded XLS file format is compatible with template import mechanisms elsewhere in the system. There are no request parameters or body required for this GET request."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Users managing network device configurations"], "primary_use_case": "To enable users to download network configuration templates in XLS format for offline management and reuse within the Network Configuration Change Management (NCCM) module."}, "content_for_embedding": "This API endpoint allows users to download pre-defined network configuration templates in XLS file format. It is integrated with the Network Configuration Change Management (NCCM) module, facilitating the export of templates for offline management, reuse, and compatibility with import mechanisms. This GET request requires no parameters and is typically triggered by a download action in the UI, serving as a 'Template Export' functionality.", "semantic_keywords": ["Configuration Templates", "Download", "Export"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/configuration_template/file_details/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_template_file_details_retrieve", "description": "This API endpoint provides read and write access to file details within the Network Change & Configuration Management (NCCM) Configuration Template module. It allows users to view and edit predefined templates used for network configuration uploads. Specifically, it enables managing information related to configuration parameters and potentially controlling access to scheduling tasks for network baseline configurations and initiating downloads of network configuration data, as described in the NCCM module functionalities.", "tags": ["Configuration Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint resides within the `/ux/nccm/configuration_template/` path, directly relating it to the Configuration Template module in NCCM. While the original description mentioned 'users', the context suggests a focus on managing network configuration templates and their associated details. Users accessing this endpoint require appropriate privileges under the NCCM module to perform view or edit operations, which are typically defined under roles and privileges by an administrator. This is crucial for controlling user access to functionalities related to network changes and configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Users with NCCM module privileges", "Administrators (for privilege definition)"], "primary_use_case": "To manage (view and edit) file details within Network Change & Configuration Management (NCCM) Configuration Templates, including network configuration uploads, parameter management, scheduling baseline configurations, and initiating data downloads."}, "content_for_embedding": "This API provides read and write access to file details within the Network Change & Configuration Management (NCCM) Configuration Template module. It enables users to view and edit predefined templates for network configuration uploads, manage configuration parameters, schedule network baseline configurations, and initiate downloads of network configuration data. This endpoint is crucial for managing network configuration templates and requires appropriate user privileges within the NCCM module for view and edit operations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Configuration Templates", "Network Configuration", "Privilege-based Access"]}}, {"path": "/ux/nccm/configuration_template/is_disabled/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_is_disabled_create", "description": "This API endpoint primarily manages the enabled/disabled status of a configuration template within the NCCM (Network Change & Configuration Management) application. It allows for managing user access to functionalities related to network changes and configurations, specifically focusing on the state of configuration templates. This is a privilege-based feature, meaning users can access, view, add, or edit only if they have been granted the necessary permissions by an administrator, as defined under roles and privileges.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various primitive and compound data types, such as strings, integers, booleans, and lists. While the specific fields for this POST request (to determine if a template is disabled) are not explicitly detailed in the provided JSON, the general serializer notes indicate support for `StringField`, `BooleanField`, `IntField`, etc. Compound fields like `ListField` and `DictField` are also supported. It is important to note that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. This endpoint likely forms part of the broader NCCM module which controls permissions for Baseline Scheduler and Configuration Download Jobs. Service templates in NCCM, often created from one or more configuration templates, are also privilege-based features."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users with specific privileges"], "primary_use_case": "This API manages the enabled/disabled status of configuration templates within the Network Change & Configuration Management (NCCM) application, controlling user access and the usability of these templates for network changes and configurations."}, "content_for_embedding": "This API endpoint allows administrators to control the active status of network configuration templates within the Network Change & Configuration Management (NCCM) system. By enabling or disabling templates, it directly impacts whether these templates can be utilized for tasks such as upload jobs and network diagnosis. Access to this functionality is privilege-based, ensuring that only authorized users, typically network administrators or those granted specific permissions, can modify the state of these critical configuration assets. This is a core feature for maintaining control over network changes and ensuring operational integrity.", "semantic_keywords": ["Configuration Templates", "Disable", "NCCM"], "ontology_classification": {"features": ["nccm.network_configuration_and_change_management", "nccm.privilege-based_access_control", "asset.configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_template/is_enabled/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_is_enabled_create", "description": "This API endpoint allows users to check whether a specific NCCM (Network Change & Configuration Management) configuration template is enabled. It falls under the NCCM module, which manages user access to functionalities related to network changes and configurations, including scheduling tasks for network baseline configuration and defining user access to view or modify network configuration parameters. Configuration templates are integral to fulfilling services within NCCM and can be of various types such as Command Execution, Configuration Merge, or Network Task Automation. This check is privilege-based, meaning access, viewing, and editing are subject to the user's assigned roles and privileges.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint specifies various primitive and compound fields, including 'StringField', 'IntField', 'BooleanField', 'DateTimeField', 'ListField', and 'DictField', which are mapped to corresponding DRF (Django REST Framework) fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or fully tested. This endpoint is crucial for verifying the status of templates before initiating network configurations or changes, ensuring alignment with defined access policies and system authorization profiles. It's a key part of managing access to network configuration tasks, which are often defined within roles and privileges."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Security Administrators"], "primary_use_case": "This API endpoint checks the enabled status of NCCM (Network Change & Configuration Management) configuration templates. This is critical for managing network configurations and ensuring that network changes and tasks adhere to defined access policies and system authorization profiles."}, "content_for_embedding": "This API endpoint verifies the enabled status of a specific NCCM (Network Change & Configuration Management) configuration template. It is a privilege-based check, essential for managing user access and ensuring compliance with defined roles and privileges before initiating network configurations or changes. Configuration templates, such as Command Execution, Configuration Merge, or Network Task Automation, are fundamental to NCCM services. The status (active/enabled) of these templates directly impacts their usability in tasks like upload jobs and network diagnosis. This endpoint supports filtering and searching of templates based on their active status and other criteria.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["NCCM", "Configuration Templates", "Privilege-based Access"]}}, {"path": "/ux/nccm/configuration_template/multidelete/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_multidelete_create", "description": "This API endpoint facilitates the deletion of multiple configuration templates within the Network Change & Configuration Management (NCCM) system. Users can select one or more templates to remove them permanently from the system, similar to how individual templates or rules are deleted. The operation requires user confirmation (e.g., 'YES' to confirm deletion). This endpoint is crucial for managing and maintaining a clean and efficient set of configuration templates.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to contain the IDs or identifiers of the configuration templates to be deleted. The serializer for documents supports various primitive fields (e.g., `StringField`, `IntField`, `BooleanField`) and compound fields like `ListField` and `DictField`. While specific request body parameters for this endpoint were not detailed in the original specification, it is inferred that a list of template identifiers would be passed. NCCM supports both full and pattern matching for user input fields. Users must have appropriate privileges to perform delete operations on configuration templates, as defined by their roles in the system."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "System Administrators", "IT Operations Personnel"], "primary_use_case": "To enable the efficient management and maintenance of network configurations by allowing users to delete multiple configuration templates simultaneously within the NCCM system."}, "content_for_embedding": "This API endpoint facilitates the bulk deletion of multiple configuration templates within the Network Change & Configuration Management (NCCM) system. It allows users with appropriate privileges to permanently remove selected templates by providing their identifiers, requiring user confirmation for the operation. This is crucial for maintaining a clean and efficient set of configuration templates.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "bulk_actions"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Configuration Templates", "Bulk Delete"]}}, {"path": "/ux/nccm/configuration_template/options/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_template_options_retrieve", "description": "This API endpoint, `/ux/nccm/configuration_template/options/`, is used to retrieve various options and parameters related to Network Change & Configuration Management (NCCM) configuration templates. It facilitates managing user access to functionalities concerning network changes and configurations, specifically retrieving options for defining user access to view or modify network configuration parameters and interacting with configuration templates. This endpoint helps in understanding the available settings for creating or managing configuration templates within the NCCM application.", "tags": ["Configuration Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "While the API specification shows no explicit parameters or request body, given the context of 'Configuration Parameters' and managing user access, this endpoint is likely used to fetch dynamic options necessary for populating UI elements related to configuration template creation or modification. The NCCM module offers permissions for various sub-modules like 'Baseline Scheduler' and 'Configuration Download Job', suggesting that the options returned by this endpoint might include configuration types, access control settings, or authorization profile details relevant to the broader NCCM functionalities. The templates can be of various types (e.g., Command Execution, Configuration Merge, Network Task Automation) and the options retrieved might pertain to these types or their specific parameters. Users can access, view, add, edit, delete, execute, and export based on privileges defined by the administrator."}, "llm_generated": {"business_context": {"primary_use_case": "To retrieve options and parameters necessary for managing and creating Network Change & Configuration Management (NCCM) configuration templates, facilitating user access control and UI population."}, "content_for_embedding": "This API endpoint retrieves various options and parameters related to Network Change & Configuration Management (NCCM) configuration templates. It is crucial for managing user access to network change and configuration functionalities, specifically by providing options for defining user access to view or modify network configuration parameters. The endpoint helps in understanding available settings for creating or managing configuration templates within the NCCM application, including configuration types, access control settings, and authorization profile details for populating UI elements.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Templates", "Network Configuration", "Access Control"]}}, {"path": "/ux/nccm/configuration_template/production_ready/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_production_ready_create", "description": "This API endpoint facilitates the management of production-ready configuration templates within the Network Change & Configuration Management (NCCM) system. NCCM is a sub-module designed to manage user access to functionalities related to network changes and configurations. This specific endpoint allows for viewing and potentially editing existing configuration templates. It is crucial for controlling aspects such as Baseline Scheduler tasks and Configuration Download Jobs within the network environment.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint (POST method) is designed to handle various data types, supporting common primitive fields like StringField, URLField, IntField, BooleanField, and DateTimeField. Compound fields such as ListField and DictField are also supported, mapping to DRF fields. ReferenceField is handled similarly to Django REST Framework's ForeignKey, often resulting in a nested serializer if the depth is greater than 0, or the ID as a string. EmbeddedDocumentField is also designed for nested serializers at non-zero depth. Users can define a 'Profile' name and a 'Description' for the configuration template, along with 'Blacklist' and 'Whitelist' parameters, as mentioned in the NCCM context. While capable of handling various document types, specific fields like FileField, ImageField, and BinaryField may have limited or untested support. This endpoint is integral for users who need to define and manage network configuration profiles, potentially for CLI Jobs that create direct SSH or TELNET sessions with devices."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "IT Operations Personnel", "Developers integrating with NCCM systems"], "primary_use_case": "This API endpoint is used for the management of production-ready configuration templates within the Network Change & Configuration Management (NCCM) system. It allows users to view and potentially edit existing configuration templates, which are crucial for controlling Baseline Scheduler tasks and Configuration Download Jobs. It also enables the definition and management of network configuration profiles, including parameters like \"Profile\" name, \"Description\", \"Blacklist\", and \"Whitelist\", specifically for CLI Jobs that establish direct SSH or TELNET sessions with network devices. These templates are used to make configuration changes such as provisioning, OS upgrades, service creation, and deactivation on networking devices."}, "content_for_embedding": "This API endpoint, `POST /ux/nccm/configuration_template/production_ready/`, is designed for the comprehensive management of production-ready configuration templates within the Network Change & Configuration Management (NCCM) system. It facilitates viewing and editing of existing templates, which are essential for orchestrating Baseline Scheduler tasks and Configuration Download Jobs in a network environment. The endpoint supports the creation and modification of network configuration profiles, allowing for the specification of a \"Profile\" name, \"Description\", and parameters such as \"Blacklist\" and \"Whitelist\". These templates are particularly integral for CLI Jobs that initiate direct SSH or TELNET sessions with devices, enabling various configuration changes including provisioning, OS upgrades, service creation, and deactivation. The templates inherit Jinja2 standards, supporting data types, control statements, and operator conditions. The API is a core component for users who need to define and manage network configuration profiles for automated network operations.", "semantic_keywords": ["Configuration Templates", "Network Configuration", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "cli_jobs", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_template/toggle-template-quickadd/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_toggle_template_quickadd_create", "description": "This API endpoint provides functionality to toggle the 'quick add' status for a configuration template within the Infraon NCCM system. It allows administrators to manage access control and visibility for specific templates, determining which users or user groups can view, edit, or manage them. The 'quick add' feature likely relates to streamlined template creation or management processes, often alongside 'quick edit' functionalities (as suggested by Context 2). When visibility is set to 'Private' (Context 1, 7, 10), specific users and user groups can be selected to manage the template, indicating a more granular access control mechanism for quick adds.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body, as described in the API specification, is intended for document serialization and supports a wide range of primitive and compound field types (e.g., `StringField`, `BooleanField`, `ListField`, `DictField`). While the `request_body_description` details general serialization capabilities, its specific relevance to the `toggle-template-quickadd` endpoint's payload is not explicitly detailed by the provided context. However, given the 'toggle' nature of the endpoint, the request body likely contains parameters to identify the template and specify the desired 'quick add' state or related access control settings. Contexts 1, 7, and 10 highlight that user and user group selection becomes enabled when template visibility is 'Private', which is a critical aspect for template management and configuration within the NCCM system. The concept of 'quick edit' from Context 2 suggests that a 'quick add' might similarly be a simplified or expedited action for template creation/management. Further details on the exact structure of the request body (e.g., required template ID, boolean flag for quick add status, user/group IDs) would be helpful for a complete understanding, but are not available in the provided JSON or contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "To manage access control and visibility for configuration templates within the Infraon NCCM system, specifically by toggling their 'quick add' status."}, "content_for_embedding": "This API endpoint allows administrators to toggle the 'quick add' status of configuration templates within the Infraon NCCM system. This functionality is crucial for managing access control and visibility, enabling granular control over which users or user groups can view, edit, or manage specific templates. The 'quick add' feature streamlines template creation and management, similar to 'quick edit' functionalities. When a template's visibility is set to 'Private', this API facilitates the selection of specific users and user groups for managing that template, enhancing secure and efficient configuration management.", "semantic_keywords": ["Configuration Templates", "Access Control", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_template/upload-csv/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_template_upload_csv_create", "description": "This API endpoint facilitates the upload of CSV files within the Configuration Template module of the NCCM tool. It allows users to define or update configuration templates by importing data from a CSV file. This is crucial for creating new upload jobs, updating existing configurations, or managing system-wide device configurations. The process supports importing configuration details, device specifics, and scheduling parameters directly from the uploaded CSV.", "tags": ["Configuration Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTemplates"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint expects a file, specifically a CSV file, containing the configuration data. The API internally handles various primitive and compound field types as specified in the `request_body_description`, mapping them to appropriate data structures. Users must have the 'Upload' privilege to perform this operation, as defined by their roles and permissions within the NCCM system. This feature is commonly used for bulk deployment of new devices, updating existing device configurations, or upgrading device firmware. Accepted formats for uploads typically include CSV, XLS, and XLSX files, with a maximum size of 20MB. While the specification details various field types, `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, which might require specific handling or alternative approaches if those data types are critical for the CSV content."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "To enable bulk upload and management of network device configurations and templates via CSV files within the NCCM system."}, "content_for_embedding": "This API endpoint allows users to upload CSV, XLS, or XLSX files (up to 20MB) to define, update, or manage configuration templates for network devices within the NCCM tool. It supports bulk deployment of new devices, updating existing configurations, and upgrading device firmware by importing configuration details, device specifics, and scheduling parameters from the uploaded file. Users require 'Upload' privileges to utilize this feature for creating new upload jobs and managing system-wide device configurations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["CSV Import", "Configuration Templates", "Network Configuration"]}}, {"path": "/ux/nccm/configuration_trigger/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_trigger_list", "description": "This endpoint retrieves a paginated list of Configuration Triggers within the current organization. Configuration Triggers are pre-processors designed to gather information from devices or verify the presence of specific configurations. The collected information (Trigger Objects) can then be dynamically imported into Configuration Templates, similar to Device, Job, Profile, or Global objects, to build device commands based on their current state. This allows for dynamic adjustments to device configurations. The API supports pagination and sorting of the retrieved list.", "summary": "Gets a list of configuration trigger", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Configuration Trigger"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}}, "description": ""}}, "additional_info": "Each Configuration Trigger has associated details including its unique name, a description of its purpose, the vendor and OS name it's designed for, and its trigger type (e.g., 'List Trigger' for gathering lists of items). Users can view who created the trigger. This API is part of the NCCM system. When fetching triggers, you must specify the `items_per_page` and `page` parameters. Optional parameters include `reverse` for sorting order (ascending/descending) and `sort` to define the sorting key (e.g., by name, description). Triggers can be edited or deleted via other associated actions, which might appear as action icons in a UI context."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Network engineers", "IT operations"], "primary_use_case": "To enable network administrators and IT operations to view and manage Configuration Triggers, which are essential for dynamic network configuration adjustments and information gathering from devices."}, "content_for_embedding": "This API retrieves a paginated and sortable list of Configuration Triggers within the NCCM system. Configuration Triggers are pre-processors used to gather device information or verify configurations, enabling dynamic adjustments to device commands based on their current state. The API allows users to view details such as trigger name, description, vendor, OS, and type.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Configuration Retrieval", "Network Configuration", "Pagination"]}}, {"path": "/ux/nccm/configuration_trigger/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_trigger_create", "description": "This API endpoint facilitates the configuration and management of triggers within the NCCM (Network Change & Configuration Management) system. It allows users to modify various trigger details, including name, description, visibility settings, and trigger type, and other associated configuration parameters. The primary purpose is to manage user access to functionalities related to network changes and configurations, such as Baseline Scheduler and Configuration Download Jobs. This endpoint enables the creation and modification of configuration triggers that define how the NCCM application interacts with network devices, specifically for viewing or editing settings, similar to how CLI Jobs/sessions allow direct command execution.", "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint utilizes a flexible document serializer that supports a wide range of primitive and compound field types, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Special handling is provided for `ReferenceField` and `EmbeddedDocumentField` to support nested data structures based on serializer depth. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. This endpoint is crucial for defining automated actions and rules within the NCCM system to manage network configurations. Trigger names are editable and the system supports at least two trigger types; further details on specific trigger types and their configurations can be found in the NCCM user guide."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users managing network configurations", "System Administrators"], "primary_use_case": "This API allows users to create and modify configuration triggers within the Network Change & Configuration Management (NCCM) system. These triggers are essential for automating network configuration tasks, collecting device information, and defining rules for how the NCCM application interacts with network devices."}, "content_for_embedding": "This API endpoint facilitates the creation and modification of configuration triggers within the Network Change & Configuration Management (NCCM) system. It enables users to define automated actions and rules for interacting with network devices, such as gathering information, checking configurations, and triggering alarms or events. These triggers can be integrated with Configuration Templates and are crucial for managing functionalities like Baseline Scheduler and Configuration Download Jobs, similar to CLI sessions. The API supports updating various trigger details including name, description, visibility, and type, and handles diverse data types for flexible configuration.", "semantic_keywords": ["Configuration", "Trigger", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "notification_trigger_configuration", "workflow_automation", "configuration_download_jobs", "cli_session_initiation", "event_detection_and_monitoring", "notification_and_incident_generation", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_trigger/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_trigger_retrieve", "description": "This endpoint is used to retrieve detailed information about a specific Configuration Trigger within the NCCM system. It allows users to view various trigger details, including the name, description, visibility settings, trigger type, and other configuration parameters. This retrieve operation is equivalent to viewing the details of a trigger after it has been created, rather than deleting it as the original API specification's description incorrectly stated. The endpoint is designed to provide information about a trigger identified by its unique ID for the current organization.", "summary": "Retrive the configuration trigger with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Trigger"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier of the configuration trigger to be retrieved. This endpoint provides detailed information about a trigger, including details about its 'Created By' user. NCCM supports two main types of triggers: List Triggers (which output a list of items from trigger execution, e.g., list of interfaces, connected ports) and Boolean Triggers (which output a 'Yes' or 'No' value, e.g., checking if SNMP Service is configured). While the API specification mentioned 'delete', the context clearly indicates this is a 'retrieve' operation. The 'Delete' action is typically handled by a separate API endpoint where a confirmation prompt prevents accidental deletion. This endpoint is crucial for understanding the properties of existing NCCM configuration triggers."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "NCCM system users", "IT operations personnel", "Developers"], "primary_use_case": "To enable users to retrieve and view comprehensive details of a specific Configuration Trigger within the NCCM system, facilitating understanding of its purpose, configuration, and behavior for network configuration management and troubleshooting."}, "content_for_embedding": "This API endpoint, GET /ux/nccm/configuration_trigger/{id}/, is designed to retrieve detailed information about a specific Configuration Trigger identified by its unique ID within the Network Configuration and Change Management (NCCM) system. It allows users to view various trigger attributes such as name, description, visibility, and trigger type. Configuration Triggers act as pre-processors to gather information (like a list of interfaces or SNMP service status) from network devices, which can then be used in Configuration Templates. This operation is crucial for understanding the properties of existing NCCM configuration triggers, including both List Triggers (outputting a list of items) and Boolean Triggers (outputting Yes/No values). The endpoint provides a comprehensive view of a trigger's configuration after its creation.", "semantic_keywords": ["Configuration Trigger", "Retrieval", "NCCM"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "notification_trigger_configuration", "detailed_record_view"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_trigger/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_configuration_trigger_update", "description": "This PUT API endpoint (`/ux/nccm/configuration_trigger/{id}/`) is designed to update or edit an existing configuration trigger within the NCCM (Network Change & Configuration Management) system. It allows administrators to modify various trigger details, including their name, description, visibility settings, and trigger type, along with other configuration parameters. This is crucial for managing network baseline configuration tasks and defining user access to view or modify network configuration parameters. The process of modifying triggers aligns with the broader NCCM functionality that manages user access to functionalities related to network changes and configurations.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the configuration trigger to be updated. The request body for this endpoint accepts a wide range of primitive and compound data types for serializing Document fields, including strings, numbers, booleans, dates, and complex structures like lists and dictionaries. Special handling is noted for `ReferenceField` and `EmbeddedDocumentField`, where nested serializers are autogenerated based on the serializer depth. While most standard fields are well-supported, `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. This endpoint is typically used to refine or adjust existing automated network configuration tasks or policies. It is an integral part of managing user permissions and automated actions within the NCCM framework, particularly for features such as Baseline Scheduler and Configuration Download Jobs."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "IT Operations"], "primary_use_case": "To enable administrators to modify and refine existing configuration triggers within the NCCM system, thereby managing network baseline configurations, user access to network parameters, and automated network configuration tasks."}, "content_for_embedding": "This API updates an existing configuration trigger within the Network Change & Configuration Management (NCCM) system. It allows administrators to modify trigger details such as name, description, visibility, and type, which is essential for managing network baseline configurations and user access to network parameters. It refines automated network configuration tasks and policies.", "semantic_keywords": ["Configuration Trigger", "NCCM", "Update"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_trigger/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_configuration_trigger_destroy", "description": "This API endpoint facilitates the deletion of a specific configuration trigger within the NCCM (Network Change & Configuration Management) module. It allows administrators to remove configuration triggers from the system, which are essential components for automating network changes and configurations. This operation requires specifying the unique identifier (`id`) of the trigger to be deleted.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Trigger"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier of the configuration trigger to be removed. Deleting a trigger using this endpoint will permanently remove it from the system. As indicated by context, a confirmation prompt typically appears in the UI to prevent accidental deletions when performing this action, though this API directly performs the deletion action. This action is part of managing user access to functionalities related to network changes and configurations within NCCM."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To delete a specific configuration trigger used for automating network changes and configurations within the NCCM module."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific configuration trigger within the NCCM (Network Change & Configuration Management) module. It allows administrators to remove configuration triggers from the system, which are essential components for automating network changes and configurations. This operation requires specifying the unique identifier (`id`) of the trigger to be deleted. Deleting a trigger using this endpoint will permanently remove it from the system. This action is part of managing user access to functionalities related to network changes and configurations within NCCM.", "semantic_keywords": ["Delete", "Configuration Trigger", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_trigger/add_trigger/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_trigger_add_trigger_create", "description": "This API endpoint facilitates the addition of new triggers within the NCCM (Network Change & Configuration Management) module. It allows users with appropriate permissions to define and create new triggers, which are essential for automating network configuration and management tasks. The process involves specifying various trigger details, including configuration parameters, for scheduling and managing network operations. This functionality is crucial for maintaining network baselines, initiating configuration downloads, and generally managing permissions related to network changes. The endpoint supports complex data types for its request body, including primitive fields like strings, integers, and booleans, as well as compound fields like lists and dictionaries, and references to other documents.", "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is highly flexible, supporting various primitive data types such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `UUIDField`. It also accommodates complex structures like `ListField` and `DictField` for nested data, and `ReferenceField` for linking to other documents. Users should refer to the 'request_body_description' in the API specification for a full list of recognized fields and their mapping to DRF fields. When creating triggers, pay close attention to the details, as triggers can be used to control access to Baseline Scheduler and Configuration Download Job functionalities. Accidental deletions can be prevented by a confirmation prompt, implying the importance of correctly defining triggers. It's important to note that fields like `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested, and their use may lead to incorrect behavior."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations personnel", "Users with appropriate permissions"], "primary_use_case": "To enable automation of network configuration and management tasks by allowing users to define and add new triggers. This includes gathering information from devices, checking configurations, maintaining network baselines, and initiating configuration downloads."}, "content_for_embedding": "This API allows for the creation and addition of new triggers within the Network Change & Configuration Management (NCCM) module. Triggers act as pre-processors to gather information from network devices or verify specific configurations, enabling automation of network tasks. They can be configured with various details such as name, vendor, OS type, trigger type (LIST or Boolean), and parser type (e.g., Column Split, Regex, Python Script) to dynamically generate device commands or check device states. These triggers are crucial for maintaining network baselines, initiating configuration downloads, and are integrated with Configuration Templates. The API supports complex request body structures for defining comprehensive trigger parameters. Access is privilege-based, managed by administrators.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "notification_trigger_configuration"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Trigger", "Add", "Network Configuration"]}}, {"path": "/ux/nccm/configuration_trigger/download_csv/", "method": "GET", "details": {"operationId": "ux_nccm_configuration_trigger_download_csv_retrieve", "description": "This API endpoint facilitates the download of configuration data, specifically in CSV format, within the Network Change & Configuration Management (NCCM) module. It allows users with appropriate permissions to generate and retrieve detailed summaries of configuration download activities for network devices, including status (success or failure), device details, and any encountered errors. This functionality is crucial for managing and auditing network configurations, aligning with the broader NCCM capabilities for controlling access to configuration download jobs and managing network parameters.", "tags": ["Configuration Trigger"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is part of the NCCM module, which manages user access to functionalities related to network changes and configurations, including 'Configuration Download Job' permissions. The ability to download configuration data in CSV format supports tasks like auditing download job executions, obtaining detailed reports of successful/failed downloads, and potentially exporting configured profiles as XLS files (as suggested by context about profile export/import). While the API specification currently lists no parameters, typical usage often involves specifying filters or criteria to narrow down the configuration download data being requested. Users should ensure they have the necessary 'Download' privileges within the system, which allows users to download and perform export operations within the selected module/page."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Auditor", "IT Operations"], "primary_use_case": "To enable network administrators and auditors to download detailed CSV reports of network device configuration download activities, including status, device details, and errors, for auditing and management purposes within the NCCM module."}, "content_for_embedding": "This API endpoint allows users to download comprehensive configuration data in CSV format from the Network Change & Configuration Management (NCCM) module. It provides detailed summaries of configuration download activities for network devices, including success/failure status, device specifics, and error logs. This functionality is essential for auditing network configurations, tracking download job executions, and generating reports on network parameter changes.", "semantic_keywords": ["Configuration Download Jobs", "Data Export", "NCCM"], "ontology_classification": {"features": ["download_job_management", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_trigger/multi-delete/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_trigger_multi_delete_create", "description": "This API endpoint, `/ux/nccm/configuration_trigger/multi-delete/`, allows users to perform multiple delete operations on 'configuration triggers' within the Network Change & Configuration Management (NCCM) module. It supports the removal of triggers from the system, preventing accidental deletions by likely requiring a confirmation prompt. The endpoint is specifically designed for multi-item deletion, indicating that users with appropriate delete privileges can manage several triggers at once. The original description stating it's for 'users to be viewed or edited' appears to be an error or boilerplate, as the path and context clearly indicate deletion functionality for configuration triggers. The request body is expected to support various primitive and compound field types as specified, with 'ReferenceField' and 'EmbeddedDocumentField' having special handling for serialization.", "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint requires delete privileges within the NCCM module. The 'Delete' privilege specifically allows users to view and perform delete operations for configured triggers, but not to add or edit them. The system also supports two types of triggers: 'List Trigger' (to get lists of items as output) and 'Boolean Trigger' (to get a boolean value). While the endpoint focuses on deletion, understanding these trigger types may be relevant for identifying which triggers to remove. The request body will likely contain identifiers (e.g., IDs, UUIDs) of the configuration triggers to be deleted, as reflected by the supported field types like 'ObjectIdField' and 'UUIDField'. Ensure the request body adheres to the specified serializer primitive and compound field types for successful multi-deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations"], "primary_use_case": "Allows users to perform multiple delete operations on configuration triggers within the Network Change & Configuration Management (NCCM) module."}, "content_for_embedding": "API to perform bulk deletion of configuration triggers within the Network Change & Configuration Management (NCCM) system. This endpoint allows users with appropriate privileges to remove multiple triggers simultaneously, preventing accidental deletions and streamlining configuration management.", "semantic_keywords": ["Delete", "Configuration Trigger", "NCCM", "Bulk Delete"], "ontology_classification": {"features": ["network_configuration_and_change_management", "notification_trigger_configuration"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/configuration_trigger/review/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_trigger_review_create", "description": "This API endpoint, `/ux/nccm/configuration_trigger/review/`, facilitates the review process for Network Change & Configuration Management (NCCM) triggers. It allows authorized users to perform detailed review actions, such as viewing, editing, or modifying various trigger details including name, description, visibility settings, and other configuration parameters within the NCCM system. This endpoint is crucial for managing network baselines and configuration data, ensuring proper oversight of changes.", "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically supports the 'review' action within the NCCM configuration trigger management. While the initial description broadly mentions 'viewed or edited', the context from documentation, particularly regarding 'Quick Edit' and 'Edit' actions, implies a more detailed modification capability, consistent with managing trigger configurations. The request body is designed to handle various field types including StringField, IntField, BooleanField, and complex structures like ListField and DictField, enabling comprehensive data submission for trigger review and modification. ReferenceField and EmbeddedDocumentField are handled with nested serialization where applicable. Common use cases include adjusting scheduled tasks for network baselines, modifying configuration download job parameters, or updating trigger conditions based on review findings. Developers should be mindful of serialization rules for complex and reference fields as described in the `request_body_description`."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Configuration Manager", "IT Operations Staff"], "primary_use_case": "This API endpoint facilitates the review, viewing, editing, and modification of Network Change & Configuration Management (NCCM) triggers. It is crucial for managing network baselines and configuration data, ensuring proper oversight of changes within the NCCM system."}, "content_for_embedding": "This API endpoint, `/ux/nccm/configuration_trigger/review/`, is designed for the comprehensive management and review of Network Change & Configuration Management (NCCM) triggers. It enables authorized users to view, edit, and modify various trigger details, including name, description, and visibility settings. The endpoint supports detailed modification capabilities, handling diverse field types for comprehensive data submission. Common use cases include adjusting scheduled tasks for network baselines, modifying configuration download job parameters, and updating trigger conditions based on review findings. This functionality is critical for maintaining network baselines and ensuring robust oversight of configuration changes within the NCCM framework. It is a privilege-based feature, allowing access, viewing, adding, editing, deleting, executing, and exporting of configuration triggers.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "notification_trigger_configuration", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Trigger", "Network Configuration", "Review"]}}, {"path": "/ux/nccm/configuration_trigger/save_csv_data/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_trigger_save_csv_data_create", "description": "This API endpoint facilitates the saving of CSV data related to network configuration changes and management (NCCM). Specifically, it is used to manage configuration parameters, schedules, and various trigger details. Users with appropriate permissions can make necessary changes to configurations, including modifying trigger details such as name, description, and visibility settings. This involves saving updates to existing NCCM rules, triggers, configuration parameters, and potentially user access settings related to these functionalities.", "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint handles the serialization of various data types including strings, URLs, emails, integers, floats, booleans, dates, and complex objects indicated by fields such as `ListField`, `DictField`, and `ReferenceField`. For `ReferenceField` and `EmbeddedDocumentField`, nested serializers are autogenerated for non-zero depth, treating `ReferenceField` akin to `ForeignKey` in DRF. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or tested with this serializer. All other fields might be mapped incorrectly. The endpoint is integral to managing user access and changes within the NCCM module, requiring specific privileges to save modifications related to configuration parameters and scheduled tasks."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Staff", "System Administrators"], "primary_use_case": "This API enables network administrators to upload and save CSV data for managing network configuration parameters, schedules, and trigger details within the Network Configuration Changes and Management (NCCM) module. It facilitates bulk updates and modifications to NCCM rules and configurations."}, "content_for_embedding": "This API endpoint facilitates the saving of CSV data for Network Configuration Changes and Management (NCCM). It specifically handles POST requests to /ux/nccm/configuration_trigger/save_csv_data/, allowing users to upload and save CSV files containing network configuration parameters, schedules, and trigger details. This functionality is essential for managing and updating existing NCCM rules, triggers, and configuration parameters, including user access settings. It supports bulk operations and requires appropriate user privileges for modifications, streamlining the process of applying configuration changes via CSV import.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "notification_trigger_configuration"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["NCCM", "Configuration", "CSV Import"]}}, {"path": "/ux/nccm/configuration_trigger/saved_imported/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_trigger_saved_imported_create", "description": "This API endpoint primarily facilitates the management and interaction with saved or imported configurations within the NCCM (Network Change & Configuration Management) system. While the original description suggested it allows users to be 'viewed or edited,' the context information, particularly from Rank 1, strongly indicates its role in managing user access to functionalities related to network changes and configurations. This includes managing permissions for tasks such as scheduling network baseline configurations and initiating downloads of network configuration data. Users interact with configuration parameters, which may include loading configurations from existing versions or text files, making device-specific changes, and creating variables to be filled by NCCM during device execution. This endpoint likely enables the POST operation for creating or updating such saved or imported configuration objects.", "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to serialize various document fields, supporting a wide range of data types. Recognized primitive fields include `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, and `DateField`. Compound fields such as `ListField` and `DictField` are also supported. Special handling is noted for `ReferenceField` (like `ForeignKey` in DRF) and `EmbeddedDocumentField`, with nested serializers generated based on depth. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their corresponding serializer fields. Fields like `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested. Any other unrecognized fields will be mapped to `DocumentField` and may not function as expected. Given its role in NCCM, common use cases for this endpoint would include saving new network configurations, importing existing configuration files, or updating parameters of previously saved configurations prior to deployment or analysis."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Professional"], "primary_use_case": "This API facilitates the creation, updating, saving, and importing of network configurations within the NCCM (Network Change & Configuration Management) system. It enables network administrators to manage configuration profiles, parameters, and files for network devices, including loading configurations from existing versions or text files and preparing them for deployment or analysis."}, "content_for_embedding": "This API allows for the creation, updating, saving, and importing of network configurations within the NCCM (Network Change & Configuration Management) system. It supports managing configuration profiles, parameters, and files, enabling network administrators to handle device-specific changes, load configurations from existing versions or text files, and prepare configurations for deployment or analysis.", "semantic_keywords": ["Network Configuration", "Configuration Management", "Configuration Trigger"], "ontology_classification": {"features": ["centralized_management", "network_configuration_and_change_management", "download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/configuration_trigger/validate_csv/", "method": "POST", "details": {"operationId": "ux_nccm_configuration_trigger_validate_csv_create", "description": "This API endpoint is designed to validate CSV files specifically for Network Change & Configuration Management (NCCM) configurations. While the original description mentioned 'users to be viewed or edited,' the context strongly indicates this endpoint is for validating CSV data related to `configuration_trigger` actions within the NCCM module. This could involve validating imported rules, trigger definitions, or other configuration parameters that are typically managed via CSV in NCCM, before they are applied or saved. It plays a crucial role in ensuring data integrity and correctness before changes are committed to the system.", "tags": ["Configuration Trigger"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigurationTrigger"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint expects a `Document` type as input, where various primitive and compound fields are recognized. This suggests that the CSV content might be encapsulated within a document-like structure for validation. Supported field types include `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and various other specialized fields related to data types commonly found in configuration parameters such as `GeoPointField` and `UUIDField`. Compound fields like `ListField` and `DictField` are also supported, implying nested data validation capabilities. \n\nNotably, fields like `FileField`, `ImageField`, and `BinaryField` are explicitly highlighted as 'Not well supported or untested,' indicating potential issues if the CSV data contains such types. Developers should be cautious when validating CSVs with these unsupported field types.\n\nThe context suggests that NCCM allows adding, editing, and deleting rules and triggers, and this validation step likely precedes these actions, providing a crucial check on the CSV data integrity. It's a privilege-based feature, meaning users need specific permissions to access and utilize this validation functionality."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel"], "primary_use_case": "This API validates CSV files containing Network Change & Configuration Management (NCCM) configuration data, specifically for configuration trigger actions, to ensure data integrity and correctness before changes are committed to the system."}, "content_for_embedding": "This API endpoint validates CSV files containing Network Change & Configuration Management (NCCM) configuration data, specifically for `configuration_trigger` actions. It ensures data integrity and correctness before configurations are applied or saved to the system. The validation process supports various data types, though some file-related types are noted as untested. This is a privilege-based feature, typically used by network administrators or IT operations personnel to pre-check bulk configuration imports via CSV.", "semantic_keywords": ["Validation", "CSV Import", "Configuration Trigger"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "it_operations"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/jobs-account-audit/", "method": "GET", "details": {"operationId": "ux_nccm_jobs_account_audit_list", "description": "This endpoint retrieves a paginated list of 'Jobs Account Audit' records for the current organization. These audit records summarize user actions related to job executions on target devices, specifically capturing details for actions performed via Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. The report includes crucial information such as the status (success or failure) of configuration download activities, device details, and any encountered errors, providing valuable insights into user-account-based audit information within the NCCM system.", "summary": "Gets a list of aaa_audit list", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Jobs Account Audit"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/JobAccountAudit"}}}}, "description": ""}}, "additional_info": "This API allows users to fetch detailed audit information on actions performed on network devices. The 'Job(s) Account Audit' focuses on user account-based audit information. The parameters 'items_per_page' and 'page' are required for pagination, while 'sort' and 'reverse' can be used to control the ordering of the audit records. Reports generated by this endpoint are similar to the 'Jobs Account Audit Report' found in the NCCM reports section, which typically can be accessed from the reports section on the left panel. The audit logs capture details like device IP address, account, connection protocol, and more. This data is essential for monitoring and auditing asset history within the network management system."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Auditors", "IT Operations Personnel", "Compliance Officers"], "primary_use_case": "To retrieve and audit historical user actions and job execution details on network devices within the NCCM system, providing insights into configuration changes and operational activities."}, "content_for_embedding": "This API retrieves a paginated list of \"Jobs Account Audit\" records, summarizing user actions related to job executions on target network devices. This includes details for actions performed via Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. The records capture status (success/failure) of configuration download activities, device details, and errors, offering user-account-based audit information. It is essential for monitoring and auditing asset history within the NCCM system, similar to the \"Jobs Account Audit Report\" found in the NCCM reports section. Parameters allow for pagination (items_per_page, page) and sorting (sort, reverse) of the audit records, which include device IP, account, and connection protocol.", "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "historical_data_management", "real-time_and_historical_reporting", "granular_data_filtering", "audit_log", "user_access_auditing"], "primary_module": "report", "confidence_score": 0.95}, "semantic_keywords": ["Audit", "Report", "NCCM"]}}, {"path": "/ux/nccm/jobs-account-audit/", "method": "POST", "details": {"operationId": "ux_nccm_jobs_account_audit_create", "description": "This API endpoint provides access to the Jobs Account Audit, a user account-based audit information system within the network management system. It captures and allows viewing of detailed audit logs for actions performed on target devices via various jobs, including Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. The audit log displays critical information such as Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, Connect Status, and Task Owner. This endpoint is crucial for ensuring the accountability and security of file management within the system.", "tags": ["Jobs Account Audit"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint, while not explicitly detailed in the `parameters` field of the specification, is designed to handle various field types for document serialization. These include `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, and `DateField`. Compound fields like `ListField` and `DictField` are also supported, enabling complex data structures. `ReferenceField` and `EmbeddedDocumentField` facilitate handling of related data, with nested serializers for deeper data retrieval. Users can typically access this audit functionality in the system via the 'Audits' menu by clicking 'Job(s) Account Audit'. This endpoint is commonly used for generating detailed audit reports. For filtering, the system generally supports fields like Task Name, Device IP Address, and Audit Message."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Analysts", "IT Auditors"], "primary_use_case": "To provide access to and enable viewing of detailed audit logs for actions performed on network devices via various job types (Download, Upload, Trigger, Network Diagnosis), ensuring accountability and security within the network management system."}, "content_for_embedding": "This API endpoint provides access to the Jobs Account Audit, a user account-based audit information system within the network management system. It captures and allows viewing of detailed audit logs for actions performed on target devices via various jobs, including Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. The audit log displays critical information such as Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, Connect Status, and Task Owner. This endpoint is crucial for ensuring the accountability and security of file management within the system. Users can generate detailed audit reports and filter them by fields like Task Name, Device IP Address, and Audit Message, and export the data.", "semantic_keywords": ["Audit Trail", "Log Management", "Network Configuration"], "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "granular_data_filtering", "report_export_capabilities", "log_search_module"], "primary_module": "report", "confidence_score": 0.9}}}, {"path": "/ux/nccm/jobs-account-audit/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_jobs_account_audit_retrieve", "description": "This API endpoint provides access to detailed audit information for user accounts within the network management system, specifically related to Jobs Account Audits. It captures and displays data on actions performed on target devices through Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. The audit information includes details such as Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, Connect Status, and Task Owner. This endpoint is crucial for auditing the security and activity of files and operations within the network management system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Jobs Account Audit"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}}, "description": ""}}, "summary": "", "additional_info": "The 'id' path parameter is required and represents a unique identifier for a specific Job Account Audit entry. This endpoint is part of the 'Audits' menu functionality, allowing users to view comprehensive user account-based audit information. It is particularly useful for tracking user actions during job executions, providing insights into the 'who, what, and when' of various network management tasks."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Security Analyst", "IT Auditor"], "primary_use_case": "Auditing user actions and security within the network management system by providing detailed job account audit information."}, "content_for_embedding": "This API retrieves detailed audit information for specific user account job executions within a network management system. It provides insights into actions performed on target devices, including download jobs, upload jobs, triggers, and network diagnosis. The audit data encompasses device IP, account, connection details, and task owner, enabling comprehensive security and activity tracking. The endpoint is accessed via a unique audit ID and is vital for auditing user actions and ensuring system security.", "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "real-time_and_historical_reporting", "historical_data_management", "granular_data_filtering"], "primary_module": "report", "confidence_score": 0.95}, "semantic_keywords": ["Audit Trail", "NCCM", "Report"]}}, {"path": "/ux/nccm/jobs-account-audit/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_jobs_account_audit_update", "description": "This API endpoint allows for the viewing and editing of Job(s) Account audit information, which is user account-based. This audit captures and displays actions performed on target devices through various job types such as Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. The system tracks key details including Device IP Address, Device Account, Connection Protocol, password information, Connect Time, Connect Status, and Task Owner for each audit entry referenced by its unique ID. This functionality is crucial for maintaining the security and traceability of activities within the network management system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Jobs Account Audit"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the specific Job(s) Account audit record to be viewed or edited. The request body, if applicable for `PUT` operations, should conform to the expected format for Documents, supporting various primitive fields like StringField, IntField, BooleanField, DateTimeField, and more COMPLEX fields like ListField, DictField, ReferenceField, and EmbeddedDocumentField. Developers should note the documented limitations regarding FileField, ImageField, and BinaryField support. This endpoint provides detailed audit logs, which are essential for understanding when a job was initiated, modified, or completed, and include configuration details and error logs."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Personnel", "System Auditors"], "primary_use_case": "This API allows for the viewing and editing of job account audit information, which is crucial for maintaining security and traceability of activities performed on target devices through various job types like Download Jobs, Upload Jobs, Trigger, and Network Diagnosis."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing of individual Job(s) Account audit records, identified by a unique ID. It captures and displays detailed audit information related to actions performed on target devices, encompassing various job types such as Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. Key tracked details include Device IP Address, Device Account, Connection Protocol, password information, Connect Time, Connect Status, and Task Owner. The functionality is vital for ensuring security and traceability within the network management system by providing comprehensive audit logs that detail when a job was initiated, modified, or completed, along with configuration and error logs. The request body supports various data types for updating the audit record.", "ontology_classification": {"features": ["audit_log", "network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Audit", "Job Management", "Update"]}}, {"path": "/ux/nccm/jobs-account-audit/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_jobs_account_audit_destroy", "description": "This API endpoint allows for the deletion of a specific entry within the 'Jobs Account Audit' records. The 'Jobs Account Audit' provides user account-based audit information, capturing and displaying details on actions performed on target devices. This includes activities such as Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. The audit log typically includes information like Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, and Connect Status.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Jobs Account Audit"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the specific Job Account Audit entry to be deleted. While the current description focuses on deletion, related audit information, as indicated in the context, includes details on filtering, searching, and exporting audit results, often displaying information such as Timestamp, Task Name, IP Address, and Audit Message. This endpoint specifically targets the deletion of these individual audit records."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Operations", "Security Analyst"], "primary_use_case": "To delete specific audit records related to job accounts and device actions, ensuring data hygiene and compliance."}, "content_for_embedding": "This API allows for the deletion of a specific entry from the 'Jobs Account Audit' records. These records provide user account-based audit information, detailing actions performed on target devices such as Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. Each audit entry includes information like Device IP Address, Device Account, Connection Protocol, Password, Connect Time, and Connect Status. The `id` path parameter uniquely identifies the audit entry to be removed. This endpoint specifically targets the removal of individual audit log entries.", "semantic_keywords": ["Delete", "Audit Trail", "Log Management"], "ontology_classification": {"features": ["audit_log"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/jobs-account-audit/options/", "method": "GET", "details": {"operationId": "ux_nccm_jobs_account_audit_options_retrieve", "description": "This endpoint is used to retrieve the default options for the NCCM Jobs Account Audit. The Jobs Account Audit provides user account-based audit information, capturing and displaying details on actions performed on target devices via Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. This audit information typically includes details such as Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, Connect Status, and Task Owner.", "summary": "Get the options for the jobs Account Audit", "tags": ["Jobs Account Audit"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobAccountAudit"}}}, "description": ""}}, "additional_info": "The audit is accessible via the 'Audits' menu within the system. The options retrieved from this endpoint would likely support populating UI elements or configuring report generation related to these audit logs. While the API specification does not list any parameters, the audit logs themselves support detailed filtering and searching capabilities based on fields like Task Name, Device IP Address, and Audit Message, and allow for auto-refresh and export functionalities."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Auditors", "IT Operations Personnel"], "primary_use_case": "This API retrieves default options for the NCCM Jobs Account Audit, which provides user account-based audit information on actions performed on target devices. These options are crucial for populating UI elements, enabling detailed filtering and searching capabilities, and configuring report generation related to audit logs."}, "content_for_embedding": "This GET endpoint, located at /ux/nccm/jobs-account-audit/options/, is designed to retrieve the default configuration options for the NCCM Jobs Account Audit. The Jobs Account Audit captures and displays comprehensive user account-based audit information, including details on actions executed on target devices through Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. Key audit data points include Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, Connect Status, and Task Owner. The options provided by this API are instrumental for front-end applications to populate user interface elements, facilitate advanced filtering and searching (e.g., by Task Name, Device IP Address, Audit Message), and enable functionalities like auto-refresh and export for audit reports. This API serves as a foundational component for audit log visualization and reporting within the system, accessible via the \"Audits\" menu.", "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "report_configuration_options", "report_filtering_options", "report_export_capabilities"], "primary_module": "report", "confidence_score": 0.95}, "semantic_keywords": ["Jobs Account Audit", "Audit Options", "Report Configuration"]}}, {"path": "/ux/nccm/manage_vulnerabilities/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_retrieve", "description": "This endpoint retrieves a paginated list of vulnerabilities managed within the NCCM system. It provides a comprehensive overview of detected vulnerabilities across devices, categorized primarily by vendor, OS Name, and OS Version. The response includes details such as total vulnerabilities, open vulnerabilities, and the count of affected nodes. The data can be sorted and paginated to facilitate efficient data retrieval, focusing on details relevant for tracking threats and customizing policies for proactive management. This endpoint is crucial for getting detailed insights into vulnerabilities based on device OS, affected nodes, and CVE information, assisting users in prioritizing and taking targeted actions.", "summary": "Gets a list of Vulnerablities by vendor, OS Type, OS version", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The vulnerabilities listed are sourced from a centralized repository integrated with external feeds like NVD. Each vulnerability entry can include fields such as Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, and Exploit Count. The 'items_per_page' and 'page' query parameters are mandatory for pagination. Optional parameters 'reverse' and 'sort' control the sorting order and key, respectively. The 'Nodes Affected' count, if available, can typically redirect to a more detailed list of impacted devices within the NCCM UI. This API is commonly used for managing vulnerabilities, monitoring historical data, and driving automated processes related to vulnerability data downloads from sources like Cisco and NIST databases."}, "llm_generated": {"business_context": {"user_personas": ["Security Analyst", "Network Administrator", "IT Operations Personnel"], "primary_use_case": "To retrieve and manage a paginated list of network vulnerabilities, track threats, and assist in prioritizing and taking targeted actions for proactive security management."}, "content_for_embedding": "This API endpoint retrieves a paginated list of vulnerabilities detected across network devices within the NCCM system. It provides a comprehensive overview, categorized by vendor, OS Name, and OS Version, including details like total vulnerabilities, open vulnerabilities, and affected node counts. The data can be sorted and paginated for efficient retrieval, focusing on information crucial for tracking threats and customizing security policies. Vulnerabilities are sourced from a centralized repository integrated with external feeds like NVD, and entries include Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, and Exploit Count. The API supports sorting and pagination, and is used for managing vulnerabilities, monitoring historical data, and automating vulnerability data downloads from sources like Cisco and NIST databases. Users can identify, manage, and address vulnerabilities, gaining detailed insights based on device OS, affected nodes, vendor details, and CVE information.", "ontology_classification": {"features": ["vulnerable_list_page_drill-down", "vulnerable_device_count_display", "asset_search_and_filtering"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Vulnerabilities", "NCCM", "Retrieval"]}}, {"path": "/ux/nccm/manage_vulnerabilities/", "method": "POST", "details": {"operationId": "ux_nccm_manage_vulnerabilities_create", "description": "This API endpoint, located at `/ux/nccm/manage_vulnerabilities/`, is designed for comprehensive management of vulnerabilities within the NCCM (Network Change & Configuration Management) system. It supports the identification, management, and addressing of vulnerabilities across all network devices, enabling users to perform actions such as viewing, adding, editing, deleting, executing, and exporting vulnerability-related data. The functionality is privilege-based, meaning user access and permitted actions are controlled by assigned roles and privileges within NCCM. Specifically, it facilitates tasks like downloading vulnerability data, OS versions, and EOX status for Cisco devices, and automating processes based on configured schedules.", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This feature is integrated with external feeds like NVD (National Vulnerability Database) and provides a centralized repository of known vulnerabilities, displaying details categorized by vendor, OS information, mitigation details, and other relevant data. It is crucial for tracking threats, monitoring historical vulnerabilities, and customizing policies for proactive management. Users can access, add, edit, delete, execute, and export workflow jobs related to vulnerability management only if assigned appropriate roles and privileges by administrators. The API endpoint itself does not have a request body and returns no response body, indicating it might trigger system actions or that details are accessed through other endpoints or the UI."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Administrators", "Network Engineers"], "primary_use_case": "This API manages vulnerabilities and related workflow jobs within the NCCM system, enabling identification, management, and addressing of vulnerabilities across network devices. It supports actions like adding, editing, deleting, executing, and exporting vulnerability data, integrating with external feeds like NVD, and automating processes based on schedules."}, "content_for_embedding": "This API endpoint, `/ux/nccm/manage_vulnerabilities/`, provides comprehensive management capabilities for network vulnerabilities within the NCCM system. It allows users to identify, manage, and address vulnerabilities across all network devices. Key functionalities include viewing, adding, editing, deleting, executing, and exporting vulnerability-related data and workflow jobs. The API supports downloading vulnerability data, OS versions, and EOX status for Cisco devices, and facilitates automation via configured schedules. It integrates with external feeds like NVD, serving as a centralized repository for tracking threats, monitoring historical vulnerabilities, and customizing proactive management policies. Access and actions are privilege-based, controlled by assigned roles within NCCM.", "ontology_classification": {"features": ["privilege-based_access_control", "centralized_management", "network_configuration_and_change_management", "download_job_management", "workflow_automation", "report_export_capabilities"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Vulnerabilities", "NCCM", "Vulnerability Management"]}}, {"path": "/ux/nccm/manage_vulnerabilities/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_retrieve_2", "description": "This `/ux/nccm/manage_vulnerabilities/{id}/` API endpoint allows users to view or edit specific vulnerability details within the NCCM (Network Change & Configuration Management) module. This functionality is part of a privilege-based feature that supports tasks such as downloading OS vulnerability details from sources like Cisco and NIST databases. Users can access, add, edit, delete, execute, and export workflow jobs related to these vulnerabilities, provided they have the appropriate roles and privileges assigned by an administrator. The `id` in the URL path is used to identify the specific vulnerability record or workflow job being managed.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path parameter, used to uniquely identify the vulnerability workflow job. While the endpoint description mentions viewing or editing 'users', the context strongly indicates this endpoint is related to 'managing vulnerabilities' and 'workflow jobs' within the NCCM module, specifically for downloading vulnerability data and automating processes. The original description likely contains a generic placeholder that the context helps correct. This module also supports downloading OS versions and EOX status for Cisco devices. Permissions are granular; users must have specific authorization to interact with these vulnerability management functionalities."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Security Analyst"], "primary_use_case": "To manage and automate vulnerability-related tasks and data within the NCCM module, including viewing, editing, and executing workflow jobs for downloading vulnerability details and automating processes."}, "content_for_embedding": "This API endpoint manages specific vulnerability details and workflow jobs within the Network Change & Configuration Management (NCCM) module. It allows users with appropriate privileges to view, edit, add, delete, execute, and export workflow jobs. These jobs automate the downloading of OS vulnerability details from sources like Cisco and NIST databases, as well as OS versions and EOX status for Cisco devices. The API uses an 'id' to identify specific vulnerability records or workflow jobs, supporting comprehensive vulnerability management and automated processes.", "ontology_classification": {"features": ["download_job_management", "privilege-based_access_control", "vulnerable_list_page_drill-down"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Vulnerability Management", "NCCM", "Download Job Management"]}}, {"path": "/ux/nccm/manage_vulnerabilities/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_manage_vulnerabilities_update", "description": "This PUT API endpoint allows users to manage (view or edit) specific vulnerability details within the NCCM (Network Change & Configuration Management) module. It supports tasks such as updating vulnerability data, OS versions, and EOX status, particularly for Cisco devices. This is a privilege-based feature, meaning users can access, add, edit, or delete vulnerability workflow jobs only if assigned appropriate roles and privileges by an administrator. It is crucial for automating processes based on configured schedules related to network security and configuration.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and represents the unique identifier for the vulnerability entry or workflow job being managed. The NCCM module offers granular permissions, and this endpoint is directly related to actions involving downloading OS vulnerability details from sources like Cisco and NIST databases. Users should ensure they have the necessary authorization profile and roles to perform update operations on vulnerability data, as defined by NCCM's security framework."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Security Engineer", "IT Operations Staff"], "primary_use_case": "To manage and update specific vulnerability details and workflow jobs within the Network Change & Configuration Management (NCCM) module, including vulnerability data, OS versions, and EOX status for network devices."}, "content_for_embedding": "This API allows users to manage and update specific vulnerability details and associated workflow jobs within the NCCM (Network Change & Configuration Management) module. It supports updating vulnerability data, OS versions, and EOX status, particularly for Cisco devices. Access is privilege-based, enabling users with appropriate roles to view, edit, add, or delete vulnerability workflow jobs. It's crucial for automating network security and configuration processes, including downloading OS vulnerability details from sources like Cisco and NIST databases.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "download_job_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Vulnerability Management", "NCCM", "Update"]}}, {"path": "/ux/nccm/manage_vulnerabilities/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_manage_vulnerabilities_destroy", "description": "This API endpoint allows for the deletion of a specific vulnerability entry managed within the NCCM (Network Change & Configuration Management) system's Workflow Jobs module. The Workflow Job module automates the downloading of OS vulnerability details from sources such as Cisco and NIST databases. This DELETE operation is a privilege-based feature, meaning users require appropriate roles and privileges assigned by an administrator to perform this action. Deleting a vulnerability entry is an irreversible action.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter (a string) is required and identifies the specific vulnerability entry to be deleted. The Workflow Jobs module supports tasks like downloading vulnerability data, OS versions, and EOX status (for Cisco devices), and automating processes based on configured schedules. This DELETE functionality is a critical part of managing these automated tasks and the associated vulnerability data. Access to this functionality is controlled within the NCCM sub-module permissions structure, similar to baseline scheduler and configuration download job permissions."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Administrator", "Security Administrator"], "primary_use_case": "Deleting specific vulnerability entries within the NCCM system."}, "content_for_embedding": "This API deletes a specific vulnerability entry within the NCCM (Network Change & Configuration Management) system. It is part of the Workflow Jobs module, which automates the download of OS vulnerability details from sources like Cisco and NIST. This is a privilege-based, irreversible action, requiring administrator-assigned roles and privileges. It is used by network administrators and security personnel to manage and address vulnerabilities across network devices.", "semantic_keywords": ["Delete", "Vulnerabilities", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/manage_vulnerabilities/asset-va/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_asset_va_retrieve", "description": "This endpoint retrieves a list of vulnerabilities associated with specific assets (devices or software) within the current organization. The data is organized by asset details such as IP address, hostname, and OS information (name and version), and includes the associated Vulnerability ID for each asset. It provides a clear overview of affected devices, helping users assess severity using CVSS scores and identify where action is needed.", "summary": "Gets a Vulnerabilities of Asset", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint focuses on providing a categorized summary of vulnerabilities by individual assets. Users can view details like CVSS Score, Published Date, Total Vulnerabilities, Total Devices, whether a vulnerability is Acknowledged or Resolved, and if a Work Around is Available. The API supports viewing categorized summaries for targeted action and is part of the 'Vulnerabilities by Assets' section described in the Infinity User Guide. Currently, this endpoint does not require any parameters or request body."}, "llm_generated": {"business_context": {"user_personas": ["Security Analyst", "IT Administrator", "Network Operations Engineer"], "primary_use_case": "To retrieve and display a categorized list of vulnerabilities associated with specific assets (devices or software) within an organization, enabling users to assess severity and identify necessary actions for effective vulnerability management."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of vulnerabilities, categorized by individual assets such as IP address, hostname, and OS details (name and version). It provides the associated Vulnerability ID for each asset, offering a clear overview of affected devices. Users can view critical information like CVSS scores, published dates, total vulnerabilities, total devices, and the status (Acknowledged, Resolved, Work Around Available) of each vulnerability. This functionality is crucial for assessing vulnerability severity and prioritizing remediation efforts, forming a key part of the \"Vulnerabilities by Assets\" section in the Infinity User Guide.", "semantic_keywords": ["Vulnerabilities", "Asset Management", "Retrieval"], "ontology_classification": {"features": ["vulnerable_device_count_display", "vulnerable_list_page_drill-down"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/manage_vulnerabilities/cve-va-all/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_cve_va_all_retrieve", "description": "This endpoint retrieves a list of vulnerabilities categorized by CVE (Common Vulnerabilities and Exposures) IDs for the current organization. CVE is a standardized system for identifying vulnerabilities. The API allows teams to evaluate the severity of these vulnerabilities, often using CVSS scores, and supports the implementation of rule-based responses for efficient threat mitigation. The response typically includes details such as Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, and Published Date, which are derived from a centralized repository of known vulnerabilities integrated with external feeds like NVD.", "summary": "Gets a Vulnerabilities Based on CVE", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is part of the 'manage_vulnerabilities' module, providing a view similar to the 'Vulnerabilities by CVE' section described in the user guide. It is useful for assessing the severity of vulnerabilities and for proactive management. Users can commonly resolve vulnerabilities and add comments through this module."}, "llm_generated": {"business_context": {"user_personas": ["Security Analysts", "Network Administrators", "IT Operations Teams", "Vulnerability Managers"], "primary_use_case": "To identify, assess the severity of, and facilitate the mitigation of vulnerabilities within an organization's network infrastructure, specifically those categorized by CVE IDs."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of vulnerabilities, categorized by Common Vulnerabilities and Exposures (CVE) IDs, for the current organization. It enables teams to evaluate the severity of these vulnerabilities using metrics like CVSS scores and supports the implementation of rule-based responses for efficient threat mitigation. The returned data includes critical details such as Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, and Published Date, all sourced from a centralized repository integrated with external feeds like NVD. This functionality is a core part of the \"Manage Vulnerabilities\" module, offering a view akin to the \"Vulnerabilities by CVE\" section in user guides, crucial for proactive vulnerability assessment and management.", "ontology_classification": {"features": ["vulnerable_device_count_display", "vulnerable_list_page_drill-down"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Vulnerabilities", "CVE", "Vulnerability Management"]}}, {"path": "/ux/nccm/manage_vulnerabilities/cve-va-summary/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_cve_va_summary_retrieve", "description": "This GET endpoint retrieves a comprehensive summary of vulnerabilities categorized by CVE and OS Version within the current organization. It provides insights into known vulnerabilities, allowing users to track threats and monitor historical vulnerability data. The data displayed typically includes details such as Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, and Published Date. This summary is crucial for evaluating severity, assessing the impact of vulnerabilities on devices categorized by OS information, and supporting proactive vulnerability management.", "summary": "Gets a Vulnerabilities Summary of by CVE OS Version", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint specifically focuses on providing a summary of vulnerabilities based on Common Vulnerabilities and Exposures (CVE) IDs and associated OS versions. The data retrieved from this endpoint can be used to understand the total vulnerabilities, open vulnerabilities, and affected nodes for specific OS versions. While the current specification indicates no parameters or request body, the summary provided is derived from a centralized vulnerabilities database often integrated with external feeds (e.g., NVD). Users can leverage this information to prioritize and take targeted actions for vulnerability resolution."}, "llm_generated": {"business_context": {"user_personas": ["Security Analysts", "IT Administrators", "Network Operations Teams"], "primary_use_case": "To retrieve a comprehensive summary of network vulnerabilities categorized by CVE and OS Version, enabling users to track threats, monitor historical data, assess impact, and support proactive vulnerability management."}, "content_for_embedding": "This API retrieves a comprehensive summary of network vulnerabilities, categorized by CVE and OS Version, within the current organization. It provides insights into known vulnerabilities, enabling users to track threats, monitor historical vulnerability data, and assess severity and impact on devices. The data, sourced from a centralized vulnerabilities database often integrated with external feeds like NVD, includes details such as Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, and Published Date. This summary is crucial for proactive vulnerability management, allowing users to prioritize and take targeted actions for vulnerability resolution. It aligns with the 'Manage Vulnerabilities' feature, providing detailed insights based on device OS, affected nodes, vendor details, CVE, and OS version.", "semantic_keywords": ["Vulnerabilities", "Vulnerability Management", "CVE"], "ontology_classification": {"features": ["vulnerable_device_count_display", "vulnerable_list_page_drill-down"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/manage_vulnerabilities/dasboard-data/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_dasboard_data_retrieve", "description": "This API endpoint provides access to dashboard data within the Manage Vulnerabilities section of NCCM (Network Change & Configuration Management). It allows users, based on their defined roles and privileges, to identify, manage, view, and potentially edit vulnerability-related data. The data originates from a centralized vulnerabilities database, which integrates with external feeds like NVD, categorizing information by vendor, OS details, mitigation actions, and more to track threats and customize policies proactively.", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of a privilege-based feature, meaning user access to view or edit data is governed by administrator-defined roles and permissions. The dashboard data typically includes details such as Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, and Exploit Count. While the original description states 'viewed or edited,' the specific GET method implies primarily retrieval of data for the dashboard. However, the broader context of 'manage vulnerabilities' strongly suggests that data presented via this endpoint is subject to management actions, which may include editing data via other endpoints/workflows within the system. The endpoint supports the export of data in Excel (XLSX) format for further analysis or reporting."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Security analysts", "IT operations personnel"], "primary_use_case": "To provide comprehensive dashboard data related to network vulnerabilities within NCCM, enabling users to identify, view, and manage vulnerability information, including details from a centralized database and external feeds like NVD, and to export this data for analysis."}, "content_for_embedding": "This API retrieves dashboard data for the 'Manage Vulnerabilities' section of NCCM (Network Change & Configuration Management). It provides access to vulnerability-related information from a centralized database, integrating with external feeds like NVD. The data includes vendor, OS details, CVE ID, CVSS Score, and Exploit Count, enabling users to track threats and customize policies. Access is privilege-based. The endpoint supports data export in Excel (XLSX) format.", "semantic_keywords": ["Vulnerabilities", "Dashboard", "Data Export"], "ontology_classification": {"features": ["privilege-based_access_control", "vulnerable_device_count_display", "vulnerable_list_page_drill-down", "visual_data_representation"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/manage_vulnerabilities/device-va/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_device_va_retrieve", "description": "This endpoint provides a comprehensive overview of detected vulnerabilities across devices within the current organization. It fetches detailed insights into vulnerabilities categorized by vendor, device OS, affected nodes, and includes data such as OS version, CVE, and total vulnerability count for each category. This allows users to prioritize and take targeted actions based on the categorization by OS and affected nodes.", "summary": "Gets a Vulnerabilities of by Device", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint focuses on displaying vulnerabilities linked to specific devices, organizing data by asset details (e.g., IP address, hostname) and OS information (name and version). It also lists the associated Vulnerability ID for each affected asset, providing a clear overview. While the current API specification does not list any parameters, in a typical usage scenario, users might filter or sort the results based on vendor, OS name, OS version, or CVE ID, which are all key data points related to vulnerabilities by device. The overall purpose of this endpoint is to provide an interface similar to the 'Vulnerabilities by Assets' section described in the user guide, helping users effectively view and manage device-specific vulnerabilities."}, "llm_generated": {"business_context": {"user_personas": ["Security Analyst", "IT Administrator", "Network Engineer", "Vulnerability Manager"], "primary_use_case": "This API provides a comprehensive overview of detected vulnerabilities across devices, enabling users to identify, prioritize, and take targeted actions based on categorization by vendor, device OS, affected nodes, OS version, and CVE."}, "content_for_embedding": "This API retrieves a comprehensive overview of detected vulnerabilities across devices within an organization. It provides detailed insights, categorizing vulnerabilities by vendor, device OS, affected nodes, OS version, and CVE, along with the total vulnerability count. This enables users to prioritize and take targeted actions. The endpoint displays vulnerabilities linked to specific devices, organizing data by asset details (e.g., IP address, hostname) and OS information (name and version), and lists associated Vulnerability IDs. While not explicitly in the spec, typical usage involves filtering and sorting by vendor, OS name, OS version, or CVE ID, similar to a 'Vulnerabilities by Assets' view.", "ontology_classification": {"features": ["vulnerable_device_count_display", "vulnerable_list_page_drill-down", "network_configuration_and_change_management", "privilege-based_access_control", "asset_search_and_filtering", "unified_asset_repository", "inventory_data_collection"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Vulnerabilities", "Device", "CVE"]}}, {"path": "/ux/nccm/manage_vulnerabilities/device-va-all/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_device_va_all_retrieve", "description": "This endpoint provides a comprehensive overview of all detected vulnerabilities across all devices within the current organization. It fetches detailed insights into vulnerabilities, including information based on device operating system (OS), affected nodes, vendor details, CVE IDs, and OS versions. The data helps users prioritize and take targeted actions by categorizing vulnerabilities by vendor, OS, and affected nodes, displaying total vulnerability counts for each category.", "summary": "Gets a Vulnerabilities of All Devices", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This API supports the functionality seen on the 'manage vulnerabilities' page, offering a consolidated view of security posture. While the current specification indicates no parameters or request body, the detailed nature of vulnerability insights suggests that future enhancements might introduce filtering capabilities for OS, vendor, or vulnerability types. This information is crucial for identifying, managing, and addressing vulnerabilities across network devices, enabling proactive security management."}, "llm_generated": {"business_context": {"user_personas": ["Security analysts", "Network administrators", "IT managers", "Administrators"], "primary_use_case": "To provide a comprehensive overview and enable management of all detected vulnerabilities across network devices within an organization, facilitating prioritization and targeted security actions."}, "content_for_embedding": "This API endpoint, `/ux/nccm/manage_vulnerabilities/device-va-all/`, provides a comprehensive overview of all detected vulnerabilities across all devices within the current organization. It retrieves detailed insights into vulnerabilities, including information based on device operating system (OS), affected nodes, vendor details, CVE IDs, and OS versions. The data helps users prioritize and take targeted actions by categorizing vulnerabilities by vendor, OS, and affected nodes, displaying total vulnerability counts for each category. This functionality supports the 'manage vulnerabilities' page, offering a consolidated view of the security posture for proactive security management. While currently a GET request without parameters, future enhancements may include filtering capabilities for OS, vendor, or vulnerability types.", "ontology_classification": {"features": ["Vulnerable Device Count Display", "Vulnerable List Page Drill-down", "Privilege-based Access Control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Vulnerabilities", "Device", "Retrieval"]}}, {"path": "/ux/nccm/manage_vulnerabilities/device-va-summary/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_device_va_summary_retrieve", "description": "This endpoint retrieves a comprehensive summary of vulnerabilities categorized by device within the current organization. It provides detailed insights into detected vulnerabilities, offering an overview based on device OS, affected nodes, vendor details, CVEs, and OS versions. The data helps users prioritize and take targeted actions by categorizing vulnerabilities by vendor, OS information, and affected nodes, showing the total vulnerability count for each category. This summary effectively assesses and addresses specific issues across devices.", "summary": "Gets a Vulnerabilities Summary of by Device", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This API endpoint provides data similar to what is seen on the 'Vulnerabilities by Assets' page, focusing on vulnerabilities linked to specific devices or software. The information encompasses details such as operating system (OS) information, nodes affected, and total vulnerability counts. While the API specification does not list explicit parameters, the summarized data typically includes fields like vendor, OS name, OS version, total vulnerabilities, and open vulnerabilities. This allows users to understand the impact of vulnerabilities on specific devices and prioritize remediation efforts, effectively providing a detailed summary of each vulnerability categorized by asset. There is no request body or parameters required for this GET request."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Analysts", "IT Operations Personnel"], "primary_use_case": "To provide a comprehensive summary of vulnerabilities categorized by device, enabling users to prioritize and manage security risks effectively."}, "content_for_embedding": "This API retrieves a comprehensive summary of vulnerabilities categorized by device within the current organization. It provides detailed insights into detected vulnerabilities, offering an overview based on device OS, affected nodes, vendor details, CVEs, and OS versions. The data helps users prioritize and take targeted actions by categorizing vulnerabilities by vendor, OS information, and affected nodes, showing the total vulnerability count for each category. This summary effectively assesses and addresses specific issues across devices, similar to the \"Vulnerabilities by Assets\" page.", "semantic_keywords": ["Vulnerabilities", "Device", "Summary"], "ontology_classification": {"features": ["vulnerable_device_count_display"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/manage_vulnerabilities/os-cve-va/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_os_cve_va_retrieve", "description": "This endpoint retrieves detailed vulnerability information categorized by vendor and operating system (OS) version within the current organization. It provides a comprehensive overview of all detected vulnerabilities, including details such as the total number of vulnerabilities and those currently open for a specific OS vendor/series. The data returned by this endpoint supports the prioritization of vulnerabilities and targeted remediation actions, offering insights into affected nodes and various vulnerability metrics.", "summary": "Gets a Vulnerabilities of by Vendor and os version", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint is crucial for managing vulnerabilities within NCCM (Network Configuration and Change Management). Users can expect to see fields such as Vendor, Series, OS Name, OS Version, Total Vulnerabilities, Open Vulnerabilities, Nodes Affected, Is Resolved, Latest OS Version, Latest OS Version in NCCM, OS Image, and Vulnerabilities by CVE. The categorization by OS and affected nodes assists users in prioritizing and taking targeted actions for vulnerability remediation. While this endpoint does not require any parameters, the information it provides is essential for understanding the overall vulnerability landscape based on specific OS versions and vendors."}, "llm_generated": {"business_context": {"user_personas": ["Security Analysts", "Network Administrators", "IT Operations Personnel"], "primary_use_case": "To retrieve and provide a comprehensive overview of detailed vulnerability information, categorized by vendor and operating system (OS) version, to support prioritization and targeted remediation actions within the network infrastructure."}, "content_for_embedding": "This API retrieves detailed vulnerability information within the NCCM (Network Configuration and Change Management) system, specifically categorized by vendor and operating system (OS) version. It provides a comprehensive overview of detected vulnerabilities, including total and open counts for specific OS vendors/series, and insights into affected nodes. This data is crucial for prioritizing vulnerabilities and enabling targeted remediation actions, supporting effective vulnerability management across network devices.", "semantic_keywords": ["Vulnerabilities", "NCCM", "Retrieval"], "ontology_classification": {"features": ["vulnerable_device_count_display", "vulnerable_list_page_drill-down", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/manage_vulnerabilities/resolve-details/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_resolve_details_retrieve", "description": "This endpoint, a GET request to `/ux/nccm/manage_vulnerabilities/resolve-details/`, is designed to fetch specific resolve details within the current organization. Located within the vulnerability management module of NCCM, it likely provides granular information related to vulnerability resolution processes. This module, as highlighted in the user guide, supports critical tasks such as downloading vulnerability data, OS versions, EOX status for Cisco devices, and automating processes based on schedules. The context suggests that understanding `resolve-details` is part of a broader capability to track threats, monitor historical vulnerabilities, and customize policies for proactive management, leveraging a centralized vulnerabilities database. While the API specification did not detail parameters or a response body, the nature of 'resolve-details' strongly implies retrieval of information related to specific vulnerability instances or resolution actions within the system.", "summary": "Gets a Resolve Details", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "Given the endpoint's path `/ux/nccm/manage_vulnerabilities/resolve-details/`, it is highly probable that a way to identify the specific 'resolve details' is required, perhaps through query parameters or a new path parameter (e.g., a vulnerability ID or resolution job ID), even though the current API specification lists no parameters. Users should expect to receive data related to the resolution status, history, or associated details of a specific vulnerability. The broader context of NCCM's vulnerability management, including its ability to automate vulnerability data downloads and support job scheduling, suggests that 'resolve details' could be linked to the outcomes of such automated resolution workflows. For effective use, administrators might need to assign appropriate roles and privileges, as the Workflow Job module for vulnerability details is a privilege-based feature."}, "llm_generated": {"business_context": {"user_personas": ["Security Analysts", "Network Administrators", "IT Operations Managers", "Compliance Officers"], "primary_use_case": "To obtain granular information regarding the resolution status, history, and associated details of specific vulnerabilities, enabling effective tracking and management of vulnerability remediation efforts."}, "content_for_embedding": "This API endpoint, a GET request to `/ux/nccm/manage_vulnerabilities/resolve-details/`, retrieves specific resolution details for vulnerabilities within the current organization. It is a core component of the NCCM's vulnerability management module, providing granular information on vulnerability resolution processes. This includes data related to resolution status, history, and associated details of specific vulnerability instances or resolution actions. The API supports critical tasks such as tracking threats, monitoring historical vulnerabilities, and customizing policies for proactive management, leveraging a centralized vulnerabilities database. Access to this feature is privilege-based, and it is highly probable that a vulnerability ID or resolution job ID is required for specific detail retrieval.", "semantic_keywords": ["Vulnerability Management", "Details retrieval", "NCCM"], "ontology_classification": {"features": ["privilege-based_access_control", "vulnerable_list_page_drill-down"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/manage_vulnerabilities/resolve-va/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_resolve_va_retrieve", "description": "This endpoint is used to resolve vulnerabilities within the NCCM (Network Configuration and Change Management) system for the current organization. It facilitates proactive management of threats by allowing users to mark specific vulnerabilities as resolved. The process of resolving vulnerabilities typically involves selecting the vulnerabilities, often categorized by CVE IDs (Common Vulnerabilities and Exposures), and providing a comment for the resolution. This action helps to track threats, monitor historical vulnerabilities, and customize policies, contributing to a centralized repository of known vulnerabilities.", "summary": "Resolve Vulnerability", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This `GET` endpoint, while described as 'resolve vulnerability', does not contain any parameters or request body for specifying which vulnerability to resolve or for providing a resolution comment as per the provided API specification. Based on Context Rank 3, which states 'Click to resolve the vulnerabilities. Add a comment for resolution,' it suggests that this endpoint might be part of an interactive UI action rather than a direct API call that executes the resolution, or that it might initiate a UI flow for resolution. If this endpoint is intended to directly resolve vulnerabilities via an API, it would typically require parameters such as a vulnerability ID or CVE ID, and potentially a request body for a resolution comment. Developers should be aware of this discrepancy. Commonly, vulnerabilities are categorized by Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, Exploit Count, and Published Date. Resolution status for vulnerabilities is usually displayed as 'Is Resolved' alongside other details like 'Total Vulnerabilities' and 'Open Vulnerabilities' for a given vendor/series or OS version."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Security Analyst", "Network Engineer"], "primary_use_case": "To manage and resolve network vulnerabilities within the NCCM system, ensuring proactive threat management and maintaining a centralized repository of known vulnerabilities."}, "content_for_embedding": "This API endpoint, `ux/nccm/manage_vulnerabilities/resolve-va/`, is designed to facilitate the resolution of vulnerabilities within the Network Configuration and Change Management (NCCM) system. It allows users to mark specific vulnerabilities, often identified by CVE IDs, as resolved, typically by providing a comment. This action is crucial for tracking threats, monitoring historical vulnerabilities, and customizing security policies, contributing to a comprehensive repository of known vulnerabilities. Although it's a GET endpoint and lacks direct parameters for resolution, it likely initiates or is part of a UI-driven workflow for vulnerability resolution.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Vulnerability Management", "NCCM", "Update"]}}, {"path": "/ux/nccm/manage_vulnerabilities/vendor-va/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_vendor_va_retrieve", "description": "This endpoint retrieves a comprehensive overview of all detected vulnerabilities across devices within the current organization, specifically categorized by vendor. It provides detailed insights into vulnerabilities, including operating system (OS) information, affected nodes, and the total vulnerability count for each vendor category. This detailed categorization aids users in prioritizing and taking targeted actions for vulnerability management. The data presented is sourced from a centralized repository of known vulnerabilities, which is integrated with external feeds like NVD.", "summary": "Gets a Vulnerabilities of by Vendor", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "This endpoint displays key vulnerability details categorized by vendor. The data typically includes fields such as Vendor, OS Name, OS Version, CVE ID, Vulnerability ID, Title, Product Name, CVSS Score, Exploit Count, and Published Date. While the current specification indicates no parameters or request body, users often utilize filtering capabilities related to Vendor, OS Name, Is Resolved status, and IP Address in similar contexts to locate specific vulnerabilities based on criteria like 'in', 'not in', 'contains', 'not contains', 'equal to', and 'not equal to'."}, "llm_generated": {"business_context": {"user_personas": ["Security Administrator", "Network Administrator", "IT Operations", "Vulnerability Analyst"], "primary_use_case": "Vulnerability Management and Prioritization"}, "content_for_embedding": "This API retrieves a comprehensive overview of detected vulnerabilities across network devices, categorized by vendor. It provides detailed insights including operating system (OS) information, affected nodes, and total vulnerability counts for each vendor. The data, sourced from a centralized repository integrated with external feeds like NVD, supports prioritization and targeted actions for vulnerability management. It implicitly supports filtering by criteria such as Vendor, OS Name, Is Resolved status, and IP Address.", "semantic_keywords": ["Vulnerabilities", "Vulnerability Management", "Retrieval"], "ontology_classification": {"features": ["nccm.vulnerable_device_count_display", "nccm.vulnerable_list_page_drill-down", "asset.asset_search_and_filtering", "asset.inventory_data_collection"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/manage_vulnerabilities/vendor-va-summary/", "method": "GET", "details": {"operationId": "ux_nccm_manage_vulnerabilities_vendor_va_summary_retrieve", "description": "This endpoint retrieves a comprehensive summary of vulnerabilities categorized by vendor within the current organization. It provides detailed insights into detected vulnerabilities across devices, including information such as operating system (OS) details, affected nodes, and the total vulnerability count for each vendor. This categorization by OS and affected nodes assists users in prioritizing and taking targeted actions. The data is pulled from a centralized vulnerabilities database that integrates with external feeds (e.g., NVD).", "summary": "Gets a Vulnerabilities Summary of by Vendor", "tags": ["Manage Vulnerabilities"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "additional_info": "The summary aims to provide a high-level overview. For more granular details, other endpoints might be necessary depending on the specific query (e.g., vulnerabilities by CVE, vulnerabilities by assets). This endpoint is particularly useful for understanding the overall vulnerability landscape from a vendor perspective, facilitating strategic security decisions and risk management. While the API specification does not list explicit parameters, the retrieved context suggests that the summary returned prominently features vendor details, OS information, and affected node counts. The endpoint aligns with the broader module's capability to provide insights into vulnerabilities based on device OS, affected nodes, vendor details, CVE, and OS version."}, "llm_generated": {"business_context": {"user_personas": ["Security analysts", "IT administrators", "IT managers", "Network engineers"], "primary_use_case": "To provide a high-level overview and comprehensive summary of vulnerabilities categorized by vendor, enabling users to prioritize and make strategic security decisions for effective vulnerability management across network devices."}, "content_for_embedding": "This API retrieves a comprehensive, high-level summary of network vulnerabilities, categorized by vendor. It provides detailed insights into detected vulnerabilities across devices, including operating system (OS) details, affected nodes, and the total vulnerability count per vendor. This information is crucial for prioritizing and taking targeted actions in vulnerability management, facilitating strategic security decisions and risk management. The data is sourced from a centralized vulnerabilities database integrating external feeds like NVD, and aligns with broader capabilities for insights based on device OS, affected nodes, vendor details, CVE, and OS version.", "ontology_classification": {"features": ["vulnerable_device_count_display", "vulnerable_list_page_drill-down"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Vulnerabilities", "Summary", "Vendor"]}}, {"path": "/ux/nccm/os-image/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_list", "description": "Retrieves a paginated list of OS images available within the NCCM (Network Configuration and Change Management) system. These OS images are crucial for managing and deploying configuration changes across network devices like routers, switches, and firewalls. The endpoint details fields such as OS Version, Latest OS Version in NCCM, and the OS Image itself, enabling users to monitor and initiate upload jobs for new OS versions. This endpoint is used to fetch all OS image-related tags, which are essentially simplified identification keywords used to group items and enable quick filtering.", "summary": "Gets a list of tags", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/OSImage"}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination and sorting for efficient data retrieval. The `items_per_page` and `page` query parameters are required to specify the number of items to return per page and the desired page number, respectively. Optional parameters include `reverse` for specifying the sorting order (ascending or descending) and `sort` for defining the key by which the results should be sorted. OS images in NCCM are often associated with new OS version detections, which can trigger actions like initiating upload jobs and viewing impacted devices. While the endpoint is described as returning 'tags', the context strongly links it to 'OS Image' details, suggesting these 'tags' are specific attributes or metadata related to OS images (e.g., OS Version, Vendor, Series, etc.) rather than general user-defined tags for assets. The primary context indicates 'OS Image' as a key field on the page, reinforcing its central role in this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations", "NCCM users"], "primary_use_case": "To provide network administrators and IT operations with a paginated list of OS images and their associated metadata (referred to as tags) within the NCCM system, enabling efficient monitoring, management, and preparation for OS version updates across network devices."}, "content_for_embedding": "This API retrieves a paginated list of OS images from the Network Configuration and Change Management (NCCM) system. It provides crucial details such as OS Version, Latest OS Version in NCCM, and the OS Image itself. The endpoint also returns OS image-related attributes, referred to as \"tags,\" which are used for grouping and quick filtering of OS images. It supports pagination via `items_per_page` and `page` parameters, and sorting using `reverse` and `sort` parameters. This functionality is essential for managing and deploying configuration changes on network devices like routers, switches, and firewalls, and for monitoring new OS version detections and initiating upload jobs.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "Tag Management", "Retrieval", "Pagination", "Filter"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["OS Image", "NCCM", "Configuration Management"]}}, {"path": "/ux/nccm/os-image/", "method": "POST", "details": {"operationId": "ux_nccm_os_image_create", "description": "This endpoint is used to save a new configuration profile within the Network Configuration and Change Management (NCCM) application, specifically for managing OS images. Configuration profiles are templates or predefined sets of settings that enable network administrators to automate tasks like Configuration Download Jobs, which retrieve configurations, inventories, and operational data. For OS images, these profiles are primarily used for managing and deploying configuration changes across various network devices such as routers, switches, and firewalls.", "summary": "Creates a new configuration profile", "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is expected to conform to a serializer for Documents, supporting primitive fields like StringField, IntField, BooleanField, and DateTimeField, as well as compound fields such as ListField and DictField. ReferenceField and EmbeddedDocumentField are also supported, with nested serializers automatically generated for non-zero depths. This capability allows for flexible and detailed definition of the OS image configuration profile. Users should note that certain fields, such as FileField, ImageField, and BinaryField, are not well supported or are untested. This API is crucial for automating OS upgrade processes and ensuring consistent configuration management across the network."}, "llm_generated": {"business_context": {"user_personas": ["network administrators"], "primary_use_case": "This API is used to create and manage configuration profiles for OS images within a Network Configuration and Change Management (NCCM) application, enabling automation of OS upgrade processes and consistent configuration management across network devices."}, "content_for_embedding": "This API creates a new configuration profile specifically for managing OS images within the Network Configuration and Change Management (NCCM) application. These profiles are essential for network administrators to automate tasks such as Configuration Download Jobs, retrieve configurations, inventories, and operational data, and deploy configuration changes across various network devices like routers, switches, and firewalls. The API supports flexible and detailed definition of OS image configuration profiles, crucial for automating OS upgrade processes and ensuring consistent network configuration management.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Profiles", "OS Image", "NCCM"]}}, {"path": "/ux/nccm/os-image/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_retrieve", "description": "This endpoint retrieves a global parameter related to OS images within the current organization in NCCM. Specifically, it is designed to fetch details about an 'OS Image' object, which becomes available for a vendor/series in NCCM upon detection of a new OS version. This information is crucial for tasks like initiating OS Image Roll Back Upload Jobs or OS Image Upgrades, and for understanding OS image attributes such as vendor, series, OS name, OS version, and associated vulnerabilities. While the original description mentioned 'global parameters', the context highly suggests this endpoint is focused on \"OS Image\" specific global parameters that play a role in network automation and OS management workflows.", "summary": "Gets a global param with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the specific OS Image global parameter to be retrieved. Related functionalities in NCCM include the creation of OS Upgrade templates (e.g., 'OS Image Upgrade - <Vendor> <OS type>') before initiating roll back or upgrade jobs. The endpoint forms part of the `/ux/nccm/os-image/` path, indicating its direct relation to OS Image management within the User Experience (UX) interface of NCCM. This endpoint's output would likely include fields such as 'OS Image' itself, allowing users to understand and manage OS images available in NCCM."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "network engineer", "IT operations staff"], "primary_use_case": "Retrieving OS image details for network device OS management, upgrades, and vulnerability assessment within NCCM."}, "content_for_embedding": "This API retrieves comprehensive details of a specific OS Image identified by its unique ID within the NCCM (Network Configuration and Change Management) system. It provides critical information such as vendor, OS name, OS version, and associated vulnerabilities, which is essential for managing OS images, initiating OS Image Roll Back Upload Jobs, and performing OS Image Upgrades on network devices. The endpoint supports network automation and OS management workflows by allowing users to understand and manage available OS images.", "semantic_keywords": ["OS Image", "Retrieval", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "vulnerable_device_count_display", "asset_search_and_filtering", "software_inventory_discovery"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/os-image/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_os_image_update", "description": "This PUT endpoint is used to edit and update an existing OS image within the NCCM (Network Configuration and Change Management) system. OS images are crucial for managing and deploying configuration changes across network devices like routers, switches, and firewalls. This operation typically occurs when a new OS version is detected or an existing OS image needs modification, allowing users to update an OS image's properties, such as its associated vendor, series, OS name, OS version, or the image file itself. The endpoint relies on a unique OS image `id` for identifying the record to be updated. It enhances the `OS Image Upgrade` process in NCCM, similar to how templates are managed for OS Image Upgrade jobs.", "summary": "Edits the tag with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string identifying the specific OS image to be edited. The request body supports various primitive and compound fields, including `StringField`, `URLField`, `IntField`, `BooleanField`, `DateTimeField`, and `ListField`, among others, allowing for comprehensive updates to the OS image properties. While the specific fields for the request body are not explicitly detailed for this `PUT` operation, contextual information suggests it could include fields like `Vendor`, `Series`, `Model`, `OS type`, `OS Version`, `Image Type`, `OS Image file`, `MD5 Hash Key`, and `Description`. It is also important to note that when updating, replacing the old image may be an option, and providing an MD5 Hash Key is typically mandatory. The updated OS image details will then be reflected in the NCCM system, potentially impacting the visibility of new OS versions and associated actions for vendor/series."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "To facilitate the modification and update of existing OS images within the Network Configuration and Change Management (NCCM) system, ensuring network devices can be managed with the latest or corrected OS versions and properties."}, "content_for_embedding": "This PUT API endpoint, `ux_nccm_os_image_update`, is designed to edit and update an existing OS image identified by its unique `id` within the NCCM system. It allows users to modify critical properties such as vendor, series, OS name, OS version, image file, and MD5 Hash Key. This operation is vital for maintaining up-to-date OS images for network devices like routers, switches, and firewalls, directly supporting the OS Image Upgrade process and overall network configuration management.", "ontology_classification": {"features": ["network_configuration_and_change_management", "customizable_asset_properties_and_fields", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["OS Image", "Update", "NCCM"]}}, {"path": "/ux/nccm/os-image/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_os_image_destroy", "description": "This endpoint is used to delete an existing OS Image within the Network Configuration and Compliance Management (NCCM) system for the current organization. Deleting an OS Image removes it from the NCCM inventory. This action is irreversible and requires confirmation to proceed. The 'id' path parameter uniquely identifies the OS Image to be deleted. The system validates the 'id' to ensure that the correct OS Image is removed.", "summary": "Deletes the tag with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "To delete an OS Image, users typically select the image from a list and click a delete icon, which then redirects to a confirmation window. Clicking \"Yes\" proceeds with the deletion, while \"No\" aborts the operation. This process is integral to managing the lifecycle of OS images within NCCM, especially in scenarios where OS images are no longer needed or have been superseded.\n\nPath Parameters:\n- `id` (string, required): The unique identifier of the OS Image to be deleted."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations specialists", "System administrators"], "primary_use_case": "To remove obsolete or unwanted OS images from the Network Configuration and Compliance Management (NCCM) system, ensuring the inventory is up-to-date and clean. This is crucial for maintaining network integrity and compliance."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of a specific OS Image identified by its unique ID from the Network Configuration and Compliance Management (NCCM) system. It's a critical operation for managing the lifecycle of OS images, removing them from the NCCM inventory after confirmation, and is typically part of a larger workflow for maintaining network configuration hygiene.", "ontology_classification": {"features": ["network_configuration_and_change_management", "asset_lifecycle_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Delete", "OS Image", "NCCM"]}}, {"path": "/ux/nccm/os-image/download-os-image/", "method": "POST", "details": {"operationId": "ux_nccm_os_image_download_os_image_create", "description": "This API endpoint facilitates the download of Operating System (OS) images for network devices. When an OS image is downloaded, the system automatically adds it as a new OS image, and all previous versions are maintained for historical tracking. This feature provides real-time updates on the download's progress, including its status (ongoing, finished, queued, or error) and allows administrators to monitor and manage OS deployments. The endpoint supports the download and export operations within a selected module or page, aligning with the user's download privileges. It is crucial for ensuring successful OS deployments and troubleshooting download issues.", "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint typically processes data conforming to a document serializer, supporting various primitive field types like String, URL, Email, Integer, Float, Boolean, Date, and many others. Compound fields such as `ListField` and `DictField` are also supported, mapping to corresponding DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on the depth. It's noted that `FileField`, `ImageField`, and `BinaryField` are not well supported or untested, which might be a 'gotcha' for developers expecting to pass these directly. Downloads can also be initiated by clicking the OS Image column on the OS Images Grid page. Users can monitor download status, which includes details like Vendor, OS Image, Download Status, Next Action Time, and various actions such as Audits and OS Download Now."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer"], "primary_use_case": "This API facilitates the download and management of Operating System (OS) images for network devices, ensuring successful OS deployments, real-time status monitoring, and historical tracking of OS versions. It is crucial for maintaining and updating network device configurations."}, "content_for_embedding": "This API endpoint enables the download of Operating System (OS) images for network devices. Upon download, the system automatically adds the new OS image while retaining previous versions for historical tracking. It provides real-time updates on download progress, including status (ongoing, finished, queued, or error), allowing administrators to monitor and manage OS deployments and troubleshoot issues. The endpoint supports download and export operations within selected modules or pages, respecting user download privileges. Downloads can be scheduled and initiated, supporting protocols like TFTP, FTP, Terminal, SCP, and SFTP. This functionality is integral to NCCM's download job management, providing visibility into active and scheduled download jobs.", "semantic_keywords": ["OS Image", "Download", "NCCM"], "ontology_classification": {"features": ["download_job_management", "network_configuration_and_change_management", "download_job_status_drill-down", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/os-image/file-upload-status/", "method": "POST", "details": {"operationId": "ux_nccm_os_image_file_upload_status_create", "description": "This API endpoint facilitates the upload of OS image files within the NCCM tool. It allows privileged users to upload attachments, such as OS images, by either dragging and dropping or browsing for files. The system supports various file formats including png, jpeg, jpg, txt, doc, docx, CSV, xls, xlsx, and pdf, with a maximum file size of 20 MB. This endpoint is crucial for initiating OS image upload jobs in NCCM, especially when a new OS version is detected for a vendor/series.", "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint handles document serialization, supporting various primitive and compound fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. While many field types are recognized and mapped, `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, which is relevant given the file upload context. Users should be aware of this limitation when constructing requests. The API specifically mentions 'OS Image' and 'upload job', aligning with the functionality of creating a new upload job by specifying configuration, device details, and schedule parameters (as per Context Rank 3). The status of these upload jobs can be monitored (e.g., 'Agent Execution In Progress', 'Completed', 'Requesting OS Image'). Overall, this endpoint supports the 'Upload' privilege, enabling users to perform add operations related to OS images within the selected module/page."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Privileged Users"], "primary_use_case": "Initiating and managing the upload of OS image files for network devices within the NCCM tool."}, "content_for_embedding": "This API endpoint facilitates the upload of OS image files within the NCCM tool. It allows privileged users to upload attachments, such as OS images, supporting various file formats including png, jpeg, jpg, txt, doc, docx, CSV, xls, xlsx, and pdf, with a maximum file size of 20 MB. This endpoint is crucial for initiating OS image upload jobs in NCCM, especially when a new OS version is detected for a vendor/series. It handles document serialization, though `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. The API supports the 'Upload' privilege, enabling users to perform add operations related to OS images and configure upload jobs by specifying details like vendor, series, model, OS type/version, image type, MD5 hash, and description. The status of these upload jobs can be monitored.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "attachment_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["OS Image", "Upload", "NCCM"]}}, {"path": "/ux/nccm/os-image/get-allowed-file-types/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_get_allowed_file_types_retrieve", "description": "This endpoint is used to retrieve the list of allowed file types for which an MD5 hash key can be generated. The MD5 hash, a 128-bit unique identifier, is crucial for confirming a file's integrity and authenticity, especially for OS image files. By enabling administrators to compare generated hashes with known values, it helps in identifying any modifications or corruption that may occur during file transfers or storage, thereby maintaining the reliability and security of files within the network management system (NCCM).", "summary": "Get the file types to generagte hash key", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "This endpoint specifically relates to the 'Generate MD5' functionality within the NCCM system, which is a required step when adding or editing OS Images. The MD5 hash key is a mandatory field when configuring an OS Image upload job. After selecting an OS Image using the 'Choose File' option, users are prompted to provide this MD5 Hash Key. A separate 'Generate MD5' option is available within the NCCM interface to facilitate the creation of this key for supported file types. This supports the overall process of securely managing and deploying OS Images within the network."}, "llm_generated": {"business_context": {"user_personas": ["Administrator"], "primary_use_case": "This API retrieves the list of allowed file types for which an MD5 hash key can be generated, ensuring the integrity and authenticity of OS image files within the Network Configuration and Change Management (NCCM) system. This is a crucial step for secure OS image deployment and management."}, "content_for_embedding": "This GET endpoint retrieves the supported file types for generating an MD5 hash key. The MD5 hash is a 128-bit unique identifier vital for confirming the integrity and authenticity of OS image files within the NCCM system. This functionality is integral to the \"Generate MD5\" feature, which is a mandatory step during OS Image upload or editing processes in NCCM, facilitating secure management and deployment of OS images.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["OS Image", "NCCM", "MD5"]}}, {"path": "/ux/nccm/os-image/multidelete/", "method": "POST", "details": {"operationId": "ux_nccm_os_image_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of OS images within the NCCM (Network Configuration and Change Management) module. It allows 'Delete' privileged users to remove multiple selected OS images, which are primarily used for managing and deploying configuration changes across network devices such as routers, switches, and firewalls. The process typically involves selecting the OS images and confirming the deletion operation.", "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "The multi-delete functionality for OS images is typically accessible to users with specific 'Delete' privileges within the NCCM module. Without this privilege, users will generally not be able to perform delete operations. The API endpoint handles the deletion of the selected OS images collectively. While the `request_body_description` details various primitive and compound fields, it broadly describes serializer capabilities. For this specific endpoint, the request body is expected to contain the identifiers of the OS images to be deleted, likely in a list format, conforming to one of the described primitive field types (e.g., `StringField` for UUIDs or `ObjectIdField`). Users should refer to administrative guides for details on privilege assignment and OS image management workflows."}, "llm_generated": {"business_context": {"user_personas": ["network administrators", "privileged users"], "primary_use_case": "To enable privileged users to perform bulk deletion of OS images within the Network Configuration and Change Management (NCCM) module, streamlining the management of network device configurations."}, "content_for_embedding": "This API facilitates the multi-deletion of OS images within the Network Configuration and Change Management (NCCM) module. It allows users with specific 'Delete' privileges to remove multiple selected OS images, which are essential for managing and deploying configuration changes across various network devices such as routers, switches, and firewalls. This bulk operation helps in maintaining a clean and updated repository of OS images.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "bulk_actions_on_assets"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "OS Image", "Bulk Delete"]}}, {"path": "/ux/nccm/os-image/options/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_options_retrieve", "description": "This endpoint retrieves the default options required for creating or scheduling new OS Image Download Jobs. OS Image Download Jobs are critical tasks used to retrieve and manage operating system configurations from network devices like routers, switches, and firewalls for backup, analysis, auditing, or deployment of configuration changes. These options might include default protocols for OS image downloads from system parameters.", "summary": "Get the options for the Download Jobs", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "Download Jobs typically capture the current running and start-up configurations of devices. This API helps in setting up such jobs, contributing to maintaining up-to-date backups, ensuring compliance, and tracking configuration changes over time. The retrieved options ensure consistency and adherence to predefined system parameters for OS Image downloads. The 'Download Job' page in the user interface utilizes these options to populate fields when adding or configuring new OS Image Download Jobs. This endpoint has no parameters."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Engineers"], "primary_use_case": "To retrieve the default options necessary for creating and scheduling OS Image Download Jobs, which are essential for managing operating system configurations on network devices like routers, switches, and firewalls. This supports tasks such as backup, analysis, auditing, and deployment of configuration changes."}, "content_for_embedding": "This API endpoint allows users to retrieve the default options required for setting up and scheduling new OS Image Download Jobs. These jobs are critical for managing operating system configurations on various network devices, including routers, switches, and firewalls. The retrieved options facilitate tasks such as creating backups, performing configuration analysis and auditing, and deploying configuration changes. For instance, these options would include the default protocols (like TFTP, FTP, SCP, SFTP) available for OS image downloads, ensuring consistency and adherence to predefined system parameters. The data obtained from this endpoint is used to populate fields on the \"Download Job\" page in the user interface when configuring new OS Image Download Jobs.", "semantic_keywords": ["Configuration Download Jobs", "Network Configuration", "OS Image"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/os-image/os-images-objs/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_images_objs_retrieve", "description": "This API endpoint provides functionalities for managing OS images within the system. It allows users to view, add, edit, and delete OS images, which are primarily used for managing and deploying configuration changes across network devices such as routers, switches, and firewalls. The endpoint facilitates the viewing of OS image details, including information about previous versions when a new OS image is uploaded, and supports operations like downloading OS images and monitoring their download status for network devices.", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for maintaining and updating the operating systems of network devices. Users with appropriate privileges can upload new OS images, which will automatically retain previous versions. Specific actions like editing or deleting an OS image are also supported. The API also keeps users informed about operating system downloads, providing real-time updates. Common use cases include managing the lifecycle of OS images for network device deployment and ensuring devices run the latest approved OS versions."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Administrators"], "primary_use_case": "To manage and deploy Operating System (OS) images for network devices, facilitating configuration changes, updates, and lifecycle management including viewing, adding, editing, deleting, and monitoring download status."}, "content_for_embedding": "This API endpoint is designed for comprehensive management of Operating System (OS) images used across network devices such as routers, switches, and firewalls. It enables users to perform full lifecycle operations on OS images, including viewing existing images, adding new ones, editing their details, and deleting them. A crucial aspect is the support for downloading OS images to devices and monitoring the real-time status of these downloads. The API also facilitates version control by retaining previous OS image versions when new ones are uploaded, ensuring devices run approved and updated operating systems for effective configuration changes and network device deployment.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["OS Image", "Network Configuration", "Device Management"]}}, {"path": "/ux/nccm/os-image/os-images-status/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_images_status_retrieve", "description": "This API endpoint provides a mechanism to view the status of operating system (OS) images within the NCCM system. OS images are fundamental for managing and deploying configuration changes across network devices such as routers, switches, and firewalls. This endpoint provides real-time updates on the download progress of OS images, indicating whether downloads are ongoing, finished, queued, or have encountered errors. It offers visibility into critical details such as Vendor, OS Image, Download Status, Next Action Time, and allows for auditing (Audits) and immediate download initiation (OS Download Now). Monitoring this status is crucial for ensuring successful OS deployments and for administrators to troubleshoot download issues and guarantee devices receive necessary updates. This specifically relates to the status of OS image downloads, complementing features where new OS images are added when downloaded from a device.", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on the status of OS image downloads. It is distinct from the broader management of OS versions, where previous versions are maintained after a new OS image is uploaded to a device. The API enables users to track operational progress of OS images downloaded from network devices to the NCCM system, rather than direct manipulation (viewing or editing users, as suggested by the original description, which appears to be a placeholder or incorrect generalization)."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "network engineer", "IT operations"], "primary_use_case": "To monitor and troubleshoot the real-time download status of operating system (OS) images for network devices within the NCCM system."}, "content_for_embedding": "This API provides real-time status updates for operating system (OS) image downloads within the NCCM system. It allows users to view the progress of OS image downloads, including whether they are ongoing, finished, queued, or have encountered errors. Key details such as Vendor, OS Image, Download Status, and Next Action Time are provided, along with options for auditing and initiating immediate downloads. This is crucial for administrators to ensure successful OS deployments, troubleshoot issues, and track the operational progress of OS images downloaded from network devices.", "semantic_keywords": ["OS Image", "Download", "Status"], "ontology_classification": {"features": ["nccm.download_job_management", "asset.configuration_download_jobs", "report.real-time_and_historical_reporting"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/os-image/os-img-recve/", "method": "POST", "details": {"operationId": "ux_nccm_os_image_os_img_recve_create", "description": "This API endpoint facilitates the management and deployment of OS images for network devices such as routers, switches, and firewalls within the NCCM system. It specifically handles the reception, upload, and maintenance of OS image versions. Whenever a new OS image is downloaded from a device or uploaded by a user, this endpoint ensures that previous versions are maintained and new images are added. This process is crucial for managing configuration changes and allows users to effectively track and update the operating systems of their network infrastructure.", "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle document uploads, mapping various primitive and compound fields. Developers should be aware of the supported field types outlined in the `request_body_description`, including `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, `DateField`, as well as compound fields like `ListField` and `DictField`. Special attention is given to `ReferenceField` and `EmbeddedDocumentField` for nested structures. The system notes that `FileField`, `ImageField`, and `BinaryField` are not well supported or untested. Common use cases include uploading new OS images, updating existing OS versions for network devices, and ensuring a historical record of all OS images is maintained for auditing and rollback purposes. The API is integral for managing the OS image lifecycle and facilitating real-time updates on download progress."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Administrators"], "primary_use_case": "This API endpoint is used within the NCCM system to manage and deploy OS images for network devices. It handles the reception, upload, and maintenance of OS image versions, which is critical for managing configuration changes and ensuring network devices are running updated operating systems."}, "content_for_embedding": "This API endpoint, `/ux/nccm/os-image/os-img-recve/`, is a POST request within the NCCM (Network Change & Configuration Management) system. Its primary function is to manage and deploy OS images for network devices such as routers, switches, and firewalls. Specifically, it handles the reception, upload, and maintenance of OS image versions. This includes adding new OS images, updating existing ones, and ensuring previous versions are retained for auditing and rollback. The API supports various content types for document uploads, including JSON, URL-encoded, and multipart form data, and requires an `OSImage` schema. It's integral for the OS image lifecycle, configuration change management, and tracking OS updates on network infrastructure.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["OS Image", "Upload", "NCCM"]}}, {"path": "/ux/nccm/os-image/os-job-audit/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_job_audit_retrieve", "description": "This API endpoint provides user account-based audit information for actions performed on target devices. It captures and displays audit details for activities such as Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. Key audit information returned includes Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, and Connect Status, and Task Owner. The endpoint allows users to view a detailed log of activities, including timestamps, task names, IP addresses, and messages, providing comprehensive insights into job execution and user actions.", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is equivalent to the 'Job(s) Account Audit' accessible from the 'Audits' menu in the user interface. While the API specification does not list explicit parameters, the user guide suggests that functionality for searching and filtering audits by fields like timestamp, job name, Task Name, Device IP Address, and Audit Message may be available for a more refined audit log retrieval. The audit log also captures configuration details, error logs, and displays message types (e.g., success, error, warning) and detailed messages describing any issues or activities. Real-time updates may be supported through an auto-refresh feature, analogous to the UI functionality."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Security Auditor", "Operations Team", "IT Support Staff"], "primary_use_case": "To retrieve and view detailed audit logs for various job executions and user actions on target devices, including download jobs, upload jobs, triggers, and network diagnoses. It provides comprehensive insights into job execution status, user activities, and associated details for auditing and troubleshooting purposes."}, "content_for_embedding": "This API endpoint retrieves user account-based audit information for actions performed on target devices, including Download Jobs, Upload Jobs, Trigger, and Network Diagnosis. It provides a detailed log of activities with timestamps, task names, IP addresses, and messages, offering insights into job execution and user actions. Equivalent to the 'Job(s) Account Audit' in the UI, it supports searching and filtering by fields like timestamp, job name, Task Name, Device IP Address, and Audit Message. It also captures configuration details, error logs, and message types, with potential real-time updates via auto-refresh.", "semantic_keywords": ["Jobs Account Audit", "Audit Trail", "Report"], "ontology_classification": {"features": ["nccm_reports_(configuration_download_&_jobs_account_audit)", "report_export_capabilities", "report_filtering_options", "real-time_and_historical_reporting", "audit_log", "search_functionality", "granular_data_filtering", "auto_reload"], "primary_module": "report", "confidence_score": 0.95}}}, {"path": "/ux/nccm/os-image/os-schedule-delete/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_schedule_delete_retrieve", "description": "This endpoint is used to delete an existing OS Image Schedule within the current organization. It specifically targets the 'OS Download Image Scheduler' feature, allowing administrators or users with appropriate privileges to remove scheduled OS image operations. This action involves deleting the configuration of a specific OS download image schedule.", "summary": "Delete os schedule the given id", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "This endpoint is part of the NCCM (Network Configuration and Change Management) system, specifically managing OS Image operations. Users must have the necessary privileges defined under their roles to perform deletion actions (Context Rank 3). The operation is irreversible once confirmed. While the API specification does not list parameters, it is implied that an identifier for the OS schedule to be deleted would be passed, likely through a path parameter or query parameter, though not explicitly defined in the provided JSON. This aligns with the concept of deleting a schedule for a given ID (from the summary)."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations Personnel"], "primary_use_case": "To delete existing scheduled OS image download operations, ensuring efficient management of network configurations and removal of obsolete or incorrect schedules."}, "content_for_embedding": "This API endpoint is designed to delete an existing OS Image Schedule. It is part of the NCCM (Network Configuration and Change Management) system and specifically targets the 'OS Download Image Scheduler' feature. This operation allows administrators and privileged users to remove scheduled OS image operations, effectively deleting the configuration of a specific OS download image schedule. The action is irreversible and requires an identifier for the schedule to be deleted. Although the HTTP method is GET, its function is to delete a scheduled task related to OS image downloads within the network configuration management system.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "it_operations"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "OS Image", "Scheduling"]}}, {"path": "/ux/nccm/os-image/os-schedule-detail/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_schedule_detail_retrieve", "description": "This endpoint retrieves the detailed information for a specific OS image download schedule within the current organization. OS image download schedules are a core feature of NCCM, primarily used for managing and deploying configuration changes across network devices like routers, switches, and firewalls. This feature allows users to compare configuration data by downloaded version or file and facilitates tasks such as backing up, analyzing, auditing, or comparing configurations from network devices.", "summary": "Gets a os schedule the given id", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "An OS image download schedule can be configured with various modes such as 'Once', 'Every', 'Daily', 'Weekly', or 'Monthly', and includes details like name, description, IP address, agent details, and specific date and time for the download. Users can view or export startup or running configurations associated with these jobs. The system can automatically set a default OS Download Protocol from System Parameters if not explicitly selected. This endpoint is crucial for monitoring the status and details of ongoing or planned OS image management tasks. To create a schedule, navigate to Infraon Configuration -> IT Operations -> Network Configuration and select the OS Image module, then click 'Add Schedule'."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Administrators"], "primary_use_case": "To retrieve detailed information about a specific OS image download schedule, enabling monitoring and management of configuration changes across network devices."}, "content_for_embedding": "This API retrieves detailed information about a specific OS image download schedule within the NCCM system. It provides insights into scheduled configuration changes for network devices, including schedule mode, IP address, agent details, and download date/time, crucial for monitoring and managing ongoing or planned OS image deployments.", "semantic_keywords": ["OS Image Download", "Schedule Details", "Network Configuration"], "ontology_classification": {"features": ["nccm.download_job_management", "nccm.network_configuration_and_change_management", "asset.configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/os-image/os-schedule-details/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_schedule_details_retrieve", "description": "This API endpoint provides comprehensive details about scheduled OS image downloads and related configurations within the NCCM (Network Change & Configuration Management) module. It allows users to view and potentially edit the schedule details for OS image updates, encompassing various execution schedule options like 'Once', 'Every', 'Daily', 'Weekly', or 'Monthly', along with specific hours and minutes. This feature is privilege-based, meaning access, viewing, adding, editing, deleting, executing, and exporting capabilities are contingent on administrator-defined roles and privileges.", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is part of the 'OS Image' module under 'Infraon Configuration -> IT Operations -> Network Configuration'. Key information often displayed includes the schedule name, description, execution frequency, creation time, and last update time. It is crucial for managing automated OS image deployments and ensuring network device consistency. Users should verify their assigned privileges to access and modify these schedule details. The underlying system also supports settings for OS Image Download Protocol, either from System Parameters or automatically via NCCM's default settings."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations Personnel"], "primary_use_case": "Managing and viewing scheduled OS image downloads and their configurations for network devices, crucial for automated OS deployments and maintaining network device consistency."}, "content_for_embedding": "This API retrieves comprehensive details about scheduled OS image downloads and their configurations within the Network Change & Configuration Management (NCCM) module. It enables users, primarily administrators, to view and potentially modify existing OS image update schedules, including execution frequency (Once, Every, Daily, Weekly, Monthly), specific hours, and minutes. This functionality is vital for automating OS image deployments, ensuring network device consistency, and orchestrating updates during optimal times to minimize network congestion. The endpoint provides information such as schedule name, description, execution frequency, creation time, and last update time, and access is privilege-based.", "semantic_keywords": ["OS Image Download", "Schedule Details", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/os-image/os-schedule-options/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_schedule_options_retrieve", "description": "This API endpoint allows users to retrieve the execution schedule options available for OS image download tasks within the Network Change & Configuration Management (NCCM) module. These options define how an OS image download can be scheduled, including immediate execution (Once), recurring schedules (Every, Daily, Weekly, Monthly), and specific date/time configurations. It is integral for setting up OS Image downloads as part of network configuration tasks.", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically retrieves the list of valid schedule modes (e.g., 'Once', 'Every', 'Daily', 'Weekly', 'Monthly') which are then used when defining or modifying an OS Image download schedule. While this GET endpoint provides the available options, the actual scheduling setup, including setting the date, time, and frequency, is handled by other related endpoints (e.g., PUT or POST operations on the scheduler). The options retrieved are crucial for populating UI elements where users select their preferred scheduling frequency."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Administrators"], "primary_use_case": "This API retrieves the available scheduling options for OS image download tasks within the Network Change & Configuration Management (NCCM) module. It enables users to understand and select valid modes (e.g., Once, Every, Daily, Weekly, Monthly) for scheduling OS image downloads, which is crucial for setting up and managing network configuration tasks and populating UI elements for scheduling."}, "content_for_embedding": "This API endpoint allows users to retrieve the execution schedule options available for OS image download tasks within the Network Change & Configuration Management (NCCM) module. These options define how an OS image download can be scheduled, including immediate execution (Once), recurring schedules (Every, Daily, Weekly, Monthly), and specific date/time configurations. It is integral for setting up OS Image downloads as part of network configuration tasks. This endpoint specifically retrieves the list of valid schedule modes (e.g., 'Once', 'Every', 'Daily', 'Weekly', 'Monthly') which are then used when defining or modifying an OS Image download schedule. While this GET endpoint provides the available options, the actual scheduling setup, including setting the date, time, and frequency, is handled by other related endpoints (e.g., PUT or POST operations on the scheduler). The options retrieved are crucial for populating UI elements where users select their preferred scheduling frequency.", "ontology_classification": {"features": ["download_job_management", "it_operations"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["OS Image Download", "Scheduling", "Retrieval"]}}, {"path": "/ux/nccm/os-image/os-schedule-search-options/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_schedule_search_options_retrieve", "description": "This endpoint is used to search for available options related to OS image schedules within the current organization. It provides functionalities to query and retrieve details about OS Image Download Schedulers, which are essential for managing and deploying configuration changes across network devices like routers, switches, and firewalls. This search capability allows users to find specific OS image schedules, potentially by various criteria, to facilitate tasks such as viewing, editing, or managing OS image deployments.", "summary": "Search Options os schedule the given ids", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "This API endpoint specifically caters to searching 'OS Image' related schedules, distinguishing it from general 'Download Jobs' or 'Configuration Search'. OS images are primarily used for managing and deploying configuration changes. The search capabilities mentioned in related contexts (e.g., 'Search for the Download Schedule using the name, IP Address, etc.') imply that the results from this endpoint would likely support such filtering and identification. While the current specification does not list request parameters, in a typical search scenario, parameters related to schedule name, status, or device details might be used to refine the search. This endpoint is crucial for users needing to manage or understand the status of OS image deployment tasks within their network."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Administrators"], "primary_use_case": "To search for and retrieve available options related to OS image download schedules, enabling users to manage and deploy configuration changes across network devices."}, "content_for_embedding": "This GET API endpoint, identified as \"ux_nccm_os_image_os_schedule_search_options_retrieve\", is designed to search for and retrieve available options concerning OS image schedules within an organization. It specifically targets OS Image Download Schedulers, which are crucial for managing and deploying configuration changes on network devices such as routers, switches, and firewalls. The functionality allows users to query and find specific OS image schedules based on various criteria like name, IP Address, status, or device details, facilitating tasks like viewing, editing, or managing OS image deployments. This endpoint is distinct from general download jobs or configuration searches, focusing solely on OS image-related scheduling for network configuration management.", "semantic_keywords": ["OS Image Download", "Schedule Details", "Search"], "ontology_classification": {"features": ["download_job_management", "network_configuration_and_change_management", "asset_search_and_filtering"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/os-image/os-schedule-toggle-state/", "method": "GET", "details": {"operationId": "ux_nccm_os_image_os_schedule_toggle_state_retrieve", "description": "This endpoint is used to toggle (enable/disable) the scheduling state of OS Image downloads for specified IDs within the current organization. OS images are crucial for managing and deploying configuration changes across network devices such as routers, switches, and firewalls. This functionality is part of the Network Change & Configuration Management (NCCM) module, allowing control over the `OS Image Download Scheduler` feature, which compares configuration data by downloaded version or file. Effectively, this API manages when and how OS image updates are scheduled for network devices, playing a role similar to managing 'Baseline Schedulers' or 'Configuration Download Jobs' for network device maintenance.", "summary": "Enable/disable os schedule the given ids", "tags": ["OS Image Download"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "This endpoint primarily affects the 'OS Image Download Schedular' feature, which is responsible for retrieving and comparing OS images. While the API specification does not explicitly list parameters or a request body, given its 'toggle state' nature and the description 'given ids', it is highly probable that the IDs of the OS schedule entries to be toggled would be included either as query parameters (e.g., `/os-schedule-toggle-state?ids=1,2,3`) or as part of a request body (e.g., `{ \"ids\": [1, 2, 3] }`) if the method were POST/PUT. Users should refer to the NCCM application or related documentation for details on how OS image scheduling works and the format of the IDs. This API is likely used by administrators to manage ongoing OS image deployment tasks without necessarily initiating a new download immediately. The context suggests that NCCM supports various scheduling modes (e.g., 'At', 'After Every', 'Weekly', 'Daily'), and this toggle might enable or disable these pre-configured schedules."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "network engineer", "IT operations"], "primary_use_case": "To enable or disable the scheduling of OS image downloads for network devices within the Network Change & Configuration Management (NCCM) module, allowing administrators to manage ongoing OS image deployment tasks."}, "content_for_embedding": "This API allows administrators to toggle (enable/disable) the scheduled state of OS image downloads for specified network devices. It is a core part of the Network Change & Configuration Management (NCCM) module, providing control over when and how OS image updates are applied to network infrastructure like routers, switches, and firewalls. This functionality is crucial for managing ongoing OS image deployment tasks and ensuring controlled rollouts of updates.", "ontology_classification": {"features": ["download_job_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["OS Image Download", "Scheduling", "Download Job Management"]}}, {"path": "/ux/nccm/os-image/save-osimage-schedule-info/", "method": "POST", "details": {"operationId": "ux_nccm_os_image_save_osimage_schedule_info_create", "description": "This API endpoint, `/ux/nccm/os-image/save-osimage-schedule-info/`, is used to save or update scheduling information related to OS image operations within the Network Configuration Change Management (NCCM) system. This includes functionality to add, view, or edit details for scheduling OS image downloads. It allows administrators to manage when and how OS images are deployed or retrieved across network devices, ensuring successful OS deployments and enabling troubleshooting of download issues. This endpoint supports configuring schedule modes such as 'once', 'every', 'daily', 'weekly', or 'monthly', and specifying the date and time for execution, as well as managing schedule-related details like name, description, and visibility.", "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to accommodate various data types for configuring OS image schedule information. It recognizes primitive fields like StringField, URLField, IntField, BooleanField, DateTimeField, and more. Compound fields such as ListField and DictField are mapped to corresponding DRF fields, supporting nested field specifications. ReferenceField and EmbeddedDocumentField are also handled, enabling complex data structures. While many field types are supported, users should note that FileField, ImageField, and BinaryField are not well supported or extensively tested with this API. When specifying the schedule, ensure all relevant fields (e.g., schedule mode, execution time, description) are provided as outlined in the request body schema. This endpoint is crucial for automated management of OS image lifecycles on network devices, typically accessed via 'Infraon Configuration -> IT Operations -> Network Configuration' and selecting the 'OS Image' module."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To enable administrators to schedule and manage OS image downloads and updates for network devices within the NCCM system, ensuring automated and controlled deployment."}, "content_for_embedding": "This API endpoint, `/ux/nccm/os-image/save-osimage-schedule-info/`, is used to save or update scheduling information for OS image operations within the Network Configuration Change Management (NCCM) system. It allows administrators to manage OS image deployment and retrieval on network devices by configuring schedule modes (once, every, daily, weekly, monthly) and execution times. This is crucial for automated management of OS image lifecycles, enabling planned and automated downloads, often during off-peak hours, to minimize network congestion and ensure controlled rollouts.", "semantic_keywords": ["OS Image Download", "Scheduling", "Network Configuration"], "ontology_classification": {"features": ["download_job_management", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/os-image/trigger-osdownload/", "method": "POST", "details": {"operationId": "ux_nccm_os_image_trigger_osdownload_create", "description": "This endpoint is used to trigger or schedule the download of OS images for network devices within the current organization. It facilitates tasks such as retrieving configurations, managing, and deploying OS changes across routers, switches, and firewalls. Users can specify scheduling options like 'Once,' 'Every,' 'Daily,' 'Weekly,' or 'Monthly,' along with the date and time for the download. This process is crucial for backup, analysis, auditing, or comparison of device configurations.", "summary": "Search Options os schedule the given ids", "tags": ["OS Image Download"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/OSImage"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OSImage"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is expected to follow a specific serialization format, supporting various primitive and compound field types as described in the API specification. Notable recognized primitive fields include StringField, IntField, BooleanField, DateTimeField, and UUIDField. Compound fields like ListField and DictField are mapped to DRF fields. ReferenceField and EmbeddedDocumentField are handled with nested serializer autogeneration for non-zero depth. It's important to note that fields such as FileField, ImageField, and BinaryField are either not well supported or untested. This endpoint plays a key role in OS image management workflows, particularly when integrating with OS Image Download Schedulers, which compare configuration data by downloaded version or file. For specific templates, especially for OS image upgrades, users should create them in NCCM following standards like \"OS Image Upgrade - <Vendor> <OS type>\". The scheduling functionality aligns with options found in configuration triggers and download jobs within the system."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Engineer"], "primary_use_case": "This API is used to trigger and schedule the download of OS images for network devices. It enables IT operations and network administrators to manage and deploy OS changes, retrieve configurations, and perform tasks crucial for backup, analysis, auditing, and comparison of device configurations across routers, switches, and firewalls."}, "content_for_embedding": "This API endpoint facilitates the scheduling and triggering of OS image downloads for network devices such as routers, switches, and firewalls. It supports various scheduling options including \"Once,\" \"Every,\" \"Daily,\" \"Weekly,\" or \"Monthly\" downloads, allowing users to specify the exact date and time. The process is integral for OS image management workflows, enabling tasks like configuration retrieval, deployment of OS changes, and ensuring device configurations are backed up, analyzed, audited, or compared. It integrates with OS Image Download Schedulers and supports multiple protocols like TFTP, FTP, Terminal, SCP, and SFTP for image transfer. This API is a key component for maintaining and updating the operating systems of network infrastructure.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "it_operations", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["OS Image Download", "Scheduling", "Network Configuration"]}}, {"path": "/ux/nccm/policy_rule_group/", "method": "GET", "details": {"operationId": "ux_nccm_policy_rule_group_list", "description": "This endpoint, located at `/ux/nccm/policy_rule_group/`, is used to retrieve a paginated list of 'Configuration Triggers' available within the current organization. Configuration Triggers act as pre-processors to gather specific information from devices or verify the existence of particular configurations. The data collected by these triggers (e.g., from devices or configuration checks) can then be imported or utilized in Configuration Templates as Trigger Objects, similar to Device, Job, Profile, and Global objects, to dynamically build device commands based on the device's state. This allows for automated and State-aware configuration management within the NCCM application. It supports pagination and sorting to efficiently navigate through the list of triggers.", "summary": "Gets a list of configuration trigger", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PolicyRulegroup"}}}}, "description": ""}}, "additional_info": "The API supports standard pagination parameters: `items_per_page` (required, integer) to specify the number of items to return per page, and `page` (required, integer) to indicate the specific page number to retrieve. Additionally, optional sorting parameters are available: `sort` (string) for the key to sort by, and `reverse` (boolean) to specify the sorting order (ascending or descending). Configuration Triggers are a core component recognized alongside Configuration Profiles, OS Image Download and Upgrade, Policy Rule \u2013 Command Execution Scope, Policy Remedy Execution, and CLI Job functionalities within NCCM. They are distinct from Policy Rule Groups, which are collections of rules designed for compliance or operational requirements, though both are fundamental to the policy checking framework in NCCM."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "NCCM Operators", "Developers"], "primary_use_case": "To retrieve a paginated list of \"Configuration Triggers\" within the NCCM application, enabling users to manage and utilize these pre-processors for automated and state-aware network configuration management."}, "content_for_embedding": "This API endpoint retrieves a paginated and sortable list of \"Configuration Triggers\" available within the current organization. Configuration Triggers are pre-processors designed to gather specific information from network devices or verify existing configurations. The data collected by these triggers can then be imported and utilized as \"Trigger Objects\" within Configuration Templates, similar to Device, Job, Profile, and Global objects. This functionality facilitates dynamic and state-aware command building for automated configuration management within the NCCM application. The API supports standard pagination parameters like `items_per_page` and `page`, and optional sorting parameters such as `sort` and `reverse`. Configuration Triggers are a core component of NCCM, distinct from Policy Rule Groups, but integral to the overall policy checking framework.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Trigger", "NCCM", "Pagination"]}}, {"path": "/ux/nccm/policy_rule_group/", "method": "POST", "details": {"operationId": "ux_nccm_policy_rule_group_create", "description": "This endpoint facilitates the creation of a new policy rule group configuration profile within the NCCM (Network Configuration and Change Management) application. A configuration profile, specifically a 'Policy Rule Group,' is crucial for defining how configurations, inventories, and operational data are downloaded and managed. Creating a Rule Group involves specifying devices, vendors, and OS versions, and then associating relevant rules to perform compliance checks. These rule groups are a collection of predefined or newly added rules designed to meet specific compliance or operational requirements. This endpoint is privilege-based, meaning only users with appropriate roles and permissions can perform this action.", "summary": "Creates a new configuration profile", "tags": ["Rule Group"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to accommodate various data types, referred to as 'Documents.' It recognizes primitive fields such as StringField, URLField, IntField, FloatField, BooleanField, DateTimeField, and more. Compound fields like ListField and DictField are also supported. Special handling is provided for ReferenceField, which acts like a ForeignKey, and EmbeddedDocumentField. Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are also explicitly handled. Users should be aware that FileField, ImageField, and BinaryField are not well supported or are untested and may not work as expected. All other fields map to a generic DocumentField, which might lead to unexpected behavior. This API is a critical step in configuring an organization's network compliance and operational standards by allowing the setup of these fundamental Rule Groups, which are later collected into Policies."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Users with appropriate roles and permissions"], "primary_use_case": "This API is used by network administrators to create and manage network configuration profiles and compliance rules within the NCCM application."}, "content_for_embedding": "This API facilitates the creation of new policy rule group configuration profiles within the Network Configuration and Change Management (NCCM) application. These profiles are fundamental for defining how network configurations, inventories, and operational data are downloaded and managed. A Policy Rule Group involves specifying devices, vendors, and OS versions, and then associating relevant rules to perform compliance checks. This endpoint is privilege-based, meaning only authorized users can perform this action. The request body supports various data types including primitive and compound fields, but has limited support for file-related fields. This API is a critical component for configuring an organization's network compliance and operational standards.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Management", "Add", "NCCM"]}}, {"path": "/ux/nccm/policy_rule_group/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_policy_rule_group_retrieve", "description": "This API endpoint allows users to retrieve a specific policy rule group by its unique identifier (ID). Access to view, add, edit, or delete Rule Groups is privilege-based, meaning only users with appropriate roles and permissions assigned by the administrator can utilize this functionality. This endpoint is crucial for understanding the configuration of a specific rule group, which involves specifying devices, vendors, OS versions, and associated rules for compliance checks within NCCM.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "The 'id' path parameter is a required string representing the unique identifier of the policy rule group to be retrieved. Users are reminded that this is a privilege-based feature; an administrator must grant the necessary permissions to access, view, or edit rule groups. This API is commonly used as a preliminary step before making changes to an existing rule group, potentially redirecting to an 'Edit Rule Group' window within the NCCM application."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Compliance Officer"], "primary_use_case": "To retrieve the details of a specific policy rule group within NCCM for understanding its configuration and as a preliminary step before making changes."}, "content_for_embedding": "This API endpoint allows users to retrieve a specific policy rule group by its unique identifier (ID). It is crucial for understanding the configuration of a specific rule group, which involves specifying devices, vendors, OS versions, and associated rules for compliance checks within NCCM. Access to this feature is privilege-based, requiring appropriate roles and permissions granted by an administrator. This retrieval is often a preliminary step before editing the rule group.", "semantic_keywords": ["Configuration Retrieval", "Privilege-based Access", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/policy_rule_group/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_policy_rule_group_update", "description": "This API endpoint allows for the editing and viewing of a specific NCCM (Network Change and Configuration Management) policy rule group identified by its unique ID. It enables users with appropriate privileges to make necessary changes to an existing rule group. This operation is critical for maintaining compliance checks and managing network configurations, as policy configuration involves associating Rule Groups and defining policy check timelines. Access to this functionality is privilege-based, meaning only users assigned appropriate roles and permissions by the administrator can perform view and edit operations.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Rule Group"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` in the path parameter is a required string that uniquely identifies the policy rule group to be viewed or edited. The request body for editing (PUT method) can include various field types such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, etc., and also supports compound fields like `ListField` and `DictField`. Special handling is in place for `ReferenceField` and `EmbeddedDocumentField`. Users should refer to the 'Edit Rule Group' section within the Infinity User Guide for operational details on how to interact with rule groups, including the save mechanism after changes. Please note that certain field types like `FileField`, `ImageField`, and `BinaryField` are not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Compliance Managers", "IT Operations Staff"], "primary_use_case": "To enable network administrators and compliance managers to modify and manage existing NCCM (Network Change and Configuration Management) policy rule groups, ensuring network configurations adhere to compliance standards and operational requirements."}, "content_for_embedding": "This API endpoint facilitates the update and modification of an existing NCCM (Network Change and Configuration Management) policy rule group. It allows users with appropriate privileges to edit details, manage configurations, and ensure compliance checks are maintained. The operation is critical for network configuration management, enabling changes to rule groups that define policy check timelines and associate rules. It supports various field types for the request body and is a key function for maintaining network compliance and operational integrity.", "semantic_keywords": ["NCCM", "Configuration Management", "Update"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "configuration_policies", "configuration_rules"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/policy_rule_group/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_policy_rule_group_destroy", "description": "This endpoint permanently removes a Rule Group from NCCM (Network Configuration and Compliance Management). A Rule Group is a collection of predefined or newly added rules designed to meet specific compliance or operational requirements within NCCM. It allows users to configure device ranges, applicable vendors, and operating systems to which the rules will apply. This action removes the Rule Group from the system, preventing it from being applied to future compliance checks.", "summary": "Deletes the rule group with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The Rule Group to be deleted is identified by a unique ID, which must be provided as a path parameter. Deleting a Rule Group is a permanent action confirming its removal from the system. Users must have appropriate roles and permissions assigned by an administrator to perform this operation, as access to Rule Groups, including deletion, is privilege-based. This endpoint does not require a request body. Once a Rule Group is deleted, it will no longer be available for association with policies or for compliance checks."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Compliance Managers", "IT Operations Staff"], "primary_use_case": "To permanently remove a specific Rule Group from the Network Configuration and Compliance Management (NCCM) system, ensuring it is no longer applied to compliance checks or policies."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a Rule Group within the NCCM (Network Configuration and Compliance Management) system. A Rule Group, identified by a unique ID, is a collection of rules used for compliance or operational requirements, including device ranges, vendors, and operating systems. This irreversible action removes the Rule Group, preventing its future application in compliance checks. Users require appropriate administrative permissions to perform this privilege-based operation.", "semantic_keywords": ["Delete", "Network Configuration", "Rule Group"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/policy_rule_group/bulk-opration/", "method": "POST", "details": {"operationId": "ux_nccm_policy_rule_group_bulk_opration_create", "description": "This API endpoint, `/ux/nccm/policy_rule_group/bulk-opration/`, facilitates bulk operations on policy rule groups within the NCCM (Network Change & Configuration Management) system. It allows users to perform various actions, including viewing, adding, editing, and deleting policy rules efficiently. The functionality is privilege-based, meaning a user's ability to access, view, add, edit, delete, execute, or export is determined by administrator-assigned privileges. Specifically, users can view existing rules, add new ones, edit details of existing rules (such as making necessary changes from a 'Rules' page), and permanently remove selected rules from the system. This endpoint is designed to streamline the management of NCCM policy rules.", "tags": ["Rule Group"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint utilizes a flexible serializer for documents, supporting a wide range of primitive and compound field types. Primitive fields include StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, and GeoJsonBaseField. Compound fields such as ListField and DictField are mapped to corresponding DRF fields, with proper handling for nested field specifications. ReferenceField and EmbeddedDocumentField are also supported, with nested serializers auto-generated for depths greater than zero. Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are handled by their respective serializer fields. It's important to note that FileField, ImageField, and BinaryField are not well supported or untested. Any other fields are mapped to DocumentField and might not work as expected. This endpoint is crucial for tasks requiring bulk management of policy rules, such as enabling/disabling multiple profiles, or bulk-deleting outdated configurations, similar to the privilege-based bulk actions mentioned in the documentation for authentication profiles. For detailed schema information regarding the request body, developers should refer to the full API specification for the specific field types and their expected formats. Users must have the appropriate privileges (e.g., 'Add', 'Edit', 'Delete' based on the operation) to successfully interact with this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations"], "primary_use_case": "To perform bulk operations (viewing, adding, editing, deleting, enabling, disabling) on policy rule groups within the Network Change & Configuration Management (NCCM) system."}, "content_for_embedding": "This API endpoint facilitates bulk operations on NCCM policy rule groups, enabling users to efficiently view, add, edit, delete, enable, and disable network configuration rules. It streamlines the management of policy rules within the Network Change & Configuration Management system, with functionality determined by administrator-assigned privileges.", "semantic_keywords": ["Bulk Operations", "Rule Group", "NCCM"], "ontology_classification": {"features": ["centralized_management", "network_configuration_and_change_management", "privilege_based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/policy_rule_group/get-configuration-rules/", "method": "GET", "details": {"operationId": "ux_nccm_policy_rule_group_get_configuration_rules_retrieve", "description": "This API endpoint allows users to retrieve the configuration rules within the Network Change & Configuration Management (NCCM) system. Users can view and potentially edit these rules, provided they have the necessary administrative privileges. This feature is fundamental for managing network changes and configurations, allowing users to access, view, add, edit, delete, execute, and export rules as needed.", "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "This is a privilege-based feature; users can only access, view, add, edit, delete, execute, and export rules if the administrator has assigned the appropriate roles and privileges. The NCCM module offers permissions for various functionalities, including Baseline Scheduler and Configuration Download Job. From the Rules page, users can navigate to an 'Edit Rule' page by clicking the Rule ID or selecting the rule and clicking 'Edit' to make necessary changes. Changes must be saved explicitly."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users with administrative privileges"], "primary_use_case": "To retrieve, view, and manage configuration rules within the Network Change & Configuration Management (NCCM) system, including operations like adding, editing, deleting, executing, and exporting these rules."}, "content_for_embedding": "This API retrieves configuration rules from the Network Change & Configuration Management (NCCM) system. It enables users with appropriate administrative privileges to view, add, edit, delete, execute, and export network configuration rules, which is essential for managing network changes and configurations.", "ontology_classification": {"features": ["nccm.network_configuration_and_change_management", "nccm.privilege-based_access_control", "infraon_configuration.network_configuration_management_(nccm)", "report.report_export_capabilities"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Rules", "NCCM", "Retrieval"]}}, {"path": "/ux/nccm/policy_rule_group/get-os-from-rule/", "method": "GET", "details": {"operationId": "ux_nccm_policy_rule_group_get_os_from_rule_retrieve", "description": "This API endpoint allows users to retrieve operating system (OS) information associated with a policy rule group within the NCCM (Network Change & Configuration Management) system. While the original description states it allows users to be viewed or edited, the primary purpose, as inferred from the path `/ux/nccm/policy_rule_group/get-os-from-rule/` and supporting contexts, is to fetch OS details related to rules within rule groups. Access to this functionality is privilege-based, meaning users can view, add, or edit rule groups and their associated rules only if they have been assigned the appropriate roles and permissions by an administrator.", "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is likely used in scenarios where users need to understand which operating systems are targeted or relevant to specific policy rules within NCCM. For example, when adding or editing a rule group, users may specify devices, vendors, and OS versions related to compliance checks. The `get-os-from-rule` call would help in retrieving these OS versions. Although the `parameters` field is empty in the provided specification, common implementations for such an endpoint would involve unique identifiers for the 'rule' or 'policy_rule_group' to specify which rule's OS information is being requested. Users can access, view, add, edit, delete, execute, and export rules and rule groups only if the administrator has granted the necessary privileges."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Compliance Officers", "Network Engineers"], "primary_use_case": "To retrieve operating system (OS) information associated with specific policy rule groups within the Network Change & Configuration Management (NCCM) system, enabling users to understand OS targeting for compliance and configuration."}, "content_for_embedding": "This API endpoint allows users to retrieve operating system (OS) information associated with a policy rule group within the NCCM (Network Change & Configuration Management) system. It is used to identify which operating systems are targeted or relevant to specific policy rules, aiding in configuration, auditing, and compliance checks. Access to this functionality is privilege-based.", "semantic_keywords": ["OS Image", "Rule Group", "Configuration Retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/policy_rule_group/get-runtime-params/", "method": "POST", "details": {"operationId": "ux_nccm_policy_rule_group_get_runtime_params_create", "description": "This `/ux/nccm/policy_rule_group/get-runtime-params/` API endpoint is designed to facilitate the viewing and editing of policy rules within the Network Change & Configuration Management (NCCM) system. It enables users to retrieve necessary runtime parameters that assist in modifying existing rules. Key functionalities include accessing rule details, making changes to them, and saving those updates. The operation is privilege-based, meaning users can only view, edit, add, delete, execute, and export rules if granted the appropriate administrator-defined roles and privileges.", "tags": ["Rule Group"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "The API endpoint uses a POST method, indicating that the request body likely contains parameters for identifying and potentially modifying the policy rule group. While the `parameters` field in the specification is empty, the `request_body_description` details that the request body will serialize various data types (e.g., `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, `DictField`, `ReferenceField`) to represent document structures. This implies that rule parameters, their values, and potentially nested structures related to the rule can be passed within the request body. For editing, users can click a Rule ID or select a rule and click 'Edit' to redirect to an edit window, make necessary changes, and then 'Save' the changes. The `request_body_description` lists supported primitive and compound fields, and also notes fields that are not well supported (`FileField`, `ImageField`, `BinaryField`) or might work incorrectly (`DocumentField`). This API is integral to managing network configurations and ensuring compliance within the NCCM framework."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Security Administrator"], "primary_use_case": "To retrieve runtime parameters for policy rules within the Network Change & Configuration Management (NCCM) system, enabling users to view, edit, add, delete, execute, and export these rules for network configuration management and compliance."}, "content_for_embedding": "This API endpoint allows users to retrieve runtime parameters for policy rules within the Network Change & Configuration Management (NCCM) system. It supports viewing, editing, adding, deleting, executing, and exporting policy rules, enabling modification and saving of changes. The operation is privilege-based and is crucial for managing network configurations and ensuring compliance.", "semantic_keywords": ["NCCM", "Configuration Management", "Runtime Parameters"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/policy_rule_group/get_init_options/", "method": "GET", "details": {"operationId": "ux_nccm_policy_rule_group_get_init_options_retrieve", "description": "This API endpoint is designed to retrieve initial options related to policy rule groups within the NCCM (Network Change & Configuration Management) application. It facilitates the viewing and potential editing of configuration parameters and access policies, similar to how users can manage authorization profiles or edit existing rules within NCCM. The endpoint likely provides the necessary data structures or pre-populated fields required for operations such as adding, editing, or managing authorization profiles and policy rules, aligning with the privilege-based features of NCCM for user access and permissions.", "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint, though not explicitly detailed in the provided contexts regarding its specific parameters or response structure, aligns with the broader functionalities of the NCCM application related to managing access policies and configuration rules. Given the general nature of 'get_init_options', it is probable that this endpoint provides default settings, dropdown options, or initial configuration profiles necessary for client-side forms or interfaces to begin creating or editing policy rule groups. It supports the privilege-based nature of NCCM, where users can 'access, view, add, edit, delete' functionalities only if granted the appropriate permissions by an administrator, as highlighted in several contexts. This API is crucial for initializing user interfaces that allow for the configuration and management of network device access policies."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Administrators", "IT Operations Staff"], "primary_use_case": "To retrieve initial configuration options and data structures for managing policy rule groups and network access policies within the NCCM application, facilitating UI initialization for adding, editing, or managing these entities."}, "content_for_embedding": "This API retrieves initial configuration options, default settings, and pre-populated fields for managing policy rule groups and network access policies within the NCCM application. It supports the creation, editing, and management of authorization profiles and policy rules, providing essential data for user interface initialization in a privilege-based environment.", "semantic_keywords": ["Configuration Retrieval", "Rule Group", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/policy_rule_group/get_rule_group_by_id/", "method": "GET", "details": {"operationId": "ux_nccm_policy_rule_group_get_rule_group_by_id_retrieve", "description": "This endpoint is used to retrieve a specific Rule Group by its ID within the NCCM system. A Rule Group is a collection of predefined or newly added rules designed to meet specific compliance or operational requirements. It allows users to configure device ranges, applicable vendors, and operating systems to which the rules will apply. This operation is privilege-based, meaning only users with appropriate roles and permissions can perform this action.", "summary": "Retrive the rule group with given id", "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "additional_info": "Access to Rule Groups, including viewing, adding, editing, deleting, executing, or exporting, is strictly privilege-based. The 'get_rule_group_by_id' operation specifically facilitates viewing the details of an existing Rule Group after it has been configured. Creating a Rule Group involves specifying devices, vendors, and OS versions, and then associating relevant rules to perform compliance checks. Disabled Rule Groups will not perform checks until re-enabled."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Compliance Officers", "Network Engineers"], "primary_use_case": "To retrieve specific network configuration rule groups for compliance and operational requirements within the NCCM system."}, "content_for_embedding": "This API retrieves a specific Rule Group by its ID within the NCCM system. Rule Groups are collections of predefined or newly added rules used for compliance or operational requirements, allowing configuration of device ranges, vendors, and operating systems. Access to this operation is privilege-based, facilitating the viewing of existing Rule Group details after configuration.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Rule Group", "Retrieval", "NCCM"]}}, {"path": "/ux/nccm/policy_rule_group/save-associated-rule/", "method": "GET", "details": {"operationId": "ux_nccm_policy_rule_group_save_associated_rule_retrieve", "description": "This API endpoint allows users to save changes made to associated rules within a policy rule group in NCCM (Network Change & Configuration Management). Specifically, it is used to persist modifications made to rules, similar to clicking 'Save' after editing a rule. This functionality is part of the broader capability for managing rule groups, which involves specifying devices, vendors, and OS versions, and associating relevant rules for compliance checks.", "tags": ["Rule Group"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "Access to this functionality, including viewing, adding, editing, deleting, executing, and exporting rules or rule groups, is privilege-based. Users must be assigned appropriate roles and permissions by the administrator to perform these actions. While the current specification indicates a GET method, typically save operations would use POST or PUT. This might imply that the 'save-associated-rule' endpoint is triggered as a final step after editing rule parameters elsewhere in the UI or via another API, or it might be a 'safe-state' retrieval operation."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Compliance Officers", "IT Operations Personnel"], "primary_use_case": "This API endpoint allows users to save or persist changes made to associated rules within a policy rule group in NCCM (Network Change & Configuration Management). It is crucial for maintaining and applying network configuration policies and ensuring compliance."}, "content_for_embedding": "This API endpoint, despite using a GET method, is designed to save or persist modifications to associated rules within a policy rule group in NCCM (Network Change & Configuration Management). It functions as a final step to apply changes made to rules, similar to a \"Save\" action in a UI. This functionality is integral to managing network configuration rules, which involve specifying devices, vendors, and OS versions for compliance checks. Access to this feature is privilege-based, requiring specific roles and permissions.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "roles_&_privileges_management", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Rule Group", "NCCM", "Save"]}}, {"path": "/ux/nccm/policy_rule_group/status-updation/", "method": "POST", "details": {"operationId": "ux_nccm_policy_rule_group_status_updation_create", "description": "This API endpoint facilitates the management of policy rule groups within the Network Change & Configuration Management (NCCM) module, specifically for updating their status. It allows users with appropriate privileges to view and modify existing rule groups. The functionality supports quick editing of status, priority, urgency, and severity, as well as detailed editing of request information. This is crucial for managing the lifecycle of rules and ensuring changes are tracked and reported on their success and execution status. The endpoint also supports similar update functionalities for other request types like access requests or catalog items, and enables the editing of added rules to make necessary changes within NCCM.", "tags": ["Rule Group"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this POST endpoint is designed to be highly flexible, acting as a serializer for documents. It supports a wide range of primitive fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `UUIDField`, and more. Compound fields like `ListField` and `DictField` are also supported, mapping to corresponding Django Rest Framework (DRF) fields. For relationships, `ReferenceField` behaves like DRF's `ForeignKey`, and `EmbeddedDocumentField` allows for nested serializers. While primitive and compound fields are well-supported, developers should be aware that `FileField`, `ImageField`, and `BinaryField` may not be fully supported or have not been extensively tested. For detailed editing of requests, use the 'Detailed Edit' option. Changes managed through this endpoint follow multiple states and statuses throughout their lifecycle, including 'Open', 'In Progress', and 'On Hold'."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Compliance Managers"], "primary_use_case": "To manage and update the status, priority, urgency, and severity of network policy rule groups within the Network Change & Configuration Management (NCCM) module, ensuring compliance and tracking changes throughout their lifecycle."}, "content_for_embedding": "This API endpoint is used within the Network Change & Configuration Management (NCCM) module to manage and update the status, priority, urgency, and severity of policy rule groups. It also supports detailed editing of request information and existing rules. The API is crucial for managing the lifecycle of network rules, tracking changes, and reporting on their execution status and success. It provides capabilities for both quick and detailed modifications to ensure network configuration compliance and operational efficiency.", "ontology_classification": {"features": ["network_configuration_and_change_management", "process_status_&_priority_management", "quick_edit_(key_attributes)", "detailed_ticket_editing"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Status", "Update", "Rule Group"]}}, {"path": "/ux/nccm/policy_rule_group/validate-uploaded-file/", "method": "POST", "details": {"operationId": "ux_nccm_policy_rule_group_validate_uploaded_file_create", "description": "This API endpoint facilitates the validation of uploaded files within the NCCM (Network Configuration and Change Management) system, specifically for policy rule groups. It allows privileged users to upload various file types (e.g., png, jpeg, jpg, txt, doc, docx, CSV, xls, xlsx, pdf) up to a maximum size of 20 MB. This functionality is crucial for users to add new rules or configurations by specifying configuration details and other parameters, and is part of the larger 'Upload' privilege set which grants users the ability to perform add operations within selected modules or pages.", "tags": ["Rule Group"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PolicyRulegroup"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint handles `Documents` and supports various primitive fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields such as `ListField` and `DictField` are also supported. Special handling exists for `ReferenceField` (similar to `ForeignKey`) and `EmbeddedDocumentField`, though some aspects (`EmbeddedDocumentField` depth 0) are noted as potentially incorrect or needing fixing. Fields like `FileField`, `ImageField`, and `BinaryField` are explicitly mentioned as not well supported or untested. It's important for uploaded files to adhere to the accepted formats and maximum size limit to ensure successful validation and processing."}, "llm_generated": {"business_context": {"user_personas": ["Privileged users", "Network administrators", "Configuration managers"], "primary_use_case": "To validate uploaded files for policy rule groups within the NCCM system, enabling privileged users to add new rules or configurations."}, "content_for_embedding": "This API endpoint validates uploaded files (e.g., png, jpeg, jpg, txt, doc, docx, CSV, xls, xlsx, pdf) up to a maximum size of 20 MB within the NCCM (Network Configuration and Change Management) system. It is specifically designed for policy rule groups, allowing privileged users to add new rules or configurations by ensuring the uploaded files adhere to specified formats and size limits. This functionality is crucial for successful processing and is part of the broader \"Upload\" privilege set.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "attachment_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Upload", "Validation", "Rule Group"]}}, {"path": "/ux/nccm/service_template/", "method": "GET", "details": {"operationId": "ux_nccm_service_template_list", "description": "This endpoint retrieves a paginated list of Service Templates available in the current organization's NCCM network. Service Templates are predefined configurations or aggregated tasks that administrators create and operators can use to standardize operations and execute predefined tasks on multiple network devices, such as monitoring, logging, authentication, or automated configuration changes. The API supports pagination through `items_per_page` and `page` parameters, and allows for sorting the results by `sort` key in either ascending or descending order using the `reverse` parameter. Each Service Template provides a structured approach to fulfilling services within NCCM.", "summary": "Gets a list of Service Template", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Service Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ServiceTemplate"}}}}, "description": ""}}, "additional_info": "The Service Template page displays a list of these predefined templates, including their basic details. While this endpoint does not directly support filtering, the user interface usually includes search capabilities by 'Service Template name' and filtering based on fields like 'Description' and 'Service Name' with conditions such as 'in', 'not in', 'equal to', or 'not equal to'. Administrators have privileges to determine who can view, edit, or delete these templates. Each template has a unique 'Name' and indicates the 'Vendor' and 'OS Type' for which it is applicable."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "operator"], "primary_use_case": "This API retrieves a paginated and sortable list of Service Templates, which are predefined network configurations or aggregated tasks. It enables administrators and operators to standardize operations and execute tasks on multiple network devices, facilitating efficient network configuration and change management."}, "content_for_embedding": "This API retrieves a paginated and sortable list of Service Templates available in the NCCM network. Service Templates are pre-defined configurations or aggregated tasks used to standardize network operations and execute tasks such as monitoring, logging, authentication, or automated configuration changes on multiple network devices. The endpoint supports pagination using `items_per_page` and `page` parameters, and allows sorting by a `sort` key in either ascending or descending order via the `reverse` parameter. It provides a structured approach for managing and accessing network service configurations within NCCM.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Template", "Network Configuration", "Pagination"]}}, {"path": "/ux/nccm/service_template/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_create", "description": "This API endpoint facilitates the creation and management of service templates within the Network Change & Configuration Management (NCCM) module. Service templates are crucial for fulfilling services by combining multiple tasks and standardizing configurations, updates, and other operations on network devices. This is a privilege-based feature; users can access, create, view, or modify service templates only if granted specific permissions by an administrator. While this endpoint primarily allows for the creation of service templates, it also implicitly supports viewing and editing operations, aligning with the general management capabilities within NCCM.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the supported data types for creating or updating a service template. It supports a wide range of primitive fields including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `UUIDField`, among others. Compound fields like `ListField` and `DictField` are also supported, enabling the creation of complex service template structures. `ReferenceField` and `GenericReferenceField` are handled similarly to foreign keys, suggesting connections to other entities within the system. `EmbeddedDocumentField` and `GenericEmbeddedDocumentField` are processed for nested structures. Operators typically utilize service templates created by administrators. It is important to note that NCCM does not provide default service templates, requiring administrators to configure them based on their organization's specific service offerings. The API's functionality is subject to the user's assigned roles and privileges, which dictate whether they can create, view, add, edit, or delete service templates."}, "llm_generated": {"business_context": {"user_personas": ["administrators", "operators"], "primary_use_case": "Creation and management of service templates within the Network Change & Configuration Management (NCCM) module for standardizing configurations, updates, and other operations on network devices."}, "content_for_embedding": "This API endpoint, `POST /ux/nccm/service_template/`, is used for the creation, and implicitly, the management (viewing, editing) of service templates within the Network Change & Configuration Management (NCCM) module. These templates are essential for standardizing network device configurations, updates, and operations by combining multiple tasks. The functionality is privilege-based, requiring specific administrator permissions for access, creation, viewing, or modification. Administrators typically create these templates, which are then utilized by operators. The API supports various data types for defining complex service template structures, including primitive fields (String, Int, Boolean, DateTime, UUID) and compound fields (List, Dict), as well as references to other entities and nested structures. NCCM does not provide default service templates, emphasizing the need for custom configuration by administrators based on organizational service offerings.", "semantic_keywords": ["Service Template", "Configuration Management", "Service Creation"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/service_template/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_service_template_retrieve", "description": "This API endpoint allows for the retrieval of specific service template details within the NCCM (Network Change & Configuration Management) module. Service templates are crucial for fulfilling network services by combining multiple tasks. Access to view or edit these templates is privilege-based, meaning users can only access, view, add, or edit if an administrator has granted the necessary privileges through roles and privileges. This endpoint specifically supports the viewing of service template details for a given ID.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter uniquely identifies the service template to be viewed. Service templates are unique to organizations and are configured by administrators, as NCCM does not provide default service templates. Key details associated with a service template include its ID, Name, Vendor (device where it can run), and OS Type. Users must have appropriate 'View' privileges, typically managed by an administrator. This endpoint acts as a foundational component for managing and understanding the structure of services within NCCM."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Network Operator"], "primary_use_case": "To enable users with appropriate privileges to retrieve and view the detailed configuration of specific network service templates within the NCCM module, which are essential for defining and fulfilling network services."}, "content_for_embedding": "This API endpoint facilitates the retrieval of detailed information for a specific service template, identified by its unique ID, within the Network Change & Configuration Management (NCCM) module. Service templates are fundamental for orchestrating network services by consolidating various tasks. The retrieved data includes the template's name, vendor compatibility, and operating system type. Access to this functionality is governed by privilege-based controls, ensuring that only authorized personnel, such as administrators or network engineers, can view these critical network service definitions. This endpoint serves as a core component for understanding and managing the structured components of network services.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Template", "NCCM", "Details retrieval"]}}, {"path": "/ux/nccm/service_template/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_service_template_update", "description": "This API endpoint allows administrators to update or view the details of a specific service template within the NCCM (Network Change & Configuration Management) module. Service templates are crucial for fulfilling services within NCCM, often combining multiple tasks. Access and modification privileges for service templates are based on user roles, ensuring that only authorized personnel can edit these critical configurations. This endpoint supports editing various fields as specified in the request body, which can include primitive and compound data types.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the service template to be viewed or updated. Service templates are highly configurable, supporting fields like `StringField`, `IntField`, `BooleanField`, and more complex types like `ListField`, `DictField`, and `ReferenceField`. It's important to note that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. The 'Edit' privilege is necessary to modify a service template. Administrators define who can view, edit, or delete specific templates within NCCM, making this a privilege-based feature. Common fields for a service template include 'Template ID', 'Name', 'Vendor', and 'OS Type'."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "To enable administrators to update and manage network service templates within the Network Change & Configuration Management (NCCM) module, ensuring proper configuration and service fulfillment."}, "content_for_embedding": "This API endpoint facilitates the update of specific service templates within the NCCM (Network Change & Configuration Management) module. It allows administrators to modify various fields of a service template, including primitive types like strings, integers, and booleans, as well as complex types such as lists, dictionaries, and references. The update operation requires an 'id' to uniquely identify the template. Access and modification are strictly controlled by user roles and privileges, ensuring only authorized personnel can edit these critical configurations. Service templates are fundamental for defining and fulfilling services in NCCM, often combining multiple tasks. Common editable fields include 'Template ID', 'Name', 'Vendor', and 'OS Type'.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "centralized_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Service Template", "Update", "NCCM"]}}, {"path": "/ux/nccm/service_template/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_service_template_destroy", "description": "This API endpoint allows for the deletion of a specific service template within the Network Change & Configuration Management (NCCM) system. Service templates are crucial for fulfilling services in NCCM, often combining multiple tasks to standardize configurations and operations on network devices. Deleting a service template requires specific administrative privileges.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Service Template"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "This is a privilege-based feature; users can only delete service templates if they have been granted the necessary 'delete' privilege by an administrator, as defined under roles and privileges. The `id` parameter in the path is required and identifies the specific service template to be deleted. Service templates are distinct from default templates, as administrators create them to be used by operators for various network services. NCCM module permissions manage who can view, edit, or delete these templates. This operation is typically part of managing the lifecycle of service configurations within the NCCM system."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Operator"], "primary_use_case": "This API allows administrators to delete specific service templates within the Network Change & Configuration Management (NCCM) system, which are used to standardize network configurations and operations."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a specific service template identified by its ID within the Network Change & Configuration Management (NCCM) system. Service templates are critical for standardizing network configurations and operations on network devices. The operation requires specific administrative privileges, as defined by roles and privileges within the NCCM module permissions, and is a key part of managing the lifecycle of service configurations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Service Template", "NCCM"]}}, {"path": "/ux/nccm/service_template/get-job-init-data/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_get_job_init_data_create", "description": "This endpoint is designed to initialize data for a Service Job, drawing information from a Service Template tailored for the current organization within the NCCM network. While the endpoint's summary mistakenly refers to 'Rule Group', the path and related context clearly indicate its purpose is tied to 'Service Templates'. The Service Template page displays a list of predefined templates available in NCCM, making this endpoint crucial for preparing new service jobs based on these standard configurations. This functionality is distinct from Rule Groups, which are collections of rules for compliance checks, though both are integral components within the NCCM system.", "summary": "Retrive the rule group with given id", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "additional_info": "The current `summary` and `description` in the API specification appear to be inconsistent; the path `/ux/nccm/service_template/get-job-init-data/` strongly suggests an operation related to 'Service Templates' rather than 'Rule Groups'. Developers should primarily focus on Service Template related functionality when integrating with this endpoint. The `request_body_description` details various primitive and compound field types supported for serialization, indicating that while no explicit parameters are listed, the endpoint likely accepts a flexible JSON request body following these serialization rules for initializing the service job data. Common use cases would involve setting up new service configurations or automating the creation of service jobs based on existing templates."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Network Administrator"], "primary_use_case": "To initialize data for new service jobs using predefined service templates within the NCCM network, enabling the setup of new service configurations and the automation of service job creation."}, "content_for_embedding": "This API endpoint initializes data for a Service Job by utilizing existing Service Templates within the NCCM network. It facilitates the setup of new service configurations and automates the creation of service jobs based on standard, predefined templates. The functionality is specifically tied to Service Templates, not Rule Groups, despite a potentially misleading summary.", "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "network_configuration_management_(nccm)", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Service Template", "Configuration", "Service Management"]}}, {"path": "/ux/nccm/service_template/get-task-data/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_get_task_data_create", "description": "This API endpoint is designed to retrieve and facilitate the modification of task-related data within the Service Template feature of the NCCM (Network Change & Configuration Management) module. It allows users to view existing task configurations and enables detailed editing of these tasks, crucial for defining the various steps required to fulfill a network service. Access and functionalities, including viewing and editing, are controlled by a privilege-based system, as defined by an administrator under roles and privileges.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically interacts with 'serializer for Documents', indicating that it handles various data types for task configuration, including primitive fields like String, Int, Boolean, and DateTime, as well as complex structures like ListField and DictField. ReferenceField and EmbeddedDocumentField are also supported, with nested serializers automatically generated for non-zero depth. It is critical for users to have the appropriate 'Edit' privilege within the relevant module to utilize the editing capabilities of this API. This API is commonly used in configuring service templates, which are combinations of multiple tasks, essential for an organization's service fulfillment within NCCM."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "Operations Teams"], "primary_use_case": "This API retrieves and allows modification of task-related data within the Service Template feature of the NCCM module, enabling users to view and edit task configurations essential for defining network service fulfillment steps."}, "content_for_embedding": "This API endpoint is designed to retrieve and facilitate the modification of task-related data within the Service Template feature of the NCCM (Network Change & Configuration Management) module. It allows users to view existing task configurations and enables detailed editing of these tasks, crucial for defining the various steps required to fulfill a network service. Access and functionalities, including viewing and editing, are controlled by a privilege-based system. It interacts with a serializer for Documents, handling various data types for task configuration, including primitive fields (String, Int, Boolean, DateTime) and complex structures (ListField, DictField, ReferenceField, EmbeddedDocumentField). This API is commonly used in configuring service templates, which are combinations of multiple tasks, essential for an organization's service fulfillment within NCCM.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Template", "Configuration Management", "Task Management"]}}, {"path": "/ux/nccm/service_template/import-service-template-json/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_import_service_template_json_create", "description": "This API endpoint facilitates the import of service template JSON files within the NCCM (Network Change & Configuration Management) module. Service templates are crucial for fulfilling network services, often comprising a combination of multiple configuration tasks. Importing enables users to add new or update existing predefined templates that are available in the NCCM network. This is a privilege-based feature, meaning users must have been granted specific access rights by an administrator to view, add, or edit these templates.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to contain the JSON representation of the service template. The API's serializer supports a wide range of primitive and compound field types including StringField, URLField, EmailField, IntField, FloatField, BooleanField, DateTimeField, ListField, and DictField. ReferenceField and EmbeddedDocumentField are handled with nested serializers if depth is greater than 0. Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are also supported. BinaryField, FileField, and ImageField are noted as not well supported or untested. Ensure the JSON structure adheres to the expected schema for service templates to avoid import issues. This endpoint is primarily used for administrative tasks related to managing network service definitions."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "network engineer"], "primary_use_case": "To enable administrators to import and update network service templates, facilitating the definition and management of network services within the NCCM module."}, "content_for_embedding": "This API allows administrators with specific access rights to import new or update existing network service templates in JSON format within the NCCM module. These templates are crucial for defining and managing network services and their associated configuration tasks.", "semantic_keywords": ["Service Template", "Import", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/service_template/is_disabled/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_is_disabled_create", "description": "This API endpoint, `/ux/nccm/service_template/is_disabled/`, facilitates the viewing and editing of information related to NCCM service templates. Service templates are fundamental components used to fulfill services within the Network Change & Configuration Management (NCCM) application. This functionality is privilege-based, meaning a user's ability to access, view, add, edit, delete, or export service templates is contingent on the privileges granted by an administrator, as defined under roles and privileges. The endpoint likely supports operations that determine whether a service template is disabled or enabled, influencing its usability in service fulfillment workflows.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint processes various primitive and compound fields, suggesting a flexible structure for data manipulation or querying. While the exact purpose of the 'is_disabled' part of the path is not explicitly detailed in the provided contexts, it aligns with a general privilege model where statuses (like 'ON/OFF' for templates mentioned in Context Rank 4) are common. The API would likely expect input conforming to the described serializer field types (e.g., `StringField`, `BooleanField`, `ReferenceField`) to query or modify the enabled/disabled status of a service template. Given the emphasis on 'view' and 'edit' operations in the context, this endpoint probably supports both checking the current disabled status and potentially toggling it, depending on the user's assigned privileges. The `TODO: THIS IS PROBABLY WRONG AND SHOULD BE FIXED.` note in the `request_body_description` regarding `EmbeddedDocumentField` suggests potential future changes or current caveats in how nested embedded documents are handled for non-zero depth."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Operations Engineer", "IT Operations Staff"], "primary_use_case": "To manage the active/inactive status (enable/disable) of NCCM service templates, controlling their availability for service fulfillment and ensuring only approved templates are in use."}, "content_for_embedding": "This API endpoint manages the disabled or enabled status of NCCM service templates, which are crucial for network service fulfillment. It allows for viewing and modifying the 'is_disabled' status of these templates, impacting their usability in workflows. Access is privilege-based, ensuring only authorized users can perform these operations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Template", "Disable", "NCCM"]}}, {"path": "/ux/nccm/service_template/is_enabled/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_is_enabled_create", "description": "This API endpoint is designed to manage the enablement status of service templates within the Network Change & Configuration Management (NCCM) system. Service templates are crucial for fulfilling services by defining a structured approach to executing predefined tasks on multiple network devices. This is a privilege-based feature, meaning users can access, view, add, edit, delete, execute, and export service templates only if administrators have granted them the necessary privileges, as defined under roles and privileges. The endpoint allows for viewing and potentially modifying the enabled status of these templates, aligning with the NCCM module's capabilities to manage user access to network changes and configurations.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is defined according to the 'Serializer for Documents'. It supports a wide range of primitive field types, including StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, GeoJsonBaseField, and DateField. Compound fields like ListField and DictField are mapped to DRF fields, supporting nested specifications. ReferenceField and EmbeddedDocumentField are handled with nested serializers if depth is greater than 0. Generic fields (GenericReferenceField, GenericEmbeddedDocumentField) are also supported. Note that FileField, ImageField, and BinaryField are not well supported or untested. Any other fields will be mapped to DocumentField and may not function as expected. Service templates are typically a combination of multiple tasks and are configured by administrators, as NCCM does not usually have default service templates."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Network Engineers"], "primary_use_case": "To manage the enablement status of service templates within the Network Change & Configuration Management (NCCM) system, controlling their availability for network changes and configurations."}, "content_for_embedding": "This API manages the enablement status of service templates within the Network Change & Configuration Management (NCCM) system. Service templates define structured tasks for network devices. This is a privilege-based feature, allowing users with necessary permissions to view and modify the enabled status of these templates. The API supports activating and deactivating service templates, which impacts their availability for use in upload jobs and network diagnosis. It also supports bulk actions for enabling and disabling templates.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "bulk_actions"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Template", "NCCM", "Enablement Status"]}}, {"path": "/ux/nccm/service_template/multidelete/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_multidelete_create", "description": "This API endpoint facilitates the multi-deletion of service templates within the NCCM (Network Change & Configuration Management) module. Users with appropriate 'Delete' privileges can select and remove multiple existing service templates. Service templates in NCCM are crucial as they combine one or more configuration templates to fulfill services. This operation aligns with the NCCM's privilege-based feature set, where administrators control who can view, add, edit, delete, execute, and export templates.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "To perform a multi-delete operation, users must select the desired template(s) and confirm the deletion. The request body is expected to contain a list of identifiers for the templates to be deleted. The API supports various primitive and compound field types for serialization as outlined in the `request_body_description`. It is important to note that 'Delete' privileges are distinct from 'Add' or 'Edit' privileges, meaning a user might only have the ability to delete without being able to add or modify. Ensure that the IDs passed in the request body correspond to existing templates in NCCM."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "user with delete privileges"], "primary_use_case": "This API enables the efficient removal of multiple service templates from the NCCM system, helping administrators maintain a clean and relevant set of network configuration templates. It addresses the need for bulk deletion of templates, streamlining template management and system hygiene."}, "content_for_embedding": "This API facilitates the bulk deletion of service templates within the Network Change & Configuration Management (NCCM) module. Users with appropriate \"Delete\" privileges can select and remove multiple existing service templates by providing their identifiers in the request body. This operation is essential for managing and cleaning up network configuration templates.", "semantic_keywords": ["Delete", "Service Template", "Bulk Operations"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/service_template/options/", "method": "GET", "details": {"operationId": "ux_nccm_service_template_options_retrieve", "description": "This API endpoint provides options related to service templates within the NCCM (Network Change & Configuration Management) module. It allows users to view or interact with functionalities pertaining to creating and managing service templates. Access to these options is privilege-based, meaning users can view, add, or edit service templates only if they have been granted the necessary permissions by an administrator. This relates to how user access is managed for network changes and configurations within NCCM.", "tags": ["Service Template"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is part of a privilege-based feature, where user permissions (View, Edit, Add, Delete, Execute, Export) are defined under roles and privileges. The 'Edit' privilege, for example, allows users to view and perform edit operations within the selected module. Service templates are crucial for fulfilling services within NCCM, often combining multiple tasks. While the API currently allows viewing and editing, the specific options returned by this endpoint will depend on the user's assigned privileges for service template management within the NCCM system."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Users with Service Template Management Privileges", "Administrators"], "primary_use_case": "This API provides options for managing service templates within the Network Change & Configuration Management (NCCM) module, enabling users to view, add, and edit service templates based on their assigned privileges."}, "content_for_embedding": "This API endpoint retrieves available options for managing service templates within the Network Change & Configuration Management (NCCM) module. Access to these options is privilege-based, allowing users to view, add, edit, or interact with functionalities related to service template creation and management based on their assigned permissions. It provides the necessary options for creating, managing, and interacting with service templates, which are crucial for fulfilling services within NCCM.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Template", "NCCM", "Configuration Options"]}}, {"path": "/ux/nccm/service_template/quick-task-validation/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_quick_task_validation_create", "description": "This API endpoint provides quick validation capabilities for service templates within the NCCM system. It facilitates quick edit actions for request attributes such as status, priority, urgency, severity, impact service, and the assigned user. While allowing for quick modifications, it also supports detailed editing of request information. The endpoint processes various data types as defined in the request body, including primitive fields like StringField and IntField, and compound fields such as ListField and DictField.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the serializer for documents, supporting a wide range of primitive and compound data types. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth, similar to foreign key relationships in DRF. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. For comprehensive editing of request details, users should utilize the 'Detailed Edit' functionality. This endpoint is particularly useful for managing service requests efficiently through quick actions, ensuring data integrity during validation."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "IT Administrators", "Operations Teams"], "primary_use_case": "To provide quick validation and efficient modification of service template request attributes within the NCCM system, enabling rapid updates for status, priority, urgency, severity, impact service, and assigned users."}, "content_for_embedding": "This API endpoint facilitates quick validation and modification of service template request attributes within the NCCM system. It allows for rapid updates to fields such as status, priority, urgency, severity, impact service, and assigned user. The endpoint also supports detailed editing of request information and processes various data types for efficient service request management.", "semantic_keywords": ["Validation", "Quick Edit", "Service Template"], "ontology_classification": {"features": ["request_editing_&_quick_actions", "request_classification_&_categorization", "request_lifecycle_management", "network_configuration_management_(nccm)", "service_management_(catalogue_configuration)"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/nccm/service_template/save-service-job/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_save_service_job_create", "description": "This API endpoint facilitates the saving of a service job within the NCCM (Network Change & Configuration Management) module. It is integral to the process of using configured service templates to fulfill network services. The functionality is privilege-based, meaning a user's ability to save a service job depends on the administrative roles and privileges assigned, including access, viewing, adding, and editing permissions related to service templates and jobs. The request body supports a wide range of primitive field types, including strings, URLs, integers, floats, booleans, dates, and UUIDs, as well as complex types like lists and dictionaries, allowing for diverse data structures to define the service job.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The 'save-service-job' operation ties directly into the NCCM's capability to manage network changes and configurations, specifically leveraging pre-configured service templates to streamline service fulfillment. Although the original description indicated it allows users to be 'viewed or edited', the context strongly suggests its primary role is in saving service jobs related to network services. The API's request body is highly flexible, supporting various data types and complex field structures, which is crucial for defining comprehensive service jobs. However, users should be aware that certain field types like `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested, and their use may lead to unexpected behavior. This endpoint is typically used after a service template has been defined or refined, often transitioning a service from a 'New' or 'Draft' state. Access to this functionality is strictly controlled by organizational roles and privileges managed by administrators."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users managing network changes and configurations with administrative privileges"], "primary_use_case": "To save a service job within the Network Change & Configuration Management (NCCM) module, leveraging pre-configured service templates to define and schedule network changes and configurations."}, "content_for_embedding": "This API endpoint is designed for saving a service job within the NCCM (Network Change & Configuration Management) module. It is crucial for fulfilling network services by utilizing configured service templates. The functionality is privilege-based, requiring specific administrative roles and permissions for access, viewing, adding, and editing service templates and jobs. The request body is highly flexible, supporting various data types and complex structures necessary for comprehensive service job definition. This operation is typically performed after a service template has been defined or refined, often transitioning a service from a \"New\" or \"Draft\" state. Access is strictly controlled by organizational roles and privileges. A service job allows users to select devices, define tasks, and set a schedule for execution, as detailed in the \"Add Service Job\" process.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "download_job_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["NCCM", "Service Template", "Job Management"]}}, {"path": "/ux/nccm/service_template/save-txt/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_save_txt_create", "description": "API endpoint that allows users to be viewed or edited.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Service Designers", "IT Operations Staff"], "primary_use_case": "This API allows users to save or create service templates, which are crucial for defining and managing network services within the Network Configuration and Change Management (NCCM) system."}, "content_for_embedding": "This API endpoint facilitates the creation and saving of service templates in a text format, specifically within the NCCM (Network Configuration and Change Management) module. It enables users to define and store reusable configurations for network services, streamlining deployment and management processes. This is a core function for maintaining a centralized and standardized network environment.", "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management", "service_management_(catalogue_configuration)"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Service Template", "NCCM", "Save"]}}, {"path": "/ux/nccm/service_template/validate-csv-data/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_validate_csv_data_create", "description": "This API endpoint is designed to validate CSV data critical for Network Change & Configuration Management (NCCM) service templates. Specifically, it facilitates the validation of uploaded CSV files, such as those used for bulk resource tagging/untagging or configuring service templates. The process involves checking the uploaded data for validity and summarizing both valid and invalid records. Users can then proceed with the import of valid records or download a validation report for further analysis. This is a privilege-based feature within NCCM, requiring appropriate user access.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint expects a CSV file containing service template related data. While the API specification details various primitive and compound field types supported for document serialization (e.g., StringField, IntField, ListField, DictField), the primary input is expected to be a CSV file for validation. It is crucial to ensure that resource configuration details are added to the default file before uploading for validation. The endpoint is a key step in the 'Upload | Validation' workflow within NCCM, enabling users to verify data integrity before final import. Supported fields for serialization are comprehensive, but 'FileField', 'ImageField', and 'BinaryField' are noted as not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "NCCM Users"], "primary_use_case": "To validate uploaded CSV data for Network Change & Configuration Management (NCCM) service templates, including bulk resource tagging/untagging, and to provide a summary of valid and invalid records for import or further analysis."}, "content_for_embedding": "This API validates CSV data for Network Change & Configuration Management (NCCM) service templates. It supports the validation of uploaded CSV files for bulk resource tagging/untagging and service template configuration. The endpoint checks data integrity, summarizes valid and invalid records, and allows users to proceed with importing valid data or downloading a validation report. It is a crucial step in the 'Upload | Validation' workflow within NCCM and requires appropriate user privileges.", "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "nccm_reports_(configuration_download_&_jobs_account_audit)", "bulk_actions_on_assets", "tag_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["CSV Validation", "NCCM", "Service Template"]}}, {"path": "/ux/nccm/service_template/validate-uploaded-file/", "method": "POST", "details": {"operationId": "ux_nccm_service_template_validate_uploaded_file_create", "description": "This API endpoint facilitates the validation of uploaded files specifically for the NCCM (Network Configuration Change Management) service template. It allows authorized users to upload files for 'upload jobs', ensuring their integrity and format before processing. This is a crucial step in creating new upload jobs, which involves specifying configuration, device details, and scheduling parameters. The endpoint supports various document types for upload, as detailed in the request body specification, and is integral to managing predefined templates for configuration uploads within the NCCM tool.", "tags": ["Service Template"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ServiceTemplate"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that the API serializes documents supporting a wide range of primitive and compound fields, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Special handling is noted for `ReferenceField` and `EmbeddedDocumentField`, with nested serialization depending on depth. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well-supported or tested. Accepted file formats for upload include png, jpeg, jpg, txt, doc, docx, CSV, xls, xlsx, and pdf, with a maximum size of 20 MB. This functionality typically requires 'Upload' privileges, allowing users to view and perform add operations within the selected module/page. This endpoint is central to the 'Add' action in the NCCM tool, enabling users to create and manage upload jobs."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users with \"Upload\" privileges in the NCCM tool"], "primary_use_case": "To validate uploaded files for Network Configuration Change Management (NCCM) service templates, ensuring their integrity and format before processing and creating new upload jobs."}, "content_for_embedding": "This API validates uploaded files for Network Configuration Change Management (NCCM) service templates. It is a crucial step in creating new upload jobs, ensuring the integrity and format of configuration files before processing. The API supports various document types and is integral to managing predefined templates for configuration uploads within the NCCM tool, requiring \"Upload\" privileges.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Upload", "Validation", "Network Configuration"]}}, {"path": "/ux/nccm/uploadjobs/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_list", "description": "This endpoint retrieves a paginated list of all Network Configuration Change Management (NCCM) upload jobs within the current organization. Upload jobs are critical for changing or updating configuration files or firmware on network devices, frequently used for deploying new devices, updating existing ones, or upgrading device firmware. This includes both active and scheduled jobs in the network configuration inventory, providing details like Job Name, Status (Active/Inactive), and associated Agent. The response enables users to view the list of jobs, facilitating management and monitoring of configuration deployments.", "summary": "Gets a list of upload jobs", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/UploadJobs"}}}}, "description": ""}}, "additional_info": "The Upload Job page (relevant to this API) typically displays a list of active and scheduled jobs. Users can create new upload jobs using the NCCM tool by specifying configuration, device details, and scheduling parameters. Each job is identified by a unique 'Job Name' and can have a brief description for clarity. Common use cases for this API include searching for specific upload jobs by name and filtering the displayed list. The API supports pagination through `items_per_page` and `page` parameters, and allows sorting of the results via `sort` and `reverse` parameters."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Network engineers"], "primary_use_case": "To enable users to view and monitor the status and details of Network Configuration Change Management (NCCM) upload jobs, which are used for deploying, updating, or upgrading configuration files and firmware on network devices."}, "content_for_embedding": "This API retrieves a paginated list of Network Configuration Change Management (NCCM) upload jobs. These jobs are crucial for deploying new devices, updating existing ones, or upgrading device firmware by changing or updating configuration files or firmware on network devices. The API provides details such as Job Name, Status (Active/Inactive), and associated Agent, enabling users to view, manage, and monitor configuration deployments. It supports pagination, sorting, searching, and filtering of upload jobs.", "semantic_keywords": ["NCCM", "Upload", "Configuration Management"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/uploadjobs/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_create", "description": "This API endpoint provides functionalities for managing 'upload jobs' within the Network Configuration Change Management (NCCM) tool. Specifically, it enables users to initiate new upload jobs by specifying configuration details, device information, and scheduling parameters. It is also used to view and perform 'add operations' for these upload jobs within the NCCM module. This endpoint supports the creation of new upload jobs, which allows transferring configuration from the NCCM to a device, enabling either entire configuration files or select lines/snippets to be uploaded. The 'Upload' privilege is essential for users to utilize this endpoint effectively. It allows viewing and performing 'add' operations.", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various data types for document serialization, as detailed by the `request_body_description`. It supports primitive fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields like `ListField` and `DictField` are mapped to corresponding DRF fields, supporting nested field specifications. `ReferenceField` and `EmbeddedDocumentField` are also handled with nested serializer autogeneration for depth greater than zero. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are supported independently. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or tested and may lead to unexpected behavior. This endpoint is crucial for populating the NCCM with device configurations and managing the lifecycle of these upload tasks. Users can define job names, monitor statuses (active, in-active), and associate agents with upload jobs. Changes to existing upload jobs can be made via an 'Edit' function which is linked to this process, covering Job Details, Task Details, and other parameters."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users with \"Upload\" privilege in NCCM", "Change Management Approvers"], "primary_use_case": "This API endpoint is used to create and manage \"upload jobs\" within the Network Configuration Change Management (NCCM) tool. It facilitates the transfer of configuration files or specific configuration snippets from the NCCM server to network devices, enabling tasks such as deploying new devices, updating existing device configurations, and upgrading device firmware. It also supports viewing and performing add operations for these jobs, integrating with a change management workflow for approvals and scheduling."}, "content_for_embedding": "This API allows for the creation and management of network configuration upload jobs. Users can initiate new upload jobs by providing configuration details, device information, and scheduling parameters. The API supports transferring entire configuration files or selected lines/snippets from the Network Configuration Change Management (NCCM) system to target network devices. It is crucial for populating NCCM with device configurations and managing the lifecycle of these upload tasks, including defining job names, monitoring statuses (active/inactive), and associating agents. The process can involve a change request workflow with approvals. Users require specific \"Upload\" privileges to utilize this endpoint effectively. It also supports editing and deleting existing upload jobs.", "ontology_classification": {"features": ["centralized_management", "network_configuration_and_change_management", "privilege-based_access_control", "Configuration Management", "Add", "Edit", "Delete", "Upload", "Job Management", "Scheduling", "Status", "Agent Management", "Configuration Templates", "Device Management", "Device Credentials", "IP Address", "User Privileges", "Roles & Privileges", "Approval Workflow", "Change Management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Network Configuration", "Upload Jobs", "Device Management"]}}, {"path": "/ux/nccm/uploadjobs/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_retrieve", "description": "This endpoint is used to fetch the detailed information of a specific NCCM (Network Configuration Change Management) upload job. Each upload job is uniquely identified by its ID. Users can create new upload jobs within the NCCM tool to manage configuration changes, device updates, and firmware upgrades. An upload job can be active or inactive, and its details include its unique name (e.g., \"Network Backup Job\"), a brief description to clarify its purpose, and the associated agent name. This endpoint allows for viewing comprehensive details such as the job's current status and the user who initiated it.", "summary": "Gets a upload job details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string that uniquely identifies the upload job. This endpoint provides details that users typically consult to understand the purpose and status of a job, such as its name, description, and status (Active/Inactive). The upload job details can also include the agent name, the user who triggered it, and the type of the job (e.g., Regular Job, OS Upgrade Job). While this endpoint retrieves details, actions like changing job status (active/inactive) or viewing results are managed through other dedicated functionalities as outlined in the NCCM documentation."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Network engineers", "System administrators"], "primary_use_case": "To enable users to retrieve comprehensive details of a specific Network Configuration Change Management (NCCM) upload job, including its status, name, description, and associated agent, to effectively monitor and understand network configuration changes."}, "content_for_embedding": "This API retrieves comprehensive details of a specific Network Configuration Change Management (NCCM) upload job, identified by its unique ID. It provides essential information such as the job's name, description, current status (active or inactive), the associated agent, and the user who initiated it. This endpoint is vital for users to monitor, track, and understand the progress and state of configuration changes, device updates, and firmware upgrades within the NCCM system.", "semantic_keywords": ["Upload Jobs", "Details retrieval", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_uploadjobs_update", "description": "This API endpoint facilitates the modification and viewing of a specific Network Configuration Change Management (NCCM) 'Upload Job'. Users can update existing upload job details such as job name, configuration, device details, and schedule parameters. It supports changing the job's status between 'Active' and 'Inactive' and allows for edits to job details, task details, and other associated information. The PUT method implies a comprehensive update of the specified upload job.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the 'Upload Job' to be viewed or edited. The request body, for updating an upload job, utilizes a serializer that recognizes various primitive fields like StringField, URLField, IntField, BooleanField, and DateTimeField, among others. Compound fields like ListField and DictField are also supported. Special handling is noted for ReferenceField (similar to DRF's ForeignKey) and Generic fields. Users typically interact with these upload jobs to manage the transfer of configurations to or from network devices within the NCCM tool. This includes setting up new jobs, modifying existing ones, or changing their operational status. While the endpoint's request body describes the structure of supported fields, developers should note that some fields like FileField, ImageField, and BinaryField are not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Staff", "Developers"], "primary_use_case": "To enable network administrators and IT operations staff to modify and manage existing Network Configuration Change Management (NCCM) upload jobs, including updating job details, configuration parameters, scheduling, and operational status (active/inactive), for transferring configuration files or firmware to network devices."}, "content_for_embedding": "This API endpoint, PUT /ux/nccm/uploadjobs/{id}/, is designed for comprehensive updates to a specific Network Configuration Change Management (NCCM) 'Upload Job'. It allows users to modify various aspects of an existing upload job, such as its name, configuration settings, associated device details, and scheduling parameters. A key feature is the ability to change the job's operational status between 'Active' and 'Inactive'. This is crucial for managing the transfer of configuration files or firmware from the NCCM server to network devices, supporting tasks like deploying new devices, updating existing ones, or upgrading device firmware. The update process can involve editing job details, task details, schedule details (e.g., once, daily, weekly), and access control settings. The API is identified by a unique 'id' for each upload job.", "semantic_keywords": ["Upload Jobs", "Network Configuration", "Update"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/uploadjobs/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_uploadjobs_destroy", "description": "This endpoint allows users to permanently delete an existing upload job identified by its unique ID. This action specifically targets and removes executed upload jobs, ensuring they are no longer active or executable. This is a critical administrative function for managing uploaded configuration files or firmware updates within the NCCM tool.", "summary": "Deletes the upload job with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and represents the unique identifier of the upload job to be deleted. Deleting an upload job is a permanent action, and it specifically applies to 'executed' upload jobs. This functionality is crucial for maintaining a clean and efficient system by removing completed or no longer needed upload tasks. While the context mentions 'Click to make changes to the upload job' in conjunction with delete, for this API endpoint, deletion is final and permanent."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer"], "primary_use_case": "To permanently remove executed upload jobs for configuration files or firmware updates, ensuring system cleanliness and efficient management within the NCCM tool."}, "content_for_embedding": "This API allows for the permanent deletion of an existing upload job within the NCCM tool, identified by its unique ID. This action specifically targets executed upload jobs, ensuring the removal of completed or no longer needed tasks related to uploaded configuration files or firmware updates. It is a critical administrative function for maintaining system efficiency. The deletion is final and permanent.", "semantic_keywords": ["Delete", "Upload Jobs", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/api-approval-macros/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_api_approval_macros_retrieve", "description": "This endpoint is used to get the macro for the approval api request", "summary": "Get the macro for the approval api request", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "To retrieve a macro for automating or streamlining the approval process for network configuration upload jobs."}, "content_for_embedding": "This API endpoint is designed to retrieve a macro that facilitates the approval process for configuration upload jobs. It is part of a network configuration and change management (NCCM) system, enabling automated or streamlined approvals for changes or uploads to network device configurations. This macro likely integrates with an existing approval workflow to ensure proper authorization before configuration changes are applied.", "semantic_keywords": ["Approval Workflow", "Configuration Upload Jobs", "API Integration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "approval_workflow"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/approve/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_approve_create", "description": "This endpoint is used to update the approval status of the upload job for the current organization", "summary": "Update the Upload Job Approval Status", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"UploadJobApprovalStatus": {"value": {"job_id": "13549189685xxxxxxxxxx", "organization": "13113501882xxxxxxxxxx", "job_name": "Upload Job Name", "approval_status": "Approved/Rejected", "approved_by": "xyz@gmail.com"}, "summary": "Upload job Approval Status"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "parameters": [{"name": "job_id", "in": "body", "description": "Inferred parameter: job_id", "required": true, "schema": {"type": "string"}}, {"name": "organization", "in": "body", "description": "Inferred parameter: organization", "required": true, "schema": {"type": "string"}}, {"name": "job_name", "in": "body", "description": "Inferred parameter: job_name", "required": true, "schema": {"type": "string"}}, {"name": "approval_status", "in": "body", "description": "Inferred parameter: approval_status", "required": true, "schema": {"type": "string"}}, {"name": "approved_by", "in": "body", "description": "Inferred parameter: approved_by", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Change Manager", "CAB Team Member"], "primary_use_case": "This API updates the approval status of network configuration upload jobs. It is used to manage and control changes to network configurations by formalizing the approval or rejection process, ensuring that only authorized changes are implemented."}, "content_for_embedding": "This API is designed to update the approval status of configuration upload jobs within a network management system. It facilitates the formal review and decision-making process for proposed network configuration changes. The API accepts parameters such as job ID, organization, job name, the approval status (e.g., 'Approved' or 'Rejected'), and the identity of the approver. This functionality is integral to maintaining control and compliance over network infrastructure modifications, often as part of a broader change management workflow.", "semantic_keywords": ["Approval Workflow", "Configuration Upload Jobs", "Change Management"], "ontology_classification": {"features": ["approval_workflow", "change_lifecycle_management", "change_monitoring_and_tracking"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/bulk-delete-ujob/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_bulk_delete_ujob_create", "description": "This endpoint provides functionality to perform a bulk deletion of multiple executed upload jobs within the NCCM tool. It allows users to efficiently remove several upload jobs simultaneously, contributing to cleaner management of job records. The operation returns the status of the deletion process.", "summary": "Return status of deletion", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically targets 'executed' upload jobs, meaning jobs that have already run. The API utilizes a generic serializer for its request body. While the exact structure of the request body for bulk deletion isn't explicitly detailed in the provided specification beyond generic field types, it is implied that the request will contain identifiers of the jobs to be deleted in a list or similar structure. This is consistent with 'bulk delete' actions typically found in user interfaces where users can select multiple items (e.g., via checkboxes, as mentioned in Context Rank 7 and 9 about bulk actions for other entities like templates or download jobs) and then trigger a deletion action. Users should ensure they identify the correct jobs to delete, as this action permanently removes them from the system. This bulk action streamlines management workflows for users managing a large number of upload jobs."}, "llm_generated": {"business_context": {"primary_use_case": "Efficiently manage and clean up executed upload job records within the NCCM tool by performing bulk deletions."}, "content_for_embedding": "This API endpoint facilitates the bulk deletion of multiple executed upload jobs within the NCCM tool. It allows users to simultaneously remove several job records, streamlining the management of network configuration upload history. The operation returns the status of the deletion process, ensuring users can confirm the successful removal of selected jobs. This action permanently removes the identified jobs from the system, contributing to cleaner and more organized job records.", "semantic_keywords": ["Bulk Delete", "Upload Jobs", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "bulk_actions"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/bulk-toggle-ujob-state/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_bulk_toggle_ujob_state_create", "description": "This endpoint is designed to bulk toggle the state of multiple upload jobs within the Network Configuration Change Management (NCCM) tool. It allows users to collectively enable or disable the execution status of selected upload jobs. Toggling the job status to 'disabled' prevents the job from running, while enabling it allows the job to execute as per its defined schedule. This functionality is crucial for managing job workflows, preventing unintended executions, or pausing jobs for maintenance or other operational reasons.", "summary": "Return status of deletion", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The primary purpose of this endpoint is to facilitate a bulk 'toggle' action similar to the 'Job Status' feature described in the user guide, where a button allows enabling or disabling a job's status. When an upload job is disabled, it will not execute until explicitly re-enabled. While the API specification provides a detailed list of recognized primitive and compound fields for potential request bodies, it explicitly states `\"parameters\": []`, suggesting that the toggle state selection and specific job IDs are likely passed within the request body. Common use cases include pausing a set of jobs during a network-wide change window or re-activating jobs after a system update. The `request_body_description` section details the data types supported for serialization, indicating a flexible approach to the structure of the request body, which likely contains a list of upload job identifiers and the desired state (e.g., enable/disable). Note that `FileField`, `ImageField`, and `BinaryField` are not well supported."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "System Administrators", "Network Engineers", "IT Operations Staff"], "primary_use_case": "This API allows users to bulk enable or disable the execution status of multiple upload jobs within the Network Configuration Change Management (NCCM) tool. This is crucial for managing job workflows, preventing unintended executions, or pausing jobs for maintenance or operational reasons."}, "content_for_embedding": "This API endpoint facilitates the bulk toggling of the state (enable/disable) for multiple upload jobs within the Network Configuration Change Management (NCCM) system. It allows for collective management of job execution status, preventing or allowing jobs to run based on defined schedules. This functionality is essential for workflow management, pausing jobs for maintenance, or reactivating them after system updates, similar to a \"Job Status\" toggle feature in a user interface.", "ontology_classification": {"features": ["bulk_actions", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Bulk Operations", "Configuration Upload Jobs", "NCCM"]}}, {"path": "/ux/nccm/uploadjobs/bulk-toggle-ujobtask-state/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_bulk_toggle_ujobtask_state_create", "description": "This endpoint allows users to toggle the state of specific upload job tasks, enabling or disabling their execution. It facilitates controlling the job's lifecycle, similar to how a 'Job Status' toggle enables or disables an entire job in the UI. If a task is disabled, it will not execute; if enabled, it allows the task to run. This action is part of the 'Upload Jobs' management, where users can also initiate actions to delete, view results, or audit executed upload jobs.", "summary": "Return status of deletion", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The current description of the API endpoint's summary, 'Return status of deletion', appears to be inconsistent with its core functionality of changing (toggling) job task states. While related context mentions 'deletion' of executed upload jobs, this endpoint specifically focuses on changing the state of tasks within upload jobs. The request body structure for this endpoint is defined by a serializer that supports various primitive and compound fields. Standard fields like StringField, IntField, BooleanField, and DateTimeField are recognized. Compound fields like ListField and DictField are also supported, including special handling for ReferenceField and EmbeddedDocumentField. Fields such as FileField, ImageField, and BinaryField are noted as not well-supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel"], "primary_use_case": "To manage the execution state of individual tasks within network configuration upload jobs."}, "content_for_embedding": "This API allows for bulk toggling of the execution state (enabling or disabling) of individual tasks within network configuration upload jobs. It is used by network administrators to control the lifecycle and execution flow of configuration deployment tasks, ensuring specific tasks run or are prevented from running as needed.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Upload Jobs", "Job Management", "Enablement Status"]}}, {"path": "/ux/nccm/uploadjobs/create-upload-job/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_create_upload_job_create", "description": "This endpoint is used to create an upload job via api call for the given organization", "summary": "Create Upload Job", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateUploadJob": {"value": {"change_request_info": {"id": "12778EXXXXX", "display_id": "REQEXXXXX"}, "job_name": "Upload job 1", "description": "Used to change device configuration.", "job_execution_window": "", "job_state": true, "send_result_via_api": true, "external_systems": [], "notifier_id": [], "agent_id": "54DEEXXXXX", "download_configuration": true, "execution_schedule": {"schedule_mode": "immediate", "schedule_period": "executenow", "schedule": {"scheduled_at": ""}, "description": "", "valid": "VALID"}, "visibility": "Public/Private", "user_list": [], "teams_list": [], "request_source": "", "tasks": [{"task_name": "task 1", "task_description": "task to execute first", "vendor": "Cisco", "configuration_template": "Cisco IOS Switch Change Hostname", "ip_address": ["127.0.0.1"], "configuration_profile": "", "connection_protocol": "", "connection_port": "", "username": "#######", "password": "#######", "enable_password": "#######", "shell": "Remote", "state": "", "task_retry_count": 0, "task_retry_interval_window": "2 Hours", "continue_next_ip_address_on_error": false, "continue_next_command_on_error": false, "run_after": ["Start"], "run_only_if": "Success", "wait_time": "", "asset_tag": "13778EXXXXX", "task_execution_window": true, "runtime_fields_values": {"HOSTNAME": "#######"}}, {"Note": " Other Dependency Tasks "}]}, "summary": "Create Upload Job"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "parameters": [{"name": "change_request_info", "in": "body", "description": "Inferred parameter: change_request_info", "required": true, "schema": {"type": "string"}}, {"name": "job_name", "in": "body", "description": "Inferred parameter: job_name", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "job_execution_window", "in": "body", "description": "Inferred parameter: job_execution_window", "required": true, "schema": {"type": "string"}}, {"name": "job_state", "in": "body", "description": "Inferred parameter: job_state", "required": true, "schema": {"type": "string"}}, {"name": "send_result_via_api", "in": "body", "description": "Inferred parameter: send_result_via_api", "required": true, "schema": {"type": "string"}}, {"name": "external_systems", "in": "body", "description": "Inferred parameter: external_systems", "required": true, "schema": {"type": "string"}}, {"name": "notifier_id", "in": "body", "description": "Inferred parameter: notifier_id", "required": true, "schema": {"type": "string"}}, {"name": "agent_id", "in": "body", "description": "Inferred parameter: agent_id", "required": true, "schema": {"type": "string"}}, {"name": "download_configuration", "in": "body", "description": "Inferred parameter: download_configuration", "required": true, "schema": {"type": "string"}}, {"name": "execution_schedule", "in": "body", "description": "Inferred parameter: execution_schedule", "required": true, "schema": {"type": "string"}}, {"name": "visibility", "in": "body", "description": "Inferred parameter: visibility", "required": true, "schema": {"type": "string"}}, {"name": "user_list", "in": "body", "description": "Inferred parameter: user_list", "required": true, "schema": {"type": "string"}}, {"name": "teams_list", "in": "body", "description": "Inferred parameter: teams_list", "required": true, "schema": {"type": "string"}}, {"name": "request_source", "in": "body", "description": "Inferred parameter: request_source", "required": true, "schema": {"type": "string"}}, {"name": "tasks", "in": "body", "description": "Inferred parameter: tasks", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "DevOps Engineers", "IT Operations", "System Integrators"], "primary_use_case": "To programmatically create and manage configuration upload jobs for network devices within an organization, enabling automated deployment of configuration changes and integration with change management processes."}, "content_for_embedding": "This API facilitates the creation of configuration upload jobs for network devices within an organization. It enables network administrators and DevOps engineers to programmatically define and schedule tasks for deploying configuration changes. The API supports linking these jobs to change requests, specifying job execution windows, and detailing individual configuration tasks including vendor, templates, target IPs, and credentials. This is a critical tool for automating and managing network configuration updates and ensuring compliance with change management processes.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "change_request_logging", "task_management_within_change", "organization_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Upload Jobs", "Network Configuration", "Change Management"]}}, {"path": "/ux/nccm/uploadjobs/device-options/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_device_options_retrieve", "description": "This endpoint retrieves configuration options related to assets and their resources for a 'Triggered based review' within the NCCM (Network Configuration and Change Management) module. These options are crucial for understanding the context of upload jobs, including details like who initiated the job ('Triggered By'), from which IP address ('Triggered From'), the 'Job Type', 'Job Name', and a unique 'Execution Identifier'. It helps in reviewing the process of uploading jobs, especially before the actual execution of upload commands starts, by providing necessary device and resource-specific data.", "summary": "Get the options for the Triggered based review.", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The 'Triggered based review' is an integral part of the upload job process, particularly relevant for job approval flows and ensuring configurations are correct before deployment. While the API specification does not list explicit parameters, the retrieved contexts highlight key informational fields displayed related to the triggered jobs, such as 'Triggered By', 'Triggered From', 'Job Type', 'Job Name', and 'Execution Identifier'. This endpoint provides the foundational device and resource data for such review processes. Note that the 'Re-Run All Devices' field is available for review, but without actionable items through this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Staff", "Auditors"], "primary_use_case": "This API retrieves configuration options and contextual details for a \"Triggered based review\" of network configuration upload jobs within the NCCM module. It provides essential data for network administrators and IT operations staff to review and approve configuration changes before deployment, ensuring accuracy and compliance."}, "content_for_embedding": "This API retrieves configuration options and related details for \"Triggered based review\" of network configuration upload jobs within the NCCM module. It provides crucial context such as the initiator ('Triggered By'), source IP address ('Triggered From'), 'Job Type', 'Job Name', and 'Execution Identifier'. This information is essential for reviewing and approving upload jobs before their execution, ensuring configuration accuracy and compliance. The endpoint focuses on providing foundational device and resource-specific data for these review processes.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "nccm_reports_(configuration_download_&_jobs_account_audit)", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Upload Jobs", "NCCM", "Review"]}}, {"path": "/ux/nccm/uploadjobs/export-review/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_export_review_create", "description": "This endpoint is used to export the results of a review task into a PDF format. This functionality allows users to generate a comprehensive PDF document containing the details of a completed review process for an upload job. This report will include all tasks, their definitions, and completed specifics, including commands executed before saving the job. The export provides a clear, static record of the review outcome.", "summary": "Export Review Task.", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The export generates a PDF file containing the review results. The `request_body_description` details the serializer used internally for handling document fields, but no specific request body parameters are expected for this endpoint. The exported PDF can then be downloaded. Note that specific file types like XLS or CSV are mentioned for other reports in the context but for this endpoint, the output is specifically PDF. Common use cases include archiving review outcomes or sharing review details with stakeholders who require a printable or static format."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "Compliance Officer"], "primary_use_case": "To export the results of a review task for network configuration upload jobs into a PDF format for archiving and sharing."}, "content_for_embedding": "This API endpoint facilitates the export of review task results for network configuration upload jobs into a comprehensive PDF document. It provides a static record of the completed review process, including task details and executed commands, suitable for archiving or sharing with stakeholders. The output is specifically a PDF file.", "ontology_classification": {"features": ["network_configuration_and_change_management", "report_export_capabilities", "nccm_reports_(configuration_download_&_jobs_account_audit)", "pdf_export"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Export", "Upload Jobs", "Report"]}}, {"path": "/ux/nccm/uploadjobs/format-flowchart-data/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_format_flowchart_data_create", "description": "This endpoint processes and formats raw data to generate a visual representation for a Task Flow Chart within the NCCM (Network Configuration Change Management) system. It transforms input data into a structured format suitable for displaying workflows as visual flowcharts, which are essential for automating and visualizing multi-step processes. This includes assigning tickets, triggering notifications, and managing approvals within Infraon. The output is intended to facilitate easy-to-understand graphical views, similar to pie charts, bar charts, line charts, or panel views, aiding in the analysis of job workflows and processes.", "summary": "Return the formated data for Task Flow Chart", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The request body for this endpoint expects data conforming to the documented serializer for Documents. This serializer supports various primitive fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others, as well as compound fields like `ListField` and `DictField`. `ReferenceField` and `EmbeddedDocumentField` are handled for nested structures, with nested serializers autogenerated for non-zero depth. It's crucial to ensure that the input data types align with the supported fields to avoid mapping issues. This endpoint is particularly relevant for the 'Workflow Jobs' module in NCCM, providing the underlying data for visual elements that display key job details and their process flow, often seen on the 'Upload Job' page."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Business Analysts"], "primary_use_case": "This API processes and formats raw data to generate a visual representation for Task Flow Charts within the NCCM system, enabling the automation and visualization of multi-step processes and aiding in the analysis of job workflows."}, "content_for_embedding": "This API endpoint is designed to process and format raw input data into a structured format suitable for generating visual Task Flow Charts within the NCCM (Network Configuration Change Management) system. It facilitates the visualization and automation of multi-step processes, including ticket assignment, notifications, and approvals, providing data for graphical views like pie charts, bar charts, line charts, or panel views to analyze job workflows and processes. It is particularly relevant for the 'Workflow Jobs' module and 'Upload Job' page in NCCM, handling data for Configuration Upload Jobs.", "semantic_keywords": ["Configuration Upload Jobs", "Workflow Automation", "Visualization"], "ontology_classification": {"features": ["network_configuration_and_change_management", "workflow_visualization_reference", "workflow_automation", "visual_data_representation"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/get-template-id/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_get_template_id_retrieve", "description": "This API endpoint is designed to retrieve the template ID for configuration templates within the NCCM tool. It facilitates the process of managing predefined templates for configuration uploads, allowing users to identify and utilize specific templates for creating, editing, or managing upload jobs. This includes supporting processes where a template is used to initiate an upload job, such as when adding a new upload job by specifying configuration and device details.", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is critical for workflows involving the Configuration Template module and the creation of Upload Jobs. Developers should note that an active template is often a prerequisite for assignment as an Upload Job. The template ID retrieved can then be used in subsequent operations to create or manage upload jobs in the NCCM tool, potentially bypassing approval processes if the template was created by a whitelisted user or Approver."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "Network engineers", "IT operations personnel", "Developers"], "primary_use_case": "To retrieve the template ID for configuration templates within the NCCM tool, facilitating the management and utilization of these templates for configuration uploads and the initiation of upload jobs."}, "content_for_embedding": "This API retrieves the template ID for configuration templates within the NCCM tool. It is crucial for managing predefined templates used in configuration uploads and for initiating upload jobs. The retrieved template ID can then be used in subsequent operations to create or manage upload jobs, potentially bypassing approval processes for whitelisted users or approvers. This endpoint supports workflows involving the Configuration Template module and the creation of Upload Jobs, ensuring that only active templates are utilized.", "semantic_keywords": ["Configuration Templates", "Upload Jobs", "NCCM"], "ontology_classification": {"features": ["configuration_templates", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/nccm/uploadjobs/jobs-retry-queue/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_jobs_retry_queue_retrieve", "description": "This endpoint retrieves a comprehensive list of all upload jobs currently in the retry queue within the user's organization. The Job(s) Retry Queue submodule specifically displays details of upload jobs that have been re-executed (re-run) from the main upload jobs module, providing transparency on their statuses. This includes details like who initiated the task ('Triggered By'), where it was triggered, and its current progress. If a particular task fails, it will re-execute based on a configured retry count and interval. The module ensures jobs are eventually completed while offering visibility into their status.", "summary": "Gets a list of jobs retry queue", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "Users can only view the listed fields within this module; no actions (such as searching, filtering, or modifying jobs) can be performed via this endpoint. Information available may include fields like Triggered By, Job Name, Task Name, Vendor, Template Name, Task Owner, Device Account, Created By, Task Status, Task End Time, Next Retry Action, Retry Count, and Retry Status, as indicated in the relevant documentation. This API is crucial for monitoring and understanding the re-execution lifecycle of upload jobs."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System administrators"], "primary_use_case": "To provide visibility and enable monitoring of the status and re-execution lifecycle of configuration upload jobs that are currently in the retry queue."}, "content_for_embedding": "This API endpoint allows users to retrieve a comprehensive, read-only list of all configuration upload jobs currently residing in the retry queue. It offers detailed insights into the status of re-executed jobs, including information such as the initiator, trigger location, current progress, and retry specifics. This is essential for monitoring the re-execution lifecycle of upload jobs and ensuring their eventual completion, providing transparency without allowing direct modification, searching, or filtering of the jobs themselves.", "semantic_keywords": ["Configuration Upload Jobs", "Job Management", "Monitoring"], "ontology_classification": {"features": ["nccm.download_job_management", "nccm.download_job_status_drill-down", "report.nccm_reports_(configuration_download_&_jobs_account_audit)"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/options/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_options_retrieve", "description": "This endpoint retrieves the default options and parameters required for creating new 'Upload Jobs' within the Network Configuration Change Management (NCCM) tool. Users can specify configuration, device details, and scheduling parameters for these jobs. An 'Upload Job' involves transferring configuration files or firmware from the Infraon NCCM server to network devices, commonly for deployment, updates, or firmware upgrades. This API helps pre-populate fields or provide valid selections for aspects like 'Job Name', 'Job Description', 'Type' (e.g., Regular Job, OS Upgrade Job), 'Job Execution Window', and 'Job Status'.", "summary": "Get the options for the Upload Jobs", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This GET endpoint provides the necessary foundational data before a user \"Clicks to add an Upload job in the NCCM tool\" (context rank 1). It is crucial for understanding the available choices and structure when creating an 'Add Upload' job, which involves multiple tabs like 'Job Details'. For example, it would inform dropdown options such as 'Type' of upload job (e.g., Regular Job, OS Upgrade Job) and the acceptable 'Job Execution Window' units (Mins/Hrs), as well as provide insights into the 'Job Status' toggle functionality (enabled/disabled determines execution). The endpoint does not require any parameters or a request body, as it's designed to fetch default options."}, "llm_generated": {"business_context": {"primary_use_case": "This API retrieves default options and parameters necessary for creating new \"Upload Jobs\" within the Network Configuration Change Management (NCCM) tool. It enables users to pre-populate fields and select valid options for job creation, including configuration, device details, and scheduling parameters for transferring configuration files or firmware to network devices."}, "content_for_embedding": "This API retrieves default options and parameters for creating 'Upload Jobs' within the Network Configuration Change Management (NCCM) tool. It provides foundational data for pre-populating fields and offering valid selections for job creation, including 'Job Name', 'Job Description', 'Type' (e.g., Regular Job, OS Upgrade Job), 'Job Execution Window' (Mins/Hrs), and 'Job Status'. 'Upload Jobs' involve transferring configuration files or firmware from the Infraon NCCM server to network devices for deployment, updates, or firmware upgrades. This endpoint is crucial for understanding available choices and structure when adding an 'Upload Job' and does not require any parameters or a request body.", "ontology_classification": {"features": ["network_configuration_and_change_management", "network_configuration_management_(nccm)"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Upload Jobs", "NCCM", "Configuration Options"]}}, {"path": "/ux/nccm/uploadjobs/page-config/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_page_config_retrieve", "description": "This endpoint is get the page configuration for the upload job grid for current organization", "summary": "Page configuration for the upload job grid ", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "User with configuration privileges"], "primary_use_case": "This API retrieves the page configuration for the upload job grid, allowing administrators or privileged users to customize the display and behavior of the interface for managing upload jobs within the current organization."}, "content_for_embedding": "This API retrieves the page configuration settings for the upload job grid within the current organization. It allows administrators to customize the display and behavior of the upload job interface, including mandatory fields, additional sections, and role-based privileges. This is a privilege-based feature, enabling tailored user experiences for managing upload jobs.", "ontology_classification": {"features": ["privilege-based_access_control", "download_job_management", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Upload Jobs", "Configuration Retrieval", "User Privileges"]}}, {"path": "/ux/nccm/uploadjobs/quick-job-templates/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_quick_job_templates_retrieve", "description": "This endpoint is used to retrieve data for predefined templates utilized in the NCCM (Network Configuration Change Management) tool, specifically for 'Simple Upload Jobs'. These templates are crucial for automating and standardizing configuration uploads across devices. The returned data allows users to create, edit, or manage these templates, which are fundamental for executing configuration changes and network diagnoses. Templates can be manually created or imported (e.g., via Excel files) and must be in a 'Production Ready' and 'Enabled' state to be used in an 'Upload Job'.", "summary": "Return the templates data", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically returns templates that can be used to 'Add an Upload Job' within the NCCM tool. Only templates marked as 'Active' or 'Production Ready' can be assigned to an 'Upload Job'. The 'Configuration Template' module often associated with this data allows for actions such as creating, editing, managing, importing (.xls files supported), and exporting templates. While this endpoint focuses on retrieval, the context highlights the importance of understanding the template lifecycle, including their 'Production Ready' status and how they are used to initiate 'Upload Jobs'."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Network Engineers"], "primary_use_case": "This API retrieves predefined templates for \"Simple Upload Jobs\" within the NCCM (Network Configuration Change Management) tool. These templates are crucial for automating and standardizing configuration uploads across network devices, enabling users to create, edit, manage, import, and export them for executing configuration changes and network diagnoses."}, "content_for_embedding": "This API retrieves predefined templates for \"Simple Upload Jobs\" within the NCCM (Network Configuration Change Management) tool. These templates are essential for automating and standardizing configuration uploads across network devices and are used for executing configuration changes and network diagnoses. The returned data facilitates the creation, editing, management, import (e.g., via Excel), and export of these templates. Only \"Production Ready\" and \"Enabled\" templates are utilized in \"Upload Jobs\" and \"Network Diagnosis\". This endpoint specifically provides access to templates that can be used to \"Add an Upload Job\" and highlights the template lifecycle, including their \"Active\" or \"Production Ready\" status.", "ontology_classification": {"features": ["network_configuration_and_change_management", "configuration_templates", "configuration_upload_jobs"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Configuration Templates", "Configuration Upload Jobs", "Retrieval"]}}, {"path": "/ux/nccm/uploadjobs/quick-task-validation/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_quick_task_validation_create", "description": "This endpoint provides functionality to validate a task within an NCCM (Network Configuration and Change Management) upload job. When creating a new upload job via the 'Add Upload' page, users define various details, including job name, description, type (e.g., Regular Job, OS Upgrade Job), and scheduling parameters. Before an upload job can be executed, specific tasks associated with it, such as configuration uploads or OS upgrades, need to be validated. This validation ensures that the task details are correct and the system can successfully process them. This step is crucial for ensuring the integrity and successful execution of network configuration changes or OS deployments. The endpoint supports validating various document-based input fields as described in the `request_body_description` for serializers, which can include string, integer, boolean, and complex types.", "summary": "Validate Upload Job Task.", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The validation process typically occurs after 'Job Details' have been added and before proceeding to the actual 'Task Details' or execution phase of an upload job. While this endpoint handles the validation of individual tasks, the overall control of an upload job's status (active/inactive) and execution is managed separately. The request body for this endpoint is expected to conform to a serializer that can handle a wide range of primitive and compound document fields, crucial for representing complex configuration or task parameters. Examples include `StringField`, `IntField`, `BooleanField`, `ListField`, and `DictField`. Special handling is noted for `ReferenceField` and `EmbeddedDocumentField`, indicating potential nested data structures. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as potentially not well supported or untested, suggesting they should be used with caution."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Configuration managers"], "primary_use_case": "To validate individual tasks within Network Configuration and Change Management (NCCM) upload jobs, ensuring the correctness of task details and successful processing before the execution of network configuration changes or OS deployments."}, "content_for_embedding": "This API validates individual tasks within an NCCM (Network Configuration and Change Management) upload job. It's a crucial step in the workflow for creating and executing network configuration changes or OS upgrades, occurring after job details are defined but before task execution. The validation ensures that task parameters, which can include various data types like strings, integers, booleans, and complex nested structures, are correct and can be processed by the system. This process is integral to maintaining the integrity and successful deployment of network changes, including those initiated via CSV uploads or as part of a change management request workflow.", "ontology_classification": {"features": ["network_configuration_and_change_management", "task_management_within_change"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Validation", "Configuration Upload Jobs", "NCCM"]}}, {"path": "/ux/nccm/uploadjobs/rerun-all-devices/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_rerun_all_devices_retrieve", "description": "This endpoint is used to re-run an existing upload job across all devices within the current organization. Upload jobs are critical for updating configuration files or firmware on network devices from the Infraon NCCM server, facilitating tasks like new device deployments, existing device updates, and firmware upgrades. While the original summary suggested 'editing' an upload job result, the path and contextual information, particularly the mention of 'Re-Run All Devices' as a field in job details, strongly indicates that this GET request is for re-executing an upload job for all associated devices.", "summary": "Edits the upload job result with given id", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically targets the 'Re-Run All Devices' functionality for an upload job. It performs a re-execution of a previously defined upload job. Notably, while the general process of editing upload jobs involves changing parameters like configuration, device details, and schedule, this specific GET endpoint appears to trigger an action rather than facilitate data modification through a request body, as hinted by the empty `parameters` and `request_body_description`. The 'Re-Run All Devices' field is typically available for review and indicates a trigger for re-execution rather than a data input field. The 'Job(s) Retry Queue' submodule also speaks to the concept of re-executing jobs. Users should be aware that once triggered, the job execution status can be monitored for its progress and eventual completion."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Administrators"], "primary_use_case": "To re-execute existing network configuration or firmware upload jobs across all associated devices."}, "content_for_embedding": "This API endpoint is used to re-run (re-execute) a previously defined network configuration or firmware upload job for all devices within an organization. It triggers the re-execution of the job rather than allowing for modification of job parameters. This functionality is crucial for maintaining device configurations, deploying new devices, updating existing ones, and upgrading firmware on network devices from the Infraon NCCM server. The re-execution status can be monitored via the Job(s) Retry Queue.", "semantic_keywords": ["Upload Jobs", "Network Configuration", "Trigger"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/uploadjobs/rerun-job/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_rerun_job_retrieve", "description": "This endpoint is used to trigger the re-execution (re-run) of an existing upload job within the NCCM tool for the current organization. Upload jobs involve pushing configuration files or firmware from the Infraon NCCM server to network devices, typically for deploying new devices, updating existing ones, or upgrading device firmware. This functionality is crucial for ensuring that jobs are eventually completed, especially for those that might have failed or require a retry.", "summary": "Rerun Upload job", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically relates to the 'Upload jobs' module in NCCM. While the user interface provides a 'Job(s) Retry Queue' to view details of re-executed jobs, this API allows for programmatic initiation of the re-run process. Users can create a new upload job by specifying configuration, device details, and schedule parameters. If a task within an upload job has failed, this API can trigger a re-run, which will re-execute the failed task based on configured retry counts and intervals before dependent tasks. No job-specific parameters are required for this endpoint, as it is likely intended to re-run a previously selected or identified job within an implicit context."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Automation Engineers", "System Administrators"], "primary_use_case": "To ensure the successful completion of network configuration and firmware upload jobs by enabling their re-execution, particularly for failed or incomplete tasks, within the NCCM environment."}, "content_for_embedding": "This API endpoint facilitates the re-execution (re-run) of existing upload jobs within the NCCM tool. These jobs involve pushing configuration files or firmware from the Infraon NCCM server to network devices for deploying new devices, updating existing ones, or upgrading device firmware. This functionality is crucial for ensuring that jobs are eventually completed, especially for those that might have failed or require a retry. The API allows for programmatic initiation of the re-run process, complementing the \"Job(s) Retry Queue\" in the user interface. It re-executes failed tasks based on configured retry counts and intervals before dependent tasks, and does not require job-specific parameters as it operates within an implicit context of a previously selected or identified job.", "semantic_keywords": ["Upload Jobs", "NCCM", "Job Management"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/uploadjobs/rerun-result-ip/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_rerun_result_ip_retrieve", "description": "This endpoint is designed to re-run or edit the results of an existing upload job's IP addresses within the NCCM tool. Upload jobs in NCCM facilitate changing or updating configuration files or firmware on network devices, commonly for deploying new devices, updating existing ones, or upgrading device firmware. This specific endpoint focuses on managing the results associated with individual IP addresses after an upload job has completed, allowing for modifications or re-executions of steps related to those IPs. The outcome of a job, including its status (success or failure) and relevant execution information, is typically viewed via the 'Job Execution Result' which includes details like 'Upload Job', 'Configuration Template', 'IP Address', 'Vendor', and the 'Result' tab for command information. This functionality is part of the Network Configuration Manager's capabilities, which allows users to manage and execute configuration uploads to devices.", "summary": "Edits the upload job result ips with given id", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically deals with 'rerun-result-ip', suggesting a granular control over the execution results at the IP address level for upload jobs. It likely ties into the 'View IP Details' section mentioned in the documentation, which displays the outcome of a job per IP after completion. While the API specification does not list any parameters, it is implied that an identifier for the upload job and/or the specific IP result to be re-run or edited would be required, possibly as part of the request body or implicitly handled by the system based on session or previous context. Users should be aware that 'upload jobs' transfer configurations from NCCM to devices, and this specific re-run/edit functionality is crucial for managing post-execution state for individual device IPs. Access to this feature is privilege-based, controlled by administrator settings under roles and privileges."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Engineers"], "primary_use_case": "To manage and re-execute the results of network configuration upload jobs for specific IP addresses within the Network Configuration Manager (NCCM) tool."}, "content_for_embedding": "This API endpoint facilitates the management and re-execution of network configuration upload job results at a granular level, specifically targeting individual IP addresses. It allows network administrators and IT operations personnel to modify or re-run steps related to specific device IPs after an upload job has completed, addressing both successful and failed outcomes. This functionality is integral to the Network Configuration Manager (NCCM) for ensuring accurate and updated configuration files and firmware on network devices. It provides crucial control over the post-execution state of configurations for individual IP addresses, aiding in troubleshooting and maintaining network stability. Access to this feature is privilege-based.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Upload Jobs", "Configuration Management", "IP Address"]}}, {"path": "/ux/nccm/uploadjobs/review-task/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_review_task_create", "description": "This endpoint is used to review tasks associated with an Upload Job in the NCCM (Network Configuration Change Management) tool. The review process allows users to view all tasks, their definitions, and completed details, including commands to be executed before saving the job. This is a critical step, especially for Upload Jobs added by non-white-listed users, as such jobs will only be executed after this approval process. The review results can also be exported into a PDF format.", "summary": "Review Upload Job Task.", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This `POST` endpoint signifies the completion of a review action. The request body, although not explicitly detailing parameters for this specific POST action in the provided spec (showing an empty `parameters` array), does mention that the 'Serializer for Documents' recognizes various primitive and compound fields. This suggests that the request body likely carries the data representing the reviewed task details or status. Since this endpoint is part of a workflow where an upload job is configured and potentially requires approval, the POST action here would confirm the reviewed state of the tasks. If an upload job is added by a white-listed user, it bypasses this approval and executes based on its scheduled time, whereas non-white-listed users require this review and approval step."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Security Auditors"], "primary_use_case": "This API facilitates the review and approval of network configuration upload jobs, particularly for those initiated by non-white-listed users, ensuring that all proposed changes are thoroughly vetted and approved before execution within the Network Configuration Change Management (NCCM) tool."}, "content_for_embedding": "This API endpoint is designed for reviewing tasks associated with network configuration upload jobs within the NCCM (Network Configuration Change Management) tool. It enables users to examine all tasks, their definitions, and completed details, including commands to be executed. This review process is crucial for jobs submitted by non-white-listed users, as it serves as an approval gate before job execution. The API also supports exporting the review results into a PDF format. The POST action signifies the completion of this review, likely transmitting the reviewed task details or status.", "ontology_classification": {"features": ["network_configuration_and_change_management", "workflow_automation", "pdf_export", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Review", "Upload Jobs", "Network Configuration"]}}, {"path": "/ux/nccm/uploadjobs/runtime-csv-added/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_runtime_csv_added_retrieve", "description": "This endpoint allows users to download a CSV file containing runtime values that have been added. In the context of NCCM (Network Configuration Change Management), this CSV is typically used for managing 'Upload Jobs', which involve changing or updating configuration files or firmware on network devices. Users can prepare and upload CSV files to create or update upload jobs in bulk, and this endpoint facilitates the retrieval of previously added runtime data in CSV format, likely for review or further processing.", "summary": "Return Csv for Runtime values which is added", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint is part of the 'Upload Jobs' functionality in NCCM. While the endpoint itself focuses on downloading a CSV of runtime values, the broader context of 'Upload Jobs' involves uploading edited CSV files for bulk operations, such as creating new upload jobs, updating existing ones, or deploying configurations. The CSV file helps in managing device configurations, details, and schedule parameters for these jobs. There are no direct parameters for this GET request, implying it returns a predefined or system-generated CSV based on added runtime values."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System administrators"], "primary_use_case": "To enable users to download CSV files containing runtime values for Network Configuration Change Management (NCCM) Upload Jobs, facilitating review and processing of configuration data."}, "content_for_embedding": "This API allows users to download a CSV file containing runtime values that have been added, specifically within the context of Network Configuration Change Management (NCCM) 'Upload Jobs'. This CSV facilitates the review and processing of previously added runtime data, crucial for managing device configurations and bulk operations like creating or updating upload jobs.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["NCCM", "Upload Jobs", "CSV Export"]}}, {"path": "/ux/nccm/uploadjobs/runtime-fields/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_runtime_fields_retrieve", "description": "This endpoint is used to retrieve data related to 'Runtime fields', which are a type of substitution object within the NCCM (Network Configuration Change Management) system. Runtime objects are pivotal for Configuration Upload and Network Diagnosis activities, allowing variables to be converted into user input forms when configuring upload tasks or creating network diagnosis requests. This retrieval helps in understanding and managing the dynamic parameters involved in these critical operations within the NCCM tool.", "summary": "Return the data for Runtime fields", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "Runtime objects are one of 10 types of substitution objects supported by NCCM for variable substitution within configuration templates. They are commonly used during the creation of upload jobs in NCCM, where users define parameters for configuration, device details, and scheduling. The data provided by this endpoint is essential for defining and dynamically inputting values like `{{Runtime.hostname}}` during operations such as deploying new devices, updating existing configurations, or upgrading device firmware. This endpoint is primarily informational, providing the necessary details for correctly configuring 'Runtime' variables in various NCCM tasks."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "IT Operations Personnel"], "primary_use_case": "To retrieve data for 'Runtime fields', which are substitution objects essential for configuring dynamic parameters in NCCM's Configuration Upload and Network Diagnosis tasks, enabling variable substitution in configuration templates."}, "content_for_embedding": "This API retrieves data for 'Runtime fields', which are crucial substitution objects within the NCCM (Network Configuration Change Management) system. These fields are pivotal for Configuration Upload and Network Diagnosis activities, allowing variables in configuration templates to be converted into user input forms. The data helps in understanding and managing dynamic parameters for tasks like deploying new devices, updating existing configurations, or upgrading device firmware. Runtime objects are one of 10 types of substitution objects supported by NCCM for variable substitution within configuration templates. This endpoint provides necessary details for correctly configuring 'Runtime' variables, such as `{{Runtime.hostname}}`, in various NCCM tasks. Runtime Parameters must match the template's dynamic fields for successful substitution and can be mapped to actual values per device or profile. Users can add parameters manually, import in bulk using CSV, or edit/delete existing mappings.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Runtime Parameters", "Configuration Retrieval", "NCCM"]}}, {"path": "/ux/nccm/uploadjobs/runtime-fields-template-edit/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_runtime_fields_template_edit_retrieve", "description": "This endpoint is designed to return the necessary data structure for \"Runtime fields\" within the NCCM (Network Configuration Change Management) tool, specifically for use in configuration uploads. Runtime fields are a type of substitution object that allows for dynamic user input when configuring upload tasks or network diagnosis activities. The data provided by this endpoint helps convert these runtime object variables into user input forms.", "summary": "Return the data for Runtime fields", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "Runtime objects are one of 10 types of substitution objects supported by NCCM for variable substitution within configuration templates. These objects are crucial for activities such as Configuration Upload and Network Diagnosis. The data returned by this endpoint facilitates the creation or editing of predefined templates for configuration uploads, enabling users to create new upload jobs by specifying dynamic parameters. This endpoint is typically accessed when configuring an upload job where user-specific runtime values are required."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Developers", "Users configuring network upload tasks"], "primary_use_case": "This API provides the data structure for \"Runtime fields\" within the NCCM (Network Configuration Change Management) tool, enabling dynamic user input for configuration uploads and network diagnosis activities. It facilitates the creation and editing of predefined templates for configuration uploads by converting runtime object variables into user input forms."}, "content_for_embedding": "This API retrieves the necessary data structure for \"Runtime fields\" used in the NCCM (Network Configuration Change Management) tool. These runtime fields are substitution objects that allow for dynamic user input when configuring network configuration upload tasks or performing network diagnosis. The returned data helps convert these dynamic variables into user-friendly input forms, facilitating the creation or editing of configuration upload jobs with dynamic parameters. It is crucial for variable substitution within configuration templates and supports activities like bulk import via CSV or manual addition/editing of parameters.", "semantic_keywords": ["Runtime Parameters", "Configuration Upload Jobs", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/uploadjobs/runtime-parameter/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_runtime_parameter_retrieve", "description": "This endpoint is used to get the runtime parameter(s) for the given configuration template if avaliable.", "summary": "To Get Configuration Template Runtime Parameter(s)", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel"], "primary_use_case": "To retrieve runtime parameters associated with configuration templates, enabling dynamic configuration management within a network configuration and change management system."}, "content_for_embedding": "This API retrieves runtime parameters for specific configuration templates. These parameters act as dynamic variables, bridging static configuration templates with real-time network device requirements. It is a core component of the configuration upload jobs within a Network Configuration and Change Management (NCCM) system, allowing users to view and manage dynamic aspects of their network configurations.", "ontology_classification": {"features": ["network_configuration_and_change_management", "configuration_templates"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Runtime Parameters", "Configuration Templates", "Configuration retrieval"]}}, {"path": "/ux/nccm/uploadjobs/sample-csv/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_sample_csv_retrieve", "description": "This endpoint allows users to download a sample CSV file specifically designed for 'Upload Jobs' within the NCCM system. This CSV template is crucial for users who wish to perform bulk operations, such as changing or updating configuration files or firmware on network devices. It ensures the proper data structure for importing configuration updates, device details, or scheduling parameters. The sample CSV can be used to prepare data for bulk uploads of new devices, updates to existing ones, or firmware upgrades.", "summary": "Return  Sample Csv for Runtime values", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This sample CSV file is intended to provide the correct structure for fields required in an upload job. Users should download this template, accurately enter the required information into the respective fields (note that fields marked with an asterisk (*) are mandatory), and then upload the completed CSV file to initiate the upload process. The process often involves reviewing column mapping before importing the jobs. This endpoint is distinct from those used for 'Download Jobs' or 'Template Import/Export' but serves a similar purpose of facilitating bulk data operations via CSV within the NCCM application."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users performing bulk configuration updates", "Users managing network device firmware"], "primary_use_case": "This API allows users to download a sample CSV template for \"Upload Jobs\" within the NCCM system, enabling them to prepare data for bulk operations such as changing or updating configuration files and firmware on network devices. It streamlines the process of importing configuration updates, device details, and scheduling parameters for new devices, existing device updates, or firmware upgrades."}, "content_for_embedding": "This API provides a GET endpoint to download a sample CSV file specifically designed for \"Upload Jobs\" in the NCCM (Network Configuration and Change Management) system. This template is crucial for users to structure data correctly for bulk operations, including updating configuration files or firmware on network devices, and importing new device details or scheduling parameters. It facilitates efficient bulk uploads and upgrades within the NCCM application.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Upload Jobs", "Configuration Management", "CSV Import"]}}, {"path": "/ux/nccm/uploadjobs/save-config-rollback/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_save_config_rollback_create", "description": "This endpoint is used to save a configuration rollback upload job within the NCCM system. It enables users to define and store a job that will revert a device's configuration to a previous version, specifically to the 'Baseline Startup Configuration' or the 'Previous Startup Configuration'. The system intelligently auto-fills 'Configurations to Rollback commands' into the job object's upload filename variable, based on pre-defined templates named 'Configuration Rollback To Base - <Vendor><OS type>' or 'Configuration Rollback To Previous - <Vendor><OS type>'. This job is crucial for maintaining device stability and recovering from undesired configuration changes.", "summary": "Return Job Saved Status", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "Before creating a 'Roll Back upload job', ensure that Configuration Replace templates are already established in NCCM for each vendor and OS Type. These templates must adhere to the specified naming standards (e.g., 'Configuration Rollback To Base - Cisco-IOS'). The request body for this endpoint handles various primitive and compound field types as described by the serializer document, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. While `ReferenceField` and `EmbeddedDocumentField` are supported with nested serializers for non-zero depth, users should note that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. Users can input specific tags like `BASELINE-STARTUP-CONFIGURATION` or `PREVIOUS-STARTUP-CONFIGURATION` in the 'CLI Commands to Rollback' rather than filling in actual configuration commands, which NCCM will then interpret to roll back the corresponding device configuration."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel"], "primary_use_case": "Managing and saving configuration rollback jobs for network devices to restore previous configurations."}, "content_for_embedding": "This API endpoint saves a configuration rollback upload job within the NCCM system. It allows users to define and store jobs that revert a device's configuration to a 'Baseline Startup Configuration' or 'Previous Startup Configuration' using pre-defined templates. This is crucial for device stability and recovering from undesired configuration changes, supporting specific rollback tags like BASELINE-STARTUP-CONFIGURATION or PREVIOUS-STARTUP-CONFIGURATION.", "ontology_classification": {"features": ["network_configuration_and_change_management", "change_lifecycle_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Upload Jobs", "NCCM", "Configuration Management"]}}, {"path": "/ux/nccm/uploadjobs/save-smpl-srpt-exe/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_save_smpl_srpt_exe_create", "description": "This endpoint is used to save a completed simple script execution upload job within the NCCM (Network Configuration Change Management) tool. It enables users to create a new upload job by defining configurations, device specifics, and schedule parameters. This action is crucial for defining and retaining the details of an upload task in the NCCM system, similar to how users `Add` a job to specify configurations and device details, ultimately affecting the `Job Name` and `Status` within the NCCM interface.", "summary": "Return Job Saved Status", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to accommodate various data types for defining the upload job, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others, as detailed in the `request_body_description`. It also supports compound fields like `ListField` and `DictField`, as well as `ReferenceField` and `GenericReferenceField` for linking to other system objects. It's important to note that the system can auto-fill details, such as 'Configurations to Replace commands' or 'Configurations to Rollback commands,' into the job object's upload filename variable, resembling the behavior seen in `Add Command Execution` tasks. The endpoint also plays a role in managing the job's `Status` where it can be toggled between active and inactive states. Functionalities like 'Download Configuration before and after Upload' (for backup purposes) are associated with the execution of such upload jobs, highlighting the importance of successfully saving the job definition. Users should be aware that `FileField`, `ImageField`, and `BinaryField` may not be fully supported or tested."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System administrators", "Users responsible for managing network device configurations"], "primary_use_case": "To define, save, and manage network configuration upload jobs within the NCCM (Network Configuration Change Management) system, enabling automated and scheduled configuration changes on network devices."}, "content_for_embedding": "This API endpoint facilitates the creation and saving of simple script execution upload jobs within the Network Configuration Change Management (NCCM) system. Users can define comprehensive job parameters, including network device configurations, specific device details, and execution schedules (e.g., once, daily, weekly, monthly). The saved job is crucial for automating and retaining network configuration changes, impacting the job's name and status within the NCCM interface. The endpoint supports various data types for job definition and integrates with a broader workflow that includes change request generation, approval processes, and audit trails. It also allows for managing job status (active/inactive) and enables functionalities like downloading configurations for backup before and after the upload.", "semantic_keywords": ["Configuration Upload Jobs", "NCCM", "Job Management"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/save-va-sse/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_save_va_sse_create", "description": "This endpoint facilitates the creation and addition of new upload jobs within the Network Configuration Change Management (NCCM) tool. Users can define new upload jobs by specifying configuration details, device information, and schedule parameters. This process supports the management of vulnerabilities by allowing the addition of simple scripts.", "summary": "Add the upload job as simaple script from manage vulnerability", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "When adding an upload job, users can define several key attributes, including a unique 'Job Name' and a 'Job Description' to identify its purpose. The status of the job can be toggled between 'Active' and 'In-Active'. This endpoint is integral for tasks such as deploying new device configurations, updating existing ones, and upgrading device firmware. Users have the option to capture device configurations before and after the upload job execution to ensure proper backup and validation. The request body is expected to be a serialized document, supporting various primitive and compound field types as outlined in the `request_body_description`. It is important to note that fields like `FileField`, `ImageField`, and `BinaryField` are not well-supported or tested with this serialization."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Engineers", "IT Operations Staff"], "primary_use_case": "To create and manage network configuration upload jobs, including deploying new configurations, updating existing ones, upgrading device firmware, and adding scripts for vulnerability management within the NCCM tool."}, "content_for_embedding": "This API endpoint allows users to create and add new upload jobs within the Network Configuration Change Management (NCCM) tool. It enables the definition of configuration details, device information, and scheduling parameters for these jobs. The primary purpose is to facilitate the deployment of new device configurations, update existing ones, and upgrade device firmware. It also supports the management of vulnerabilities by allowing the addition of simple scripts. The process involves defining job names, descriptions, and status (active/inactive). Users can also opt to capture device configurations before and after the upload for backup and validation. The workflow may involve change request generation, approval, and task management. This is a privilege-based feature within the NCCM system.", "semantic_keywords": ["Upload Jobs", "Configuration Management", "Change Management"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "change_request_logging", "approval_workflow", "task_management_within_change", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/uploadjobs/task-status/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_task_status_retrieve", "description": "This endpoint is designed to return detailed status data for tasks associated with Network Configuration Change Management (NCCM) upload jobs. It provides information crucial for monitoring the progression and outcome of these jobs, allowing users to track various attributes such as Job Name, Task Status, Task End Time, Next Retry Action, Retry Count, and Retry Status. This endpoint is essential for monitoring the execution and status of configuration uploads within the NCCM tool, offering visibility into both active and scheduled jobs.", "summary": "Return the data for task status", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The API allows users to search and filter upload job results based on criteria like timestamp, Job name, and Task name. The 'Task Status' field reflects the current operational state of a task and can be used to identify its progress. The various statuses of a task include 'To-Do (Open)'. Should a task fail, information regarding retry attempts (Retry Count and Retry Status) is available. While this endpoint primarily provides status data, it's implicitly linked to the process of creating upload jobs within NCCM, where users define configurations, device details, and schedules. This endpoint is for viewing purposes only and does not allow for action on the job or task statuses."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Operations Teams", "Users monitoring NCCM configuration uploads"], "primary_use_case": "This API is used for monitoring the detailed status and progression of Network Configuration Change Management (NCCM) upload jobs and their associated tasks. It provides visibility into job attributes, operational states, and retry information."}, "content_for_embedding": "This API endpoint retrieves detailed status data for tasks related to Network Configuration Change Management (NCCM) upload jobs. It allows users to monitor the progression, outcome, and various attributes of these jobs, including Job Name, Task Status, Task End Time, Next Retry Action, Retry Count, and Retry Status. The endpoint supports searching and filtering results by timestamp, Job name, and Task name. It provides visibility into active and scheduled configuration uploads and their operational states, such as 'To-Do (Open)'. Information on retry attempts for failed tasks is also available. This is a view-only endpoint, providing status data without allowing modifications to jobs or task statuses. It is implicitly linked to the process of creating NCCM upload jobs where configurations, device details, and schedules are defined.", "semantic_keywords": ["Configuration Upload Jobs", "Task Status", "Monitoring"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_status_drill-down", "nccm_reports_(configuration_download_&_jobs_account_audit)", "granular_data_filtering", "search_functionality"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/task-template-validate/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_task_template_validate_create", "description": "This API endpoint is designed to validate task templates within the NCCM (Network Change and Configuration Management) tool, specifically for 'Upload Jobs'. It facilitates the process of creating, editing, and managing predefined templates for configuration uploads. Users can leverage this endpoint to ensure the integrity and correctness of task templates before they are used to create new upload jobs, which typically involve specifying configuration, device details, and schedule parameters.", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is expected to follow a serializer for 'Documents', supporting a wide array of primitive field types such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `URLField`. It also handles compound fields like `ListField` and `DictField`, and specialized fields like `ReferenceField` (similar to Django REST Framework's `ForeignKey`) which can autogenerate nested serializers. `EmbeddedDocumentField` is also supported for nested serialization. While many field types are recognized, fields such as `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, and their use may lead to incorrect behavior. This validation step is crucial before enabling templates for use as 'Upload Jobs' or performing actions like 'Add' or 'Edit' on existing jobs, as outlined in the NCCM user guide related to upload job management and configuration templates."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Network Engineers", "Configuration Managers"], "primary_use_case": "To validate task templates for configuration uploads within the NCCM (Network Change and Configuration Management) tool, ensuring their integrity and correctness before creating new upload jobs."}, "content_for_embedding": "This API endpoint validates task templates for 'Upload Jobs' within the NCCM (Network Change and Configuration Management) tool. It ensures the integrity and correctness of predefined templates used for configuration uploads, including specifying configuration, device details, and schedule parameters. This validation is crucial before enabling templates for use as 'Upload Jobs' or performing 'Add' or 'Edit' actions on existing jobs. The request body supports various field types like StringField, IntField, BooleanField, DateTimeField, URLField, ListField, DictField, ReferenceField, and EmbeddedDocumentField, but notes limitations for FileField, ImageField, and BinaryField.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Upload Jobs", "Validation", "Configuration Templates"]}}, {"path": "/ux/nccm/uploadjobs/template-name/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_template_name_retrieve", "description": "This endpoint is designed to retrieve the data associated with a specific configuration template identified by its `template_name`. It serves to fetch the details of a predefined template used within the NCCM tool for configuration uploads, network diagnosis, or other job tasks. This data can be utilized for various operations such as viewing, editing, or managing existing templates.", "summary": "Return the data for template_name", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically returns the data for a given `template_name`. These templates are crucial for automated tasks, including 'OS Image Roll Back Upload Job' and 'OS Upgrade'. Template names often follow a standard naming convention, such as 'OS Image Upgrade - <Vendor> <OS type>' (e.g., 'OS Image Upgrade - Cisco-IOS'). The retrieved template data is typically used in the Configuration Template module, allowing users to create, edit, or manage these predefined templates. While the API specification does not list explicit parameters, the `template_name` is implicitly derived from the URL path. Information related to exporting templates in XLS format or the process of marking templates as 'Production Ready' upon import are handled by other functionalities within the NCCM system and not directly by this GET endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "This API retrieves detailed data for specific configuration templates used within the NCCM tool. This data is essential for users to view, edit, and manage predefined templates for network configuration uploads, OS upgrades, and network diagnosis tasks."}, "content_for_embedding": "This API retrieves detailed data for a specific configuration template identified by its name. These templates are crucial for automated tasks within the NCCM tool, such as configuration uploads, OS image upgrades, OS image rollbacks, and network diagnosis. The retrieved template data supports viewing, editing, and managing existing predefined templates within the Configuration Template module.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Templates", "Configuration Retrieval", "Upload Jobs"]}}, {"path": "/ux/nccm/uploadjobs/ujob-search-options/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_ujob_search_options_retrieve", "description": "This endpoint is used to retrieve the default search options and filter criteria for the NCCM (Network Configuration Change Management) Upload Jobs search interface. It provides the necessary parameters to effectively search and filter the list of active and scheduled upload jobs, which are displayed on the Upload Job page. This can include options related to job name, status (active/inactive), and agent associations, allowing users to efficiently locate specific upload jobs.", "summary": "Get the options for the Upload Jobs Search.", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This API assists in rendering the search and filter functionalities on the Upload Job page. While the current API specification does not list explicit parameters for this GET request, the documentation suggests potential search/filter capabilities based on 'Upload Job name'. The Upload Job page typically displays details such as Job Name, Status, and Agent, which could be the basis for the search options returned by this endpoint. Common use cases include populating dropdowns or input fields for searching and filtering the list of upload jobs within a user interface."}, "llm_generated": {"business_context": {"primary_use_case": "This API retrieves the default search options and filter criteria for Network Configuration Change Management (NCCM) Upload Jobs, enabling users to efficiently search and filter upload jobs within a user interface."}, "content_for_embedding": "This API endpoint is designed to retrieve the available search options and filter criteria specifically for the NCCM (Network Configuration Change Management) Upload Jobs search interface. It provides the necessary parameters, such as job name, status (active/inactive), and agent associations, to populate UI elements like dropdowns and input fields, facilitating the effective searching and filtering of active and scheduled upload jobs displayed on the Upload Job page.", "ontology_classification": {"features": ["network_configuration_and_change_management", "network_configuration_management_(nccm)"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Upload Jobs", "Search", "Filter"]}}, {"path": "/ux/nccm/uploadjobs/ujob-tasks/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_ujob_tasks_retrieve", "description": "This endpoint provides access to detailed data related to upload job tasks within the NCCM (Network Configuration Change Management) tool. It returns information necessary to view the ongoing or completed steps associated with an upload job, which can include job name, status (Active/In-Active), agent details, configuration template, IP address, vendor, and execution results. This data is crucial for monitoring and understanding the lifecycle and outcome of network configuration upload operations.", "summary": "Return upload job tasks data.", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint is typically used to navigate to and view more granular details about 'Job Tasks' (Context Rank 5, 8). The display of tasks can be filtered by criteria such as 'Upload Task IP Results', 'Completed', or 'In-Progress' states. While this endpoint specifically retrieves task data, the broader 'Upload Job' functionality in NCCM allows users to create new jobs by defining configuration, device details, and scheduling parameters (Context Rank 1, 5). The system also manages the execution outcomes, including success or failure, and provides command information related to job execution (Context Rank 4). This endpoint complements the overall upload job management, serving as a portal to execution-specific details."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "This API provides detailed data for network configuration upload job tasks within the NCCM tool, enabling users to monitor the lifecycle, status, and execution results of these operations. It supports viewing ongoing or completed steps, agent details, configuration templates, IP addresses, vendors, and execution outcomes."}, "content_for_embedding": "This GET endpoint retrieves detailed data for upload job tasks within the Network Configuration Change Management (NCCM) tool. It provides information essential for monitoring and understanding the lifecycle and outcome of network configuration upload operations, including job name, status (Active/In-Active), agent details, configuration template, IP address, vendor, and execution results. The data is crucial for viewing ongoing or completed steps associated with an upload job. It serves as a portal to execution-specific details and allows navigation to more granular information about \"Job Tasks\". The display of tasks can be filtered by criteria such as \"Upload Task IP Results\", \"Completed\", or \"In-Progress\" states. Users can also search for job results based on timestamp, job name, and task name, and apply filters based on fields like Task Name, Vendor, Template Name, Task Owner, Device Account, and Task Status. This complements the broader Upload Job functionality in NCCM, which includes creating new jobs, defining configurations, device details, and scheduling parameters, and managing execution outcomes.", "ontology_classification": {"features": ["network_configuration_and_change_management", "ticket_monitoring", "ticket_tracking", "ticket_filters", "ticket_search_bar", "detailed_record_view"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Upload Jobs", "NCCM", "Task Status"]}}, {"path": "/ux/nccm/uploadjobs/update-taskcreds/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_update_taskcreds_create", "description": "This endpoint facilitates the update of device credentials for specific tasks within the Network Change and Configuration Management (NCCM) tool. It is particularly relevant for 'Upload Jobs', where users can define configurations, device details, and schedule parameters. This process ensures that tasks can resume execution accurately, especially if device credentials or other related network connection details like Profile, Protocol, and Port need to be overridden for devices not identified by SNMP (as mentioned in Context Rank 2, 4). The update functionality aims to keep device access information current, preventing task failures, and ensuring that dependent tasks can proceed as scheduled even after a task has failed, allowing for retries with updated credentials.", "summary": "Return status of the updation", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The request body for this endpoint expects data structured according to a serializer that supports various primitive fields such as StringField, IntField, BooleanField, DateTimeField, etc., as well as compound fields like ListField and DictField. It also handles ReferenceField and EmbeddedDocumentField, implying complex data structures for device and task details, potentially including unique identifiers (ObjectIdField, UUIDField) and connection parameters. Based on Context Rank 7 and 10, updating task details can involve selecting configuration profiles, connection protocols, and explicitly selecting device credentials, implying that the request body will contain these updated details to ensure proper connection to network devices. Support for FileField, ImageField, and BinaryField is noted as 'not well supported or untested', so users should avoid sending those types of data."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "NCCM users"], "primary_use_case": "This API updates device credentials and network connection details (profile, protocol, port) for specific tasks within the Network Change and Configuration Management (NCCM) tool's \"Upload Jobs\". Its primary purpose is to ensure the accurate and continuous execution of network configuration tasks by providing current device access information, preventing task failures, and enabling retries with updated credentials."}, "content_for_embedding": "This API endpoint, `/ux/nccm/uploadjobs/update-taskcreds/`, is a POST request designed to update device credentials and associated network connection parameters (such as configuration profile, protocol, and port) for individual tasks within the Network Change and Configuration Management (NCCM) tool's \"Upload Jobs\" feature. Upload jobs are crucial for deploying, updating, and upgrading configuration files or firmware on network devices. The functionality of this API ensures that tasks can resume and complete successfully, even if initial attempts failed due to outdated or incorrect device access information. It allows for the override of connection details for devices not identified by SNMP, thereby maintaining current device access and supporting the retry mechanism for dependent tasks. The request body is structured to accommodate complex device and task details, including unique identifiers and various connection parameters.", "semantic_keywords": ["Device Credentials", "Configuration Upload Jobs", "NCCM"], "ontology_classification": {"features": ["infraon_configuration.device_credential_management", "infraon_configuration.network_configuration_management_(nccm)", "nccm.privilege-based_access_control"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/upload-job-audits/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_upload_job_audits_retrieve", "description": "This endpoint retrieves a list of audits specifically for 'Upload Jobs' within the current organization. It provides user account-based audit information on actions performed on target devices via upload jobs. The audit details include information such as Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, Connect Status, and Task Owner. It also captures details on actions such as viewing, deleting, and modifying upload jobs, making it a critical tool for tracking file management and security within the network management system.", "summary": "Gets a list of upload jobs audits", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The 'Job(s) Account Audit' is a key feature related to this endpoint, providing a comprehensive view of activities. While this endpoint specifically focuses on 'Upload Job' audits, similar audit information is available for Download Jobs, Trigger, and Network Diagnosis. The system allows for searching audits based on timestamp, Task Name, Device IP Address, and Audit Message, and filtering can be applied based on various fields. Real-time updates can be enabled via an auto-refresh feature, and audit results can often be exported."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Security Analyst", "Compliance Officer"], "primary_use_case": "To retrieve and review audit logs for \"Upload Jobs\" within the network management system, enabling tracking of user actions, file management, and security compliance on target devices."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of audit logs specifically for \"Upload Jobs\" performed within the current organization. It provides detailed, user account-based audit information on actions executed on target network devices via upload jobs. The audit details encompass critical information such as Device IP Address, Device Account, Connection Protocol, Password, Enable Password, Connect Time, Connect Status, and Task Owner. It also captures actions like viewing, deleting, and modifying upload jobs, serving as a vital tool for tracking file management activities and ensuring security within the network management system. The endpoint supports searching audits by timestamp, Task Name, Device IP Address, and Audit Message, with extensive filtering capabilities. Real-time updates are available via an auto-refresh feature, and audit results can be exported for further analysis.", "semantic_keywords": ["Audit Trail", "Configuration Upload Jobs", "NCCM"], "ontology_classification": {"features": ["report.nccm_reports_(configuration_download_&_jobs_account_audit)", "report.granular_data_filtering", "report.report_export_capabilities", "report.real-time_and_historical_reporting", "infraon_configuration.audit_log", "asset.user_access_auditing", "topology.auto_reload_control"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/uploadjobs/upload-job-result-search-option/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_upload_job_result_search_option_retrieve", "description": "This endpoint provides the default options for performing searches within the Upload Jobs Result feature of the Network Configuration Change Management (NCCM) tool. It helps users define the criteria for finding specific upload job results, such as by 'Job Name' or other relevant parameters, enabling efficient navigation and filtering of completed and scheduled network configuration tasks.", "summary": "Get the options for the Upload Jobs Result Search.", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This API endpoint is designed to support the 'Search for the required Upload job' functionality as described in the user guides, particularly on the 'Upload Job page'. While the current API specification does not list any parameters, it's implied that future iterations might include options for filtering search results based on criteria like 'Job Name', 'Status' (Active, Inactive), 'Agent', Upload Job name, or other details. The primary use case is to populate search dropdowns or filters on the UI for the 'Upload Jobs Result Search' interface, allowing users to quickly locate and analyze job execution outcomes (e.g., status, configuration template, IP address, vendor, and result details after executing a job)."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations", "System administrators"], "primary_use_case": "This API provides the default options for searching and filtering network configuration upload job results within the Network Configuration Change Management (NCCM) tool. It enables users to define criteria for efficient navigation and analysis of completed and scheduled network configuration tasks."}, "content_for_embedding": "This API endpoint retrieves the default options for performing searches within the Upload Jobs Result feature of the Network Configuration Change Management (NCCM) tool. It helps users define criteria for finding specific upload job results, such as by 'Job Name' or other relevant parameters, enabling efficient navigation and filtering of completed and scheduled network configuration tasks. The primary use case is to populate search dropdowns or filters on the UI for the 'Upload Jobs Result Search' interface, allowing users to quickly locate and analyze job execution outcomes (e.g., status, configuration template, IP address, vendor, and result details after executing a job).", "semantic_keywords": ["Configuration Upload Jobs", "Search", "Filter"], "ontology_classification": {"features": ["search_functionality", "filtering_options"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/upload-job-results/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_upload_job_results_retrieve", "description": "This endpoint retrieves a comprehensive list of results for executed upload jobs within the current organization. It provides details crucial for auditing and reviewing job execution, including job status (success/failure), execution information, and other relevant outcomes. Users can view specifics for each job, such as original upload job name, configuration template used, IP address, vendor, creator, executor, and the full command information from the execution.", "summary": "Gets a list of upload jobs results", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This API is essential for understanding the outcome of network configuration upload jobs. The results display information similar to what is found under the 'View Result' section in the NCCM tool's Upload Job interface. While no specific request parameters are currently defined for this endpoint, future enhancements may include filtering options (e.g., by job status, timestamp, or job name) to refine the list of results returned. This endpoint facilitates monitoring job execution, verifying configuration changes, and troubleshooting any issues that may arise during the upload process."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Auditors", "Network Engineers", "IT Operations Personnel"], "primary_use_case": "To provide a comprehensive list of results for network configuration upload jobs, enabling users to audit, review, monitor, verify configuration changes, and troubleshoot issues related to job execution."}, "content_for_embedding": "This API retrieves detailed results of executed network configuration upload jobs, including job status (success/failure), execution information, and other relevant outcomes. It is crucial for auditing, reviewing, monitoring, verifying configuration changes, and troubleshooting any issues during the upload process. The results are similar to the \"View Result\" section in the NCCM tool, providing specifics like job name, configuration template, IP address, vendor, creator, executor, and full command information. While currently lacking filtering options, future enhancements may include filtering by job status, timestamp, or job name.", "semantic_keywords": ["Configuration Upload Jobs", "Audit", "Retrieval"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_status_drill-down", "download_result_page_drill-down", "nccm_reports_(configuration_download_&_jobs_account_audit)"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/upload-job-results-task-ip/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_upload_job_results_task_ip_retrieve", "description": "This endpoint is used to retrieve a list of all active or scheduled upload job results within the current organization. It provides detailed outcomes of executed jobs, including their status (success or failure), configuration template used, IP address, vendor, and the result of the commands executed during the job. This information is crucial for auditing, reviewing job execution steps, and understanding the outcome of network configuration uploads.", "summary": "Gets a list of upload jobs results", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically focuses on the results of 'upload jobs' completed within the Network Configuration Change Management (NCCM) tool. The results available for each job include details such as the Upload Job name, Configuration Template, IP Address, Vendor, Created By, Executed By, and the granular command information under the 'Result' tab. It is useful for reviewing the outcome of a job after it's completed and is distinct from the general list of active/scheduled jobs. Users can typically navigate to these results by clicking an icon associated with a completed job. The 'upload-job-results-task-ip' in the path suggests a focus on results related to specific IP addresses involved in the tasks."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Auditors", "Configuration Managers"], "primary_use_case": "To retrieve and review detailed outcomes of network configuration upload jobs, including their status, configuration template, IP address, vendor, and command results, for auditing and operational understanding within the NCCM tool."}, "content_for_embedding": "This API endpoint retrieves a comprehensive list of results for active or scheduled network configuration upload jobs within the Network Configuration Change Management (NCCM) tool. It provides granular details for each executed job, such as its success or failure status, the configuration template utilized, the associated IP address, vendor information, and the outcomes of commands executed during the job. This data is essential for auditing, reviewing job execution steps, and gaining insights into the results of network configuration uploads, particularly focusing on IP-specific task results.", "ontology_classification": {"features": ["network_configuration_and_change_management", "nccm_reports_(configuration_download_&_jobs_account_audit)", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Configuration Upload Jobs", "NCCM", "Audit"]}}, {"path": "/ux/nccm/uploadjobs/uploadjob-status-update/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_uploadjob_status_update_create", "description": "This endpoint allows modification of the status for a selected NCCM (Network Configuration Change Management) upload job. Users can toggle the job's status between 'Active' and 'Inactive' to enable or disable its execution. An 'Active' status allows the job to run, while an 'Inactive' status prevents its execution. This functionality is crucial for managing the lifecycle of upload jobs, including those involving configuration backups before and after uploads, or configuration replacements.", "summary": "Modify the selected job status", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The primary use case for this endpoint is to control whether an upload job, which can involve specifying configurations, device details, and schedule parameters for file uploads (e.g., device configurations), is enabled to run or is temporarily halted. The `Job Status` (or 'Status' as mentioned in the UI column details) is a key attribute that can be changed via this API. The request body structure, as indicated by the `request_body_description`, supports various primitive and compound fields, though specific fields relevant to the status update (e.g., job ID, new status value) would typically be part of a defined schema for this endpoint. The API description suggests a flexible serializer for documents, but the specific fields required for `job-status-update` should be explicitly documented or inferable from an API consumer's perspective. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "To control the execution status (active/inactive) of network configuration upload jobs within the NCCM system."}, "content_for_embedding": "This API modifies the status of a selected NCCM (Network Configuration Change Management) upload job, allowing users to toggle its execution between 'Active' and 'Inactive'. This enables or disables the job, which is crucial for managing the lifecycle of configuration upload jobs, including backups and replacements. The 'Job Status' is a key attribute changed via this API, controlling whether the job is enabled to run or temporarily halted. Relevant documentation indicates that the 'Status' column allows changing the upload job from an active to an inactive state or vice-versa, and toggling the job status button enables or disables the job execution.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Upload Jobs", "Status", "NCCM"]}}, {"path": "/ux/nccm/uploadjobs/uploadjob-templates-on-edit/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_uploadjob_templates_on_edit_retrieve", "description": "This endpoint allows users to download a CSV file containing runtime values associated with an Upload Job. This CSV file is primarily used for editing the uploaded job data. Users can download this CSV to make edits, such as updating configuration files or firmware for network devices, and then re-upload the edited CSV.\n\nUpload jobs are a core functionality within the NCCM tool, enabling bulk changes or updates to device configurations and firmware from the Infraon NCCM server to network devices. This endpoint facilitates the `on-edit` process for such jobs, supporting scenarios like deploying new devices, updating existing ones, or upgrading device firmware. The downloaded CSV serves as an Excel sheet template (.XLS or .CSV format) where users can enter or modify respective fields.", "summary": "Return Csv for Runtime values which is added", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The context suggests that the CSV file can be edited and then re-uploaded to proceed with valid records. While the endpoint specifically returns a CSV for runtime values, other contexts mention that Upload Job data can generally be exported in an XLS file. It is crucial to note that templates imported into NCCM using Excel may require manual conversion to a 'Production Ready' state if they are to be used in an Upload job.\n\nCommon use cases include:\n- Modifying configuration parameters for multiple devices.\n- Updating device firmware across a network.\n- Preparing bulk upload jobs by editing a pre-filled template."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users managing network device configurations and firmware"], "primary_use_case": "This API allows users to download a CSV template for editing runtime values of Upload Jobs, facilitating bulk changes to network device configurations and firmware. It supports the \"on-edit\" process for existing upload jobs, enabling updates, deployments, and firmware upgrades."}, "content_for_embedding": "This endpoint enables the download of a CSV file containing runtime values for an Upload Job. This CSV serves as a template for editing, allowing users to update configuration files or firmware for network devices. The edited CSV can then be re-uploaded to apply bulk changes. It is crucial for the \"on-edit\" process within the NCCM tool, supporting scenarios like deploying new devices, updating existing ones, or upgrading device firmware by providing an editable template for configuration parameters and firmware updates.", "semantic_keywords": ["Configuration Upload Jobs", "CSV Export", "Edit"], "ontology_classification": {"features": ["network_configuration_and_change_management", "centralized_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/va-sse-opts-validate/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_va_sse_opts_validate_retrieve", "description": "This endpoint validates the parameters for an \"upload job\" derived from vulnerability analysis, ensuring they are suitable for creating a new upload task within the NCCM (Network Configuration Change Management) tool. Upload jobs involve changing or updating configuration files or firmware from the Infraon NCCM server to network devices, commonly used for deploying new devices, updating existing ones, and upgrading device firmware. This validation check is a crucial step before initiating the upload process, which users typically do by specifying configuration, device details, and schedule parameters. It is particularly relevant when an OS upgrade or new OS version is detected, possibly triggered by vulnerabilities, where an upload job needs to be initiated.", "summary": "Validate the given params from vulnerability can be added as upload job", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint specifically focuses on validating parameters before an upload job is added, especially when triggered by a vulnerability scan (VA SSE Opts). While the exact input parameters for validation are not specified in the provided API spec, typical upload job creation involves specifying job name, configuration details, device selection, and scheduling. Contexts suggest that for OS image upgrades or rollback jobs triggered by vulnerabilities, specific naming conventions for templates (e.g., 'OS Image Upgrade - <Vendor> <OS type>') are crucial. This validation likely ensures that such prerequisites and input formats stemming from vulnerability assessments meet the NCCM's requirements for creating a valid upload job. If validation passes, users can then proceed to add the upload job."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Security Analysts", "IT Operations Personnel"], "primary_use_case": "This API validates parameters for network configuration \"upload jobs\" within the NCCM tool, specifically when these jobs are initiated due to vulnerability analysis. It ensures that proposed configuration changes or OS upgrades are valid and meet system requirements before execution, thereby maintaining network integrity and security."}, "content_for_embedding": "This GET endpoint, `ux/nccm/uploadjobs/va-sse-opts-validate/`, is designed to validate parameters for \"upload jobs\" within the Network Configuration Change Management (NCCM) tool. These upload jobs involve updating configuration files or firmware on network devices, often for deploying new devices, updating existing ones, or upgrading firmware. The validation is crucial, especially when an OS upgrade or new OS version is detected, potentially triggered by vulnerability analysis (VA SSE Opts). It ensures that the specified configuration, device details, and schedule parameters are suitable for creating a new upload task in NCCM, confirming that prerequisites and input formats from vulnerability assessments align with NCCM requirements before the upload process is initiated.", "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Upload Jobs", "Validation", "NCCM"]}}, {"path": "/ux/nccm/uploadjobs/validate-csv/", "method": "POST", "details": {"operationId": "ux_nccm_uploadjobs_validate_csv_create", "description": "This endpoint is designed to validate a CSV file containing runtime values, specifically for \"Upload Jobs\" within the NCCM tool. It plays a crucial role in the bulk import process, such as importing resource tag/untag lists. Users can upload a CSV file, and this endpoint will process it to identify valid and invalid records. The functionality is part of the 'Upload | Validation' workflow where users first drag and drop or browse to upload a CSV and then proceed to validation. After validation, a summary of valid and invalid records is provided, and a validation report can be downloaded for further analysis.", "summary": "Return  Sample Csv for Runtime values", "tags": ["Configuration Upload Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint is a key step in the process of importing bulk resource tag/untag lists from a CSV file. Users should ensure that they add resource configuration details to the default file before uploading it. The validation process summarizes valid and invalid records from the uploaded CSV, and users have the option to download a validation report for detailed insights. While the API specification lists a comprehensive set of recognized primitive and compound fields for the request body, the primary function here relates to processing CSV files for bulk operations within NCCM's upload job framework. The request body is described as a serializer for 'Documents', supporting various field types. The usage context heavily implies that the input is a CSV file used to configure network devices or settings via 'Upload Jobs'."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Users performing bulk configuration updates"], "primary_use_case": "This API validates CSV files for bulk import operations, specifically for \"Upload Jobs\" within the NCCM tool, such as importing resource tag/untag lists. It identifies valid and invalid records and allows for the download of a validation report."}, "content_for_embedding": "This API endpoint facilitates the validation of CSV files intended for bulk import operations within the NCCM (Network Configuration and Change Management) tool. It processes uploaded CSVs, identifies valid and invalid records for \"Upload Jobs\" like resource tagging/untagging, and provides a summary and a downloadable validation report.", "semantic_keywords": ["CSV Validation", "Upload Jobs", "Bulk Operations"], "ontology_classification": {"features": ["network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 0.9}}}, {"path": "/ux/nccm/uploadjobs/verify-quick-addjob/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_verify_quick_addjob_retrieve", "description": "Returns data to verify if a selected asset, typically a template, is valid for use in an NCCM (Network Configuration Change Management) upload job. This endpoint plays a crucial role in the 'Add Upload Job' workflow, ensuring that only appropriate assets are utilized. It helps in validating templates that are intended for configuration changes or OS image upgrades, by checking their status and assignability to an upload job.", "summary": "Return the templates data", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "This endpoint is specifically designed to support the 'Add an Upload job' process within the NCCM tool. According to the user guide, templates must typically be in a 'Production Ready' and 'Enabled' state to be allowed in new upload job creation. Disabled templates or those already assigned to an upload job might have specific handling. For OS Image Roll Back Upload Jobs, templates should specifically follow naming standards like 'OS Image Upgrade - <Vendor> <OS type>'. While the API documentation implies it verifies 'selected asset', a strong correlation with 'templates' is drawn from the context. This validation step is critical before users can create a new upload job by specifying configuration, device details, and schedule parameters."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel"], "primary_use_case": "To validate the suitability of templates for Network Configuration Change Management (NCCM) upload jobs, ensuring only 'Production Ready' and 'Enabled' templates are used for configuration changes or OS image upgrades."}, "content_for_embedding": "This API endpoint is used to verify the validity and assignability of a selected asset, primarily a template, for use in an NCCM (Network Configuration Change Management) upload job. It is a critical step in the 'Add Upload Job' workflow, ensuring that only 'Production Ready' and 'Enabled' templates are utilized for configuration changes or OS image upgrades. This validation prevents the use of unsuitable or disabled templates, thereby maintaining the integrity and success of network configuration deployments.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "diagnosis_tools"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["NCCM", "Configuration Upload Jobs", "Validation"]}}, {"path": "/ux/nccm/uploadjobs/verify-quick-addjob-templates/", "method": "GET", "details": {"operationId": "ux_nccm_uploadjobs_verify_quick_addjob_templates_retrieve", "description": "This endpoint is used to verify the validity of selected templates for an upload job. It specifically checks if the templates are in an active 'Production Ready' state, as only such templates can be used in the Upload job and Network Diagnosis. Templates manually created by the user are saved in 'Production Ready' and 'Enabled' states, while imported templates (e.g., via Excel) initially have a 'Disabled' 'Production Ready' status and must be manually activated. Disabled templates are not allowed for new upload job creation.", "summary": "Return the templates data", "tags": ["Configuration Upload Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UploadJobs"}}}, "description": ""}}, "additional_info": "The verification process ensures that templates meet the prerequisites for execution within an upload job, particularly concerning their production and enabled statuses. Templates must be in the 'Ready State' for use in an upload job for configuration changes. The 'Approval Required Flag' for templates is always 'Yes'. This endpoint is implicitly linked to the 'Add an Upload Job' functionality, where templates are executed to create upload jobs."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "Configuration Managers", "IT Operations Personnel", "System Integrators"], "primary_use_case": "This API verifies the validity and readiness of selected configuration templates for network configuration upload jobs, ensuring that only active and production-ready templates are used to maintain system integrity and prevent errors during configuration changes."}, "content_for_embedding": "This API endpoint verifies the validity and readiness of selected configuration templates for network configuration upload jobs. It specifically checks if templates are in an 'active' and 'Production Ready' state, which is a prerequisite for their use in creating new upload jobs and for network diagnosis. The API ensures that only properly enabled and approved templates are utilized, supporting the integrity of configuration changes and automated network tasks. It is implicitly linked to the process of adding new configuration upload jobs.", "semantic_keywords": ["Configuration Upload Jobs", "Configuration Templates", "Validation"], "ontology_classification": {"features": ["network_configuration_and_change_management", "configuration_templates", "configuration_upload_jobs", "network_configuration_management_(nccm)", "configuration_management"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/workflow_jobs/", "method": "GET", "details": {"operationId": "ux_nccm_workflow_jobs_list", "description": "This endpoint retrieves a comprehensive list of workflow jobs associated with the current organization within Infraon NCCM. These workflow jobs automate critical processes such as downloading OS vulnerability details from Cisco and NIST databases, obtaining OS versions, and checking EOX status for Cisco devices, often based on a configured schedule. The response includes key details for each job, such as job name, status, action time, schedule information, creator, and last modified by. This endpoint supports pagination and sorting to efficiently manage and view the large number of jobs.", "summary": "Gets a list of workflow jobs", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Work Flow Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/WorkflowJobs"}}}}, "description": ""}}, "additional_info": "This API endpoint provides functionalities similar to what is displayed on the Workflow Jobs module page in the NCCM UI. The `items_per_page` and `page` query parameters are required for pagination, allowing users to control the number of results per page and navigate through them. The `sort` parameter can be used to order the results by various job attributes, while `reverse` determines the sorting order (ascending or descending). Workflow jobs are a privilege-based feature, meaning users can only access, add, edit, delete, execute, and export them if assigned appropriate roles by an administrator. This module is essential for tasks like automating vulnerability data downloads and managing scheduled automation."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "Security Analysts", "Automation Engineers"], "primary_use_case": "To retrieve and manage a comprehensive list of automated workflow jobs within Infraon NCCM, including tasks like OS vulnerability checks, OS version retrieval, and EOX status checks for network devices."}, "content_for_embedding": "This API retrieves a paginated and sortable list of workflow jobs within Infraon NCCM. These jobs automate critical network processes such as downloading OS vulnerability details from Cisco and NIST databases, obtaining OS versions, and checking EOX status for Cisco devices, often based on a configured schedule. The response includes key details for each job, such as job name, status, action time, schedule information, creator, and last modified by. This functionality mirrors the Workflow Jobs module in the NCCM UI, enabling users to efficiently manage and view automated network configuration and change management tasks. Access to this module and its features is privilege-based.", "semantic_keywords": ["Workflow Automation", "Job Management", "NCCM"], "ontology_classification": {"features": ["network_configuration_and_change_management", "workflow_automation", "download_job_management", "privilege-based_access_control", "search_functionality", "filtering_options"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/workflow_jobs/", "method": "POST", "details": {"operationId": "ux_nccm_workflow_jobs_create", "description": "This API endpoint facilitates the viewing, editing, creation, execution, and export of workflow jobs within Infraon NCCM. It is a privilege-based feature designed to automate tasks such as downloading OS vulnerability details from Cisco and NIST databases, obtaining OS versions, and retrieving EOX (End-of-Life/End-of-Sale) status for Cisco devices. The endpoint allows users to manage a comprehensive list of workflow jobs, displaying key details like job name, status, action time, schedule information, creator, and last modified by. The primary purpose is to enable automated processes through scheduled or on-demand execution of these workflow jobs.", "tags": ["Work Flow Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint handles various primitive and compound field types within its request body, as detailed by the serializer description. Recognized primitive fields include `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `UUIDField`, and others, allowing for diverse data input. Compound fields like `ListField` and `DictField` are also supported. Special handling exists for `ReferenceField` (similar to DRF's `ForeignKey`) and `EmbeddedDocumentField`. Users can only access, add, edit, delete, execute, and export workflow jobs if they have been assigned appropriate roles and privileges by an administrator. While many field types are supported, note that `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested, and other unspecified fields may lead to incorrect behavior."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Automation Engineers"], "primary_use_case": "This API endpoint is used to manage (create, view, edit, execute, and export) workflow jobs within Infraon NCCM. These jobs automate critical tasks such as downloading OS vulnerability details from Cisco and NIST databases, obtaining OS versions, and retrieving EOX (End-of-Life/End-of-Sale) status for Cisco devices. Its primary purpose is to enable automated processes through scheduled or on-demand execution of these workflow jobs."}, "content_for_embedding": "This API facilitates the comprehensive management of workflow jobs in Infraon NCCM. It supports the creation, viewing, editing, execution, and export of automated tasks. Key functionalities include downloading OS vulnerability details from Cisco and NIST, retrieving OS versions, and obtaining EOX status for Cisco devices. The API enables both scheduled and on-demand execution of these workflow jobs, providing a robust solution for automating network configuration and change management processes. Access is privilege-based, ensuring secure operation.", "semantic_keywords": ["Workflow Automation", "Job Management", "NCCM"], "ontology_classification": {"features": ["workflow_automation", "download_job_management", "privilege-based_access_control", "network_configuration_and_change_management", "diagnosis_tools", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/workflow_jobs/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_workflow_jobs_retrieve", "description": "This endpoint retrieves the comprehensive details of a specific workflow job within the current organization. The Workflow Jobs module in Infraon NCCM automates downloading OS vulnerability details from Cisco and NIST databases, along with other tasks such as OS versions and EOX status for Cisco devices, often based on a configured schedule. The details returned include key information such as the job name, current status, action time, schedule information, creator, and last modified by. This API is essential for monitoring and auditing individual workflow processes that automate various network configuration and compliance management tasks.", "summary": "Gets a workflow job details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Work Flow Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is a required string that uniquely identifies the workflow job. The module is privilege-based, meaning users can only access, add, edit, delete, execute, and export workflow jobs if they have been assigned appropriate roles and privileges by an administrator. Workflow jobs can have various types, including Cisco Vulnerability, NIST Vulnerability, Cisco NewOS Detection, Cisco NewOS Download, and Cisco EOX. The status indicates whether a job is 'Waiting for Execution' or 'In Progress'. The API can also be used to view results after a job is completed, displaying details like job status (success or failure) and relevant execution information."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Security Analysts", "Auditors"], "primary_use_case": "To monitor and audit automated network configuration and compliance management tasks by retrieving comprehensive details of specific workflow jobs."}, "content_for_embedding": "This API retrieves comprehensive details of a specific workflow job identified by its unique ID. These workflow jobs, part of the Infraon NCCM module, automate critical network configuration and compliance management tasks, including downloading OS vulnerability details from Cisco and NIST databases, as well as gathering OS version and EOX status for Cisco devices. The returned details encompass key information such as job name, current status (e.g., 'Waiting for Execution', 'In Progress'), action time, schedule information, creator, and last modified by. It also allows for viewing job execution results (success or failure) and historical execution trails, making it essential for monitoring and auditing automated network processes.", "semantic_keywords": ["Workflow Jobs", "Details retrieval", "Network Configuration"], "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "privilege-based_access_control", "download_job_status_drill-down", "download_result_page_drill-down", "configuration_download_jobs"], "primary_module": "nccm", "confidence_score": 0.95}}}, {"path": "/ux/nccm/workflow_jobs/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_workflow_jobs_update", "description": "This API endpoint allows for the viewing and editing of specific workflow jobs within the NCCM (Network Change & Configuration Management) module. These workflow jobs automate critical network tasks, such as downloading OS vulnerability details from Cisco and NIST databases, retrieving OS versions, and checking EOX status for Cisco devices. The endpoint facilitates the management of job details, including job name, status, action time, and schedule information. This is a privilege-based feature, meaning users can view or edit workflow jobs only if they have been assigned the appropriate roles and privileges by an administrator.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Work Flow Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the workflow job to be viewed or edited. The request body for editing a workflow job will utilize a serializer for Documents, supporting various primitive fields (String, URL, Email, Int, Long, Float, Decimal, Int, Boolean, DateTime, ComplexDateTime, ObjectId, Sequence, UUID, GeoPoint, GeoJsonBase, Date). Compound fields like `ListField` and `DictField` are mapped to DRF fields. `ReferenceField` and `EmbeddedDocumentField` may result in nested serializers depending on depth, with `ReferenceField` otherwise returning a string representation of the ID. Generic fields such as `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own serializer fields. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. The 'Workflow Jobs' module page in the NCCM UI displays a comprehensive list of these jobs with key details and action keys for management. This API endpoint directly supports the 'Edit' functionality described in the user guide, allowing users to make and save changes to an existing workflow job."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "Privileged User"], "primary_use_case": "To enable network administrators and IT operations personnel to manage and update automated network configuration and change management tasks."}, "content_for_embedding": "This API endpoint allows authorized users to update and manage specific workflow jobs within the Network Change & Configuration Management (NCCM) module. It facilitates editing job details such as name, status, action time, and schedule for automated network tasks like downloading OS vulnerability details, retrieving OS versions, and checking EOX status for Cisco devices. Access is privilege-based.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "workflow_automation", "record_creation_&_management", "record_lifecycle_&_status_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.95}, "semantic_keywords": ["Update", "Workflow Jobs", "Configuration Management"]}}, {"path": "/ux/nccm/workflow_jobs/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_workflow_jobs_destroy", "description": "This endpoint allows users to delete an existing workflow job for the current organization within Infraon NCCM. Workflow Jobs are a privilege-based feature used to automate tasks such as downloading OS vulnerability details from Cisco and NIST databases. Users must have appropriate roles and privileges assigned by an administrator to perform this action. Deleting a workflow job will remove its configuration, which includes details like job name, status, action time, and schedule information. This action is irreversible for the selected job(s).", "summary": "Deletes the workflow job with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Work Flow Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and uniquely identifies the workflow job to be deleted. The Workflow Job module in Infraon NCCM supports various tasks like downloading vulnerability data, OS versions, and EOX status for Cisco devices, and automating processes based on a configured schedule. Administrators can assign roles and privileges to control user access to add, edit, delete, execute, and export workflow jobs. This specific endpoint directly facilitates the deletion of a workflow job. There is no request body for this DELETE operation, and the response indicates no content upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations"], "primary_use_case": "To manage and remove automated network configuration and vulnerability scanning tasks within Infraon NCCM."}, "content_for_embedding": "This API facilitates the deletion of specific workflow jobs within Infraon NCCM. These jobs are designed to automate critical network tasks, including the download of OS vulnerability details, OS versions, and EOX status for Cisco devices. This action is irreversible and removes the job's configuration, such as its name, status, action time, and schedule. It is primarily used by administrators and network engineers to manage automated network operations.", "ontology_classification": {"features": ["download_job_management", "network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Workflow Jobs", "NCCM", "Delete"]}}, {"path": "/ux/nccm/workflow_jobs/execute-workflow-job/", "method": "POST", "details": {"operationId": "ux_nccm_workflow_jobs_execute_workflow_job_create", "description": "This endpoint is used to trigger workflow jobs within the current organization in Infraon NCCM. Workflow jobs automate tasks such as downloading OS vulnerability details from Cisco and NIST databases, managing OS versions, and checking EOX status for Cisco devices. This feature is privilege-based, meaning users can only execute workflow jobs if assigned appropriate roles and privileges by an administrator. The endpoint facilitates the initiation of these automated processes, similar to how jobs are triggered from the Workflow Jobs module page, which displays job name, status, action time, and schedule information.", "summary": "Trigger Workflow Jobs", "tags": ["Work Flow Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to handle various field types for document serialization. It supports primitive fields like StringField, IntField, BooleanField, DateTimeField, and compound fields such as ListField and DictField. ReferenceField and EmbeddedDocumentField are also handled, with nested serializers autogenerated based on depth. Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are supported. While FileField, ImageField, and BinaryField are noted as not well supported or untested, developers should be aware that other fields might be mapped to `DocumentField` and potentially work incorrectly if not explicitly listed as supported. Common workflow job types that can likely be triggered include Cisco Vulnerability, NIST Vulnerability, Cisco NewOS Detection, Cisco NewOS Download, and Cisco EOX."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations"], "primary_use_case": "Automating and triggering network configuration and compliance tasks, including vulnerability and OS management."}, "content_for_embedding": "This API endpoint is designed to trigger and initiate automated workflow jobs within Infraon NCCM. These jobs perform critical network configuration and compliance tasks, including downloading OS vulnerability details from Cisco and NIST databases, managing OS versions, and checking EOX status for Cisco devices. Access to this functionality is privilege-based, requiring appropriate roles and permissions. The endpoint's operation is analogous to manually triggering jobs from the Workflow Jobs module page, supporting various job types such as Cisco Vulnerability, NIST Vulnerability, Cisco NewOS Detection, Cisco NewOS Download, and Cisco EOX.", "ontology_classification": {"features": ["workflow_automation", "network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Workflow Jobs", "Trigger", "Automation"]}}, {"path": "/ux/nccm/workflow_jobs/feature-diagnosis/", "method": "GET", "details": {"operationId": "ux_nccm_workflow_jobs_feature_diagnosis_retrieve", "description": "This endpoint is used to diagnose features of workflow jobs within the Infraon NCCM system. Specifically, it facilitates the diagnosis of features such as Cisco Vulnerability, NIST Vulnerability, Cisco NewOS, and Cisco EOX. The Workflow Jobs module in Infraon NCCM automates downloading OS vulnerability details and is a privilege-based feature, allowing access, addition, editing, deletion, execution, and export of workflow jobs based on assigned roles. This endpoint is crucial for verifying API reachability and displaying details like Worker ID, Task Name, Queue Name, Task Status, and Results for workflow job execution, ensuring proper functioning of automated processes.", "summary": "Diagnosis Workflow Job Features", "tags": ["Work Flow Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "additional_info": "This endpoint is part of the Workflow Jobs module, which supports tasks such as downloading vulnerability data, OS versions, EOX status (for Cisco devices), and automating processes based on a configured schedule. While the API specification does not list any parameters, the diagnosis process typically involves selecting a feature (e.g., Cisco Vulnerability) and then initiating a 'Test' action. This functionality is essential for troubleshooting and verifying the operational state of automated workflow jobs within the NCCM system. The module page itself displays a comprehensive list of workflow jobs, including job name, status, action time, schedule information, creator, and last modified by details, which users can filter and search."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Engineers"], "primary_use_case": "This API is used for diagnosing and verifying the operational status and features of automated workflow jobs within the Infraon NCCM system, specifically focusing on vulnerabilities (Cisco, NIST) and OS-related details (Cisco NewOS, Cisco EOX). It helps in troubleshooting and ensuring the proper functioning of automated network configuration and vulnerability management processes."}, "content_for_embedding": "This API endpoint, `/ux/nccm/workflow_jobs/feature-diagnosis/`, is designed to diagnose specific features of workflow jobs within the Infraon NCCM system. It supports the diagnosis of features such as Cisco Vulnerability, NIST Vulnerability, Cisco NewOS, and Cisco EOX. The primary function is to verify API reachability and display critical execution details including Worker ID, Task Name, Queue Name, Task Status, and Results for automated workflow jobs. This is crucial for troubleshooting and ensuring the smooth operation of automated processes related to downloading OS vulnerability details and managing network configurations.", "ontology_classification": {"features": ["diagnosis_tools", "workflow_automation", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Diagnosis", "Workflow Jobs", "Vulnerabilities"]}}, {"path": "/ux/nccm/workflow_jobs/feature-diagnosis-opts/", "method": "GET", "details": {"operationId": "ux_nccm_workflow_jobs_feature_diagnosis_opts_retrieve", "description": "This endpoint retrieves the available feature diagnosis options for workflow jobs within the current organization in NCCM. This allows users to identify specific features that can be diagnosed, such as 'Cisco Vulnerability', 'NIST Vulnerability', 'Cisco NewOS', and 'Cisco EOX'. These diagnosis features are crucial for automating processes related to downloading vulnerability data, OS versions, and EOX status for Cisco devices, which are managed through the Workflow Jobs module.", "summary": "Workflow Job Features Diagnosis Options", "tags": ["Work Flow Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "additional_info": "The Workflow Jobs module is a privilege-based feature, meaning users must have appropriate roles and privileges assigned by an administrator to access, add, edit, delete, execute, and export workflow jobs. The specific features available for diagnosis, as returned by this endpoint, align with the Job Type options available when creating or modifying a workflow job, such as 'Cisco Vulnerability', 'NIST Vulnerability', 'Cisco NewOS Detection', 'Cisco NewOS Download', and 'Cisco EOX'."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "Security analysts"], "primary_use_case": "To retrieve available diagnosis options for workflow jobs within NCCM, enabling users to identify specific features for automating processes related to vulnerability data, OS versions, and EOX status for Cisco devices."}, "content_for_embedding": "This API retrieves the available feature diagnosis options for workflow jobs within the current organization in NCCM. These options, such as 'Cisco Vulnerability', 'NIST Vulnerability', 'Cisco NewOS', and 'Cisco EOX', are crucial for automating processes related to downloading vulnerability data, OS versions, and EOX status for Cisco devices. The Workflow Jobs module, which uses these diagnosis features, is privilege-based, aligning with job type options for creating or modifying workflow jobs.", "ontology_classification": {"features": ["diagnosis_tools", "download_job_management", "network_configuration_and_change_management", "privilege-based_access_control"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Diagnosis", "Workflow Jobs", "Retrieval"]}}, {"path": "/ux/nccm/workflow_jobs/multi-change/", "method": "POST", "details": {"operationId": "ux_nccm_workflow_jobs_multi_change_create", "description": "This endpoint, located at `/ux/nccm/workflow_jobs/multi-change/`, is designed for managing Workflow Jobs within the current NCCM organization. It allows users to perform critical actions such as changing the state of existing workflow jobs (e.g., enabling/disabling, pausing/resuming execution) or deleting them. This is a privilege-based feature within the Infraon NCCM system, crucial for automating processes like downloading OS vulnerability details from Cisco and NIST databases, managing OS versions, and handling EOX status for Cisco devices. The module page typically displays details such as job name, status, action time, schedule information, creator, and last modified by, and this endpoint facilitates direct modifications to these jobs.", "summary": "Change or delete Workflow Jobs", "tags": ["Work Flow Jobs"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "additional_info": "This endpoint supports bulk operations on workflow jobs. While the API specification provides a generic description of supported primitive and compound fields for the request body (e.g., `StringField`, `IntField`, `ListField`, `DictField`), specific details on the exact structure for changing state or deleting workflow jobs (e.g., fields expected for job IDs, new status, or deletion flags) are not explicitly detailed in the provided contexts or the `request_body_description`. Developers should refer to the relevant client-side implementation or more detailed API schema documentation for the precise JSON payload structure required for state changes or deletions. The 'Workflow Jobs' module in Infraon NCCM is a privilege-based feature, meaning users must be assigned appropriate roles and privileges by an administrator to access, add, edit, delete, execute, and export workflow jobs."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Administrator", "Privileged User"], "primary_use_case": "To manage (change state or delete) automated workflow jobs within the NCCM system, which are used for tasks like downloading OS vulnerability details and managing OS versions."}, "content_for_embedding": "This API endpoint, located at `/ux/nccm/workflow_jobs/multi-change/`, is designed for managing Workflow Jobs within the Infraon NCCM system. It allows users to perform critical actions such as changing the state of existing workflow jobs (e.g., enabling/disabling, pausing/resuming execution) or deleting them. This endpoint supports bulk operations on workflow jobs. These jobs are crucial for automating processes like downloading OS vulnerability details from Cisco and NIST databases, managing OS versions, and handling EOX status for Cisco devices. Access to this feature is privilege-based, requiring appropriate roles and privileges.", "semantic_keywords": ["Workflow Jobs", "Change", "Delete"], "ontology_classification": {"features": ["network_configuration_and_change_management", "privilege-based_access_control", "download_job_management", "workflow_automation", "change_workflow", "process_deletion", "process_status_&_priority_management", "bulk_actions_on_assets"], "primary_module": "nccm", "confidence_score": 1}}}, {"path": "/ux/nccm/workflow_jobs/options/", "method": "GET", "details": {"operationId": "ux_nccm_workflow_jobs_options_retrieve", "description": "This endpoint retrieves available options related to creating or modifying a workflow job within the Infraon NCCM system. It provides details that assist in defining a workflow job's profile, such as job name, description, job type (e.g., Cisco Vulnerability, NIST Vulnerability, Cisco NewOS Detection, Cisco EOX), status (enabled/disabled), and potentially other configuration elements displayed on the Workflow Jobs module page.", "summary": "Gets a workflow job options with the given id", "tags": ["Work Flow Jobs"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkflowJobs"}}}, "description": ""}}, "additional_info": "This endpoint is typically used to populate dropdowns or configuration fields in a user interface when adding or editing a workflow job. The options provided are crucial for defining various aspects of the job, including its purpose, associated technologies, and operational behavior. While the JSON spec indicates no specific parameters, the output of this endpoint would provide the available choices for fields like 'Job Type' which are explicitly mentioned in context documents as selectable options."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations Staff"], "primary_use_case": "This API retrieves available options and configuration elements necessary for creating or modifying workflow jobs within the Infraon NCCM system. It is primarily used to populate user interface fields and dropdowns, ensuring users can accurately define job profiles, types, and statuses."}, "content_for_embedding": "This GET endpoint retrieves available options for configuring workflow jobs in the Infraon NCCM system. It provides crucial details like job types (e.g., Cisco Vulnerability, NIST Vulnerability, Cisco EOX) and status (enabled/disabled) to populate UI dropdowns and fields when creating or modifying a workflow job profile. The output assists in defining the purpose, associated technologies, and operational behavior of a workflow job.", "ontology_classification": {"features": ["workflow_automation", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Workflow Jobs", "Configuration", "Dropdown options"]}}, {"path": "/ux/nccm/ztp/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_list", "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ZTPConfiguration"}}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Network Engineers"], "primary_use_case": "Retrieving Zero Touch Provisioning (ZTP) configurations."}, "content_for_embedding": "This API allows users to retrieve a list of Zero Touch Provisioning (ZTP) configurations. It is part of the Network Configuration and Change Management (NCCM) module, providing access to pre-defined or active ZTP settings within the system.", "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Zero Touch Provisioning", "NCCM", "Configuration retrieval"]}}, {"path": "/ux/nccm/ztp/", "method": "POST", "details": {"operationId": "ux_nccm_ztp_create", "tags": ["ZTP"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Teams", "System Integrators"], "primary_use_case": "This API is used to create and configure Zero Touch Provisioning (ZTP) settings within the Network Configuration and Change Management (NCCM) system. It enables automated initial setup and configuration of network devices."}, "content_for_embedding": "This API allows for the creation and configuration of Zero Touch Provisioning (ZTP) settings. It is part of the Network Configuration and Change Management (NCCM) module, enabling automated and streamlined deployment of network devices by applying predefined configurations without manual intervention. This operation facilitates the initial setup of new devices, reducing human error and accelerating network expansion.", "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Zero Touch Provisioning", "Network Configuration", "Automation"]}}, {"path": "/ux/nccm/ztp/{id}/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_retrieve", "description": "This endpoint is used to fetch a runtime paramter data in the current organization", "summary": "Gets a runtime paramter data details with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "Developer"], "primary_use_case": "To retrieve specific runtime parameter data for Zero Touch Provisioning (ZTP) within the current organization, enabling users to view details of existing network configurations."}, "content_for_embedding": "This API retrieves the detailed information for a specific runtime parameter identified by its unique ID. These runtime parameters are crucial for Zero Touch Provisioning (ZTP) and are often associated with network configuration templates and profiles, including IP addresses. It allows users to view existing parameter mappings and their associated details within the organization.", "semantic_keywords": ["Zero Touch Provisioning", "Runtime Parameters", "Details retrieval"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/nccm/ztp/{id}/", "method": "PUT", "details": {"operationId": "ux_nccm_ztp_update", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ZTP"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations", "Network engineers"], "primary_use_case": "To update existing Zero Touch Provisioning (ZTP) configurations for network devices, enabling automation and ensuring configuration accuracy."}, "content_for_embedding": "This API allows for the update of an existing Zero Touch Provisioning (ZTP) configuration. Users can modify specific ZTP settings by providing the unique identifier of the configuration to be updated. This is crucial for managing automated network device deployments and ensuring configurations are up-to-date.", "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Zero Touch Provisioning", "Configuration", "Update"]}}, {"path": "/ux/nccm/ztp/{id}/", "method": "DELETE", "details": {"operationId": "ux_nccm_ztp_destroy", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Network Engineers"], "primary_use_case": "This API is used to delete a specific Zero Touch Provisioning (ZTP) configuration or record. It enables network administrators to manage and remove unwanted or outdated ZTP deployments, contributing to efficient network configuration management."}, "content_for_embedding": "This API facilitates the deletion of a Zero Touch Provisioning (ZTP) configuration or record by its unique identifier. It is a critical operation within network configuration and change management (NCCM) to maintain clean and accurate ZTP deployments, ensuring only active configurations are present. This helps in managing the lifecycle of network device provisioning.", "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_and_change_management"], "primary_module": "nccm", "confidence_score": 1}, "semantic_keywords": ["Delete", "Zero Touch Provisioning", "NCCM"]}}, {"path": "/ux/nccm/ztp/delete-runtime-profiles/", "method": "POST", "details": {"operationId": "ux_nccm_ztp_delete_runtime_profiles_create", "description": "This endpoint is used to Delete a runtime paramter data in the current organization", "summary": "Delete a runtime paramter data details with the given ids", "tags": ["ZTP"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "Configuration Managers"], "primary_use_case": "To manage and remove specific runtime parameter configurations associated with Zero Touch Provisioning (ZTP) for network devices."}, "content_for_embedding": "This API endpoint allows for the deletion of runtime parameter data or profiles within the Zero Touch Provisioning (ZTP) system. It is used to remove existing runtime configurations for network devices, contributing to network configuration and change management (NCCM).", "semantic_keywords": ["Delete", "Zero Touch Provisioning", "Runtime Parameters", "Network Configuration", "NCCM"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/nccm/ztp/import-runtimes/", "method": "POST", "details": {"operationId": "ux_nccm_ztp_import_runtimes_create", "description": "This endpoint is used to Imported Runtime CSV", "summary": "Imported Runtime CSV", "tags": ["ZTP"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "System Administrators", "IT Operations Personnel"], "primary_use_case": "Automating the import of runtime configurations via CSV for Zero Touch Provisioning."}, "content_for_embedding": "This API endpoint facilitates the import of runtime configurations from a CSV file. It is specifically designed for Zero Touch Provisioning (ZTP), allowing users to upload pre-edited CSV files containing runtime data. This streamlines the process of configuring and deploying network devices or systems by automating the data import, ensuring valid records are processed for efficient provisioning.", "semantic_keywords": ["Zero Touch Provisioning", "CSV Import", "Configuration"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "it_operations", "CSV Import", "Upload", "Configuration", "CSV Validation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/ztp/options/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_options_retrieve", "description": "This endpoint is used to get the default options for authentication profile ", "summary": "Get the options for the ZTP Configuration", "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations", "System Integrators"], "primary_use_case": "To retrieve default configuration options for Zero Touch Provisioning (ZTP), including authentication profiles, to facilitate the setup and management of network device provisioning."}, "content_for_embedding": "This API retrieves the default configuration options for Zero Touch Provisioning (ZTP), specifically focusing on the authentication profiles used within ZTP configurations. It provides the necessary default settings for administrators to set up and manage network device provisioning.", "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Zero Touch Provisioning", "Authentication Profiles", "Configuration Options"]}}, {"path": "/ux/nccm/ztp/sample-csv/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_sample_csv_retrieve", "description": "This endpoint is used to get the Sample CSV for importing ZTP Runtime Fields For the given configuration profile.", "summary": "Get the Sample CSV for importing ZTP Runtime Fields", "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel"], "primary_use_case": "Facilitating bulk configuration and provisioning of network devices through Zero Touch Provisioning (ZTP) by providing a sample CSV template for runtime field import."}, "content_for_embedding": "This API retrieves a sample CSV template specifically designed for importing Zero Touch Provisioning (ZTP) runtime fields. This sample CSV helps users prepare data for bulk configuration and provisioning of network devices, aligning with the ZTP process for adding configuration profiles and parameters in bulk. It is essential for users who need to import runtime parameters via CSV for a given configuration profile.", "semantic_keywords": ["Zero Touch Provisioning", "CSV Import", "Runtime Parameters"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/ztp/save-ztp-profile/", "method": "POST", "details": {"operationId": "ux_nccm_ztp_save_ztp_profile_create", "description": "This endpoint is used to Save ZTP Configuration Profile.", "summary": "Save ZTP Configuration Profile.", "tags": ["ZTP"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Integrators"], "primary_use_case": "To save and manage Zero Touch Provisioning (ZTP) configuration profiles, enabling automated network device setup and configuration."}, "content_for_embedding": "This API allows users to save a Zero Touch Provisioning (ZTP) configuration profile. A ZTP profile automates the provisioning of network devices by defining parameters such as profile name, description, status, syslog patterns, IP address patterns, reference key patterns, allowed DHCP server assets, device credentials, subnet details, event configuration, data collector agent, and post-ZTP API notifications. This is a crucial step in setting up new network devices efficiently without manual intervention, integrating with existing API registration and change management workflows.", "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_management_(nccm)", "api_registration", "workflow_automation", "notification_trigger_configuration", "device_credential_management", "agent_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["Zero Touch Provisioning", "Configuration Profiles", "Save"]}}, {"path": "/ux/nccm/ztp/save-ztp-runtime-parameter/", "method": "POST", "details": {"operationId": "ux_nccm_ztp_save_ztp_runtime_parameter_create", "description": "This endpoint is used to Save ZTP Runtime Paramters.", "summary": "Save ZTP Runtime Paramters.", "tags": ["ZTP"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "System Integrator"], "primary_use_case": "This API is used to save Zero Touch Provisioning (ZTP) runtime parameters and configuration settings, enabling the automation of network device provisioning and configuration management."}, "content_for_embedding": "This API endpoint facilitates the saving of Zero Touch Provisioning (ZTP) runtime parameters and associated configuration details. It is crucial for establishing and managing ZTP profiles, allowing users to store values, whether manually entered or imported from CSV files, that are essential for automating the provisioning of network devices. This function is a core component for activating and maintaining ZTP configurations within the system.", "semantic_keywords": ["Zero Touch Provisioning", "Runtime Parameters", "Configuration", "Save"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/nccm/ztp/search-options/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_search_options_retrieve", "description": "This endpoint is used to get the search options for the runtime module.", "summary": "Get the Search Options for Runtime Module", "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Operations", "Developer"], "primary_use_case": "This API retrieves available search and filter options for the Zero Touch Provisioning (ZTP) runtime module, enabling users to dynamically discover parameters and criteria for efficient management and troubleshooting of network devices and services."}, "content_for_embedding": "This API retrieves available search and filter options for the Zero Touch Provisioning (ZTP) runtime module. It enables users, such as network administrators and IT operations personnel, to dynamically discover parameters and criteria for searching and filtering configurations, parameters, and job results within the ZTP environment, facilitating efficient management and troubleshooting of network devices and services.", "ontology_classification": {"features": ["network_configuration_and_change_management", "download_job_management", "zero_touch_provisioning_(ztp)", "configuration_search"], "primary_module": "nccm", "confidence_score": 0.9}, "semantic_keywords": ["Search", "Filter", "Zero Touch Provisioning"]}}, {"path": "/ux/nccm/ztp/validate-csv/", "method": "POST", "details": {"operationId": "ux_nccm_ztp_validate_csv_create", "description": "This endpoint is used to Validate the Imported Runtime CSV", "summary": "Validate the Imported Runtime CSV", "tags": ["ZTP"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"primary_use_case": "This API validates an imported CSV file for Zero Touch Provisioning (ZTP), ensuring the correctness of bulk configurations for network devices or resources."}, "content_for_embedding": "This API endpoint is used to validate the integrity and correctness of an imported CSV file containing configuration data for Zero Touch Provisioning (ZTP). It plays a crucial role in the bulk onboarding and configuration of network devices within the Network Configuration and Change Management (NCCM) framework by ensuring that the provided CSV data adheres to the required format and standards before actual deployment or import.", "semantic_keywords": ["CSV Validation", "Zero Touch Provisioning", "Network Configuration"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_and_change_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/nccm/ztp/ztp-profile/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_ztp_profile_retrieve", "description": "This endpoint is used to get ZTP Configuration Profile.", "summary": "Get ZTP Configuration Profile.", "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Operations Personnel", "System Integrators"], "primary_use_case": "To retrieve existing Zero Touch Provisioning (ZTP) Configuration Profiles, enabling users to view, audit, or further manage automated network device provisioning settings."}, "content_for_embedding": "This API endpoint allows for the retrieval of a Zero Touch Provisioning (ZTP) Configuration Profile. ZTP profiles are used to automate the initial setup and configuration of network devices. The API provides access to details such as the profile name, description, status, syslog and IP address patterns for device identification, device credentials, subnet filters, event configurations, and post-ZTP job actions. This functionality is crucial for managing network automation, ensuring compliance, and troubleshooting device provisioning processes.", "semantic_keywords": ["Zero Touch Provisioning", "Configuration Profiles", "Retrieval"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "Configuration retrieval", "Configuration Management", "Search functionality", "Filtering options"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/nccm/ztp/ztp-runtime-fields/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_ztp_runtime_fields_retrieve", "description": "This endpoint is used to get the ZTP Runtime Fields For the given configuration profile.", "summary": "Get the ZTP Runtime Fields", "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT operations personnel", "System integrators"], "primary_use_case": "This API retrieves the runtime fields associated with a Zero Touch Provisioning (ZTP) configuration profile, enabling users to view and manage dynamic parameters used during automated network device provisioning."}, "content_for_embedding": "This API endpoint allows for the retrieval of Zero Touch Provisioning (ZTP) runtime fields for a specified configuration profile. It provides access to the dynamic parameters and variables that are utilized during the automated provisioning of network devices, offering insights into the configuration details applied during the ZTP process.", "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["Zero Touch Provisioning", "Runtime Parameters", "Configuration Profiles"]}}, {"path": "/ux/nccm/ztp/ztp-runtime-options/", "method": "GET", "details": {"operationId": "ux_nccm_ztp_ztp_runtime_options_retrieve", "description": "This endpoint is used to get the default options for ZTP Runtime Parameters", "summary": "Get the options for the ZTP Runtime Parameters", "tags": ["ZTP"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ZTPConfiguration"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network Engineer", "IT Operations Personnel"], "primary_use_case": "This API retrieves the default configuration options for Zero Touch Provisioning (ZTP) runtime parameters, enabling administrators and network engineers to understand and utilize pre-defined settings for automating network device deployment and configuration."}, "content_for_embedding": "This API retrieves the default configuration options for Zero Touch Provisioning (ZTP) Runtime Parameters. It provides the pre-defined settings necessary for automating the deployment and configuration of network devices within the NCCM (Network Configuration and Change Management) system. This is crucial for efficient setup of new network infrastructure and streamlining IT operations.", "semantic_keywords": ["Zero Touch Provisioning", "Configuration", "Retrieval"], "ontology_classification": {"features": ["zero_touch_provisioning_(ztp)"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/oidc/config/", "method": "GET", "details": {"operationId": "ux_oidc_config_retrieve", "description": "This GET API endpoint is used to retrieve configuration details, specifically for OpenID Connect (OIDC) settings related to the user experience (UX) within the application. While the original description mentioned viewing and editing users, the context strongly suggests its primary role is to configure OIDC parameters. This aligns with managing app registrations and OAuth consent screens, which are crucial for user authentication flows. It likely provides the necessary OIDC configuration JSON for client applications to interact with the service.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The endpoint returns the OIDC configuration. Based on the provided contexts, this may involve details similar to those found on an 'OAuth consent screen, configuration page' where 'app registrations' are managed. While the API specification did not detail parameters or a request body, the method is GET, implying it retrieves existing configuration data without requiring input parameters in the URL or a body. The response is stated as 'No response body'. This is likely an error in the original specification's `response_description` as a GET request to retrieve 'config' would inherently return data. It's more probable that this endpoint returns the OIDC configuration JSON itself. Developers should expect a JSON response containing the OIDC discovery document or similar configuration."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "Security Engineer"], "primary_use_case": "To retrieve OpenID Connect (OIDC) configuration details, enabling client applications to properly integrate for user authentication and managing application registrations."}, "content_for_embedding": "This API endpoint retrieves OpenID Connect (OIDC) configuration details for the user experience (UX) within the application. It provides the necessary OIDC configuration JSON, similar to an OAuth consent screen or app registration configuration page, allowing client applications to interact with the service for authentication flows. It's a GET request designed to fetch existing OIDC settings.", "ontology_classification": {"features": ["api_registration", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration retrieval", "API Registration", "User Authentication"]}}, {"path": "/ux/oidc/config/", "method": "POST", "details": {"operationId": "ux_oidc_config_create", "description": "This API endpoint, `/ux/oidc/config/`, allows for the configuration of OpenID Connect (OIDC) settings, specifically enabling the viewing and editing of user-related configurations within the application. It is crucial for managing how users are authenticated and registered within the system, often in conjunction with OAuth consent screens or app registrations as highlighted in the user guides. This endpoint supports `POST` requests, indicating it can be used to submit or update OIDC configurations.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "To configure OIDC settings, users typically navigate to 'APIs & Services -> OAuth consent screen' and then proceed to 'Edit App registration'. While the API specification indicates 'No response body', successful operations generally imply the configuration has been updated. This endpoint focuses on the OIDC configuration itself rather than direct user management, although it underpins how users are perceived and interact with the system based on OIDC standards. It does not involve managing specific user data like 'viewing older requests' or 'accessing detailed user profiles' directly, although it sets up the framework for user access permissions."}, "llm_generated": {"business_context": {"user_personas": ["System Administrator", "Security Administrator", "Developer"], "primary_use_case": "To manage and configure OpenID Connect (OIDC) settings for user authentication and registration within the system."}, "content_for_embedding": "This API endpoint allows for the configuration, viewing, and editing of OpenID Connect (OIDC) settings. It is crucial for managing how users are authenticated and registered within the system, underpinning user access permissions. It supports POST requests for submitting or updating OIDC configurations, typically accessed via OAuth consent screens or app registrations.", "ontology_classification": {"features": ["platform_account_configuration", "user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}, "semantic_keywords": ["OIDC Configuration", "User Authentication", "User Configuration"]}}, {"path": "/ux/oidc/config/{id}/", "method": "GET", "details": {"operationId": "ux_oidc_config_retrieve_2", "description": "This API endpoint provides functionalities for viewing or editing OpenID Connect (OIDC) configurations for individual users. It aligns with managing user-related settings, particularly concerning authentication flows and permissions. Access to this endpoint is crucial for configuring user access and their interactions with the system, similar to how applications are registered and configured for OAuth consent screens.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the OIDC configuration to be viewed or edited. While the API description suggests viewing or editing, the 'GET' method specifically implies retrieval of information. Contexts indicate a broader process that involves navigating configuration pages (like 'APIs & Services -> OAuth consent screen') and potentially enabling specific user-related API permissions, such as 'User. Read.All'. This suggests that before using this endpoint, relevant permissions might need to be established to ensure successful operation. The process of editing app registrations or configurations is a prerequisite for managing OIDC configurations."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Security Engineer", "Identity and Access Management (IAM) Specialist"], "primary_use_case": "To retrieve OpenID Connect (OIDC) configurations for individual users, enabling the management of user authentication flows, permissions, and integration with OAuth consent screens and application registrations."}, "content_for_embedding": "This API endpoint allows for the retrieval of OpenID Connect (OIDC) configurations, which are essential for managing individual user settings related to authentication flows and permissions. It plays a critical role in configuring user access and their interactions within the system, similar to how applications are registered and configured for OAuth consent screens. The `id` path parameter uniquely identifies the OIDC configuration. Successful operation may require relevant permissions, such as 'User. Read.All', and often follows the prerequisite of editing app registrations or configurations.", "ontology_classification": {"features": ["platform_account_configuration", "user_management", "api_registration", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["OIDC Configuration", "User Authentication", "API Registration"]}}, {"path": "/ux/oidc/config/{id}/", "method": "PUT", "details": {"operationId": "ux_oidc_config_update", "description": "This API endpoint allows for the viewing and editing of OIDC (OpenID Connect) configuration settings, identified by a unique `id`. This functionality is crucial for managing OAuth consent screens and app registrations, enabling administrators to modify how applications interact with user authentication and authorization within the system. It facilitates updates to configuration parameters, mirroring the process of editing app registrations as described in the user guides.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the OIDC configuration to be updated. While the original description states 'users to be viewed or edited', the context strongly suggests this endpoint manages configurations related to user authentication and authorization, rather than direct user profiles. Specifically, it relates to the 'OAuth consent screen' and 'Edit App registration' processes. This endpoint is typically used to update settings such as redirect URIs, client secrets (if applicable), or other OIDC-specific parameters. For related actions, developers might refer to sections concerning API permissions and credential management, as these often go hand-in-hand with OIDC configuration updates."}, "llm_generated": {"business_context": {"user_personas": ["administrator", "developer"], "primary_use_case": "To update OIDC (OpenID Connect) configuration settings for applications, managing how they handle user authentication and authorization within the system."}, "content_for_embedding": "This API updates OIDC (OpenID Connect) configuration settings, specifically for managing OAuth consent screens and app registrations. It allows administrators to modify how applications handle user authentication and authorization, including parameters like redirect URIs and client secrets. This is crucial for API permissions and credential management, mirroring the process of editing app registrations and account configuration settings.", "semantic_keywords": ["OIDC Configuration", "API Registration", "Update"], "ontology_classification": {"features": ["api_registration", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/oidc/config/{id}/", "method": "DELETE", "details": {"operationId": "ux_oidc_config_destroy", "description": "This API endpoint allows for the deletion of an OpenID Connect (OIDC) configuration identified by a unique ID. While the original description mentioned viewing or editing users, the method is DELETE, implying a removal action specific to OIDC configurations, which can be managed via the 'APIs & Services -> OAuth consent screen, configuration page'. This deletion is part of the API management functionality, where APIs can be edited or deleted using respective icons, as indicated in the user guide.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path parameter used to specify the unique identifier of the OIDC configuration to be deleted. There is no request body for this DELETE operation. Post-deletion, no response body is returned. This action is typically performed by administrators managing API registrations and OAuth consent screens, and it is crucial to ensure the correct `id` is provided to avoid unintended deletions. The user guide also points to managing APIs within the 'API Permissions' section, where specific permissions like 'User. Read.All' are enabled, though this specific DELETE endpoint is focused on OIDC configuration setup rather than general user management."}, "llm_generated": {"business_context": {"user_personas": ["administrator"], "primary_use_case": "This API allows administrators to delete an existing OpenID Connect (OIDC) configuration."}, "content_for_embedding": "This API endpoint facilitates the deletion of a specific OpenID Connect (OIDC) configuration, identified by a unique ID. It is primarily used by administrators for managing API registrations and OAuth consent screens within the system. The operation is a permanent removal of the OIDC configuration and does not return any response body upon successful completion.", "semantic_keywords": ["OIDC Configuration", "Delete", "API Registration"], "ontology_classification": {"features": ["api_registration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/oidc/config/enable-disable-config/", "method": "POST", "details": {"operationId": "ux_oidc_config_enable_disable_config_create", "description": "This API endpoint facilitates the configuration of OpenID Connect (OIDC) settings, specifically enabling or disabling them. While the original description suggested general user viewing/editing, the context implies this endpoint is crucial for managing app registrations and enabling API permissions (such as 'User.Read.All') within the OAuth consent screen. It allows for the configuration of permissions that determine whether users can view or perform edit operations within specific modules or pages, rather than directly editing user details through this specific endpoint itself. This is integral to controlling access and functionalities within the system.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is part of the OIDC configuration flow. Based on the provided contexts, a common use case involves navigating to the 'APIs & Services -> OAuth consent screen' and editing app registrations. Subsequently, users would enable specific API permissions (e.g., 'User.Read.All') for the application. The system appears to distinguish between different privileges (Add, Edit), where 'Edit' allows viewing and performing edit operations within a selected module. This endpoint likely toggles the overall OIDC configuration status, impacting related API permissions and user access privileges. No specific request body or parameters are defined for this endpoint in the provided specification."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Security Administrator"], "primary_use_case": "To manage OpenID Connect (OIDC) configurations, which includes enabling or disabling OIDC settings, controlling API permissions, and defining user access privileges within the system."}, "content_for_embedding": "This API endpoint enables or disables OpenID Connect (OIDC) configurations, directly influencing application registrations, API permissions (e.g., 'User.Read.All'), and user access privileges within the system. It is crucial for managing access control and defining user capabilities across different modules and pages.", "semantic_keywords": ["OIDC Configuration", "API Permissions", "User Privileges"], "ontology_classification": {"features": ["api_registration", "user_management", "roles_&_privileges_management", "general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 1}}}, {"path": "/ux/oidc/config/get-oidc/", "method": "GET", "details": {"operationId": "ux_oidc_config_get_oidc_retrieve", "description": "This API endpoint is designed to retrieve configuration details for OpenID Connect (OIDC). Building upon the initial description, it allows for the viewing and potential editing of user-related configurations within the OIDC framework. This process is relevant for managing user access and permissions, similar to how applications register and configure OAuth consent screens, where users can be viewed or edited to grant 'User.Read.All' permissions.", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "To access and configure OIDC settings, users should navigate to 'APIs & Services -> OAuth consent screen' in the administrative interface. The process may involve editing an existing app registration. For managing specific user permissions within the OIDC context, it is crucial to enable relevant API permissions like 'User.Read.All', which allows for comprehensive viewing of user details. This is akin to granting privileges that enable viewing and editing operations for users within a module, ensuring proper access control."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Personnel", "Developer"], "primary_use_case": "To retrieve and manage OpenID Connect (OIDC) configuration details, including user-related settings, access, and permissions."}, "content_for_embedding": "This API retrieves OpenID Connect (OIDC) configuration details, enabling viewing and potential editing of user-related configurations. It is crucial for managing user access, permissions, and configuring OAuth consent screens, including granting API permissions like 'User.Read.All' for comprehensive user detail viewing and editing within the administrative interface.", "ontology_classification": {"features": ["api_registration", "user_management", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 1}, "semantic_keywords": ["OIDC Configuration", "User Management", "API Permissions"]}}, {"path": "/ux/password_js_encrypt/", "method": "POST", "details": {"operationId": "ux_password_js_encrypt_create", "description": "This endpoint, `/ux/password_js_encrypt/`, is designed to securely obtain JavaScript encrypted data for a password string. It plays a crucial role in enhancing security by encrypting password information, potentially before it is used for authentication or configuration purposes. For instance, in systems like NCCM, scripts are run to encrypt passwords as part of security measures, especially when performing actions such as script execution or remediations. This endpoint facilitates that encryption process, helping to meet security policies that may enforce password encryption.", "summary": "Get encrypted data for the password string", "tags": ["Authentication"], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "additionalProperties": {}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}}}, "description": ""}}, "additional_info": "This endpoint likely underpins the secure handling of passwords. While the API specification does not list explicit parameters or a request body, it is inferred that the raw password string would be passed to this endpoint for encryption. Contexts suggest that APIs often use authorization mechanisms like API Keys or Basic Auth; it is recommended to secure calls to this endpoint appropriately. The encryption provided by this endpoint is integral to password policies, where systems often require passwords to be encrypted, not just obfuscated, to prevent violations such as 'Password not Encrypted'. This method does not directly involve user credentials for API access but rather encrypts user-provided passwords for other system processes."}, "llm_generated": {"business_context": {"user_personas": ["Developers", "Security Administrators", "System Administrators"], "primary_use_case": "To securely encrypt password strings using JavaScript for enhanced security, particularly for authentication and configuration purposes within systems like NCCM, ensuring compliance with security policies."}, "content_for_embedding": "This API endpoint, `/ux/password_js_encrypt/`, is designed to provide JavaScript encrypted data for a given password string. Its primary function is to enhance security by encrypting sensitive password information before it is used for authentication or system configuration. This is crucial for meeting security policies that mandate password encryption, as seen in systems like NCCM where scripts encrypt passwords for secure execution and remediation. The endpoint facilitates the secure handling of user-provided passwords, ensuring they are encrypted rather than merely obfuscated, and supports secure credential management.", "semantic_keywords": ["Password encryption", "Security", "Authentication"], "ontology_classification": {"features": ["password_policy_configuration", "device_credential_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/saml/config/", "method": "GET", "details": {"operationId": "ux_saml_config_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "description": "This endpoint allows users to retrieve the SAML configuration profile. The response provides details such as the profile name, vendor, OS type, series, and a brief description of the configuration profile. It also indicates available actions for each profile, including editing, deleting, and downloading/exporting the configuration in a CSV file. This endpoint is part of the user experience (UX) module, likely related to Single Sign-On (SSO) authentication profiles.", "summary": "", "additional_info": "This endpoint does not require any parameters or request body. The response is a listing of the SAML configuration profiles, similar to how configuration profiles are displayed in a user interface. Users can perform actions like 'Edit' to modify a profile, 'Delete' to remove a configuration, and 'Download' to export the configuration data. The configurations are typically templates or predefined settings created by network administrators, including details for devices and connection protocols."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT security personnel", "Users with administrative privileges for managing authentication and device configurations"], "primary_use_case": "To enable network administrators and authorized users to retrieve, view, and manage SAML configuration profiles, which are essential for Single Sign-On (SSO) and device authentication. This includes facilitating the viewing of configurations that can be subsequently edited, deleted, or exported."}, "content_for_embedding": "This API endpoint allows for the retrieval of SAML configuration profiles, providing detailed information such as profile name, vendor, OS type, and series. It supports the management of these profiles by enabling users to view configurations that can be subsequently edited, deleted, or exported in CSV format. These profiles are critical for Single Sign-On (SSO) authentication and are typically managed by network administrators for efficient device setup and control within a user experience (UX) module.", "semantic_keywords": ["SAML Configuration", "Authentication Profiles", "Configuration Retrieval"], "ontology_classification": {"features": ["device_credential_management", "network_configuration_management_(nccm)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/saml/config/", "method": "POST", "details": {"operationId": "ux_saml_config_create", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "description": "This POST endpoint is used to configure SAML (Security Assertion Markup Language) settings within the user experience (UX) module. It allows administrators to create or modify configuration profiles by submitting configuration profile data, which includes details such as a profile name, vendor, OS type, series, and a brief description. The submitted configuration will be applied to customize the UI/UX experience and potentially integrate Single Sign-On (SSO) capabilities, as indicated by references to 'Authentication Profile' and 'SSO' in the contexts. This process is crucial for setting up how users access or interact with managed devices and services.", "summary": "", "additional_info": "This endpoint contributes to defining configuration profiles, which are templates or predefined sets of settings for network administrators. The configuration parameters that can be submitted typically include:\n- Profile Name: A unique name for the configuration.\n- Vendor: The name of the specific vendor for which the profile is created.\n- OS Type: The operating system supported by the configuration.\n- Series: A unique identifier series number.\n- Description: A brief explanation of the configuration profile.\n\nThe operation is completed upon clicking 'Submit', and the configuration profile data is expected to be part of the request body. While the API specification currently lists an empty `request_body_description`, the contexts strongly suggest that the request body will contain the fields necessary to define a 'Configuration Profile Data'. This module is critical for tailoring the end-users' Self-Service Portal (SSP) experience, as well as for general configuration management within Infraon, and is typically managed by Infraon Management Admins."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "Infraon Management Admins"], "primary_use_case": "To configure SAML (Security Assertion Markup Language) settings for the user experience (UX) module, enabling Single Sign-On (SSO) capabilities and customizing UI/UX."}, "content_for_embedding": "This API configures SAML (Security Assertion Markup Language) settings within the user experience (UX) module, enabling Single Sign-On (SSO) capabilities. It allows administrators to create or modify configuration profiles, including details like profile name, vendor, OS type, series, and description, to customize UI/UX and manage user access to devices and services.", "ontology_classification": {"features": ["general_settings", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["SAML Configuration", "Authentication Profiles", "Configuration Profiles"]}}, {"path": "/ux/saml/config/{id}/", "method": "GET", "details": {"operationId": "ux_saml_config_retrieve_2", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "description": "This endpoint allows users to retrieve details for a specific SAML configuration profile. It utilizes a unique identifier (`id`) to fetch comprehensive information about a particular profile, which typically includes fields such as 'Profile Name', 'Vendor', 'OS Type', 'Series', and a 'Description'. The data retrieved would align with the details displayed and managed within configuration profile sections of the Infinity platform for SAML, often enabling actions like editing or deleting the configuration. This GET operation is designed to pull existing SAML configuration data.", "summary": "", "additional_info": "The `id` path parameter is a mandatory string that serves as the unique identifier for the SAML configuration profile you wish to retrieve. The API returns no response body directly, implying the data is likely returned in a structured format in the response itself or implies a success status without detailed profile data in the body. However, based on the contexts, a typical configuration profile would include details like Profile Name (a name for the configuration), Vendor (the specific vendor), OS Type (the supported operating system), Series (a unique identifier or series number), and a Description (a brief explanation of the profile)."}, "llm_generated": {"business_context": {"user_personas": ["Network administrators", "IT administrators", "Security administrators"], "primary_use_case": "To enable users to view and access existing SAML configuration profile details for management and informational purposes."}, "content_for_embedding": "This API allows users to retrieve comprehensive details of a specific SAML (Security Assertion Markup Language) configuration profile using its unique identifier. The retrieved information includes the profile name, vendor, operating system type, series, and a description. This endpoint is crucial for viewing existing SAML configurations within the Infinity platform, facilitating subsequent management actions such as editing or deleting profiles.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["SAML Configuration", "Configuration retrieval", "Configuration Profiles"]}}, {"path": "/ux/saml/config/{id}/", "method": "PUT", "details": {"operationId": "ux_saml_config_update", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "description": "This endpoint allows for updating an existing SAML (Security Assertion Markup Language) configuration profile. It is used to modify the details of a specific configuration, identified by its unique `id`, such as its profile name, vendor, OS type, series, and a brief description. This operation is analogous to clicking the 'Edit' action for a configuration profile in the user interface to make changes.", "summary": "", "additional_info": "The `id` in the path refers to the unique identifier of the SAML configuration to be updated. While the request body details are not specified in the current API spec, based on the highly relevant contexts (Rank 1, 2, 3, 4), the `PUT` operation for a configuration profile would typically involve updating fields like 'Profile Name', 'Vendor', 'OS Type', 'Series', and 'Description'. These fields likely need to be provided in the request body to facilitate the update. This API is critical for managing SAML configurations, allowing administrators to customize the Self-Service Portal (SSP) experience as mentioned in context Rank 7."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Network admin"], "primary_use_case": "To update existing SAML (Security Assertion Markup Language) configuration profiles, allowing modification of details such as profile name, vendor, OS type, series, and description, and to customize the Self-Service Portal (SSP) experience."}, "content_for_embedding": "This API endpoint allows administrators and network administrators to update an existing SAML (Security Assertion Markup Language) configuration profile. It enables modification of specific configuration details such as profile name, vendor, OS type, series, and description. This is analogous to editing a configuration profile in a user interface and is crucial for managing SAML configurations and customizing the Self-Service Portal (SSP) experience.", "ontology_classification": {"features": ["advanced_resource_configuration_(aiops)", "platform_account_configuration", "user_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["SAML Configuration", "Update", "Authentication"]}}, {"path": "/ux/saml/config/{id}/", "method": "DELETE", "details": {"operationId": "ux_saml_config_destroy", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "description": "This endpoint allows for the permanent deletion of a specific SAML configuration profile. It targets a configuration based on its unique identifier (`id`) provided in the path. Deleting a configuration profile is an irreversible action, as indicated by the 'Delete' action in the user guide contexts which signifies the removal of a configuration.", "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the SAML configuration profile to be deleted. As per the user guide, configuration profiles contain details such as Profile Name, Vendor, OS Type, Series, and Description. While the endpoint specifically targets SAML configurations, the overarching concept of 'configuration profiles' appears throughout the user guides, often managed by network administrators for various IT operations. Users should exercise caution as there is no response body upon successful deletion, implying an immediate effect without confirmation."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrators", "IT Administrators", "System Integrators", "Security Administrators"], "primary_use_case": "To permanently remove an existing SAML authentication configuration profile from the system."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific SAML (Security Assertion Markup Language) configuration profile, identified by its unique ID. This action is typically performed by network administrators or IT personnel responsible for managing authentication and system configurations. The endpoint is part of a broader system for managing various configuration profiles, which can include details like profile name, vendor, and OS type. Upon successful deletion, there is no response body, indicating an immediate effect.", "semantic_keywords": ["Delete", "Configuration Profiles", "SAML Configuration", "Authentication"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/saml/config/enable-disable-saml-config/", "method": "POST", "details": {"operationId": "ux_saml_config_enable_disable_saml_config_create", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "description": "This endpoint allows for the enabling or disabling of a SAML (Security Assertion Markup Language) configuration profile. It toggles the operational status of an existing SAML setup, similar to how rule groups or other configuration profiles are activated or deactivated within the system, as indicated by context ranks 2 and 5. When a SAML configuration is enabled, it becomes functional for identity authentication. Conversely, disabling it makes it dormant, preventing it from performing authentication checks until re-enabled.", "summary": "", "additional_info": "This endpoint specifically manages the 'Status' of a SAML configuration, which functions as a toggle (ON/OFF or Active/Inactive) as suggested by context rank 5 for authorization profiles and context rank 7 for service templates. While the API specification does not detail request parameters or a request body, it is implicitly understood that a mechanism to identify the specific SAML configuration to be enabled or disabled would be required, likely through a request parameter or a specific field in the request body. Common use cases would involve activating a newly created SAML setup or temporarily deactivating one for maintenance or troubleshooting without fully deleting it. No response body is expected for this operation, indicating a simple status update."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "Security Administrator", "IT Administrator"], "primary_use_case": "To manage the operational status (enable/disable) of SAML (Security Assertion Markup Language) configuration profiles for identity authentication."}, "content_for_embedding": "This API endpoint allows for the enabling or disabling of a SAML (Security Assertion Markup Language) configuration profile. It toggles the operational status of an existing SAML setup, similar to how other configuration profiles are activated or deactivated. When a SAML configuration is enabled, it becomes functional for identity authentication; disabling it makes it dormant. This specifically manages the 'Status' of a SAML configuration, functioning as an ON/OFF or Active/Inactive toggle. It is used to activate a newly created SAML setup or temporarily deactivate one for maintenance or troubleshooting without deletion.", "semantic_keywords": ["SAML Configuration", "Authentication", "Status"], "ontology_classification": {"features": ["network_configuration_management_(nccm)", "zero_touch_provisioning_(ztp)"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/saml/config/get-saml/", "method": "GET", "details": {"operationId": "ux_saml_config_get_saml_retrieve", "tags": ["ux"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "description": "This endpoint, `/ux/saml/config/get-saml/`, is designed to retrieve configuration details related to SAML (Security Assertion Markup Language). While the exact details of what 'get-saml' retrieves aren't explicitly detailed in the provided contexts, the various contexts discuss 'Configuration Profiles' which include attributes like Profile Name, Vendor, OS Type, Series, and Description. It is highly probable that this endpoint is used to fetch existing SAML configuration profiles, which are crucial for Single Sign-On (SSO) authentication as per the Authentication Profile discussed in relevant contexts (Rank 2). These configurations likely define how users can access network devices using SSO based on specified settings.", "summary": "", "additional_info": "Based on the provided API specification, this is a GET request with no specific parameters or request body required. The response body is also explicitly stated as 'No response body', which is unusual for a 'get' operation. This might imply that the 'saml config' is either directly returned within the HTTP headers, or more likely, that the API details are incomplete and a response body containing the SAML configuration details (e.g., Profile Name, Vendor, OS Type, Series, Description, etc.) is expected but not documented. Developers should be aware of this discrepancy. The API is likely part of the user experience (UX) module, providing interaction with SAML configurations."}, "llm_generated": {"business_context": {"user_personas": ["Network Administrator", "IT Administrator"], "primary_use_case": "To retrieve existing SAML (Security Assertion Markup Language) configuration profiles, which are essential for Single Sign-On (SSO) authentication and define how users access network devices."}, "content_for_embedding": "This API endpoint, `/ux/saml/config/get-saml/`, is a GET request designed to retrieve configuration details related to SAML (Security Assertion Markup Language). It is highly probable that this endpoint fetches existing SAML configuration profiles, which are crucial for Single Sign-On (SSO) authentication. These profiles likely include attributes such as Profile Name, Vendor, OS Type, Series, and Description. Although the API specification states 'No response body', it is expected that the SAML configuration details would be returned, possibly implying incomplete documentation. This API is likely part of the user experience (UX) module and is used by network or IT administrators to manage and view SAML configurations.", "semantic_keywords": ["SAML Configuration", "Authentication Profiles", "Configuration Retrieval"], "ontology_classification": {"features": ["platform_account_configuration"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/", "method": "GET", "details": {"operationId": "ux_sd_change_change_list", "description": "This endpoint, part of the 'Change' module, is used to fetch a paginated list of all change requests within the current organization. Each change request listed on the 'Change' page includes details such as a summary card, description, status, subject, team, requester name, and available actions. Results are typically sorted by time, but custom sorting and order can be applied using the query parameters. This aligns with Infraon's definition of 'Change' as the addition, modification, or removal of any authorized, planned, or supported service or service component that could affect IT services.", "summary": "Gets a list of changes", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ChangeList"}}}}, "description": ""}}, "additional_info": "The 'Change' page supports two views: Panel View and Grid View. Change Management involves various business dimensions working together to analyze, plan, and implement change requests, aiming to minimize risks and disruptions. \n\nParameters:\n- `items_per_page` (required, integer): Specifies the number of change requests to return per page.\n- `page` (required, integer): Indicates the specific page number of the results to retrieve.\n- `reverse` (optional, boolean): If set to true, reverses the sorting order (e.g., descending if default is ascending).\n- `sort` (optional, string): Specifies the key by which the change requests should be sorted (e.g., 'time', 'status', 'requester_name'). By default, changes are sorted by time."}, "llm_generated": {"business_context": {"user_personas": ["IT Change Managers", "IT Administrators", "Technicians", "IT Staff"], "primary_use_case": "To retrieve a paginated and sortable list of all change requests within the organization, enabling users to monitor and manage IT changes effectively."}, "content_for_embedding": "This API endpoint retrieves a paginated list of all change requests in the current organization. Each change request includes details such as a summary card, description, status, subject, team, requester name, and available actions. Results can be sorted by time or custom keys, and the sorting order can be reversed. This aligns with the ITIL definition of Change Management, which involves the addition, modification, or removal of IT services or components. The \"Change\" page supports both Panel View and Grid View for displaying these requests, and parameters allow for specifying items per page, page number, sorting key, and sorting order.", "semantic_keywords": ["Change", "Pagination", "Details retrieval"], "ontology_classification": {"features": ["change_management.change_monitoring_and_tracking", "change_management.filtering_and_search", "change_management.multiple_view_options", "change_management.detailed_change_information_display", "change_management.lifecycle_states_and_statuses"], "primary_module": "change_management", "confidence_score": 1}}}, {"path": "/ux/sd/change/change/", "method": "POST", "details": {"operationId": "ux_sd_change_change_create", "description": "This endpoint is used to create and save a new change request for the current organization within the system. A 'Change' in this context aligns with ITIL definitions, signifying the addition, modification, or removal of any authorized, planned, or supported service or service component that could affect IT services or business operations. This includes changes to documentation, processes, applications, or IT infrastructure. The endpoint facilitates the initial logging of a new change record, which then enters the Change Management lifecycle aiming to minimize risks and disruptions while implementing these changes. The request body allows for comprehensive details of the change, such as summary, impact, urgency, priority, requester information, and specific configuration settings.", "summary": "Creates a new change ", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateRequestSample": {"value": {"summary": "VPN Issue", "description": "", "catalogue": "", "impact_service": "", "impact_service_name": "service1", "service_classification": "", "service_classification_name": "", "state": "Open", "state_id": 1, "status": "New", "status_id": 1, "urgency_id": 3, "urgency": "Low", "priority_id": 5, "priority": "Very Low", "impact": "Department", "impact_id": 3, "change_source": {"id": 1, "name": "Web"}, "resolution_type": "", "change_type": {"id": 1, "name": "Change", "prefix": "REQ"}, "requester_id": "", "requester_name": "Test req", "requester_email": "testreq@gmail.com", "requester_phone": "7778889999", "reporter_name": "", "reporter_email": "", "reporter_phone": "", "watcher": "", "hold_config": {}, "support_group": "", "assignee": "", "escalation": {}, "tag": [], "assets": [], "config": {}, "reference": {}, "template_info": {}, "closure_info": {}, "approval_config": {}, "custom_field": [{}], "attachment": {}, "api_link": {}, "lock_config": {}, "field_service_config": {}, "closure_note": ""}, "summary": "Create request Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "This endpoint exclusively handles the creation of new change requests. Changes are managed through a dedicated 'Change' module within the system. Once a change is logged, it follows multiple states and statuses throughout its lifecycle, starting with 'New' (State: Open, Status: New). The extensive request body provided in the example usage demonstrates the various fields that can be populated when creating a new change, including details like `summary`, `impact_service`, `change_source`, `change_type`, and contact information for the requester. While external parameters are not explicitly listed in the API specification for this endpoint, the request body serves as the primary mechanism for submitting all necessary data for the new change.", "parameters": [{"name": "summary", "in": "body", "description": "Inferred parameter: summary", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "catalogue", "in": "body", "description": "Inferred parameter: catalogue", "required": true, "schema": {"type": "string"}}, {"name": "impact_service", "in": "body", "description": "Inferred parameter: impact_service", "required": true, "schema": {"type": "string"}}, {"name": "impact_service_name", "in": "body", "description": "Inferred parameter: impact_service_name", "required": true, "schema": {"type": "string"}}, {"name": "service_classification", "in": "body", "description": "Inferred parameter: service_classification", "required": true, "schema": {"type": "string"}}, {"name": "service_classification_name", "in": "body", "description": "Inferred parameter: service_classification_name", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}, {"name": "state_id", "in": "body", "description": "Inferred parameter: state_id", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "body", "description": "Inferred parameter: status", "required": true, "schema": {"type": "string"}}, {"name": "status_id", "in": "body", "description": "Inferred parameter: status_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency_id", "in": "body", "description": "Inferred parameter: urgency_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency", "in": "body", "description": "Inferred parameter: urgency", "required": true, "schema": {"type": "string"}}, {"name": "priority_id", "in": "body", "description": "Inferred parameter: priority_id", "required": true, "schema": {"type": "string"}}, {"name": "priority", "in": "body", "description": "Inferred parameter: priority", "required": true, "schema": {"type": "string"}}, {"name": "impact", "in": "body", "description": "Inferred parameter: impact", "required": true, "schema": {"type": "string"}}, {"name": "impact_id", "in": "body", "description": "Inferred parameter: impact_id", "required": true, "schema": {"type": "string"}}, {"name": "change_source", "in": "body", "description": "Inferred parameter: change_source", "required": true, "schema": {"type": "string"}}, {"name": "resolution_type", "in": "body", "description": "Inferred parameter: resolution_type", "required": true, "schema": {"type": "string"}}, {"name": "change_type", "in": "body", "description": "Inferred parameter: change_type", "required": true, "schema": {"type": "string"}}, {"name": "requester_id", "in": "body", "description": "Inferred parameter: requester_id", "required": true, "schema": {"type": "string"}}, {"name": "requester_name", "in": "body", "description": "Inferred parameter: requester_name", "required": true, "schema": {"type": "string"}}, {"name": "requester_email", "in": "body", "description": "Inferred parameter: requester_email", "required": true, "schema": {"type": "string"}}, {"name": "requester_phone", "in": "body", "description": "Inferred parameter: requester_phone", "required": true, "schema": {"type": "string"}}, {"name": "reporter_name", "in": "body", "description": "Inferred parameter: reporter_name", "required": true, "schema": {"type": "string"}}, {"name": "reporter_email", "in": "body", "description": "Inferred parameter: reporter_email", "required": true, "schema": {"type": "string"}}, {"name": "reporter_phone", "in": "body", "description": "Inferred parameter: reporter_phone", "required": true, "schema": {"type": "string"}}, {"name": "watcher", "in": "body", "description": "Inferred parameter: watcher", "required": true, "schema": {"type": "string"}}, {"name": "hold_config", "in": "body", "description": "Inferred parameter: hold_config", "required": true, "schema": {"type": "string"}}, {"name": "support_group", "in": "body", "description": "Inferred parameter: support_group", "required": true, "schema": {"type": "string"}}, {"name": "assignee", "in": "body", "description": "Inferred parameter: assignee", "required": true, "schema": {"type": "string"}}, {"name": "escalation", "in": "body", "description": "Inferred parameter: escalation", "required": true, "schema": {"type": "string"}}, {"name": "tag", "in": "body", "description": "Inferred parameter: tag", "required": true, "schema": {"type": "string"}}, {"name": "assets", "in": "body", "description": "Inferred parameter: assets", "required": true, "schema": {"type": "string"}}, {"name": "config", "in": "body", "description": "Inferred parameter: config", "required": true, "schema": {"type": "string"}}, {"name": "reference", "in": "body", "description": "Inferred parameter: reference", "required": true, "schema": {"type": "string"}}, {"name": "template_info", "in": "body", "description": "Inferred parameter: template_info", "required": true, "schema": {"type": "string"}}, {"name": "closure_info", "in": "body", "description": "Inferred parameter: closure_info", "required": true, "schema": {"type": "string"}}, {"name": "approval_config", "in": "body", "description": "Inferred parameter: approval_config", "required": true, "schema": {"type": "string"}}, {"name": "custom_field", "in": "body", "description": "Inferred parameter: custom_field", "required": true, "schema": {"type": "string"}}, {"name": "attachment", "in": "body", "description": "Inferred parameter: attachment", "required": true, "schema": {"type": "string"}}, {"name": "api_link", "in": "body", "description": "Inferred parameter: api_link", "required": true, "schema": {"type": "string"}}, {"name": "lock_config", "in": "body", "description": "Inferred parameter: lock_config", "required": true, "schema": {"type": "string"}}, {"name": "field_service_config", "in": "body", "description": "Inferred parameter: field_service_config", "required": true, "schema": {"type": "string"}}, {"name": "closure_note", "in": "body", "description": "Inferred parameter: closure_note", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["IT Service Managers", "Change Managers", "IT Technicians", "System Administrators", "End-users (as requesters)"], "primary_use_case": "Managing and logging new ITIL-aligned change requests to minimize risks and disruptions within IT services and business operations."}, "content_for_embedding": "This API creates new ITIL-aligned change requests within the system, facilitating the initial logging of change records to manage additions, modifications, or removals of services or components. It supports comprehensive details like summary, impact, urgency, priority, and requester information, and is a core part of the Change Management lifecycle, aiming to minimize risks and disruptions. The endpoint is specifically for creating new change requests within the dedicated 'Change' module, starting them in an 'Open' state with 'New' status.", "ontology_classification": {"features": ["change_request_logging", "change_lifecycle_management", "change_request_creation_form", "attachment_management", "requester_management", "lifecycle_states_and_statuses", "support_for_change_types", "risk_analysis_and_management"], "primary_module": "change_management", "confidence_score": 1}, "semantic_keywords": ["Change Request", "Creation", "Change Management"]}}, {"path": "/ux/sd/change/change/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_retrieve", "description": "This endpoint retrieves the comprehensive details of a specific change request within the current organization's Change Management system. It allows developers to fetch information about a Change by its unique ID. In the context of Infraon, a 'Change' refers to the addition, modification, or removal of any authorized, planned, or supported service or service component that could affect IT services or business operations, including documentation, processes, applications, or IT infrastructure. This API supports the process of viewing change details, which are often summarized in a 'Summary Card' or comprehensive detail pages.", "summary": "Gets a request with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string representing the unique identifier of the change request. This ID is auto-generated when a change is created within the system. The 'Change' page in Infraon lists all change requests and often provides details like a summary card, change description, status, subject, team, and requester name. When viewing changes, details can include the Change ID, Requester, Change Manager, and Status, among other important information. This endpoint is crucial for analyzing, tracking, and working on specific change requests within the Change Management lifecycle."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "IT Change Manager", "IT Support Staff", "Administrator"], "primary_use_case": "To retrieve comprehensive details of a specific change request for tracking, analysis, and management within an IT Change Management system."}, "content_for_embedding": "This API retrieves comprehensive details of a specific change request by its unique ID within an organization's Change Management system. It provides information such as summary cards, descriptions, status, subject, team, requester name, and other critical details, enabling users to analyze, track, and manage individual change requests throughout their lifecycle.", "semantic_keywords": ["Change Management", "Details retrieval", "Change Request"], "ontology_classification": {"features": ["detailed_change_information_display", "change_monitoring_and_tracking", "multiple_view_options", "filtering_and_search", "change_lifecycle_management", "attachment_management", "change_history_tracking"], "primary_module": "change_management", "confidence_score": 1}}}, {"path": "/ux/sd/change/change/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_change_change_update", "description": "This endpoint is used to update the details of an existing 'Change' record within the system. In Infraon, a 'Change' is defined, according to ITIL, as \"the addition, modification, or removal of any authorized, planned, or supported service or service component that could affect services.\" This includes changes to documentation, processes, applications, or IT infrastructure. This PUT operation allows for the modification of specific change requests, which are central to the Change Management lifecycle aimed at minimizing risks and disruptions to IT services and business operations.", "summary": "Edits the change with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "additional_info": "The `id` path parameter must be a valid string representing the unique identifier of the 'Change' to be edited. The request body for this endpoint utilizes a flexible serializer for documents, supporting a wide range of primitive fields such as `StringField`, `URLField`, `IntField`, `BooleanField`, `DateTimeField`, and more. Compound fields like `ListField` and `DictField` are also supported, mapping to corresponding DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. Developers should note that `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested by this serializer. For quick edits of specific change attributes like manager, status, priority, urgency, severity, and assignee, users might also find the 'Quick Edit' functionality, mentioned in the user guide, relevant, although this API endpoint provides a 'Detailed Edit' capability."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "IT Administrator", "Change Manager"], "primary_use_case": "To update existing \"Change\" records within the system, facilitating the modification of specific change requests to minimize risks and disruptions to IT services and business operations."}, "content_for_embedding": "This API endpoint allows for the comprehensive update of an existing 'Change' record, identified by a unique ID. According to ITIL, a 'Change' encompasses any addition, modification, or removal of authorized services or components that could impact IT services. This PUT operation is crucial for the Change Management lifecycle, enabling detailed modifications to change requests to mitigate risks and service disruptions. The API supports various content types (JSON, form-urlencoded, multipart) and utilizes a flexible serializer for diverse data types, including strings, URLs, integers, booleans, dates, lists, and dictionaries. While it handles nested documents, it notes limited or untested support for file, image, and binary fields. This endpoint provides a 'Detailed Edit' capability, distinct from 'Quick Edit' functionalities, allowing for granular control over attributes such as manager, status, priority, urgency, severity, and assignee. The `id` path parameter is essential for targeting the specific change record.", "semantic_keywords": ["Update", "Change Management", "Detailed Edit"], "ontology_classification": {"features": ["change_lifecycle_management", "detailed_change_information_display", "quick_edit_functionality", "attachment_management", "change_history_tracking", "commenting_system", "customizable_statuses", "requester_management", "filtering_and_search"], "primary_module": "change_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/change/change/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_change_change_destroy", "description": "This endpoint is used to delete an existing 'Change' with the given ID for the current organization. According to ITIL definitions, a 'Change' is the addition, modification, or removal of any authorized, planned, or supported service or service component that could affect IT services, documentation, processes, applications, or IT infrastructure. In the Infraon system, the module that handles all such change requests is specifically called 'Change'. This operation is part of Change Management processes which aim to manage the lifecycle of a change request from start to closure, minimizing risks and disruptions. Deleting a Change is an irreversible action.", "summary": "Deletes the change with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` parameter in the path is a required string that uniquely identifies the change to be deleted. As highlighted in the Infinity User Guide, deleting a Change is an irreversible action, so users should exercise caution. There is no request body associated with this DELETE operation, and the API does not return a response body upon successful deletion, indicating a 'No Content' success status often (e.g., HTTP 204)."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Change Managers", "IT Support Staff"], "primary_use_case": "To remove or delete an existing change request within the ITIL Change Management framework, ensuring proper lifecycle management of changes."}, "content_for_embedding": "This API endpoint facilitates the deletion of an existing 'Change' record, identified by a unique ID, within the current organization. A 'Change' adheres to ITIL definitions, encompassing any addition, modification, or removal of IT services or components that could impact IT infrastructure. This operation is an integral part of Change Management processes, designed to manage the entire lifecycle of change requests from initiation to closure. It's crucial to note that deleting a Change is an irreversible action. The API requires a path parameter 'id' for the specific change to be deleted and returns an HTTP 204 'No Content' status upon successful deletion, with no request or response body.", "semantic_keywords": ["Delete", "Change", "Irreversible"], "ontology_classification": {"features": ["change_lifecycle_management"], "primary_module": "change_management", "confidence_score": 1}}}, {"path": "/ux/sd/change/change/add-attachment/", "method": "POST", "details": {"operationId": "ux_sd_change_change_add_attachment_create", "description": "This endpoint facilitates the addition of new attachments to a selected change request. It allows users to upload files, such as emails, screenshots, or any other relevant documents, directly associated with a specific change. This functionality is crucial for maintaining a comprehensive record of all supporting materials for a change request, similar to how all attachments of a current change request are shown in the UI.", "summary": "Add attachments for the selected change.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "additional_info": "To add an attachment, users can either drag and drop the document or click on the designated area to select files. It's recommended to choose a category for the attachment from available options (e.g., Default, Procurement, Service, Retirement Documents, ticket screenshot, team docs) and provide a description before uploading. While the `request_body_description` lists various primitive and compound fields, it also notes that `FileField`, `ImageField`, and `BinaryField` are 'Not well supported or untested', which implies users should primarily focus on document uploads that can be treated as generic files or rely on the `DocumentField` mapping, understanding its potential limitations."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Change Managers", "End-users submitting change requests"], "primary_use_case": "This API allows users to add various types of attachments (e.g., emails, screenshots, documents) to specific change requests, ensuring a comprehensive record of all supporting materials for audit and reference purposes."}, "content_for_embedding": "This endpoint facilitates the addition of new attachments to a selected change request. It allows users to upload files, such as emails, screenshots, or any other relevant documents, directly associated with a specific change. This functionality is crucial for maintaining a comprehensive record of all supporting materials for a change request. Users can drag and drop or select files, choose a category, and provide a description. It primarily supports generic file uploads or DocumentField mappings.", "semantic_keywords": ["Attachments", "Change Management", "Change Request"], "ontology_classification": {"features": ["attachment_management", "change_request_logging", "detailed_change_information_display"], "primary_module": "change_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/change/change/attachment/", "method": "GET", "details": {"operationId": "ux_sd_change_change_attachment_retrieve", "description": "This endpoint is used to retrieve all attachments associated with a specific change request. It provides a comprehensive view of all files and documents that have been added to the selected change request, which can include emails, screenshots, or other relevant documentation. This functionality is crucial for maintaining a complete record and understanding the context of a change.", "summary": "Gets attachments for the selected change.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "additional_info": "The attachments displayed by this endpoint are for the 'current change request', similar to how attachments are shown for other entities like 'requests' or 'problems'. These attachments can be various file types, such as emails or screenshots, which aid in detailing the change. While the API specification does not list any parameters, in a typical usage scenario for 'attachments of the selected change', the change request ID or a similar identifier would likely be implicitly handled or passed through the session context of the user interface."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Change Managers", "Auditors"], "primary_use_case": "To retrieve and view all attachments associated with a specific change request for comprehensive record-keeping and context understanding."}, "content_for_embedding": "This API retrieves all attachments for a specific change request, offering a comprehensive view of associated files like emails and screenshots. It's vital for maintaining a complete record and understanding the change context, similar to how attachments are managed for other entities like requests or problems. The endpoint specifically shows attachments for the current change request, aiding in detailing the change history.", "semantic_keywords": ["Attachments", "Change Request", "Retrieval"], "ontology_classification": {"features": ["attachment_management", "detailed_change_information_display", "change_history_tracking"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/change-data/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_change_data_retrieve", "description": "This API endpoint allows users to view or edit a specific change request. It retrieves detailed information about a particular change, identified by its unique ID. The API supports viewing comprehensive change details, which can include a summary card with a brief overview, Change ID, Requester, Change Manager, and Status. It also facilitates editing of the change request, ranging from 'Quick Edit' actions like status, priority, urgency, and severity, to 'Detailed Edit' for comprehensive modifications of the request.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that represents the unique identifier of the change request. This endpoint is crucial for managing the lifecycle of a change request, allowing users to analyze, plan, and implement changes effectively. While this endpoint primarily focuses on viewing and editing, related functionalities in the system include adding change requests, deleting them (an irreversible action), and copying details to create new requests. Viewing a change request is possible if a change request has been created for a specific Request. This endpoint is commonly used by technicians to manage a change arising from tickets, requests, or problems."}, "llm_generated": {"business_context": {"user_personas": ["technician", "change manager", "requester", "IT staff"], "primary_use_case": "To view and edit specific change requests, facilitating their management throughout their lifecycle."}, "content_for_embedding": "This API endpoint allows users to retrieve and modify detailed information about a specific change request, identified by its unique ID. It supports viewing comprehensive change details, including summary, ID, requester, manager, and status. It also enables both quick edits (status, priority, urgency, severity, impact service) and detailed, comprehensive modifications of the request. This endpoint is crucial for managing the lifecycle of a change request, allowing analysis, planning, and implementation of changes.", "ontology_classification": {"features": ["detailed_change_information_display", "quick_edit_functionality", "change_request_logging", "change_lifecycle_management", "change_history_tracking", "attachment_management"], "primary_module": "change_management", "confidence_score": 0.95}, "semantic_keywords": ["Change Request", "Details retrieval", "Edit"]}}, {"path": "/ux/sd/change/change/change-impact/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_change_impact_retrieve", "description": "This GET API endpoint allows users to retrieve details of a specific Change Request. It is designed to view the related change request when a change request has already been created for a Request or Problem. The response provides a comprehensive overview of the Change Request, including its auto-generated Change ID, the requester, the change manager, and the current status. This aligns with standard functionalities for viewing change details, such as those presented in Panel View or as a Summary Card, which provide important information needed to work on the change. Users can also view change details like Change Type (Standard, Major, Minor, Emergency), Impact Service, Priority, Risk, and the Change Implementer.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that represents the unique identifier of the Change Request to be viewed. This endpoint is distinct from edit actions for the Change Request, which might involve 'Quick Edit' or 'Detailed Edit' options for specific fields like status, priority, urgency, severity, impact service, and assignee. The ability to view a Change Request is generally visible only if a change request has been explicitly created for an associated Request or Problem. This action primarily supports the 'View Change' functionality within the system."}, "llm_generated": {"business_context": {"user_personas": ["Change Manager", "Requester", "Change Implementer", "IT Support Staff"], "primary_use_case": "To retrieve comprehensive details of a specific Change Request, including its ID, requester, manager, status, type, impact, priority, and risk. This supports viewing change information linked to associated Requests or Problems."}, "content_for_embedding": "This GET API endpoint retrieves the full details of an existing Change Request using its unique ID. It provides a comprehensive overview, including auto-generated Change ID, requester, change manager, current status, change type (Standard, Major, Minor, Emergency), Impact Service, Priority, Risk, and Change Implementer. This API is specifically for viewing change request information that has been created for an associated Request or Problem, supporting functionalities like Panel View or Summary Card displays within the system.", "ontology_classification": {"features": ["change_request_logging", "change_monitoring_and_tracking", "detailed_change_information_display", "support_for_change_types", "multiple_view_options", "view_linked_change_request"], "primary_module": "change_management", "confidence_score": 0.95}, "semantic_keywords": ["Change Request", "Details retrieval", "View"]}}, {"path": "/ux/sd/change/change/change-risk/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_change_risk_retrieve", "description": "This API endpoint allows users to retrieve and manage details of a specific Change Request by its unique identifier. It facilitates viewing change request details and enables various editing actions. This includes both quick edits (e.g., status, priority, urgency, severity, impact service, assignee) and detailed edits of the complete request. The endpoint supports viewing summary cards of changes as well as full detailed views, providing all important information to work on the change, such as Change ID, Requester, Change Type, Status, Priority, and Risk.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier of the Change Request to be viewed or edited. This endpoint is crucial for quick actions and detailed management within the change request lifecycle, as described in the Infinity User Guide. Common use cases include viewing the related change request for a ticket or problem, performing quick edits like updating status, or initiating a detailed edit process for comprehensive modifications of the change request. Note that 'Detailed Edit' is used to modify the full details, while 'Quick Edit' is for specific fields."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Service Desk Agents", "Change Managers", "ITIL Practitioners"], "primary_use_case": "To retrieve, view, and manage (including quick and detailed edits) specific Change Requests by their unique identifier, facilitating comprehensive oversight and modification within the change management lifecycle."}, "content_for_embedding": "This API endpoint, identified by a unique Change Request ID, allows for the retrieval and detailed viewing of a specific Change Request. It supports various management actions, including quick edits for fields like status, priority, urgency, severity, impact service, and assignee, as well as comprehensive detailed edits of the entire request. Users can access summary cards or full detailed views, providing all essential information such as Change ID, Requester, Change Type, Status, Priority, and Risk. It is crucial for quick actions and detailed management within the change request lifecycle, enabling users to view related change requests for tickets or problems, perform rapid updates, or initiate extensive modifications.", "semantic_keywords": ["Change Request", "Retrieval", "Edit"], "ontology_classification": {"features": ["detailed_change_information_display", "quick_edit_functionality", "change_lifecycle_management", "multiple_view_options", "change_monitoring_and_tracking", "filtering_and_search", "attachment_management", "change_history_tracking", "risk_analysis_and_management", "task_management_within_change"], "primary_module": "change_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/change/change/change-task/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_change_task_retrieve", "description": "This API endpoint allows users to view or edit a specific change task. It is crucial for managing the lifecycle of change requests within the system, enabling detailed modifications of change task attributes. Developers can use this endpoint to programmatically interact with individual change tasks, facilitating workflows like status updates, detailed edits, or retrieving comprehensive information about a change request.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter is mandatory and represents the unique identifier of the change task to be viewed or edited. While the endpoint description mentions 'viewed or edited', the GET method typically implies retrieval of information. For editing, a corresponding PUT or PATCH endpoint would usually be available. Common actions associated with viewing and editing change tasks include: Quick Edit (to update status, priority, urgency, severity, impact service, and assignee), Detailed Edit (for comprehensive changes), and viewing related change requests. This endpoint is particularly useful for scenarios where a change request needs to be reviewed or updated in detail."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Administrator", "Change Manager"], "primary_use_case": "To enable users and developers to view detailed information about specific change tasks, facilitating the management and review of change requests within the system."}, "content_for_embedding": "This API endpoint, `GET /ux/sd/change/change/change-task/{id}/`, is designed for retrieving detailed information about a specific change task identified by its unique `id`. It plays a crucial role in the lifecycle management of change requests, allowing users and developers to access comprehensive attributes of a change task. While primarily for viewing, the retrieved data supports subsequent actions like quick edits (status, priority, assignee) or detailed modifications via other endpoints. It enables programmatic interaction for workflows such as status updates, detailed reviews, and information retrieval for a particular change request.", "semantic_keywords": ["Change Task", "Details retrieval", "Change Management"], "ontology_classification": {"features": ["detailed_change_information_display", "task_management_within_change", "change_monitoring_and_tracking", "quick_edit_functionality", "change_lifecycle_management"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/delete_change/", "method": "POST", "details": {"operationId": "ux_sd_change_change_delete_change_create", "description": "This API endpoint facilitates the deletion of a Change Request. This action is irreversible, meaning once a Change Request is deleted, it cannot be recovered. The endpoint is part of the 'Quick Actions' suite, providing immediate functionality to manage change requests efficiently. The request body, if provided, should conform to the specified document serializer, which supports various primitive and compound field types for data handling.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The Request Body description specifies several primitive field types (e.g., `StringField`, `IntField`, `BooleanField`, `DateTimeField`) and compound fields (`ListField`, `DictField`). `ReferenceField` behaves like a ForeignKey, generating nested serializers based on depth, while `EmbeddedDocumentField` similarly generates nested serializers for non-zero depth. `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own fields. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested, and their behavior may be incorrect. Deletion of a Change Request is a critical action mentioned across multiple contexts as irreversible."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "IT Administrators", "Users with elevated privileges responsible for managing and maintaining change requests"], "primary_use_case": "To permanently remove or close change requests from the system."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of a Change Request, a critical action within the change management process. It is part of the 'Quick Actions' suite, enabling efficient management of change requests. The API expects a request body conforming to a specified serializer for various data types, including primitive and compound fields.", "ontology_classification": {"features": ["change_closure", "quick_action_bar"], "primary_module": "change_management", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Change Request", "Irreversible"]}}, {"path": "/ux/sd/change/change/history/", "method": "GET", "details": {"operationId": "ux_sd_change_change_history_retrieve", "description": "This endpoint retrieves the complete history for a specific change request. It provides an audit trail of activities logged against the change, including when it was created, modified, or updated. This feature allows users to visualize changes to the request over time, track who made what changes, and understand its lifecycle from creation to its current state.", "summary": "Gets history for the selected change.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "additional_info": "This endpoint shows the history of the change request created by the requester, including interactions, attachments, and the source of the change (e.g., email, web, phone). It captures activities similar to \"Recent Activities\" for assets, ensuring full visibility into the change's lifecycle for reporting and troubleshooting purposes."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "Auditors", "Support Staff", "IT Administrators", "Users involved in change management processes"], "primary_use_case": "To provide a comprehensive audit trail and historical view of all activities and modifications related to a specific change request, enabling users to track its lifecycle and understand who made what changes over time."}, "content_for_embedding": "This API endpoint retrieves the complete and detailed history for a specific change request. It serves as an audit trail, logging all activities such as creation, modification, and updates. Users can visualize the evolution of the change request, identify contributors, and understand its full lifecycle from initiation to its current state. The history includes interactions, attachments, and the source of the change (e.g., email, web, phone), providing full visibility for reporting and troubleshooting.", "semantic_keywords": ["Change History", "Audit Trail", "Change Request"], "ontology_classification": {"features": ["change_history_tracking", "change_lifecycle_management", "attachment_management", "change_source_tracking", "requester_interaction_history"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/impact-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_impact_list_retrieve", "description": "This API endpoint retrieves a detailed impact list for a specific change request. It provides comprehensive information related to the potential effects of a change, including the types of services that could be impacted. The impact list typically includes details such as the change's type (Standard, Major, Minor, Emergency), current status, affected service categories (Impact Service), priority, and risk level. This function is crucial for understanding the scope and potential consequences of a change within the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the change request for which the impact list is being retrieved. The information returned by this endpoint is integral to managing change requests, allowing users to assess urgency, severity, and the specific services that might be affected. This aligns with the 'Quick Edit' functionality described in the user guides, where 'impact service' can be quickly updated or reviewed. It helps in planning and executing changes effectively by highlighting key impact areas."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "Technicians", "IT Operations Staff"], "primary_use_case": "To retrieve detailed impact lists for specific change requests, enabling users to understand the scope, potential consequences, urgency, severity, and affected services for effective change management and planning."}, "content_for_embedding": "This API retrieves a detailed impact list for a specific change request, identified by its unique ID. It provides comprehensive information on the potential effects of a change, including its type, current status, affected service categories (Impact Service), priority, and risk level. This is crucial for understanding the scope and consequences of a change, assessing its urgency and severity, and identifying affected services, aiding in effective change request management and planning. The information returned is integral to managing change requests, aligning with functionalities like 'Quick Edit' for 'impact service'.", "semantic_keywords": ["Change Request", "Impact List", "Details retrieval"], "ontology_classification": {"features": ["detailed_change_information_display", "risk_analysis_and_management", "change_monitoring_and_tracking", "quick_edit_functionality"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/options/", "method": "GET", "details": {"operationId": "ux_sd_change_change_options_retrieve", "description": "This API endpoint provides options related to a specific change request, allowing users to view or edit the request's details within the 'Change' module. It supports actions such as 'View Change' if a change request is already linked to a 'Request', enabling users to access the related change request. Additionally, it facilitates 'Edit' actions for comprehensive modification of Request details.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on the 'Change' module within the system, which allows users (primarily technicians) to add and manage change requests. The 'View Change' option is available only if a change request has already been created for a given 'Request'. For detailed editing actions, users might be redirected to a 'Detailed Edit' section as indicated by the user guide context. The endpoint's utility is primarily in navigating and modifying change requests that might arise from tickets, requests, or problems within the system."}, "llm_generated": {"business_context": {"user_personas": ["technician", "user"], "primary_use_case": "To provide options for viewing and editing change requests, enabling efficient management and navigation of change-related tasks within the system."}, "content_for_embedding": "This API endpoint retrieves options for viewing and editing change requests within the 'Change' module. It enables users, primarily technicians, to access details, view history, and modify existing change requests that may originate from tickets, requests, or problems. This includes options like 'View Change' for linked requests and 'Edit' for comprehensive modification, facilitating the management and navigation of change requests.", "ontology_classification": {"features": ["change_lifecycle_management", "detailed_change_information_display", "quick_edit_functionality", "change_history_tracking", "multiple_view_options", "filtering_and_search", "change_monitoring_and_tracking"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Change Management", "Change Request", "Retrieval"]}}, {"path": "/ux/sd/change/change/process-rich-text/", "method": "GET", "details": {"operationId": "ux_sd_change_change_process_rich_text_retrieve", "description": "This endpoint is designed to retrieve rich text data, specifically in the context of change requests. Based on relevant documentation, this rich text data likely pertains to descriptions, summaries, or other detailed textual content associated with a change request. For instance, when a request is created via email, the message body becomes the description, which is an example of rich text data this endpoint may handle. It's crucial for displaying comprehensive information related to various aspects of a change request, such as the history of the request, or how changes are initiated from different sources like email, web, or phone.", "summary": "Get rich text data", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "additional_info": "While the API specification shows no specific parameters, the context suggests this endpoint could be utilized to fetch the detailed description of a change request (like the message body from an email-created request) or other textual elements that are part of the 'Change details'. This rich text data is vital for functionalities such as viewing detailed information about a change, understanding its source, and in various edit operations where detailed descriptions are managed (e.g., 'Detailed Edit' actions mentioned in the context). The rich text often forms the 'description' field of a request."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Change Managers", "Administrators"], "primary_use_case": "This API retrieves rich text data associated with change requests, such as descriptions, summaries, or other detailed textual content. It supports the display of comprehensive information related to change requests and facilitates various editing operations where detailed descriptions are managed."}, "content_for_embedding": "This API endpoint retrieves rich text data pertinent to change requests. This includes descriptions, summaries, and other detailed textual content, which may originate from various sources like email, web, or phone. The retrieved rich text is crucial for displaying comprehensive information about a change request, its history, and for enabling detailed editing operations within the change management process.", "semantic_keywords": ["Change Request", "Rich Text", "Retrieval"], "ontology_classification": {"features": ["detailed_change_information_display", "change_history_tracking", "change_source_tracking", "commenting_system"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/requester_search/", "method": "GET", "details": {"operationId": "ux_sd_change_change_requester_search_retrieve", "description": "This API endpoint facilitates the search for and selection of existing requesters within the system, crucial for initiating new change requests or adding a new requester to a change. It allows users to view or edit details of a requester associated with a change request, streamlining the process of assigning or managing requesters for a change.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is typically utilized in the workflow of creating or modifying change requests. If a requester has already been added, their name can be selected via a search option. Otherwise, users can add a new requester through a dedicated 'Add a New Requester' action, which then allows selection from the subsequent page. This functionality is a prerequisite for adding a change, as the requester is fundamental to the change request process. While the endpoint summary states 'Request to be viewed or edited', the context strongly indicates its primary role in handling 'requesters' for 'changes'."}, "llm_generated": {"business_context": {"user_personas": ["Users initiating change requests", "Users modifying change requests", "Administrators managing requesters", "IT support staff"], "primary_use_case": "To search for, select, add, view, and manage requesters associated with change requests within the system."}, "content_for_embedding": "This API endpoint is designed to search for and select existing requesters, or to add new requesters, specifically within the context of change requests. It enables users to view and edit requester details, streamlining the assignment and management of requesters for changes. This functionality is a prerequisite for initiating new change requests, as the requester is a fundamental part of the change request process. It supports searching for existing requesters and adding new ones, including bulk import and delete operations for requesters. Requesters are typically users requesting a service, and their details can be managed, including their active status and user ID.", "ontology_classification": {"features": ["requester_management", "filtering_and_search"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Requester Management", "Change Request", "Search"]}}, {"path": "/ux/sd/change/change/risk-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_risk_list_retrieve", "description": "This API endpoint allows users to view or edit detailed information about a specific change request. It retrieves comprehensive data for a particular change, identified by its unique ID. This includes details such as the change's status, priority, urgency, severity, impact service, and assignee. Users can also access a summary card view of the change, which provides essential information needed to work on the change, including the Change ID and Requester. The endpoint supports detailed editing of the change request, going beyond quick edits.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier for the specific change request to be viewed or edited. This endpoint provides access to the 'Detailed Edit' functionality for change requests. While the endpoint is primarily for viewing/editing a 'Request', the context clarifies it specifically refers to 'change requests' and their associated details like risk levels, types, and various plans (rollout/rollback). For example, it can display the current status, impact service, priority, and risk level of the change. This endpoint is crucial for managing the lifecycle of change requests within the system."}, "llm_generated": {"business_context": {"user_personas": ["IT Administrators", "Change Managers", "IT Support Staff", "Users needing to view or edit change requests"], "primary_use_case": "This API allows users to view and perform detailed edits on specific change requests. It provides comprehensive information about a change, including its status, priority, urgency, severity, impact service, assignee, and associated risk levels, which is essential for managing the full lifecycle of change requests within the system."}, "content_for_embedding": "This API endpoint is designed for retrieving and updating detailed information about a specific change request. Users can access comprehensive data such as the change's status, priority, urgency, severity, impact service, assignee, and risk levels. It supports in-depth editing capabilities for change requests, distinguishing itself from quick edit functionalities. The endpoint is identified by a unique change ID and is crucial for the complete lifecycle management of change requests, including viewing summary cards and associated details like tasks and history.", "ontology_classification": {"features": ["change_lifecycle_management", "risk_analysis_and_management", "detailed_change_information_display", "change_monitoring_and_tracking", "lifecycle_states_and_statuses", "change_ownership_assignment", "multiple_view_options", "change_history_tracking", "attachment_management", "filtering_and_search", "requester_management", "task_management_within_change"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Change Management", "Detailed Edit", "Change Request"]}}, {"path": "/ux/sd/change/change/risk_assessment_completion/", "method": "GET", "details": {"operationId": "ux_sd_change_change_risk_assessment_completion_retrieve", "description": "This API endpoint allows users to view or edit a Change Request, specifically in relation to the completion of a risk assessment. This endpoint likely facilitates actions similar to 'Quick Edit' for updating basic attributes like status, priority, or assignee, or 'Detailed Edit' to comprehensively modify the Change Request details. It is part of the functionality to manage change requests within the system, potentially allowing users to view the related change request once a risk assessment has been completed.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "Based on the context, this endpoint is highly relevant to the 'View Change' functionality, which becomes visible if a change request has been created for a Request. While the current specification indicates no parameters or request body, typical operations for viewing or editing a 'Request' or 'Change Request' involve identifying the specific request through an ID. The context also hints at quick actions for editing status, priority, urgency, severity, impact service, and assignee for `Request` objects, which might apply to `Change Request` objects as well. Users should refer to the 'Detailed Edit' button for comprehensive modifications. This endpoint is crucial for managing the lifecycle of a change request, especially after a risk assessment has reached completion, enabling subsequent modifications or reviews."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "IT Administrators", "Users involved in Change Management processes", "IT Support Staff"], "primary_use_case": "To manage and track the lifecycle of Change Requests, specifically allowing users to view or edit change details after a risk assessment has been completed. This includes quick edits for status and priority, and detailed modifications."}, "content_for_embedding": "This API endpoint is designed for managing Change Requests within the system, particularly after a risk assessment has been completed. It enables users to view comprehensive details of a Change Request and perform quick edits on attributes like status, priority, urgency, severity, impact service, and assignee. It also supports detailed modifications to the Change Request. This functionality is crucial for tracking and progressing Change Requests through their lifecycle, especially after the risk assessment phase, and is closely related to the 'View Change' functionality that becomes available once a change request is created for a Request or Problem.", "ontology_classification": {"features": ["change_lifecycle_management", "risk_analysis_and_management", "detailed_change_information_display", "quick_edit_functionality", "change_monitoring_and_tracking", "multiple_view_options"], "primary_module": "change_management", "confidence_score": 1}, "semantic_keywords": ["Change Management", "Change Request", "Risk Assessment"]}}, {"path": "/ux/sd/change/change/risk_assessment_completion/", "method": "POST", "details": {"operationId": "ux_sd_change_change_risk_assessment_completion_create", "description": "This API endpoint facilitates the completion of a risk assessment within the change request process. It is part of the 'Quick Edit' and 'Detailed Edit' functionalities, allowing users to update essential details of a 'Request', alongside other critical fields like status, priority, urgency, and assignee. This endpoint supports viewing and editing capabilities for existing requests. The completion of a risk assessment is a crucial step before a change request can proceed or be approved.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to accommodate various data types, supporting common primitive fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `UUIDField`, among others. Complex data structures like `ListField` and `DictField` are also supported, mapping to corresponding DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers when the serializer depth is greater than 0. Be aware that fields such as `FileField`, `ImageField`, and `BinaryField` are not well supported or untested. For changing the status of a request to 'Resolved' or 'Closed' or adding a change request, specific conditions on the request's current status ('Open', 'In Progress', 'On Hold') must be met."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "IT Administrators", "Technicians"], "primary_use_case": "Facilitates the completion and update of risk assessments within the change request process, enabling progression and approval of changes."}, "content_for_embedding": "This API endpoint is designed to complete and update risk assessments for change requests. It integrates with both \"Quick Edit\" and \"Detailed Edit\" functionalities, allowing users to modify critical request details such as status, priority, urgency, and assignee. The successful completion of a risk assessment is a mandatory step for a change request to proceed or be approved, making this API crucial for the change management lifecycle.", "ontology_classification": {"features": ["risk_analysis_and_management", "quick_edit_functionality", "change_lifecycle_management", "approval_workflow"], "primary_module": "change_management", "confidence_score": 0.95}, "semantic_keywords": ["Risk Assessment", "Change Management", "Change Request"]}}, {"path": "/ux/sd/change/change/save-change-impact/", "method": "POST", "details": {"operationId": "ux_sd_change_change_save_change_impact_create", "description": "This API endpoint facilitates the viewing, editing, and saving of changes related to a 'Request' or 'Change Request' within the system. It is designed to handle detailed updates and view operations for requests, including 'Quick Edit' actions for attributes like status, priority, urgency, and assignee. The endpoint processes various document types, as defined by the serializer's recognized primitive and compound fields, and plays a crucial role in the lifecycle of Change Management where requests are often linked to changes. This includes scenarios where a request resolution might be implemented through a change, or when viewing an already created change request related to a problem or a general request.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that the API is built to handle a wide range of data types, mapping to different document serializer fields. Developers should pay close attention to the definition of these fields when constructing request bodies. Specifically, `StringField`, `IntField`, `BooleanField`, and `DateTimeField` are fully supported. Compound fields like `ListField` and `DictField` are mapped to DRF fields, enabling nested data structures. `ReferenceField` and `EmbeddedDocumentField` also support nested serialization based on depth; however, a note in the specification indicates that `EmbeddedDocumentField` handling for zero depth might be incorrect and could be subject to future fixes. Fields such as `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested,' suggesting potential issues or limitations. The API is central to operations described in the user guides, such as performing 'Detailed Edit' on requests or changes, adding new change requests to existing problems or tickets, and viewing associated change requests. The endpoint implicitly supports the 'save' aspect of changes as well, allowing updates to be persisted."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "IT Support Staff", "Administrators", "Users involved in Change Management processes"], "primary_use_case": "To manage (view, edit, and save) changes and change requests, including quick and detailed updates of attributes like status, priority, and assignee. This API is crucial for facilitating the linking of requests to changes and plays a central role in the Change Management lifecycle."}, "content_for_embedding": "This API endpoint is designed for comprehensive management of 'Change' and 'Change Request' entities within the system. It allows users to view, perform detailed edits, and save modifications to existing change requests or requests that are linked to changes. This includes updating various attributes such as status, priority, urgency, and assignee, through both quick and detailed edit functionalities. The API supports diverse data types for request bodies and is crucial for the Change Management lifecycle, enabling the addition of new change requests to existing problems or tickets, and viewing associated change requests. It facilitates the persistence of updates and plays a key role in workflows where request resolutions are implemented via changes.", "ontology_classification": {"features": ["change_request_logging", "change_lifecycle_management", "detailed_change_information_display", "quick_edit_functionality", "customizable_statuses", "multiple_view_options", "quick_action_bar", "change_history_tracking", "filtering_and_search", "change_implementation_coordination"], "primary_module": "change_management", "confidence_score": 0.95}, "semantic_keywords": ["Change Request", "Update", "Edit"]}}, {"path": "/ux/sd/change/change/save-change-risk/", "method": "POST", "details": {"operationId": "ux_sd_change_change_save_change_risk_create", "description": "This API endpoint facilitates the saving of changes related to a 'Request' or 'Change Request', specifically focusing on updating or setting the risk level. It is integral to the Change Management process, allowing technicians or requesters to modify aspects of a change request, including its associated risk, to minimize disruptions and manage the lifecycle of the change. This action is crucial after an edit or a detailed view of a Request or Change, and it adheres to the change and request workflows outlined in the user guides.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint operates on 'Request' or 'Change Request' entities. While the original description generally mentions 'viewing or editing Request', context suggests a strong link to 'saving changes' especially related to 'change risk'. The input for this endpoint will likely correspond to various primitive and compound field types as detailed in the `request_body_description`, enabling the system to capture information like string, integer, boolean, or complex object structures (e.g., lists and dictionaries) for the change risk data. It is expected that a 'Save' action would typically follow a 'Detailed Edit' process, as indicated in the user guide contexts (e.g., Context Rank 1, 5). The specific 'risk level' selection is mentioned in Context Rank 7, which would be part of the data saved. The process should adhere to the pre-configured prerequisites for adding a change, such as defining the 'Requester'."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Requester"], "primary_use_case": "To update or set the risk level of a 'Request' or 'Change Request' within the Change Management process, ensuring proper risk assessment and management throughout the change lifecycle."}, "content_for_embedding": "This API endpoint is used to save or update the risk level associated with an existing 'Request' or 'Change Request'. It is a POST operation integral to the Change Management process, allowing users such as technicians or requesters to modify and persist the risk assessment of a change. This action typically follows a detailed editing process of a change request, contributing to the overall management and minimization of disruptions during the change lifecycle.", "semantic_keywords": ["Change Management", "Risk Assessment", "Update"], "ontology_classification": {"features": ["risk_analysis_and_management", "change_request_logging", "change_lifecycle_management", "quick_edit_functionality"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/save-change-risk-assessment/", "method": "POST", "details": {"operationId": "ux_sd_change_change_save_change_risk_assessment_create", "description": "This API endpoint facilitates the saving of a Change Risk Assessment. It is part of the change management process, specifically focused on saving the assessment of risk associated with a change request. This action is critical for managing and documenting the risk level of changes within the system. The endpoint supports detailed field types including various primitive types like StringField, IntField, BooleanField, and DateTimeField, as well as complex types like ListField and DictField which are mapped to DRF fields. It also handles ReferenceField and EmbeddedDocumentField for nested data structures. The primary purpose is to persist the evaluated risk level after assessment.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to accommodate a serializer for documents, supporting a wide range of data types for the risk assessment details. While most primitive and compound fields are well-supported, developers should note that FileField, ImageField, and BinaryField are either not well supported or untested. Any other unlisted fields will be mapped to `DocumentField` and may not behave as expected. Contexts indicate related actions involve viewing, editing, and associating change requests with specific items like requests or problems, and saving the final 'satisfactory' changes. The API likely saves the 'Risk' level selected from a list, as highlighted in related documentation."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "IT Operations", "Administrators"], "primary_use_case": "To manage and document the risk level of change requests within the system by saving their risk assessments."}, "content_for_embedding": "This API endpoint is used to save the Change Risk Assessment, which is a crucial part of the change management process. It allows for persisting the evaluated risk level associated with a change request, supporting various data types for detailed risk assessment.", "ontology_classification": {"features": ["risk_analysis_and_management", "change_request_logging", "change_lifecycle_management", "change_monitoring_and_tracking"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Change Management", "Risk Assessment", "Save"]}}, {"path": "/ux/sd/change/change/save-change-task/", "method": "POST", "details": {"operationId": "ux_sd_change_change_save_change_task_create", "description": "This API endpoint, `/ux/sd/change/change/save-change-task/`, is designed to manage change requests within the system. It enables users to save modifications made to a change task, fundamentally allowing for the viewing and editing of change-related 'Requests'. This includes functionalities for both quick edits (e.g., status, priority, urgency, severity, impact, assignee) and detailed edits of the Change or Request details. The endpoint is integral for workflow processes where changes are initiated from tickets, requests, or problems, and for managing their associated tasks.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that the request body for this endpoint will likely involve a serializer for 'Documents', supporting a wide range of primitive and compound field types (StringField, IntField, DateTimeField, ListField, DictField, ReferenceField, EmbeddedDocumentField, etc.). While many fields are supported, the documentation notes that `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested. The ability to perform quick edits (status, priority, urgency, severity, impact service, assignee) suggests that the request body will contain fields corresponding to these attributes. Detailed edits imply a more comprehensive set of fields related to the entire change request. This API is likely used in scenarios where a change request's resolution may be implemented through a change, or when viewing an existing change request linked to an initial Request. It plays a role in task management within the application, particularly for 'Task' related to 'Change'."}, "llm_generated": {"business_context": {"user_personas": ["Change Manager", "Technician", "IT Administrator"], "primary_use_case": "To manage and save modifications to change tasks and change requests, including quick and detailed edits of various attributes like status, priority, and assignee. It supports workflow processes originating from tickets, requests, or problems."}, "content_for_embedding": "This API endpoint is designed to save modifications to existing change tasks and change requests within the system. It facilitates both quick edits of key attributes such as status, priority, urgency, severity, impact, and assignee, as well as comprehensive detailed edits of the overall Change or Request information. The endpoint is integral for managing workflow processes where changes are initiated from tickets, requests, or problems, and for overseeing their associated tasks. It allows for updating various change details including Change ID, Subject, Reason for Change, Change Type, Status, Impact Service, Priority, Risk, Requester, Change Manager, and Change Implementer. The API also supports attachment management and the tracking of communication history and notes related to the change.", "semantic_keywords": ["Change Management", "Change Request", "Edit"], "ontology_classification": {"features": ["change_request_logging", "change_lifecycle_management", "task_management_within_change", "quick_edit_functionality", "detailed_change_information_display", "lifecycle_states_and_statuses", "change_ownership_assignment", "attachment_management", "change_history_tracking", "risk_analysis_and_management", "requester_management", "support_for_change_types"], "primary_module": "change_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/change/change/save-rich-text/", "method": "POST", "details": {"operationId": "ux_sd_change_change_save_rich_text_create", "description": "This endpoint is designed to save rich text data within the system, specifically associated with changes or requests. It allows users to persist formatted text content after making modifications, ensuring that satisfactory changes are saved. This is crucial for functionalities such as saving detailed descriptions of change requests, comments, or notes, which might involve rich text formatting. The system handles various field types for data serialization, as detailed in the request body description, ensuring that complex document structures can be saved.", "summary": "Save rich text data", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "additional_info": "The `request_body_description` details the comprehensive serializer for documents, supporting a wide range of primitive and compound field types (e.g., `StringField`, `IntField`, `DateTimeField`, `ListField`, `DictField`). It also handles relationships like `ReferenceField` and `EmbeddedDocumentField`. Note the specific handling of `ReferenceField` (like `ForeignKey` in DRF) and `EmbeddedDocumentField` (with nested serializer autogeneration for non-zero depth). Be aware that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. For scenarios where rich text content forms part of a change request's description or comments (as suggested by the context of 'change request' and 'comments'), this endpoint is the mechanism to save that formatted data. The action aligns with user interface elements like a 'Save' button, indicating the completion of content modification."}, "llm_generated": {"business_context": {"user_personas": ["User", "Administrator", "Agent"], "primary_use_case": "To save and persist rich text data, such as detailed descriptions, comments, or notes, associated with change requests and other system records."}, "content_for_embedding": "This API endpoint allows users to save and persist rich text content, including detailed descriptions, comments, and notes, primarily associated with change requests. It supports various data serialization field types for complex document structures, enabling the saving of formatted text modifications within the system.", "semantic_keywords": ["Save", "Rich Text", "Change Management"], "ontology_classification": {"features": ["change_request_logging", "commenting_system", "attachment_management"], "primary_module": "change_management", "confidence_score": 1}}}, {"path": "/ux/sd/change/change/task-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_change_task_list_retrieve", "description": "This API endpoint allows users to retrieve the detailed task list associated with a specific Change Request. It supports both viewing and potentially editing aspects of the Change Request, aligning with functionalities like 'Quick Edit' and 'Detailed Edit' mentioned in the user guides. The 'id' path parameter specifically identifies the Change Request for which the task list is being accessed.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The 'id' path parameter is required and uniquely identifies the Change Request. While the primary function is to view the task list, the original description mentions that the endpoint allows the Request to be 'viewed or edited'. This suggests potential for future expansion to include detailed editing capabilities, similar to the 'Edit' action described in the user guides for 'Change' and 'Request' entities. The user guides highlight different editing capabilities such as 'Quick Edit' for status, priority, urgency, severity, impact, and assignee, and a more comprehensive 'Detailed Edit' for full request details. This endpoint likely serves as the gateway to these detailed views and potential edit workflows for the associated tasks within a Change Request."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "IT Support Staff", "Administrators"], "primary_use_case": "To retrieve and potentially manage the detailed task list associated with a specific Change Request."}, "content_for_embedding": "This API endpoint allows users to retrieve the detailed task list for a specific Change Request, identified by its unique ID. It provides functionalities for viewing and potentially editing these tasks, aligning with quick and detailed edit capabilities for Change Requests. This serves as a crucial gateway for managing the individual tasks that comprise a larger Change Request.", "semantic_keywords": ["Change Request", "Task Management", "Detailed View"], "ontology_classification": {"features": ["task_management_within_change", "detailed_change_information_display", "quick_edit_functionality"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/change/workflow_options_map/", "method": "POST", "details": {"operationId": "ux_sd_change_change_workflow_options_map_create", "description": "This API endpoint allows for viewing and editing of Request details, specifically related to the workflow options map. It facilitates 'Quick Edit' actions such as updating status, priority, urgency, severity, impact service, and assignee for a Request. Additionally, it supports 'Detailed Edit' to modify comprehensive Request details. This aligns with the 'View Change' and 'Edit' functionalities described in the user guide, where a specific change request (linked to a Request) can be viewed, and Requests can be edited in detail. The endpoint specifically handles the marshalling and unmarshalling of various data types defined in the request body description, supporting primitive fields like StringField, IntField, BooleanField, and DateTimeField, as well as compound fields like ListField and DictField, crucial for managing the complex structure of Request workflows.", "tags": ["Change"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ChangeList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "The Request Body for this endpoint expects various primitive and compound field types for document serialization. Primitive types like StringField, URLField, EmailField, IntField, LongField, FloatField, DecimalField, BooleanField, DateTimeField, ComplexDateTimeField, ObjectIdField, SequenceField, UUIDField, GeoPointField, GeoJsonBaseField, and DateField are recognized. Compound fields such as ListField and DictField are mapped to corresponding DRF fields with nested specifications. ReferenceField is handled similarly to 'ForeignKey' in DRF, generating nested serializers for depths greater than 0, or otherwise providing the ID as a string. EmbeddedDocumentField also autogenerates a nested serializer for non-zero depth, but this behavior is noted as potentially incorrect and needing a fix. Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are handled independently. Fields like FileField, ImageField, and BinaryField are not well supported or untested. Any other fields will be mapped to 'DocumentField', which may lead to incorrect behavior. This endpoint is central to managing Request workflows and changes, particularly in the context of helpdesk/ITSM operations, as detailed in the user guide contexts."}, "llm_generated": {"business_context": {"user_personas": ["Helpdesk agents", "IT support staff", "Administrators", "Change managers"], "primary_use_case": "To manage and update request details and workflows within the context of change management, facilitating quick and detailed edits of request attributes."}, "content_for_embedding": "This API endpoint is designed for managing Request details and workflows within the context of change management. It enables users to perform quick and detailed edits on Request attributes such as status, priority, urgency, severity, impact service, and assignee. The API is crucial for helpdesk and IT Service Management (ITSM) operations, facilitating the efficient management of Request workflows and their associated change requests.", "ontology_classification": {"features": ["change_lifecycle_management", "lifecycle_states_and_statuses", "quick_edit_functionality", "detailed_change_information_display", "request_editing_&_quick_actions", "request_lifecycle_management", "request_ownership_&_assignment"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Request Update", "Change Management", "Workflow Automation"]}}, {"path": "/ux/sd/change/change/workflow_status/", "method": "GET", "details": {"operationId": "ux_sd_change_change_workflow_status_retrieve", "description": "This API endpoint is designed to facilitate the viewing and editing of workflow statuses for Change Requests. It supports 'Quick Edit' functionalities, allowing users to modify critical request attributes such as status, priority, urgency, severity, and assignee without needing a 'Detailed Edit'. It also allows for the 'Status' of a Change Request to be updated, which is crucial for managing the lifecycle of a change. The endpoint plays a central role in managing Change Requests by enabling users to perform swift updates to their workflow status.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChangeList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on the workflow status of 'Change Requests'. While the initial description mentions 'Request', the highly relevant contexts indicate a strong association with 'Change Requests' and 'Change Manager' workflows. The quick edit functionality supports changing status, priority, urgency, severity, impact service, and assignee. Users can change the status from this endpoint. Importantly, the default status upon creation of a ticket/change/problem/request is 'Open', and statuses can be arranged in a hierarchy, typically ending with 'Closed' or 'Resolved'."}, "llm_generated": {"business_context": {"user_personas": ["Change Manager", "Technician", "User managing Change Requests"], "primary_use_case": "To enable viewing and quick editing of workflow statuses and key attributes (status, priority, urgency, severity, and assignee) for Change Requests, facilitating efficient management of the change lifecycle."}, "content_for_embedding": "This API endpoint facilitates the viewing and quick editing of workflow statuses for Change Requests. It supports \"Quick Edit\" functionalities, allowing users to modify critical request attributes such as status, priority, urgency, severity, and assignee without requiring a \"Detailed Edit\". The endpoint is central to managing Change Requests by enabling swift updates to their workflow status, which is crucial for managing the lifecycle of a change. It specifically focuses on Change Requests and Change Manager workflows, and users can change the status from this endpoint.", "ontology_classification": {"features": ["lifecycle_states_and_statuses", "quick_edit_functionality", "change_ownership_assignment", "change_monitoring_and_tracking", "change_lifecycle_management"], "primary_module": "change_management", "confidence_score": 0.95}, "semantic_keywords": ["Change Request", "Status", "Quick Edit"]}}, {"path": "/ux/sd/change/conversation/", "method": "GET", "details": {"operationId": "ux_sd_change_conversation_retrieve", "description": "This API endpoint provides a comprehensive interface for viewing and editing details related to a 'Change' request, specifically within the context of a conversation or communication history. It supports 'Quick Edit' actions for common attributes like status, priority, urgency, and assignee, and also allows for detailed editing of the full request. Users can also view and manage communication history, including replying to and forwarding emails, adding notes, and reviewing work logs related to the change.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "Commonly, this endpoint may be used to access the 'Communication' tab of a Change record, enabling users to interact with communication content, such as rephrasing via AI. While the primary focus is on editing and viewing, actions like deleting and copying a change request are also mentioned in the broader Quick Actions context, which might be related to other endpoints in the system but inform the overall functionality associated with managing a change. Note that the API specification currently indicates 'No response body' and no parameters, suggesting this endpoint likely governs the UI behavior for interactions rather than direct data manipulation via typical REST API request/response cycles."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Change Managers", "Administrators", "End Users involved in Change Requests"], "primary_use_case": "This API endpoint provides a comprehensive interface for viewing and editing details related to a 'Change' request, specifically within the context of a conversation or communication history. It enables users to perform quick edits on common attributes, detailed edits of the full request, and manage communication history including replying to/forwarding emails, adding notes, and reviewing work logs. It also supports AI-powered rephrasing of communication content."}, "content_for_embedding": "This API endpoint is designed for managing 'Change' requests, focusing on their conversation and communication history. It allows for viewing and editing change details, including quick edits of attributes like status, priority, urgency, and assignee, as well as detailed editing of the entire request. Users can interact with the communication history by replying to/forwarding emails, adding notes, and reviewing work logs. A key feature is the ability to rephrase communication content using AI.", "semantic_keywords": ["Change Request", "Communication", "AI Bot Assistance"], "ontology_classification": {"features": ["change_management.detailed_change_information_display", "change_management.quick_edit_functionality", "change_management.change_communication", "change_management.commenting_system", "change_management.change_history_tracking", "workspace.communication_tab", "workspace.ai-powered_communication_enhancement"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/conversation/", "method": "POST", "details": {"operationId": "ux_sd_change_conversation_create", "description": "This API endpoint facilitates detailed management of 'Change' requests within the system, enabling users to perform various operations related to a change request's conversation and communication history. While the original description suggested it's for 'Incident' viewing and editing, the strong contextual evidence indicates its primary purpose is for managing 'Change' requests. It allows for viewing, editing, and potentially interacting with the discussion threads and communication logs associated with a specific change request. Key actions derived from contexts include adding notes, analyzing, and viewing work logs related to the change.", "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "The available contexts heavily suggest that this endpoint is not for general 'Incident' management as initially stated in the description, but rather specifically for 'Change' requests. It likely interacts with the 'Communication' tab or section of a 'Change' request, allowing users to manage communication history, reply to and forward emails, and add notes. Although no specific request body parameters or response details are provided in the API spec, the contextual information implies that the endpoint would be used to modify or retrieve conversation-related data for a given change request. It's broadly related to the 'Quick Actions' for 'Change' requests, which include 'Quick Edit' and 'Detailed Edit' functionality, particularly concerning communication and interaction history. Developers should be aware of this distinction when integrating."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "IT Technicians", "Service Desk Agents", "Administrators"], "primary_use_case": "To facilitate comprehensive management of communication, conversation history, and associated notes and work logs for specific change requests within the system."}, "content_for_embedding": "This API endpoint is designed for comprehensive management of communication and historical data associated with specific 'Change' requests. It enables users to view, edit, and interact with discussion threads, communication logs, add notes, analyze, and view work logs related to a change. It specifically supports managing communication history, replying to and forwarding emails, and adding notes within the context of a change request's 'Communication' tab, aligning with quick and detailed edit functionalities for change requests.", "semantic_keywords": ["Change", "Communication", "History"], "ontology_classification": {"features": ["change_communication", "change_history_tracking", "commenting_system", "quick_edit_functionality", "detailed_change_information_display", "change_lifecycle_management"], "primary_module": "change_management", "confidence_score": 1}}}, {"path": "/ux/sd/change/conversation/{id}/", "method": "GET", "details": {"operationId": "ux_sd_change_conversation_retrieve_2", "description": "This API endpoint allows users to view or edit details of a specific 'Change Request' conversation. It provides the functionality to get the communication history, reply to and forward emails, add notes, and analyze the change. The endpoint is critical for managing the lifecycle of a change request, enabling actions such as Quick Edit for status, priority, urgency, severity, and assignments, or detailed editing of the change request information itself. It is identified by a unique `id` for each conversation, which corresponds to a specific change request.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path parameter that uniquely identifies the conversation of a change request. This endpoint supports both viewing (`GET`) and potentially editing a change request conversation. For detailed editing of a change, users typically use a 'Detailed Edit' button, which is conceptually mapped to this API's capability to modify the conversation. The 'Quick Edit' options mentioned in the context, like updating status, priority, etc., are also managed through interactions with such an endpoint. While the API specification mentions 'No response body', the context suggests that interactions through this endpoint would result in updated communication history or change details, which can then be viewed. Based on context, this endpoint can be used to \"Access the ticket thread, input the necessary updates and notes, and save the changes.\""}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Change Managers", "Administrators"], "primary_use_case": "To manage and view the details and communication history of specific change requests, enabling quick and detailed edits of change request attributes and facilitating communication within the change request lifecycle."}, "content_for_embedding": "This API endpoint is designed for viewing and editing the details of a specific Change Request conversation. It provides comprehensive functionality to access communication history, including the ability to reply to and forward emails, and add internal notes. Users can perform quick edits on key attributes such as status, priority, urgency, severity, and assignments, or conduct detailed edits of the change request information itself. The endpoint is crucial for managing the entire lifecycle of a change request, allowing users to access the ticket thread, input necessary updates, and save changes.", "ontology_classification": {"features": ["change_management.change_lifecycle_management", "change_management.detailed_change_information_display", "change_management.quick_edit_functionality", "change_management.change_history_tracking", "change_management.commenting_system", "change_management.change_communication", "ticket_management.communication_tab_(centralized_history)", "ticket_management.internal_notes"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Change Request", "Communication", "Edit"]}}, {"path": "/ux/sd/change/conversation/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_change_conversation_update", "description": "This API endpoint allows for the viewing and detailed editing of a specific Incident, specifically focusing on its conversation or communication history. It supports comprehensive updates to an Incident, enabling changes beyond quick edit actions such as status, priority, urgency, severity, and assignee, which are typically handled by \"Quick Edit\" functionalities. This endpoint facilitates the management of incident details, potentially including communication history, notes, and other detailed information within the Incident record.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that identifies the specific Incident conversation to be viewed or edited. This endpoint is primarily for detailed edits of an Incident, as opposed to quick updates. It is implied that the request body will contain the updated Incident details, although the API specification does not explicitly define its structure. Users can access the ticket thread, input necessary updates and notes, and save the changes. This API helps in managing communication flow and updating the communication history for an Incident. For more granular quick edits (like status, priority, etc.), refer to related 'Quick Edit' functionalities often available for Change Requests or Incidents."}, "llm_generated": {"business_context": {"user_personas": ["Support Agents", "Administrators", "IT Technicians"], "primary_use_case": "This API endpoint enables support agents and administrators to perform comprehensive updates and detailed edits on specific Incident records, particularly focusing on their conversation and communication history. It allows for the addition of notes, management of communication flow, and updating of the communication history within an Incident, distinguishing itself from quick-edit functionalities for basic attributes."}, "content_for_embedding": "This API facilitates the detailed viewing and editing of an Incident's conversation and communication history. It supports comprehensive updates to Incident records, including adding notes and managing communication flow, rather than just quick edits of status or priority. The endpoint is identified by a unique Incident ID and is crucial for maintaining a complete and accurate record of all interactions related to a specific Incident.", "semantic_keywords": ["Incident Update", "Detailed Edit", "Communication"], "ontology_classification": {"features": ["detailed_ticket_editing", "communication_tab_(centralized_history)", "ticket_history_view", "internal_notes", "file_attachments_(communication)", "ticket_detail_view_(via_id)"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/change/conversation/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_change_conversation_destroy", "description": "This API endpoint allows for the deletion of a conversation or 'Request' from the system. This action is irreversible, as highlighted in the documentation. It is specifically designed to remove an existing Request from the system, as part of the Quick Actions available for managing Requests and Changes.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Change"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` in the path refers to the unique identifier of the conversation or Request to be deleted. The deletion of a Request is an irreversible action, as noted in the 'Delete' quick action description. This endpoint is distinct from editing or viewing an Incident, focusing solely on the deletion functionality for a 'Request' or 'Change Request' as indicated by the context. It does not involve a request body and returns no response body upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Users managing requests or changes"], "primary_use_case": "To permanently remove a conversation or request from the system, ensuring data cleanup and management of historical records."}, "content_for_embedding": "This API facilitates the irreversible deletion of a specific conversation or request from the system. It is a critical quick action for managing and cleaning up existing requests and changes.", "semantic_keywords": ["Delete", "Request", "Change"], "ontology_classification": {"features": ["request_management_actions_(delete,_copy,_merge)"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/checklist/checklist/", "method": "GET", "details": {"operationId": "ux_sd_checklist_checklist_list", "description": "This endpoint, `/ux/sd/checklist/checklist/`, retrieves a paginated list of all checklists available within the current organization. These checklists are crucial for internal teams to define and manage various service components used in the service catalogue and business catalogue. The API supports pagination through `items_per_page` and `page` parameters, allowing efficient retrieval of large datasets. Additionally, users can sort the results by a specified `sort` key and define the `reverse` order.", "summary": "Gets a list of checklist", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Checklist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Checklist"}}}}, "description": ""}}, "additional_info": "This endpoint is designed to facilitate the management of internal checklists, which are analogous to item lists or inventories. As indicated by the high-ranked contexts, these checklists likely pertain to 'Service Perspectives' and include 'infrastructure components used to fulfill all listed services like backup, storage, Assets, HR forms, maintenance tools, etc.', and also 'user-facing services like Email fixes, IT servicing requests, services for provisioning, products like Mouse, Laptop, etc.'. Developers should be aware that the returned list might be empty if no checklists are available or if the organization's setup does not contain relevant items. The `sort` parameter expects a valid key from the checklist item structure, though specific keys are not detailed in this API spec. The `reverse` parameter, when set to `true`, will provide a descending order for the sorted results."}, "llm_generated": {"business_context": {"user_personas": ["Internal Teams", "Developers"], "primary_use_case": "To retrieve and manage internal checklists used for defining and organizing service components within service and business catalogues."}, "content_for_embedding": "This API endpoint retrieves a paginated list of all checklists available within an organization. These checklists are essential for internal teams to define and manage various service components used in both the service and business catalogues. The API supports efficient retrieval of large datasets through pagination parameters like `items_per_page` and `page`. Additionally, results can be sorted by a specified `sort` key in ascending or descending order using the `reverse` parameter. These checklists function as item lists or inventories, encompassing infrastructure components (e.g., backup, storage, assets, maintenance tools) and user-facing services (e.g., email fixes, IT servicing requests, product provisioning).", "semantic_keywords": ["Checklist Management", "Service Catalogue", "Pagination"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "record_creation_&_management", "filtering_and_search", "multiple_view_options"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/sd/checklist/checklist/", "method": "POST", "details": {"operationId": "ux_sd_checklist_checklist_create", "description": "This endpoint facilitates the creation of a new checklist for the current organization. As stated in the API specification, it is designed to save a new checklist. This functionality aligns with the broader administrative capabilities that allow administrators to curate end-user functionalities based on the organization's specific needs, as highlighted in the admin guide (Rank 1). The creation of such checklists contributes to defining, reviewing, and refining service or product aspects to suit requirements, potentially aiding in service templates or configurations.", "summary": "Creates a new checklist ", "tags": ["Checklist"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateChecklistSample": {"value": {"checklist": "checklist1"}, "summary": "Create checklist Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The API endpoint uses a POST method and expects a request body containing the checklist data, as exemplified by `{\"checklist\": \"checklist1\"}`. While the API specification does not detail specific parameters, the broader context suggests its role in administrative tasks for managing organizational configurations and user-facing experiences. Checklists created via this endpoint could be used to define specific actions or modules that users can perform, similar to how privileges are managed via checkboxes (Rank 7), or for defining service aspects before they are published or made available. There is no response body expected from this endpoint upon successful creation.", "parameters": [{"name": "checklist", "in": "body", "description": "Inferred parameter: checklist", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Manager", "Configuration Manager"], "primary_use_case": "To enable administrators to create and manage checklists that define service templates, configurations, and end-user functionalities for an organization."}, "content_for_embedding": "This API endpoint allows for the creation of new checklists within an organization. These checklists are primarily used by administrators to define, review, and refine service or product aspects, serving as service templates or configurations. The functionality supports broader administrative tasks for curating end-user functionalities and managing organizational configurations. The API expects a JSON request body containing the \"checklist\" data, for example, `{\"checklist\": \"checklist1\"}`. Upon successful creation, no response body is returned.", "semantic_keywords": ["Checklist Management", "Service Management", "Configuration"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "roles_&_privileges_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/sd/checklist/checklist/{id}/", "method": "GET", "details": {"operationId": "ux_sd_checklist_checklist_retrieve", "description": "This endpoint is used to retrieve the details of a specific business rule within the current organization by its unique identifier (ID). Business rules within Infraon products are essential guidelines or constraints that govern behavior, processes, and operations, ensuring consistency, compliance, and efficient functioning. This API call provides access to the configuration and specifics of a particular rule.", "summary": "Gets a checklist with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Checklist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Checklist"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is a mandatory string that represents the unique identifier of the desired business rule. The specific details returned for a business rule can include various attributes as defined in the system. This endpoint is crucial for understanding the predefined logic and criteria that automate tasks or actions within the Infraon environment, such as ticket allocation systems. It allows users to view the configurations of existing business rules, which are typically defined and enforced to manage operations effectively."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Operations Staff"], "primary_use_case": "To retrieve the detailed configuration and specifics of a particular business rule within the organization, enabling understanding of how operations, processes, and automated tasks are governed."}, "content_for_embedding": "This API endpoint allows for the retrieval of comprehensive details of a specific business rule using its unique identifier (ID). Business rules are fundamental guidelines and constraints that dictate behavior, processes, and operational flows within Infraon products, ensuring consistency, compliance, and efficient functioning. The endpoint provides access to the configuration and specific attributes of a given rule, which are crucial for understanding predefined logic and criteria that automate tasks or actions, such as those in ticket allocation systems. The 'id' path parameter is mandatory for specifying the desired business rule.", "ontology_classification": {"features": ["business_rules_for_auto-assignment", "workflow_automation"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Business Rule Management", "Details retrieval", "Configuration"]}}, {"path": "/ux/sd/checklist/checklist/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_checklist_checklist_update", "description": "This PUT endpoint is used to modify and update an existing checklist within the current organization. It provides the ability to edit various attributes and details previously defined for a specific checklist, similar to how 'Edit' actions are used across the system for profiles, contracts, and other configurable entities. This operation typically involves updating fields such as descriptions, associated actions or modules, and other relevant properties of the checklist.", "summary": "Edits the checklist with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Checklist"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Checklist"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Checklist"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/Checklist"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Checklist"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and identifies the specific checklist to be edited. The request body for this endpoint specifies the data model for documents, which supports a wide range of primitive and compound field types as detailed in the `request_body_description`. It supports standard primitive fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and special types like `ObjectIdField` and `UUIDField`. Compound fields like `ListField` and `DictField` are mapped to DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth, or as object IDs/skipped respectively. Ensure the request body conforms to the expected structure for checklist updates, leveraging these supported field types. This aligns with general system capabilities allowing users to define specific actions/modules and attributes within entities, which can then be edited to reflect current requirements."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Checklist Manager", "System User"], "primary_use_case": "To modify and update an existing checklist within the current organization."}, "content_for_embedding": "This API endpoint allows for the modification and update of an existing checklist identified by its unique ID. It supports editing various attributes and details of the checklist, similar to how other configurable entities like profiles and contracts are edited across the system. The request body conforms to the Checklist schema, supporting diverse field types for comprehensive updates.", "semantic_keywords": ["Checklist Management", "Update", "Edit"], "ontology_classification": {"features": ["record_creation_&_management", "record_lifecycle_&_status_management", "detailed_record_view", "contextual_actions_menu"], "primary_module": "workspace", "confidence_score": 0.9}}}, {"path": "/ux/sd/checklist/checklist/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_checklist_checklist_destroy", "description": "This endpoint is used to delete an existing checklist for the current organization. Deleting a checklist is typically an irreversible action, and a confirmation prompt is often displayed to prevent accidental deletions within the system, similar to the deletion of triggers or other system components. It permanently removes the specified checklist.", "summary": "Deletes the checklist with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Checklist"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` parameter is a required path parameter that identifies the specific checklist to be deleted. Similar to other deletion operations in the system, care should be taken to confirm the correct checklist ID before deletion, as the action is typically unrecoverable. No response body is returned upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System User"], "primary_use_case": "To permanently delete an existing checklist for the current organization, often requiring user confirmation due to the irreversible nature of the action."}, "content_for_embedding": "This API endpoint facilitates the permanent deletion of a specific checklist identified by its unique ID. The action is irreversible and typically requires a confirmation prompt within the system to prevent accidental data loss, similar to other critical deletion operations like those for triggers or system components. Upon successful deletion, no response body is returned.", "semantic_keywords": ["Delete", "Irreversible", "Checklist Management"], "ontology_classification": {"features": ["request_management_actions_(delete,_copy,_merge)"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/checklist/checklist/options/", "method": "GET", "details": {"operationId": "ux_sd_checklist_checklist_options_retrieve", "description": "This endpoint is designed to retrieve the default options available for configuring a Checklist. These options are crucial for setting up various checklist configurations, particularly for tasks such as 'Device Configuration Check' Rule Type. The retrieved options can guide users in selecting configurations, including specifying command scripts or selecting values for the 'Configuration' field. It supports defining the scope of configuration checks, such as 'Full Configuration', 'Selected Lines', or 'Selected Blocks', and provides insight into the available configuration types like 'Startup' and 'Running'. This endpoint ensures that users have the necessary choices for building precise and effective checklist rules.", "summary": "Get the options for the Checklist configuration", "tags": ["Checklist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Checklist"}}}, "description": ""}}, "additional_info": "The options returned by this endpoint are foundational for defining checklist rules, especially when configuring 'Device Configuration Check' rules. Users will utilize these options to select configurations and define parameters within the Checklist configuration interface. For instance, when setting up a 'Device Configuration Check', the options here dictate what values can be chosen for the 'Configuration' field, enabling checks on full configurations or specific lines/blocks. The endpoint is essential for populating dropdown menus or selection fields related to checklist configuration parameters."}, "llm_generated": {"business_context": {"user_personas": ["Users configuring checklist rules", "Network administrators", "IT operations personnel"], "primary_use_case": "To provide users with a comprehensive set of default options for configuring Checklists, particularly for \"Device Configuration Check\" rules, enabling them to define precise configuration checks and populate relevant selection fields in the UI."}, "content_for_embedding": "This API endpoint retrieves the default configuration options for Checklists, specifically for 'Device Configuration Check' Rule Types. It provides choices for defining the scope of configuration checks (e.g., 'Full Configuration', 'Selected Lines', 'Selected Blocks') and available configuration types ('Startup', 'Running'). These options are essential for populating UI elements like dropdowns and selection fields, guiding users in creating precise and effective checklist rules for device configuration.", "ontology_classification": {"features": ["network_configuration_management_(nccm)", "general_settings"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Configuration Options", "Checklist Management", "Configuration Retrieval"]}}, {"path": "/ux/sd/checklist/checklist/status_options_based_on_service/", "method": "GET", "details": {"operationId": "ux_sd_checklist_checklist_status_options_based_on_service_retrieve", "description": "This endpoint retrieves the available status options for a given 'Impact Service' within the Checklist configuration. It is crucial for dynamically populating status fields, allowing users to select an appropriate state for an item associated with a specific service. The statuses can range from 'Definition - Open' to 'Published - Operational', reflecting the lifecycle of the service or related entities.", "summary": "Get the status options for selected impact service for the Checklist configuration", "tags": ["Checklist"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Checklist"}}}, "description": ""}}, "additional_info": "The 'Impact Service' concept is central to this endpoint, referring to the specific service that is being impacted or managed within the system. The selection of the Impact Service directly influences the available status options. Users can also filter and search for services, and the availability of services may depend on user permissions. For instance, if no requester name is selected, the Impact Service field might be blank, leading to no status options being returned. This API is commonly utilized in scenarios where the status of a service or a related component (like tickets or changes) needs to be updated or displayed, aligning with the service's current state and criticality."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Desk Agent", "System Integrator", "Configuration Manager"], "primary_use_case": "This API retrieves available status options for a specified 'Impact Service' within the Checklist configuration. It enables dynamic population of status fields, allowing users to select appropriate states for items associated with services, tickets, or changes, reflecting their current lifecycle stage and criticality."}, "content_for_embedding": "This GET endpoint, `ux_sd_checklist_checklist_status_options_based_on_service_retrieve`, is designed to fetch status options relevant to a particular 'Impact Service' within the Checklist configuration. It plays a crucial role in dynamically populating status fields in the UI, ensuring users can select the correct state for any item linked to a specific service. The statuses can range from initial definition to operational states, reflecting the full lifecycle of services or related entities like tickets and changes. The selection of the 'Impact Service' directly influences the available status options, and service availability may be contingent on user permissions or the presence of a requester name. This API is widely used when there's a need to update or display the current status of a service or its associated components, aligning with its current state and criticality.", "semantic_keywords": ["Status", "Service Management", "Configuration"], "ontology_classification": {"features": ["service_management_(catalogue_configuration)", "workflow_automation", "customizable_ticket_statuses", "customizable_problem_statuses", "customizable_statuses"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/sd/inci/conversation/", "method": "GET", "details": {"operationId": "ux_sd_inci_conversation_retrieve", "description": "This API endpoint provides functionalities to view and edit Incident records. Specifically, it enables users to manage communications related to an incident, such as replying to, forwarding, and adding notes to emails, which are visible under the 'Communication' tab. The endpoint also supports text enhancement for communication content using OpenAI within the Incident page, aligning with features designed to refine communication styles. While the primary purpose is incident management, it should be noted that 'Ticket URL' information (for tracking progress) and 'Reported by' details (for identifying users reporting service on behalf of a requester) are related concepts within incident management.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint contributes to comprehensive incident management by centralizing communication history and providing tools for content refinement. It supports the core actions of viewing and modifying incident data. Although this particular endpoint has no explicit request body or parameters specified in its immediate definition, typical usage in related systems implies interaction with concepts like requesters and reporters. Users can expect to find capabilities for adding or searching for requesters, and expanding sections to add reporter names and email addresses. The ability to 'Quick Edit' or 'Detailed Edit' incident data, including status, priority, and assignees, is often associated with such incident management functionalities."}, "llm_generated": {"business_context": {"user_personas": ["Incident Managers", "Help Desk Agents", "Technicians"], "primary_use_case": "Managing Incident Communications and Records"}, "content_for_embedding": "This API endpoint is designed for comprehensive incident management, allowing users to view and edit incident records. Its core functionality revolves around managing communications within an incident, including replying to, forwarding, and adding internal notes to emails, all accessible via the 'Communication' tab. A key feature is the text enhancement capability for communication content, utilizing AI to refine communication styles directly within the incident page. The API also supports tracking incident progress through 'Ticket URL' information and identifying users reporting incidents on behalf of a requester via 'Reported by' details. Users can perform quick or detailed edits on incident data such as status, priority, and assignees, and search for or add requesters.", "ontology_classification": {"features": ["communication_tab_(centralized_history)", "communication_text_enhancement", "ticket_url_for_tracking", "reported_by_(on_behalf_of)", "quick_edit_(key_attributes)", "detailed_ticket_editing", "direct_email/sms_sending", "internal_notes", "requester_search_&_add", "ticket_state_&_status_management", "ticket_assignment_(individual/team/expertise)"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Incident", "Communication", "Ticket"]}}, {"path": "/ux/sd/inci/conversation/", "method": "POST", "details": {"operationId": "ux_sd_inci_conversation_create", "description": "This API endpoint facilitates the viewing and editing of an Incident within the system. It enables users to manage incident-related conversations, specifically allowing for text enhancement and rephrasing of communication content using OpenAI within the Incident page's 'Communication' section. This functionality supports actions such as replying to, forwarding, and adding notes to written emails that become visible under the 'Communication' tab. The primary purpose of this API is to streamline incident management by providing tools for comprehensive communication and content refinement.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint handles the core logic for incident communication. While the API specification does not detail request or response bodies, based on the context, communication content refinement via OpenAI is a key feature. Users can track progress through a Ticket URL from acknowledgment emails and view statuses in the self-service portal. The system also supports reporting by users on behalf of requesters. Although not directly specified in the API parameters, related actions like 'Quick Edit' (for status, priority, urgency, etc.) and 'Detailed Edit' imply comprehensive modification capabilities for incidents."}, "llm_generated": {"business_context": {"user_personas": ["Incident Managers", "Service Desk Agents", "Technicians", "End-users (for self-service portal interactions)"], "primary_use_case": "This API facilitates the management of incident-related conversations, enabling users to view, edit, and enhance communication content using AI, specifically for replying, forwarding, and adding notes to emails within an incident."}, "content_for_embedding": "This API endpoint is designed for comprehensive incident communication management. It allows users to view and edit conversations related to an incident, with a key feature being the text enhancement and rephrasing of communication content using OpenAI. This functionality supports actions such as replying to, forwarding, and adding notes to emails, which are visible under the \"Communication\" tab of an incident. The API streamlines incident management by providing tools for refining communication and tracking incident progress via ticket URLs and self-service portals. It also supports reporting on behalf of requesters and integrates with quick and detailed incident editing capabilities.", "ontology_classification": {"features": ["communication_tab_(centralized_history)", "communication_text_enhancement", "direct_email/sms_sending", "internal_notes", "ticket_url_for_tracking", "requester_self-service_portal", "reported_by_(on_behalf_of)", "quick_edit_(key_attributes)", "detailed_ticket_editing"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident", "Communication", "GenAI"]}}, {"path": "/ux/sd/inci/conversation/{id}/", "method": "GET", "details": {"operationId": "ux_sd_inci_conversation_retrieve_2", "description": "This API endpoint allows for the retrieval and detailed management of a specific Incident record, identified by its unique ID. It enables users to view all associated details and facilitates comprehensive editing capabilities for the Incident. This includes managing communication content, applying text enhancement features via OpenAI (as seen in the 'Communication' tab), and handling related entities through the 'Relation' tab. Users can also perform quick edits on Incident attributes such as status, priority, urgency, severity, impact, service, and assignee, or access detailed editing for all Incident information. It plays a crucial role in tracking and updating tickets, similar to how ticket URLs track progress and updates for requests.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the Incident to be viewed or edited. This endpoint does not have a request body as per the specification. For communication management within an Incident, users can leverage text enhancement features and rich content options on the Communication tab. The 'Relation' tab supports linking incidents to other tickets, allowing users to 'Click \u2018ticket +\u2019 button', 'Search ticket from the search tab', and 'Select relation type'. Quick Edit actions are available for common fields, while the 'Edit' button provides a more comprehensive editing interface. While the API specification states 'No response body', typically a GET request would return the incident details. This might imply the response is handled differently, perhaps through a redirect or a UI component that consumes the data rather than a direct JSON response. Developers should verify the actual return format for this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Incident Managers", "Administrators"], "primary_use_case": "This API allows for the retrieval, detailed management, and updating of specific incident records, enabling IT support staff and administrators to track and resolve issues efficiently."}, "content_for_embedding": "This API retrieves and manages a specific incident record by its unique ID. It supports viewing all incident details, comprehensive editing (including status, priority, urgency, severity, impact, service, and assignee), communication content management with AI text enhancement, and linking related tickets. It is essential for tracking and updating incident tickets.", "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "detailed_ticket_editing", "quick_edit_(key_attributes)", "communication_tab_(centralized_history)", "communication_text_enhancement", "record_relationship_linking", "ticket_tracking", "ticket_url_for_tracking"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Incident", "Ticket", "Update"]}}, {"path": "/ux/sd/inci/conversation/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_inci_conversation_update", "description": "This PUT API endpoint allows users to view, edit, and manage a specific Incident, identified by its unique ID. It enables detailed modifications to Incident records, including updating communication content leveraging OpenAI for text enhancement, managing related entities, and performing quick edit actions such as status, priority, urgency, severity, impact, and assignee. Users can also add or search for requesters and reporters associated with the Incident.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a required path parameter representing the unique identifier of the Incident to be viewed or edited. This endpoint supports actions related to 'Communication' (e.g., reply, forward, add notes, text enhancement via OpenAI), 'Relation' (linking and searching tickets), and 'Quick Actions'/'Edit' allowing for both broad and detailed updates of the Incident. It is particularly useful for technicians and users with necessary permissions to manage the lifecycle of an Incident. While there is no explicit response body, successful operations typically result in the updated state of the Incident being saved."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "IT Support Staff", "Authorized Users"], "primary_use_case": "To view, edit, and manage specific incident records, enabling detailed modifications, communication updates, and quick actions for incident lifecycle management."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management and detailed updating of individual incident records. It allows users to view, modify, and control various attributes of an incident, such as its status, priority, urgency, severity, impact, and assignee. A key feature is the ability to update communication content, including leveraging OpenAI for text enhancement. The API also supports managing related entities, linking and searching for associated tickets, and adding or searching for requesters and reporters. It is designed for efficient incident lifecycle management by technicians and other authorized personnel.", "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "detailed_ticket_editing", "quick_edit_(key_attributes)", "communication_tab_(centralized_history)", "communication_text_enhancement", "requester_search_&_add", "ticket_state_&_status_management", "ticket_assignment_(individual/team/expertise)", "ticket_history_view", "ticket_attachments", "link_ticket_to_change_request_(add_change)", "view_linked_change_request"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident Update", "Detailed Edit", "Communication"]}}, {"path": "/ux/sd/inci/conversation/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_inci_conversation_destroy", "description": "This API endpoint allows for the deletion of a specific Incident conversation. It leverages the 'id' path parameter to uniquely identify the conversation to be removed. Deleting an Incident is an irreversible action, as highlighted by similar 'Delete' functionalities for 'Requests' in the system. While the original description mentioned viewing or editing, this specific DELETE method is solely for removal, ensuring the conversation is completely expunged from the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and must be a string representing the unique identifier of the Incident conversation to be deleted. Similar to other deletion operations within the system, this action is irreversible, meaning once an Incident conversation is deleted, it cannot be recovered. This endpoint is distinct from viewing or editing functionalities, which might be handled by other `GET` or `PUT` methods for the same resource path. Users should exercise caution as there is no response body upon successful deletion, indicating the action has been completed. This API is critical for data hygiene and managing unwanted or erroneous incident conversations."}, "llm_generated": {"business_context": {"user_personas": ["IT administrators", "Support agents", "Data managers"], "primary_use_case": "This API is used for the permanent and irreversible deletion of specific incident conversations, ensuring data hygiene and efficient management of incident records."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific incident conversation from the system. It requires a unique conversation ID as a path parameter. This action is distinct from viewing or editing functionalities and is critical for maintaining data hygiene by removing unwanted or erroneous incident records.", "ontology_classification": {"features": ["ticket_deletion"], "primary_module": "ticket_management", "confidence_score": 1}, "semantic_keywords": ["Delete", "Incident", "Irreversible", "Ticket"]}}, {"path": "/ux/sd/inci/incident/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_list", "description": "This endpoint provides the capability to retrieve a paginated list of incidents within the current organization. Incidents are crucial for security intelligence (SI), as they represent documented and analyzed system events. The returned data facilitates monitoring, documenting, and auditing IT infrastructure changes, which is vital for compliance, such as PCI mandates relating to audit logs. This functionality aids in tracking assigned tickets, analyzing events, and generally supports comprehensive security and operational management.", "summary": "Gets a list of incidents", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/IncidentList"}}}}, "description": ""}}, "additional_info": "The API supports pagination through `items_per_page` and `page` query parameters. Results can be sorted using `sort` and `reverse` parameters, allowing for flexible data retrieval. Incidents often relate to tracked organizational IT infrastructure changes, event summaries, and IT Service Management (ITSM) tickets. Key information for incidents typically includes Ticket ID, Status, Created On, Last Updated On, Current Assigned, Impact Asset, and Impact Service. This endpoint is instrumental for generating incident reports and for proactively managing IT infrastructure. While the API itself does not directly mention 'Log Management' or 'Event Log Manager' specifically, the context strongly implies that incidents are derived from such systems, reflecting their critical role in security intelligence, compliance, and IT operations."}, "llm_generated": {"business_context": {"user_personas": ["Security Analyst", "IT Operations", "Auditor", "System Administrator", "Developer"], "primary_use_case": "To retrieve a paginated list of security incidents for monitoring, auditing, and reporting purposes, aiding in security intelligence and IT infrastructure management."}, "content_for_embedding": "This API endpoint, `/ux/sd/inci/incident/` (GET method), provides a paginated list of incidents within the current organization. Incidents are vital for security intelligence, representing documented and analyzed system events. The returned data supports monitoring, documenting, and auditing IT infrastructure changes, ensuring compliance (e.g., PCI mandates for audit logs). It helps in tracking assigned tickets, analyzing events, and overall comprehensive security and operational management. The API supports pagination via `items_per_page` and `page` query parameters, and results can be sorted using `sort` and `reverse`. Incidents often relate to IT infrastructure changes, event summaries, and ITSM tickets, typically including details like Ticket ID, Status, Created On, Last Updated On, Current Assigned, Impact Asset, and Impact Service. This endpoint is crucial for generating incident reports and proactive IT infrastructure management, strongly implying derivation from log and event management systems.", "ontology_classification": {"features": ["ticket_listing_page", "ticket_tracking", "ticket_monitoring", "incident_reports_(specific_&_summary)", "event_listing_and_filtering"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident", "Pagination", "Report"]}}, {"path": "/ux/sd/inci/incident/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_create", "description": "This endpoint facilitates the creation and saving of a new incident record for the current organization. It allows for comprehensive incident logging, including details such as summary, description, impact, urgency, priority, and service classification. The incident form is highly customizable, allowing for the addition of custom fields and the configuration of section layouts based on organizational, compliance, or process requirements. Key feature for internal teams to track and manage issues impacting SLAs and service delivery, ensuring streamlined ticket handling through features like quick access to recent activity, interactions, and attachments.", "summary": "Creates a new incident ", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateIncidentSample": {"value": {"summary": "VPN Issue", "description": "", "catalogue": "", "impact_service": "", "impact_service_name": "service1", "service_classification": "", "service_classification_name": "", "state": "Open", "state_id": 1, "status": "New", "status_id": 1, "urgency_id": 3, "urgency": "Low", "priority_id": 5, "priority": "Very Low", "impact": "Department", "impact_id": 3, "incident_source": {"id": 1, "name": "Web"}, "resolution_type": "", "is_first_call": "", "incident_type": {"id": 1, "name": "Incident", "prefix": "inci"}, "requester_id": "", "requester_name": "Test req", "requester_email": "testreq@gmail.com", "requester_phone": "7778889999", "reporter_name": "", "reporter_email": "", "reporter_phone": "", "watcher": "", "hold_config": {}, "support_group": "", "assignee": "", "escalation": {}, "tag": [], "assets": [], "config": {}, "reference": {}, "template_info": {}, "closure_info": {}, "approval_config": {}, "custom_field": [{}], "attachment": {}, "api_link": {}, "lock_config": {}, "field_service_config": {}, "closure_note": ""}, "summary": "Create incident Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body provides extensive fields for detailing an incident, including `requester` and `reporter` information, `incident_source`, `resolution_type`, and various configuration options like `hold_config`, `escalation`, and `approval_config`. Custom fields can be added via the `custom_field` array to cater to specific business needs. The API leverages a flexible incident workflow that can be configured with drag-and-drop elements for states, actions, and conditions. The `summary` field acts as the mail subject when an incident is raised. The `description` field should include all mandatory information needed to work on the incident. Although no explicit body is returned, the successful creation implies the incident has been saved and is trackable within the system.", "parameters": [{"name": "summary", "in": "body", "description": "Inferred parameter: summary", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "catalogue", "in": "body", "description": "Inferred parameter: catalogue", "required": true, "schema": {"type": "string"}}, {"name": "impact_service", "in": "body", "description": "Inferred parameter: impact_service", "required": true, "schema": {"type": "string"}}, {"name": "impact_service_name", "in": "body", "description": "Inferred parameter: impact_service_name", "required": true, "schema": {"type": "string"}}, {"name": "service_classification", "in": "body", "description": "Inferred parameter: service_classification", "required": true, "schema": {"type": "string"}}, {"name": "service_classification_name", "in": "body", "description": "Inferred parameter: service_classification_name", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}, {"name": "state_id", "in": "body", "description": "Inferred parameter: state_id", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "body", "description": "Inferred parameter: status", "required": true, "schema": {"type": "string"}}, {"name": "status_id", "in": "body", "description": "Inferred parameter: status_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency_id", "in": "body", "description": "Inferred parameter: urgency_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency", "in": "body", "description": "Inferred parameter: urgency", "required": true, "schema": {"type": "string"}}, {"name": "priority_id", "in": "body", "description": "Inferred parameter: priority_id", "required": true, "schema": {"type": "string"}}, {"name": "priority", "in": "body", "description": "Inferred parameter: priority", "required": true, "schema": {"type": "string"}}, {"name": "impact", "in": "body", "description": "Inferred parameter: impact", "required": true, "schema": {"type": "string"}}, {"name": "impact_id", "in": "body", "description": "Inferred parameter: impact_id", "required": true, "schema": {"type": "string"}}, {"name": "incident_source", "in": "body", "description": "Inferred parameter: incident_source", "required": true, "schema": {"type": "string"}}, {"name": "resolution_type", "in": "body", "description": "Inferred parameter: resolution_type", "required": true, "schema": {"type": "string"}}, {"name": "is_first_call", "in": "body", "description": "Inferred parameter: is_first_call", "required": true, "schema": {"type": "string"}}, {"name": "incident_type", "in": "body", "description": "Inferred parameter: incident_type", "required": true, "schema": {"type": "string"}}, {"name": "requester_id", "in": "body", "description": "Inferred parameter: requester_id", "required": true, "schema": {"type": "string"}}, {"name": "requester_name", "in": "body", "description": "Inferred parameter: requester_name", "required": true, "schema": {"type": "string"}}, {"name": "requester_email", "in": "body", "description": "Inferred parameter: requester_email", "required": true, "schema": {"type": "string"}}, {"name": "requester_phone", "in": "body", "description": "Inferred parameter: requester_phone", "required": true, "schema": {"type": "string"}}, {"name": "reporter_name", "in": "body", "description": "Inferred parameter: reporter_name", "required": true, "schema": {"type": "string"}}, {"name": "reporter_email", "in": "body", "description": "Inferred parameter: reporter_email", "required": true, "schema": {"type": "string"}}, {"name": "reporter_phone", "in": "body", "description": "Inferred parameter: reporter_phone", "required": true, "schema": {"type": "string"}}, {"name": "watcher", "in": "body", "description": "Inferred parameter: watcher", "required": true, "schema": {"type": "string"}}, {"name": "hold_config", "in": "body", "description": "Inferred parameter: hold_config", "required": true, "schema": {"type": "string"}}, {"name": "support_group", "in": "body", "description": "Inferred parameter: support_group", "required": true, "schema": {"type": "string"}}, {"name": "assignee", "in": "body", "description": "Inferred parameter: assignee", "required": true, "schema": {"type": "string"}}, {"name": "escalation", "in": "body", "description": "Inferred parameter: escalation", "required": true, "schema": {"type": "string"}}, {"name": "tag", "in": "body", "description": "Inferred parameter: tag", "required": true, "schema": {"type": "string"}}, {"name": "assets", "in": "body", "description": "Inferred parameter: assets", "required": true, "schema": {"type": "string"}}, {"name": "config", "in": "body", "description": "Inferred parameter: config", "required": true, "schema": {"type": "string"}}, {"name": "reference", "in": "body", "description": "Inferred parameter: reference", "required": true, "schema": {"type": "string"}}, {"name": "template_info", "in": "body", "description": "Inferred parameter: template_info", "required": true, "schema": {"type": "string"}}, {"name": "closure_info", "in": "body", "description": "Inferred parameter: closure_info", "required": true, "schema": {"type": "string"}}, {"name": "approval_config", "in": "body", "description": "Inferred parameter: approval_config", "required": true, "schema": {"type": "string"}}, {"name": "custom_field", "in": "body", "description": "Inferred parameter: custom_field", "required": true, "schema": {"type": "string"}}, {"name": "attachment", "in": "body", "description": "Inferred parameter: attachment", "required": true, "schema": {"type": "string"}}, {"name": "api_link", "in": "body", "description": "Inferred parameter: api_link", "required": true, "schema": {"type": "string"}}, {"name": "lock_config", "in": "body", "description": "Inferred parameter: lock_config", "required": true, "schema": {"type": "string"}}, {"name": "field_service_config", "in": "body", "description": "Inferred parameter: field_service_config", "required": true, "schema": {"type": "string"}}, {"name": "closure_note", "in": "body", "description": "Inferred parameter: closure_note", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Internal Teams", "IT Support", "Helpdesk Agents", "Administrators", "Service Desk Personnel"], "primary_use_case": "To create and log new incident records, enabling comprehensive issue tracking and management for internal teams, and supporting adherence to Service Level Agreements (SLAs)."}, "content_for_embedding": "This API facilitates the creation of new incident records, allowing for detailed logging of issues with fields such as summary, description, impact, urgency, priority, and service classification. It supports customizable incident forms, inclusion of requester and reporter information, and attachment uploads. The API is essential for internal teams to track and manage issues, ensuring streamlined ticket handling and compliance with SLAs through a flexible, configurable workflow.", "semantic_keywords": ["Incident Creation", "Incident Logging", "SLA Management"], "ontology_classification": {"features": ["ticket_submission_methods", "ticket_classification_&_categorization", "ticket_state_&_status_management", "lifecycle_communication_management", "file_attachments_(communication)", "new_ticket_creation_interface", "requester_search_&_add", "reported_by_(on_behalf_of)", "ticket_attachments", "customizable_ticket_statuses", "sla_monitoring_&_management", "ticket_tracking", "ticket_summary_card", "ticket_tagging", "process_visibility_configuration", "internal_notes", "workflow_automation", "service_management_(catalogue_configuration)", "record_creation_&_management", "attachment_management", "recent_activities_log"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/inci/incident/{id}/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_retrieve", "description": "This endpoint retrieves comprehensive details for a specific incident based on its unique ID. It allows users to gain quick access to recent activity, interactions, attachments, and more for streamlined ticket handling. The retrieved details include information akin to what is found on pages displaying comprehensive ticket details, such as creation time and date, and could encompass various tabs like Basic Details and Workspace. This is crucial for proactively resolving issues impacting SLAs and improving service delivery within the current organization.", "summary": "Gets a incident with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier for the incident you wish to retrieve. This endpoint is analogous to navigating to a page that provides comprehensive ticket details by clicking on an ID. Common use cases include tracking the progress of requests, viewing ticket status and updates, and providing detailed insights for service delivery and issue resolution. Information like Ticket ID, Status, Created On, Last Updated On, Current Assigned, Impact Asset, Requester details, and more, as detailed in the user guide, are expected to be part of the comprehensive details returned."}, "llm_generated": {"business_context": {"user_personas": ["IT support agents", "service desk personnel", "administrators", "requesters"], "primary_use_case": "Retrieving comprehensive details for a specific incident to facilitate streamlined ticket handling, issue resolution, and service delivery improvement."}, "content_for_embedding": "This API retrieves all comprehensive details of a specific incident using its unique identifier. It provides a complete view of the incident, including its history, recent activities, interactions, attachments, status, creation and update times, assigned personnel, and requester information. This detailed information is crucial for efficient ticket handling, tracking progress, resolving issues, and improving service delivery, especially in the context of SLA management.", "semantic_keywords": ["Incident", "Details retrieval", "Ticket"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "ticket_tracking", "ticket_history_view", "ticket_attachments", "ticket_state_&_status_management", "sla_monitoring_&_management", "past_interactions_display_(requester_history)"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/inci/incident/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_inci_incident_update", "description": "This endpoint allows users to edit an existing incident within the system by providing its unique identifier. It facilitates hassle-free updates to incident details, including assigning assignees and modifying ticket information. This capability is aligned with the 'Incident Card Inline Edit' feature, enabling quick and efficient modifications to incidents for the current organization. The process supports updating various fields such as incident summary and description, which are crucial for effective incident management.", "summary": "Edits the incident with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "additional_info": "The `id` parameter in the path is a mandatory string that refers to the unique identifier of the incident to be edited. The request body for this endpoint accepts a wide range of primitive and compound field types for updating incident details, including `StringField`, `IntField`, `DateTimeField`, `ListField`, and `DictField`. Special consideration is given to `ReferenceField` and `EmbeddedDocumentField`, which can auto-generate nested serializers depending on the depth. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well-supported or untested. This endpoint is crucial for quick edits, similar to 'Quick Edit' functionalities for changing status, priority, urgency, and other key incident attributes."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Agent", "Help Desk Agent", "Incident Manager", "Administrator"], "primary_use_case": "This API allows users to update existing incidents by modifying various details such as assignees, status, priority, and other ticket information. It supports quick inline edits for efficient incident management."}, "content_for_embedding": "This PUT endpoint, `ux_sd_inci_incident_update`, is designed to edit an existing incident identified by its unique ID. It enables comprehensive updates to incident details, including assigning new personnel and modifying ticket information. This functionality is a core part of the \"Incident Card Inline Edit\" feature, allowing for rapid and effective adjustments to incidents within the current organization. Users can update a wide array of fields, such as the incident summary, description, status, priority, and urgency, which are vital for streamlined incident management. The request body supports various field types like StringField, IntField, DateTimeField, ListField, and DictField, with special handling for ReferenceField and EmbeddedDocumentField for nested structures. It is crucial for quick edits, akin to \"Quick Edit\" features for key incident attributes.", "ontology_classification": {"features": ["incident_card_inline_editing", "quick_edit_(key_attributes)", "detailed_ticket_editing", "ticket_state_&_status_management", "ticket_ownership_management"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident Update", "Ticket", "Edit"]}}, {"path": "/ux/sd/inci/incident/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_inci_incident_destroy", "description": "This endpoint permanently deletes an existing incident record from the system. It is designed to remove incidents that are no longer relevant or were created in error for the current organization. This action helps streamline incident management and ensures that only active and crucial incidents are tracked, allowing for proactive resolution of issues impacting SLAs and improved service delivery. While incidents can typically be 'resolved' or 'auto-closed', this DELETE operation provides a direct and immediate removal capability, preventing them from appearing in views like the incident card or impacting ticket counts.", "summary": "Deletes the incident with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the incident to be deleted. Once an incident is deleted, it cannot be recovered, similar to deleting a field in a Multi-Index or deleting indices from the database. It is important to confirm the correct incident ID before performing this operation. This endpoint does not return any response body upon successful deletion, indicating that the operation was completed."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Incident Manager", "Support Staff"], "primary_use_case": "This API permanently deletes an existing incident record from the system, ensuring that only active and crucial incidents are tracked. This action helps streamline incident management by removing irrelevant or erroneous entries, thereby improving service delivery and preventing impact on SLA metrics and ticket counts."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific incident record from the system using its unique ID. It is designed to clean up incident data, remove erroneous or irrelevant entries, and prevent them from appearing in incident views or affecting ticket counts. Once an incident is deleted, it cannot be recovered. This operation contributes to streamlined incident management and improved service delivery.", "semantic_keywords": ["Delete", "Incident", "Ticket", "Irreversible", "ID"], "ontology_classification": {"features": ["ticket_deletion", "ticket_listing_page", "ticket_summary_card", "ticket_detail_view_(via_id)"], "primary_module": "ticket_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/inci/incident/add-attachment/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_add_attachment_create", "description": "This endpoint facilitates the addition of attachments to a designated incident in the system. Users can upload various document types, such as emails, screenshots, or team documents, by either dragging and dropping files or selecting them from their local system. When adding an attachment, users should specify a category (e.g., 'default category', 'ticket screenshot') and provide a description for the uploaded file. This functionality is crucial for providing supporting documentation related to an incident, similar to how attachments are managed for tickets or problems.", "summary": "Add attachments for the selected incident.", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "additional_info": "The request body for this endpoint is designed to handle various primitive and compound fields based on the Document serializer. While many field types are supported (e.g., StringField, IntField, DateTimeField, ListField, DictField), users should be aware that `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. For `ReferenceField` and `EmbeddedDocumentField`, nested serializers are automatically generated if the serializer depth is greater than 0; otherwise, they are handled differently (e.g., `str(id)` for `ReferenceField`). The context suggests common usage involves clicking an 'Add' tab/button, selecting a category, describing the attachment, and then clicking 'Upload files'."}, "llm_generated": {"business_context": {"user_personas": ["IT support staff", "Help desk agents", "Incident managers"], "primary_use_case": "To enable users to add supporting documentation, such as emails, screenshots, or other files, to an existing incident record in the system."}, "content_for_embedding": "This API facilitates the addition of various types of attachments (e.g., emails, screenshots, team documents) to a designated incident. Users can upload files by dragging and dropping or selecting from their local system, and must specify a category and description for each attachment. This functionality is vital for providing comprehensive supporting documentation for incidents, similar to how attachments are handled for tickets or problems.", "ontology_classification": {"features": ["ticket_attachments", "attachment_management"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Attachments", "Incident", "Add"]}}, {"path": "/ux/sd/inci/incident/attachment/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_attachment_retrieve", "description": "This endpoint is used to retrieve all attachments associated with a specific incident. It provides a comprehensive view of documents and files linked to the current incident, similar to how attachments are displayed for requests, change requests, and problems in the user interface. This allows users to access historical and current attachments relevant to the incident.", "summary": "Gets attachments for the selected incident.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "additional_info": "This endpoint specifically targets 'incident' attachments, distinguishing it from attachment retrieval for other entities like general 'requests' or 'change requests', though the core functionality of displaying 'all the attachments of the current [entity]' remains consistent across these contexts. There are no explicit parameters listed in the API specification for this GET request, implying the incident context is handled implicitly (e.g., via session or preceding API calls). The retrieved attachments typically include documents, screenshots, and other relevant files. While the user guide mentions adding attachments and categories, this endpoint focuses solely on retrieval."}, "llm_generated": {"business_context": {"user_personas": ["Incident Managers", "Support Agents", "IT Staff"], "primary_use_case": "Retrieving attachments associated with incidents for comprehensive incident management and historical review."}, "content_for_embedding": "This API retrieves all attachments, including documents, screenshots, and other relevant files, associated with a specific incident. It provides a comprehensive view of historical and current attachments, similar to how attachments are displayed for requests, change requests, and problems. The incident context is implicitly handled, and this endpoint is solely for retrieving existing attachments, not for adding or managing them.", "ontology_classification": {"features": ["ticket_attachments"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Attachments", "Incident", "Retrieval"]}}, {"path": "/ux/sd/inci/incident/bulk_retry_api/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_bulk_retry_api_create", "description": "This API endpoint facilitates the management and re-processing of incidents, specifically enabling bulk retry operations for failed incident-related tasks. It extends beyond simple viewing or editing by providing functionality for retrying operations, which can include configuration downloads, task executions, or other system processes related to incident resolution. The API supports various primitive and compound field types for data manipulation, as detailed in the request body description. It is designed to handle common incident management needs like updating ticket details, managing auto-closure settings, and integrating with other monitoring or collaboration systems for real-time updates and efficient issue resolution.", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` details the supported data types for the serializer. Users should note that while many common fields are supported, `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested, and other unspecified fields might not work as expected. The endpoint's 'retry' capability is crucial for scenarios involving failed downloads (e.g., configuration files) or task retries, allowing systems to attempt operations again within specified intervals and limits, as indicated by parameters like 'Retry Times' and 'Retry Interval in Hrs' found in guide documents. Use cases include ensuring successful incident resolution after a temporary system glitch or network interruption by re-initiating the failed action. The flexibility in handling different field types suggests it can update various aspects of an incident record, similar to the 'Incident Card Inline Edit' functionality mentioned in context, enabling updates to assignees and ticket details."}, "llm_generated": {"business_context": {"user_personas": ["IT Operations", "System Administrators", "API Users", "Incident Managers"], "primary_use_case": "This API enables the bulk retry and re-processing of failed incident-related tasks and operations, ensuring successful incident resolution after temporary system issues. It supports updating various incident details and managing auto-closure settings."}, "content_for_embedding": "This API endpoint facilitates the management and re-processing of incidents, specifically enabling bulk retry operations for failed incident-related tasks. It extends beyond simple viewing or editing by providing functionality for retrying operations, which can include configuration downloads, task executions, or other system processes related to incident resolution. The API supports various primitive and compound field types for data manipulation. It is designed to handle common incident management needs like updating ticket details, managing auto-closure settings, and integrating with other monitoring or collaboration systems for real-time updates and efficient issue resolution. The `request_body_description` details the supported data types for the serializer. Users should note that while many common fields are supported, `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested, and other unspecified fields might not work as expected. The endpoint's 'retry' capability is crucial for scenarios involving failed downloads (e.g., configuration files) or task retries, allowing systems to attempt operations again within specified intervals and limits, as indicated by parameters like 'Retry Times' and 'Retry Interval in Hrs' found in guide documents. Use cases include ensuring successful incident resolution after a temporary system glitch or network interruption by re-initiating the failed action. The flexibility in handling different field types suggests it can update various aspects of an incident record, similar to the 'Incident Card Inline Edit' functionality mentioned in context, enabling updates to assignees and ticket details. Relevant documentation highlights 'Task Retry Count' and 'Task Retry Interval Window', and the concept of 'Job(s) Retry Queue' for re-executing upload jobs. Permissions for incident actions and workflow configuration for incidents are also mentioned in the broader context.", "ontology_classification": {"features": ["ticket_re-opening", "incident_card_inline_editing", "automatic_ticket_closure_(configurable)", "ticket_resolution_functionality", "ticket_state_&_status_management", "ticket_monitoring", "ticket_tracking", "detailed_ticket_editing"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident", "Retry", "Task Management"]}}, {"path": "/ux/sd/inci/incident/close_inci_request/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_close_inci_request_create", "description": "This API endpoint facilitates the closure of an Incident Request. While the original description mentioned viewing or editing, the context strongly suggests this endpoint is specifically for closing incidents, possibly automatically based on system configurations. It aligns with functionalities like 'Auto closure: The system configuration automatically closes the ticket after the specified days' and overall request management. This action is critical for managing the lifecycle of incidents within the system.", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body, as defined by the `request_body_description`, supports a wide range of primitive and compound field types for serializing Document data. This flexibility likely allows for various data inputs needed to close an incident, such as timestamps, status updates, or other relevant details. It's crucial to correctly map complex types like `ListField`, `DictField`, `ReferenceField`, and `EmbeddedDocumentField` according to their DRF field specifications. While primitive types are well-supported, developers should exercise caution with `FileField`, `ImageField`, and `BinaryField` as they are noted as not well supported or untested. The system configuration for 'Auto closure' (from Context Rank 1) suggests that while this endpoint allows programmatic closure, there might also be an automated process in place."}, "llm_generated": {"business_context": {"user_personas": ["System Administrator", "Helpdesk Agent", "Developer"], "primary_use_case": "To programmatically close incident requests, managing their lifecycle and updating their status to resolved or closed, facilitating both automated and manual closure processes."}, "content_for_embedding": "This API endpoint is designed for the programmatic closure of Incident Requests, playing a crucial role in managing the incident lifecycle. It supports both automated system configurations for auto-closure after a specified period or due to external events, and manual closure initiated by technicians or customer acceptance. The API allows for updating incident status to 'Closed' or 'Complete' and can be used to stop ticket aging metrics. The request body is flexible, accommodating various data inputs like timestamps and status updates, though specific field types require careful mapping. Once an incident is closed, it generally cannot be re-opened unless it was in a 'Waiting for Closure' state; otherwise, a new ticket must be raised.", "semantic_keywords": ["Incident Closure", "Ticket Management", "Status Update"], "ontology_classification": {"features": ["automatic_ticket_closure_(configurable)", "requester-agreed_ticket_closure", "ticket_state_&_status_management", "resolution_&_recovery", "one-click_complete_&_resolve", "ticket_resolution_functionality", "ticket_aging_metrics_&_reporting", "ticket_re-opening", "closure_details_(category,_note)"], "primary_module": "ticket_management", "confidence_score": 1}}}, {"path": "/ux/sd/inci/incident/delete_incident/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_delete_incident_create", "description": "This API endpoint facilitates the deletion of an existing Incident. This action is irreversible once performed. It is part of the system's larger functionality to manage incidents and tickets, allowing for streamlined handling of reported issues. The deletion capability complements other incident management actions like quick edits, detailed editing, and viewing of incident details.", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint handles various primitive and compound field types as described in the API specification. Recognised primitive fields include `StringField`, `URLField`, `EmailField`, `IntField`, `LongField`, `FloatField`, `DecimalField`, `BooleanField`, `DateTimeField`, `ComplexDateTimeField`, `ObjectIdField`, `SequenceField`, `UUIDField`, `GeoPointField`, `GeoJsonBaseField`, and `DateField`. Compound fields like `ListField` and `DictField` are mapped to DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. Developers should be aware of limitations with `FileField`, `ImageField`, and `BinaryField` which are 'not well supported or untested'. Other fields may be mapped incorrectly to `DocumentField`."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Incident Managers", "Administrators"], "primary_use_case": "To permanently delete one or more existing incidents from the system."}, "content_for_embedding": "This API endpoint allows for the permanent and irreversible deletion of one or more existing incidents from the system. It is a critical function within incident and ticket management workflows, enabling administrators or support personnel to remove resolved or erroneous incident records. This deletion capability complements other incident management actions like quick edits, detailed editing, and viewing of incident details, ensuring a streamlined approach to handling reported issues.", "ontology_classification": {"features": ["ticket_deletion"], "primary_module": "ticket_management", "confidence_score": 1}, "semantic_keywords": ["Delete", "Incident", "Ticket Management"]}}, {"path": "/ux/sd/inci/incident/feedback/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_feedback_retrieve", "description": "This API endpoint provides functionalities to view and edit incident details, supporting both 'Quick Edit' actions for fields like status, priority, urgency, severity, impact service, and assignee, as well as 'Detailed Edit' for comprehensive modifications. It also enables viewing related change requests and tracking request progress.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The endpoint facilitates tracking 'Request aging' for helpdesk/ITSM purposes. Incident details can be updated with ease, including assignee and other ticket particulars, leveraging features like 'Incident Card Inline Edit'. It allows for the addition of an 'Incident Summary' and 'Incident Description' to provide context. The system may also be integrated with network monitoring systems for problem report submission through standard APIs. It's important to note the distinction between 'Quick Edit' for common fields and 'Detailed Edit' for full request modifications, as highlighted in the context. The API may also be used in conjunction with the ticketing system, where interactions and attachments related to the incident can be managed."}, "llm_generated": {"business_context": {"user_personas": ["Helpdesk Agent", "IT Support Staff", "Administrator"], "primary_use_case": "To manage and track IT incidents, allowing users to view, quickly edit, and comprehensively modify incident details, track their progress, and view related change requests within a helpdesk or ITSM system."}, "content_for_embedding": "This API endpoint provides functionalities to view and edit incident details, supporting both 'Quick Edit' actions for fields like status, priority, urgency, severity, impact service, and assignee, as well as 'Detailed Edit' for comprehensive modifications. It also enables viewing related change requests and tracking request progress. The endpoint facilitates tracking 'Request aging' for helpdesk/ITSM purposes. Incident details can be updated with ease, including assignee and other ticket particulars, leveraging features like 'Incident Card Inline Edit'. It allows for the addition of an 'Incident Summary' and 'Incident Description' to provide context. The system may also be integrated with network monitoring systems for problem report submission through standard APIs. It's important to note the distinction between 'Quick Edit' for common fields and 'Detailed Edit' for full request modifications, as highlighted in the context. The API may also be used in conjunction with the ticketing system, where interactions and attachments related to the incident can be managed.", "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "quick_edit_(key_attributes)", "detailed_ticket_editing", "ticket_state_&_status_management", "ticket_assignment_(individual/team/expertise)", "view_linked_change_request", "ticket_tracking", "ticket_aging_metrics_&_reporting", "incident_card_inline_editing", "file_attachments_(communication)", "ticket_history_view", "automated_ticket_creation_from_monitoring_systems_(api)", "ticket_url_for_tracking"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident", "Ticket Management", "Update"]}}, {"path": "/ux/sd/inci/incident/impacted_asset/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_impacted_asset_retrieve", "description": "This API endpoint provides a GET method to view and manage details of 'Impacted Assets' associated with incidents. It allows users to analyze event details, including asset information and performance statistics, similar to how 'Impact Services' event details are viewed in the user interface. This endpoint is crucial for understanding the assets affected by an incident, enabling users to analyze, acknowledge, and potentially perform quick edit actions related to the incident and its impacted services, mimicking functionalities seen in 'Quick actions' for events.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The ability to 'view the asset details and the statistics of how the current event is performing' through this endpoint aligns with the 'Analyse' quick action described in the user guides. While the API specification does not currently list parameters, in typical usage, this endpoint would likely accept parameters to identify a specific incident or asset to retrieve its details. The context also hints at quick edit capabilities (e.g., status, priority, urgency, severity, impact service, and assignee), suggesting that while this particular endpoint is GET, related functionalities might allow for direct modification of incident and asset attributes. This API is likely used by NOC users or technicians for incident management and analysis."}, "llm_generated": {"business_context": {"user_personas": ["NOC users", "Technicians"], "primary_use_case": "To view and manage details of assets impacted by incidents, analyze associated event details, asset information, and performance statistics to facilitate incident management and analysis."}, "content_for_embedding": "This API endpoint provides a GET method to retrieve and manage details of assets impacted by incidents. It enables users to analyze event details, including asset information and performance statistics, similar to how Impact Services event details are viewed in the user interface. This is crucial for understanding affected assets, allowing users to analyze, acknowledge, and potentially perform quick edit actions related to incidents and their impacted services. It supports viewing asset details and performance statistics, aligning with \"Analyse\" quick actions for events. The endpoint is designed for incident management and analysis, likely used by NOC users or technicians.", "semantic_keywords": ["Incident", "Asset Management", "Performance Statistics"], "ontology_classification": {"features": ["asset_linking_&_information_access", "quick_edit_(key_attributes)", "ticket_detail_view_(via_id)", "real-time_asset_performance_monitoring", "associated_tickets_view", "event_listing_and_filtering"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/inci/incident/inci_reopen/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_inci_reopen_create", "description": "This API endpoint, `/ux/sd/inci/incident/inci_reopen/`, facilitates the reopening of an Incident ticket, allowing for either viewing or further editing. It is a POST request, suggesting a state-changing operation where an existing incident's status can be updated to 'Open' or 'In Progress' after being 'Resolved' or 'Closed'. The functionality aligns with user guide contexts that describe 'Incident Card Inline Edit' for hassle-free updates to ticket details and 'Quick Edit' actions related to status, priority, and assignees. This endpoint is crucial for managing the lifecycle of an incident, especially when an issue recurs or requires further attention after initial resolution.", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint supports a wide range of primitive and compound field types for data manipulation, including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ListField`, and `DictField`. Special handling is noted for `ReferenceField` (similar to Django REST Framework's `ForeignKey`) and `EmbeddedDocumentField`. While the API is designed to handle common data types, it's important to note that `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested. Developers should be aware of these limitations when constructing requests. Given the context of 'Quick Actions' and 'Incident Card Inline Edit', this endpoint likely supports dynamic updates to various incident attributes upon reopening."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Support Agent", "Administrator", "Requester"], "primary_use_case": "To facilitate the reopening of an Incident ticket, allowing for further viewing or editing of its details and status, especially when a previous resolution is deemed unsatisfactory or the issue recurs. This is crucial for managing the full lifecycle of an incident ticket."}, "content_for_embedding": "This API endpoint allows for the reopening of an existing Incident ticket. It is a POST request that updates the ticket's status to 'Open' or 'In Progress' after it has been 'Resolved' or 'Closed'. The functionality supports dynamic updates to various incident attributes through features like 'Incident Card Inline Edit' and 'Quick Edit' actions, enabling modifications to status, priority, urgency, severity, impact, and assignee. Reopening is typically requested by a user or requester unsatisfied with a resolution, and can occur when the ticket status is 'Waiting for Closure' or if a 'Resolved' ticket is 'Rejected'.", "ontology_classification": {"features": ["ticket_re-opening", "ticket_state_&_status_management", "incident_card_inline_editing", "quick_edit_(key_attributes)", "detailed_ticket_editing"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Ticket Re-opening", "Incident Update", "Status Update"]}}, {"path": "/ux/sd/inci/incident/inci_resolve/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_inci_resolve_create", "description": "This POST endpoint facilitates the resolution of an Incident within the system. It allows for detailed viewing and editing of Incident records, integrating functionalities such as quick edits for status, priority, urgency, severity, impact service, and assignee. The API supports a comprehensive range of data types for the request body, enabling the update of various incident attributes, and it aims to simplify ticket resolution in a single click, as highlighted in the user guides. Beyond mere editing, this endpoint is crucial for managing the lifecycle of incidents and ensuring compliance with SLA objectives.", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to be highly flexible, accommodating various data types for updating Incident details. It particularly supports primitive fields like StringField, IntField, DateTimeField, and BooleanField, as well as complex structures such as ListField and DictField for nested data. ReferenceField allows linking to other entities, while EmbeddedDocumentField can include nested document data. Common use cases for this API include updating incident status to 'Resolved', changing the assignee, modifying priority based on new information, or performing quick edits to a ticket's attributes. The endpoint is integral to streamlining IT service management processes and improving service delivery by proactively addressing issues and facilitating efficient ticket handling."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Technicians", "Service Desk Agents"], "primary_use_case": "Facilitates the resolution and detailed updating of incident tickets within an IT service management system."}, "content_for_embedding": "This API endpoint is designed for the resolution of incidents and comprehensive management of incident records. It supports detailed viewing and editing of incident attributes, including quick edits for status, priority, urgency, severity, impact service, and assignee. The primary function is to simplify ticket resolution, often in a single click, and to manage the full lifecycle of incidents, ensuring compliance with SLA objectives. It allows for updating incident status to \"Resolved\" and modifying various ticket details.", "ontology_classification": {"features": ["ticket_resolution_functionality", "one-click_complete_&_resolve", "quick_edit_(key_attributes)", "incident_card_inline_editing", "ticket_state_&_status_management", "ticket_assignment_(individual/team/expertise)", "detailed_ticket_editing"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Incident Resolution", "Ticket Update", "Quick Edit"]}}, {"path": "/ux/sd/inci/incident/incident-data/{id}/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_incident_data_retrieve", "description": "This API endpoint allows users to view or edit a specific Incident by its unique identifier. It facilitates hassle-free updates to incident details, including assignees and ticket information, aligning with the functionality of 'Incident Card Inline Edit'. Users can manage and complete large requests, get an overview of ticket status (open, on hold, closed), and identify frequently raised issues. The API supports actions similar to 'Quick Edit' for changes in status, priority, urgency, severity, impact service, and assignee, and also allows for 'Detailed Edit' of incident information.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter is a mandatory path parameter representing the unique identifier of the incident to be viewed or edited. This endpoint is crucial for functionalities such as tracking assigned tickets, accessing recent activity, interactions, and attachments related to an incident, and simplifying ticket resolution. It integrates with features like 'Workspace Incident Action' providing quick access to incident details via mouse hover. The incident summary acts as the mail subject when an incident is raised, and a brief description is mandatory to work on the incident. This API is essential for managing incidents effectively within the system."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Help Desk Agents", "Administrators"], "primary_use_case": "This API allows users to view and edit specific incident details, including status, assignee, and other ticket-related information, facilitating efficient incident management and resolution."}, "content_for_embedding": "This API endpoint is designed for retrieving and updating specific incident records using a unique identifier. It enables users to perform quick and detailed edits on incident attributes such as status, priority, urgency, severity, impact service, and assignee. The functionality supports features like \"Incident Card Inline Edit\" and \"Workspace Incident Action\" for streamlined ticket handling, tracking assigned tickets, accessing recent activity, interactions, and attachments, and simplifying ticket resolution.", "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "incident_card_inline_editing", "quick_edit_(key_attributes)", "detailed_ticket_editing", "ticket_tracking", "ticket_resolution_functionality", "workspace_incident_actions_(hover)", "ticket_state_&_status_management", "assignee_management", "ticket_history_view", "attachment_management", "communication_tab_(centralized_history)", "customizable_summary_card"], "primary_module": "ticket_management", "confidence_score": 1}, "semantic_keywords": ["Incident", "Ticket Management", "Edit"]}}, {"path": "/ux/sd/inci/incident/options/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_options_retrieve", "description": "This API endpoint provides functionalities for viewing and editing incidents within the system. It supports various actions related to incident management, including quick edits for fields like status, priority, urgency, severity, and assignee, as well as detailed editing of incident information. The endpoint enables the system to manage incident lifecycles effectively, tracking changes and updates for streamlined service delivery.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for incident management within the system, allowing users to perform 'Quick Edit' actions directly influencing an incident's status and immediate details. It also supports more comprehensive 'Detailed Edit' operations for full incident information. While the current API specification does not list parameters, context indicates that edit operations often involve fields such as status, priority, urgency, severity, impact service, and assignee. The flexibility of 'Incident Card Inline Edit' and 'Quick Actions' highlights the importance of this endpoint in enabling hassle-free updates to assignees and ticket details."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "IT Support Staff", "Incident Managers", "Administrators"], "primary_use_case": "To enable comprehensive management of incidents, allowing users to view, quickly edit, and perform detailed edits on incident information and their lifecycle."}, "content_for_embedding": "This API endpoint is designed for comprehensive incident management, enabling users to view and edit incident details within the system. It supports both 'Quick Edit' functionalities for key attributes like status, priority, urgency, severity, and assignee, and 'Detailed Edit' operations for more extensive incident information. The endpoint is crucial for managing the entire incident lifecycle, tracking changes and updates to ensure streamlined service delivery. It facilitates 'Incident Card Inline Edit' and 'Quick Actions' for hassle-free updates to assignees and ticket details. The API also plays a role in incident creation and allows for configuration of workflows and permissions related to incident actions.", "ontology_classification": {"features": ["incident_card_inline_editing", "quick_action_panel", "quick_edit_(key_attributes)", "detailed_ticket_editing", "ticket_state_&_status_management", "ticket_ownership_management", "ticket_tracking"], "primary_module": "ticket_management", "confidence_score": 1}, "semantic_keywords": ["Incident Update", "Quick Edit", "Detailed Edit"]}}, {"path": "/ux/sd/inci/incident/process-rich-text/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_process_rich_text_retrieve", "description": "This endpoint is used to retrieve rich text data, particularly relevant for processing incoming communications such as emails where the message body becomes the description or the request summary. It is designed to handle and display formatted text content, potentially as part of an incident or service request, similar to how email message bodies are captured for service requests.", "summary": "Get rich text data", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "additional_info": "While the API specification shows no explicit parameters or request body, given the context, this endpoint likely processes or fetches rich text content that originates from various sources, especially email. The concept of 'rich text' here could pertain to the formatted message body of an email that gets mapped as a description or summary for a service request within the system (as highlighted in Context Ranks 1 and 4). This endpoint could be used to display or manipulate such stored rich text data associated with incidents or service requests. No specific usage notes or known issues are directly inferred from the provided contexts for this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Agent", "Service Desk Agent"], "primary_use_case": "This API retrieves and processes rich text content, primarily from emails, to be used as descriptions or summaries for incidents and service requests. It helps in centralizing and displaying communication related to tickets."}, "content_for_embedding": "This API retrieves and processes rich text content, such as email message bodies, for display and use within incident and service request descriptions or summaries. It supports the communication features within ticket management, including the display of formatted text and potentially enabling text enhancement capabilities for agents and technicians.", "ontology_classification": {"features": ["communication_tab_(centralized_history)", "communication_text_enhancement"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Rich Text", "Communication", "Incident"]}}, {"path": "/ux/sd/inci/incident/requester_search/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_requester_search_retrieve", "description": "This API endpoint facilitates the search for existing requesters within the system. Requesters are typically users who request services. The endpoint is part of the incident management module, allowing for the identification and selection of a service requester, which is a crucial step when creating or managing incidents.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is designed for use cases where an existing requester needs to be identified, such as when adding a new request or problem, and the 'Requester' module is involved. While the original description mentioned viewing or editing incidents, the contextual information strongly indicates this specific endpoint's primary function is related to requester search and selection, not incident viewing or editing directly. The current API specification does not define any parameters or request body for this GET request, implying a search might be performed implicitly or through other mechanisms not detailed in this specific snippet."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agent", "Incident Manager", "Request Creator"], "primary_use_case": "To efficiently search for and identify existing requesters within the system, primarily for associating them with incidents or service requests."}, "content_for_embedding": "This API endpoint enables the efficient search and retrieval of existing requester profiles within the system. It is a critical component for associating service requests or incidents with specific users, primarily utilized within the incident and request management workflows. The endpoint facilitates the identification and selection of requesters, streamlining the process of creating or updating related records.", "ontology_classification": {"features": ["requester_search_&_add"], "primary_module": "ticket_management", "confidence_score": 0.95}, "semantic_keywords": ["Requester Management", "Search", "Incident"]}}, {"path": "/ux/sd/inci/incident/save-rich-text/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_save_rich_text_create", "description": "This endpoint provides functionality to save rich text data, particularly relevant for content such as descriptions for service requests, incident reports, comments, notes, or mail bodies within the system. The rich text content, especially when originating from sources like email, can become the primary `description` or `summary` for various records, as highlighted in the system's user guides. This endpoint supports a wide array of primitive and compound field types for comprehensive data persistence.", "summary": "Save rich text data", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "additional_info": "The `request_body_description` indicates that this endpoint serializes documents, recognizing primitive fields like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `URLField`, and `EmailField`. Compound fields such as `ListField` and `DictField` are also supported, mapping to corresponding DRF fields. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializer autogeneration for depth greater than zero. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` have their own serializer fields. It is important to note that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. All other fields might be mapped to `DocumentField` and could potentially lead to unexpected behavior. For scenarios where requests are generated from email, the email message body is typically saved as the description via a similar mechanism, underscoring the importance of this rich text saving capability in maintaining detailed records for incidents, changes, or service requests."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "Incident Managers", "IT Support Personnel", "End-users submitting requests or comments"], "primary_use_case": "To persist and manage rich text content for various operational records such as incident reports, service requests, comments, and notes, including content originating from emails."}, "content_for_embedding": "This API endpoint is designed to save rich text data, serving as descriptions, summaries, comments, notes, or mail bodies for various system records, including service requests and incident reports. It supports diverse field types for comprehensive data persistence, particularly handling email message content for record descriptions.", "ontology_classification": {"features": ["communication_text_enhancement", "internal_notes", "lifecycle_communication_management", "email-to-ticket_conversion"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Rich Text", "Save", "Communication"]}}, {"path": "/ux/sd/inci/incident/workflow_options_map/", "method": "POST", "details": {"operationId": "ux_sd_inci_incident_workflow_options_map_create", "description": "This API endpoint facilitates the configuration and management of workflows specifically for Incidents. It allows users to define, view, and potentially edit the flow of activities for incident resolution. Workflows are built using a drag-and-drop interface, enabling the creation of customized processes based on organizational, compliance, or process requirements. This includes configuring triggers (such as service catalog-based triggers) and conditions that govern the workflow's execution. The endpoint is part of the system's workflow management capabilities, which allow for structured handling of incidents.", "tags": ["Incident"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/IncidentList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint contributes to the broader functionality of defining and editing Incident workflows. When building a workflow, key components like Triggers (initial actions that start the workflow, currently primarily service catalog-based) and Conditions (one or more criteria to be met) must be defined. While the primary method is POST, implying creation or submission of workflow configurations, the description also mentions 'viewed or edited', suggesting it might support retrieving workflow options or initiating editing processes. The request body details specify the recognized primitive and compound fields (e.g., StringField, IntField, ListField, DictField, ReferenceField, EmbeddedDocumentField) that can be used to construct the workflow definitions. Developers should note the specific handling of `ReferenceField` and `EmbeddedDocumentField` based on serializer depth. Fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. This API is integral for administrators looking to automate and streamline incident management processes within the Infraon platform."}, "llm_generated": {"business_context": {"user_personas": ["Administrators", "IT Managers", "Developers"], "primary_use_case": "To define, configure, and manage automated workflows specifically for incident resolution, enabling the streamlining of incident management processes."}, "content_for_embedding": "This API facilitates the configuration and management of workflows tailored for Incidents. It allows users to define, view, and edit the sequence of activities for incident resolution, leveraging a drag-and-drop interface. The API supports the configuration of triggers (such as service catalog-based) and conditions that govern workflow execution, contributing to the automation and streamlining of incident management. It handles various primitive and compound field types for constructing workflow definitions and is essential for administrators and developers in automating incident handling within the Infraon platform.", "ontology_classification": {"features": ["workflow_automation", "ticket_state_&_status_management", "customizable_ticket_statuses", "notification_trigger_configuration", "ticket_resolution_functionality"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Workflow Automation", "Incident", "Configuration"]}}, {"path": "/ux/sd/inci/incident/workflow_status/", "method": "GET", "details": {"operationId": "ux_sd_inci_incident_workflow_status_retrieve", "description": "This API endpoint allows users to retrieve and manage the workflow status of Incidents. It is a critical component for configuring, triggering, and modifying incident workflows, which are designed using drag-and-drop elements to define the flow of activities in a sequence. Workflows can be triggered based on single or multiple conditions within the service catalog and involve defining triggers, conditions, states, and actions to create customized workflows that align with organizational, compliance, or process requirements.", "tags": ["Incident"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/IncidentList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is specifically designed for handling the workflow aspects of Incidents, rather than general incident viewing or editing. While the initial description suggests viewing/editing Incidents, the highly relevant contexts indicate a deep focus on workflow management. Key components of a workflow, such as triggers, conditions, state, and action, are integral to its functionality. Users can configure and manage the workflow through simple drag-and-drop elements. This API likely facilitates the backend operations for the 'Infraon Configuration -> Workflow -> Add New Workflow -> Incident' process, enabling the definition of workflow details like Name, Description, Operand, and Value."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "IT Operations", "Service Desk Agent"], "primary_use_case": "To enable users to retrieve, configure, trigger, and modify the workflow status of Incidents, thereby automating and standardizing incident handling processes."}, "content_for_embedding": "This API endpoint is designed for comprehensive management of Incident workflows. It allows users to retrieve the current workflow status of incidents and provides functionalities to configure, trigger, and modify these workflows. This is crucial for defining the sequence of activities, setting triggers and conditions, and managing states and actions within the incident lifecycle. It specifically supports the backend operations for workflow definition within the Infraon Configuration module, focusing on the automation and standardization of incident processes rather than general incident viewing or editing.", "semantic_keywords": ["Workflow Automation", "Incident", "Status"], "ontology_classification": {"features": ["workflow_automation", "ticket_state_&_status_management", "ticket_tracking", "ticket_monitoring", "record_lifecycle_&_status_management"], "primary_module": "infraon_configuration", "confidence_score": 0.95}}}, {"path": "/ux/sd/problem/conversation/", "method": "GET", "details": {"operationId": "ux_sd_problem_conversation_retrieve", "description": "This API endpoint provides functionalities related to Problem conversations, allowing users to view and edit problem details. It supports actions such as analyzing problems, viewing communication history, forwarding emails, adding notes, and managing work logs. The endpoint also facilitates resolving problems and displays key problem attributes like Problem Source, Priority, Requester, Subject, Team, and Assignee. It can be used to track the problem's lifecycle and view the history of interactions and comments related to the problem.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is crucial for problem management, enabling technicians or users with appropriate permissions (requesters) to manage problems. While the API specification did not detail request body parameters, based on the context, typical actions like adding notes, managing work logs, or converting a problem to a Knowledge Base article (if resolved/closed) would likely involve specific data fields. Information such as the problem's source (e.g., email, web, phone), requester details, and assignee are integral to problem representation and management. The API also conceptually supports 'quick edit' actions like status, priority, urgency, severity, and impact service, common in UI interactions for problem management. The `conversation` aspect implies a focus on ongoing dialogue and historical communication around the problem."}, "llm_generated": {"business_context": {"user_personas": ["technician", "requester"], "primary_use_case": "This API endpoint is designed for comprehensive problem management, allowing users to view, edit, track the lifecycle, and manage communication related to problems. It supports actions like analyzing problems, adding notes, and resolving issues, making it essential for technicians and authorized requesters to efficiently handle and monitor problem-solving processes."}, "content_for_embedding": "This API endpoint manages problem conversations, enabling users to view, edit, and track problem details. It supports analyzing problems, viewing communication history, forwarding emails, adding notes, and managing work logs. Key attributes like Problem Source, Priority, Requester, Subject, Team, and Assignee are displayed. The API facilitates problem resolution and tracks the problem's lifecycle, including interactions and comments. It is crucial for technicians and authorized requesters in problem management, supporting quick edits for status, priority, urgency, severity, and impact service, and emphasizing ongoing dialogue and historical communication.", "semantic_keywords": ["Problem Management", "History", "Communication"], "ontology_classification": {"features": ["problem_logging_access_control", "problem_source_tracking", "problem_classification_and_prioritization", "root_cause_analysis_(rca)_tools", "problem_resolution_management", "change_request_linking", "change_request_initiation", "knowledge_base_integration", "problem_ownership_assignment", "problem_monitoring_and_tracking", "internal_communication_tools", "problem_lifecycle_states_and_statuses", "problem_to_kb_conversion", "multiple_problem_list_views", "problem_summary_card", "in-line_status_and_priority_editing", "detailed_problem_view", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_quick_edit", "detailed_problem_editing", "problem_deletion", "problem_filtering", "problem_search", "date-based_problem_filtering", "problem_tagging", "impact_service_selection"], "primary_module": "problem_management", "confidence_score": 1}}}, {"path": "/ux/sd/problem/conversation/", "method": "POST", "details": {"operationId": "ux_sd_problem_conversation_create", "description": "This API endpoint, `/ux/sd/problem/conversation/`, facilitates the viewing, editing, and management of 'Problem' records within the system. It enables users to interact with problem details, including communication history, adding notes, analyzing, viewing, and adding work logs. Furthermore, it supports resolving a problem directly from this interface. Key attributes associated with a problem that can be viewed or edited include the Problem Source, Priority, Requester (initial), Subject, Team, and Assignee.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is central to the Problem Management module, allowing technicians or users with appropriate permissions (referred to as requesters) to manage problem lifecycles. While the current specification indicates no request body, typical operations for a 'view or edit' endpoint would involve either querying specific problem details or submitting updated problem information. Based on the context, problems can be initiated through various sources like web portals, mobile apps, email, or a technician on call. Requesters are usually technicians or users with permissions who can add problems. The system also track communication history, allowing technicians to reply to/forward emails and add comments/notes. A problem's history, including comments and interactions, can be viewed through this module.\n\nNote: The documentation suggests that problems can also be automatically created by network monitoring systems via standard APIs (Context Rank 3), implying this endpoint is part of a broader problem ingestion and management workflow. The ability to 'resolve a problem from this screen too' (Context Rank 1) indicates this endpoint likely encompasses state transitions for problem resolution."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "Users with appropriate permissions (Requesters)"], "primary_use_case": "To manage the full lifecycle of problem records, enabling users to view, edit, track communication, add notes, and resolve problems within the system."}, "content_for_embedding": "This API endpoint, `/ux/sd/problem/conversation/`, is a core component of the Problem Management module. It allows technicians and authorized users to comprehensively manage problem records. This includes viewing detailed problem information, editing attributes like Problem Source, Priority, Requester, Subject, Team, and Assignee, and adding notes and work logs. The API also facilitates tracking communication history, enabling technicians to reply to emails and add comments. A key function is the ability to resolve problems directly from the interface. Furthermore, it supports the conversion of problems into Knowledge Base articles and the initiation or linking of change requests. Problems can originate from various sources such as web portals, mobile apps, email, or direct technician input, and can also be automatically created by network monitoring systems. The endpoint supports the entire problem lifecycle, including tracking history, interactions, and attachments, and managing problem states and statuses.", "ontology_classification": {"features": ["problem_logging_access_control", "problem_source_tracking", "ticket_association_&_creation", "problem_classification_and_prioritization", "problem_resolution_management", "problem_review_and_closure", "change_request_linking", "change_request_initiation", "knowledge_base_integration", "problem_monitoring_and_tracking", "internal_communication_tools", "problem_lifecycle_states_and_statuses", "problem_to_kb_conversion", "multiple_problem_list_views", "problem_summary_card", "detailed_problem_view", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "detailed_problem_editing", "problem_deletion", "known_error_record_management"], "primary_module": "problem_management", "confidence_score": 0.9}, "semantic_keywords": ["Problem Management", "Edit", "View"]}}, {"path": "/ux/sd/problem/conversation/{id}/", "method": "GET", "details": {"operationId": "ux_sd_problem_conversation_retrieve_2", "description": "This GET API endpoint allows for the viewing of a specific problem conversation thread within the UX/SD module. It provides access to the communication history, enabling users to analyze, view, and add work logs. It also allows for the resolution of a problem from this screen. Key problem details accessible via this endpoint include the problem source (e.g., Web portal, Mobile app, Email, By a technician on call, WhatsApp, Chatbot), priority, requester, subject, assigned team, and assignee.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the problem conversation. While the endpoint is primarily for viewing, the comprehensive context suggests that details like comments, history, interaction logs, attachments, and the option to convert the problem to a Knowledge Base article or add a change request are associated with the problem view/edit functionality. This endpoint effectively serves as the interface for a technician or user to manage the lifecycle of a problem, from initial viewing to potential resolution or escalation. The ability to 'edit' as stated in the original description likely refers to the interactive elements available through the UI that this backend data supports, rather than a direct PUT/PATCH operation on this specific endpoint (which is a GET request). For editing specific request details, other endpoints like 'Quick Edit' or 'Detailed Edit' might be relevant, as hinted in the context."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Support Agent", "Administrator", "User"], "primary_use_case": "To view and manage the details of a specific problem conversation thread, including its history, communication, and associated actions."}, "content_for_embedding": "This API retrieves the detailed conversation thread for a specific problem, identified by its unique ID. It provides comprehensive information including communication history, work logs, problem source, priority, requester, subject, assigned team, and assignee. This data supports various UI functionalities such as viewing comments, interaction history, attachments, and enabling actions like converting the problem to a Knowledge Base article or initiating a change request, facilitating the management and resolution of problems.", "ontology_classification": {"features": ["detailed_problem_view", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_to_kb_conversion", "change_request_linking", "problem_source_tracking", "problem_resolution_management", "internal_communication_tools"], "primary_module": "problem_management", "confidence_score": 1}, "semantic_keywords": ["Problem Management", "Detailed View", "History"]}}, {"path": "/ux/sd/problem/conversation/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_problem_conversation_update", "description": "This API endpoint allows for the viewing and comprehensive editing of a specific Problem record within the system. Identified by its unique conversation `id`, users can update various aspects of a problem, including its communication history, add notes, analyze it, view and add work logs, and even resolve it. It supports detailed modifications such as changing the problem's source, priority, requester, subject, assigned team, and assignee. The endpoint also allows for quick updates to status, urgency, severity, and impact service. This PUT operation facilitates the ongoing management and resolution of problems.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a mandatory path parameter representing the unique identifier of the problem conversation to be viewed or edited. While the API specification does not detail a request body, based on the context, updating a problem record would likely involve sending a JSON payload containing the fields to be modified (e.g., source, priority, assignee, status, notes, work logs). Key fields that can be manipulated include: Problem Source (e.g., Web portal, Mobile app, Email, By a technician on call, WhatsApp, Chatbot), Priority, Requester, Subject, Team, and Assignee. Quick edit actions cover status, priority, urgency, severity, impact service, and assignee. The endpoint is integral for technicians and authorized users to manage problems throughout their lifecycle, from initial reporting to resolution or conversion into a Knowledge Base article upon closure."}, "llm_generated": {"business_context": {"user_personas": ["technician", "authorized user"], "primary_use_case": "To enable comprehensive management and updating of problem records, facilitating their resolution and lifecycle management within the system."}, "content_for_embedding": "This API endpoint facilitates the comprehensive management and updating of specific Problem records within the system. Users can view and modify various attributes of a problem, including its communication history, notes, work logs, source, priority, requester, subject, assigned team, and assignee. It also supports quick updates to status, urgency, severity, and impact service. This PUT operation is crucial for technicians and authorized users to manage problems throughout their lifecycle, from initial reporting to resolution or conversion into a Knowledge Base article.", "ontology_classification": {"features": ["problem_source_tracking", "problem_classification_and_prioritization", "problem_resolution_management", "problem_review_and_closure", "change_request_linking", "knowledge_base_integration", "problem_ownership_assignment", "problem_monitoring_and_tracking", "internal_communication_tools", "problem_lifecycle_states_and_statuses", "problem_to_kb_conversion", "detailed_problem_view", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_quick_edit", "detailed_problem_editing", "impact_service_selection", "follower_management", "problem_tagging"], "primary_module": "problem_management", "confidence_score": 0.95}, "semantic_keywords": ["Problem Management", "Update", "Detailed Edit"]}}, {"path": "/ux/sd/problem/conversation/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_problem_conversation_destroy", "description": "This API endpoint facilitates the deletion of a specific problem conversation identified by its unique ID. While the original description mentioned viewing or editing, the 'DELETE' method strongly suggests its primary function is removal. Problem conversations, as described in the user guide, are integral to tracking communication history, notes, and work logs related to a problem. Deleting a conversation is an irreversible action, similar to how 'Delete' operations are described for other entities like 'Request' in the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The 'id' path parameter is a mandatory string that uniquely identifies the conversation to be deleted. The system manages problems from various sources (e.g., Web portal, Mobile app, Email, technician on call, WhatsApp, Chatbot), and these conversations are part of the detailed record for each problem. Users with appropriate permissions, such as technicians or requesters, interact with problems and their associated conversations. This endpoint specifically targets a conversation within a problem's context, not the problem itself. Although a 'response_description' of 'No response body' is specified, successful deletion typically implies an HTTP 204 No Content status."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Requester"], "primary_use_case": "To permanently remove specific communication records, notes, or work logs associated with a problem within the system."}, "content_for_embedding": "This API endpoint allows for the irreversible deletion of a specific problem conversation, identified by a unique ID. These conversations are crucial for tracking communication history, notes, and work logs related to a problem. The system manages problems from various sources, and these conversations form part of the detailed record for each problem. This operation is similar to other delete functionalities in the system, emphasizing its permanent nature. It is used by authorized personnel like technicians or requesters to manage problem-related communication.", "ontology_classification": {"features": ["problem_deletion", "internal_communication_tools", "problem_history_tracking"], "primary_module": "problem_management", "confidence_score": 1}, "semantic_keywords": ["Delete", "Problem Management", "History"]}}, {"path": "/ux/sd/problem/problem/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_list", "description": "This endpoint efficiently retrieves a paginated list of 'Problems' within the current organization. In the context of Infraon's Problem Management module, a 'Problem' represents the underlying root cause of one or more recurring tickets or incidents that require root cause analysis. This API supports pagination through `items_per_page` and `page` parameters, allowing for efficient data retrieval. Additionally, it offers flexible sorting capabilities via the `sort` and `reverse` parameters, enabling users to order problems based on specific keys and in ascending or descending order. The objective of Problem Management, which this endpoint supports, is to provide solutions or workarounds to identified problems to minimize their impact and prevent reoccurrence.", "summary": "Gets a list of Problems", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ProblemList"}}}}, "description": ""}}, "additional_info": "Problem Management involves managing a problem's lifecycle from creation to closure. It aims to reduce the number of recurring tickets, improve customer satisfaction, and increase productivity. While this API allows listing problems, the resolution of problems typically requires L2/L3-level technical expertise. The retrieved problems might have details such as a summary card, problem description, status, subject, team, requester name, and actions sorted by time. The `sort` parameter can be used with keys like 'Problem ID', 'Requester', 'Team', or 'Status' for comprehensive sorting. Note that the outcome of a problem can be a solution, a change request (which might require a separate API call to initiate), or a service request."}, "llm_generated": {"business_context": {"user_personas": ["IT technicians", "Helpdesk agents", "Problem managers", "Administrators"], "primary_use_case": "To efficiently retrieve and manage a paginated list of problems, enabling root cause analysis and minimizing the impact of recurring incidents."}, "content_for_embedding": "This API endpoint retrieves a paginated list of \"Problems\" within an organization, which represent the underlying root causes of recurring tickets or incidents. It supports pagination using `items_per_page` and `page` parameters, and offers flexible sorting capabilities via `sort` and `reverse` parameters. The API is crucial for Problem Management, aiming to provide solutions or workarounds to identified problems to minimize their impact and prevent reoccurrence. The retrieved problem details can include a summary card, description, status, subject, team, and requester name, and can be sorted by various keys like Problem ID, Requester, Team, or Status. This supports the overall problem lifecycle management from creation to closure, reducing recurring tickets and improving customer satisfaction.", "semantic_keywords": ["Problem Management", "Retrieval", "Pagination"], "ontology_classification": {"features": ["problem_monitoring_and_tracking", "multiple_problem_list_views", "problem_summary_card", "aging_metrics_display", "detailed_problem_view", "problem_history_tracking", "problem_filtering", "problem_search", "attachment_management", "problem_logging_access_control"], "primary_module": "problem_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/problem/problem/{id}/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_retrieve", "description": "This endpoint is used to retrieve comprehensive details for a specific problem identified by its unique ID within the current organization. A 'problem' is defined as the underlying root cause of one or more tickets, often arising from recurring incidents with common issues. This API allows users to fetch all associated attributes and related information about a problem, which is crucial for Problem Management \u2013 the process responsible for managing the lifecycle of a problem from its creation to closure and providing solutions or workarounds to minimize impact.", "summary": "Gets a problem with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the problem. Accessing the details of a problem via its ID is a common action within the system, similar to clicking on a Problem ID to view its comprehensive details and related entities. This API helps in understanding the context of recurring issues and their root causes, facilitating the Problem Management process and potentially linking problems to tickets, requests, or changes for comprehensive analysis and resolution."}, "llm_generated": {"business_context": {"user_personas": ["Problem Managers", "IT Support Technicians", "Administrators", "Service Desk Agents"], "primary_use_case": "This API is used to retrieve comprehensive details of a specific problem within an organization's IT service management system. It supports the Problem Management process by providing access to all associated attributes and related information, which is crucial for root cause analysis, managing problem lifecycles, and linking problems to related tickets, requests, or changes."}, "content_for_embedding": "This API retrieves comprehensive details for a specific problem using its unique ID. A problem is the underlying root cause of one or more tickets, and this API supports the Problem Management process by providing all associated attributes, including history, attachments, source, and linked entities like tickets and change requests. It's similar to viewing a problem's full details by clicking its ID in a grid view, facilitating root cause analysis and problem resolution.", "ontology_classification": {"features": ["detailed_problem_view", "problem_history_tracking", "attachment_management", "problem_source_tracking", "change_request_linking", "ticket_association_&_creation", "symptom_description_field"], "primary_module": "problem_management", "confidence_score": 1}, "semantic_keywords": ["Details retrieval", "Problem Management", "ID"]}}, {"path": "/ux/sd/problem/problem/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_problem_problem_update", "description": "This endpoint allows for the detailed modification of an existing 'Problem' record within the current organization. A 'Problem' is defined as the underlying root cause of one or more tickets, often stemming from recurring incidents with common issues. This PUT operation enables users to update various attributes of a problem, including its details, urgency, severity, and impact, as suggested by the 'Edit' functionality mentioned in the user guides. Changes made via this endpoint contribute to managing the lifecycle of a problem from its creation until its closure, aiming to provide solutions or workarounds to minimize impact.", "summary": "Edits the problem with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is mandatory and uniquely identifies the problem to be edited. The request body for this endpoint is highly flexible, supporting various primitive and compound data types for serializing problem details. Recognized primitive fields include `StringField`, `URLField`, `EmailField`, `IntField`, `FloatField`, `BooleanField`, `DateTimeField`, `DateField`, and `UUIDField`. Compound fields like `ListField` and `DictField` are also supported for nested data structures. Special handling is in place for `ReferenceField`, `EmbeddedDocumentField`, `GenericReferenceField`, and `GenericEmbeddedDocumentField`, which map to corresponding serializer fields to allow for complex object relationships and nested document structures. While `FileField`, `ImageField`, and `BinaryField` are noted as not well-supported or untested, developers should be aware that all other fields are mapped to `DocumentField` and may not behave as expected. This endpoint is crucial for managing and updating problem records, allowing for detailed modifications beyond quick edits like status or priority, as indicated by the 'Detailed Edit' button in related user guides."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Problem Manager", "Administrator"], "primary_use_case": "Detailed modification and update of existing problem records within an organization."}, "content_for_embedding": "This API allows for the detailed modification and update of an existing 'Problem' record by its unique ID. It enables users to edit various attributes such as details, urgency, severity, and impact, facilitating the management of a problem's lifecycle from creation to closure. This is a crucial endpoint for comprehensive problem record updates, going beyond quick edits.", "ontology_classification": {"features": ["detailed_problem_editing", "problem_resolution_management", "problem_lifecycle_states_and_statuses", "problem_monitoring_and_tracking", "attachment_management", "problem_classification_and_prioritization", "problem_history_tracking", "follower_management", "problem_tagging"], "primary_module": "problem_management", "confidence_score": 0.95}, "semantic_keywords": ["Problem Management", "Detailed Edit", "Update"]}}, {"path": "/ux/sd/problem/problem/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_problem_problem_destroy", "description": "This endpoint soft-deletes a specific 'Problem' by its unique identifier (`id`) for the current organization. A 'Problem' is defined as the underlying root cause of one or more tickets or recurring incidents. Problem Management centrally manages the lifecycle of these problems, aiming to find solutions or workarounds to minimize impact and prevent reoccurrence. Deleting a Problem using this endpoint is an irreversible action.", "summary": "Deletes the problem with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is required and uniquely identifies the Problem to be deleted. As highlighted in the Infinity User Guide (Rank 1), this action is irreversible, meaning once a Problem is deleted, it cannot be recovered. In the context of Problem Management, a Problem can be linked to tickets, requests, or changes. Deleting a Problem might impact these linked entities, though the exact cascading effects are not specified in the provided contexts. It's crucial to ensure that the correct Problem `id` is provided to prevent unintended data loss."}, "llm_generated": {"business_context": {"user_personas": ["Problem Managers", "IT Support Staff", "Administrators"], "primary_use_case": "To manage the lifecycle of IT problems by enabling the permanent removal of specific problem records."}, "content_for_embedding": "This API endpoint facilitates the soft-deletion of a specific 'Problem' record, identified by its unique ID, within the Problem Management system. A 'Problem' is defined as the underlying root cause of one or more tickets or recurring incidents. This DELETE operation is irreversible, meaning once a problem is deleted, it cannot be recovered. It is critical to ensure the correct problem ID is provided to prevent unintended data loss. This functionality is central to maintaining an accurate and relevant problem database by removing resolved or outdated problem entries.", "ontology_classification": {"features": ["problem_deletion", "detailed_problem_view", "problem_lifecycle_states_and_statuses"], "primary_module": "problem_management", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Problem Management", "Irreversible"]}}, {"path": "/ux/sd/problem/problem/add-attachment/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_add_attachment_create", "description": "This endpoint facilitates the addition of new attachments to an existing problem within the system. Users can upload various types of files, including emails and screenshots, which are then associated with the specific problem record. It allows for the documentation of critical information relevant to the problem's resolution or history, making it accessible through the 'Attachment' section of the problem details.", "summary": "Add attachments for the selected problem.", "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "additional_info": "Attachments can be added by either dragging and dropping files or by using the file upload mechanism. Users can typically describe the attachment and select a category (e.g., default, ticket screenshot, team docs) from a dropdown for better organization. The `request_body_description` indicates that the API is designed to handle various primitive and compound field types for document serialization, though `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. This endpoint is crucial for providing visual proof or supplementary information related to the reported issue and is commonly managed through an action icon within the problem management interface."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "Technicians"], "primary_use_case": "This API allows users to add various types of attachments, such as emails and screenshots, to existing problem records within the system. This helps in documenting critical information for problem resolution and historical tracking."}, "content_for_embedding": "This API endpoint facilitates the addition of new attachments to an existing problem within the system. Users can upload various types of files, including emails and screenshots, which are then associated with the specific problem record. It allows for the documentation of critical information relevant to the problem's resolution or history, making it accessible through the 'Attachment' section of the problem details. Attachments can be added by either dragging and dropping files or by using the file upload mechanism. This endpoint is crucial for providing visual proof or supplementary information related to the reported issue and is commonly managed through an action icon within the problem management interface.", "semantic_keywords": ["Attachments", "Problem Management", "Add"], "ontology_classification": {"features": ["attachment_management"], "primary_module": "problem_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/problem/problem/attachment/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_attachment_retrieve", "description": "This endpoint provides access to all attachments associated with a specific problem. It allows users to view the documents and files linked to the current problem, similar to how attachments are displayed for requests and change requests. This functionality is crucial for tracking all supporting evidence and related content for a problem.", "summary": "Gets attachments for the selected problem.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "additional_info": "The API focuses solely on retrieving attachments. While various contexts discuss adding or managing attachments, this `GET` endpoint is specifically designed for fetching existing ones. It does not require any parameters, implying that the problem context is likely derived from the session or an implicit identifier. The attachments can include emails, screenshots, team documents, and other relevant files as mentioned in the user guides."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "Users involved in problem resolution"], "primary_use_case": "To retrieve all attachments associated with a specific problem, enabling users to view supporting documents and files linked to the problem for comprehensive tracking and review."}, "content_for_embedding": "This API endpoint, GET /ux/sd/problem/problem/attachment/, is designed to retrieve all attachments associated with a specific problem. It provides users with the ability to view documents, files, emails, and screenshots linked to a problem, serving as crucial supporting evidence and related content. The endpoint operates without requiring explicit parameters, implying the problem context is derived implicitly, possibly from the user's session. This functionality is integral to problem management, allowing for comprehensive tracking and review of all relevant documentation pertaining to an ongoing problem.", "ontology_classification": {"features": ["attachment_management"], "primary_module": "problem_management", "confidence_score": 1}, "semantic_keywords": ["Attachments", "Retrieval", "Problem Management", "View"]}}, {"path": "/ux/sd/problem/problem/delete-problem-task/{id}/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_delete_problem_task_create", "description": "This API endpoint facilitates the deletion of a specific 'Problem Task' within the system. The operation is irreversible, meaning that once a problem task is deleted, it cannot be recovered. This aligns with other 'delete' functionalities described in the user guide, which consistently emphasize the irreversible nature of such actions (e.g., deleting a Problem or a Change). The endpoint targets a problem task using its unique identifier.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier (ID) of the 'Problem Task' to be deleted. While the `request_body_description` section details various primitive and compound field types supported for serialization, for this specific DELETE operation, a request body is generally not required or expected, as the action is solely based on the provided path `id`. The detailed serialization information is likely boilerplate for the system's serializer and less relevant for this particular endpoint's functionality."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support", "Problem Manager"], "primary_use_case": "Deleting a specific problem task within the system."}, "content_for_embedding": "This API allows for the irreversible deletion of a specific 'Problem Task' using its unique identifier. It is a POST request targeting a problem task by its ID, and once deleted, the task cannot be recovered. This functionality is consistent with other delete operations in the system, such as deleting a Problem or a Change.", "ontology_classification": {"features": ["problem_deletion"], "primary_module": "problem_management", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Problem Management", "Irreversible"]}}, {"path": "/ux/sd/problem/problem/delete_problem/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_delete_problem_create", "description": "This API endpoint facilitates the deletion of a Problem record. As per the user guide, this action is irreversible. While the original description suggested viewing or editing, the most relevant contexts (Rank 1 and Rank 5) clearly indicate its purpose is to delete a Problem.", "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body description details the various primitive and compound field types supported by the serializer for Documents that could theoretically be part of a Problem deletion request, though the endpoint's specific parameters are not detailed in the provided spec (\"parameters\":[]). Given the `delete_problem` path, the typical usage would involve identifying the specific Problem to be deleted, likely via an ID in the request body, path, or query parameters, although this is not explicitly defined in the provided JSON spec. There are no identified conflicts in the contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Problem Manager"], "primary_use_case": "This API is used to permanently delete specific problem records within a problem management system. This action is irreversible."}, "content_for_embedding": "This API endpoint is designed for the irreversible deletion of a Problem record. It is a POST request to '/ux/sd/problem/problem/delete_problem/'. The API is part of a larger Problem Management system, allowing users to remove problem entries. The request body is expected to contain information to identify the specific problem to be deleted, although the exact parameters are not detailed in the provided schema. This action is confirmed as irreversible in the user guide.", "ontology_classification": {"features": ["problem_deletion"], "primary_module": "problem_management", "confidence_score": 1}, "semantic_keywords": ["Delete", "Problem Management", "Irreversible"]}}, {"path": "/ux/sd/problem/problem/history/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_history_retrieve", "description": "This endpoint retrieves the complete history for a specific problem. It provides an 'Interaction' history showing the steps taken by the requester, and a 'History' which details the lifecycle of the current problem from its creation time onwards, including any comments, attachments, or changes. This allows users to track all activities and events related to a problem.", "summary": "Gets history for the selected problem.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "additional_info": "The history provided by this endpoint is analogous to the 'Interaction' and 'History' sections described in the user guide, encompassing details like attachments, problem source (email, web, phone), and options such as converting a problem to a Knowledge Base (KB) or initiating a change request if applicable. While the user guide mentions 'History' of the current request, for this problem-specific endpoint, it pertains to the problem's full lifecycle. Currently, there are no specific parameters or request body defined for this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "Administrators", "Auditors"], "primary_use_case": "This API retrieves the complete history of a specific problem, including user interactions, lifecycle events, comments, attachments, and changes. It enables users to comprehensively track and audit all activities and events related to a problem for better understanding and resolution."}, "content_for_embedding": "This API retrieves the complete history for a specific problem, providing both an \"Interaction\" history detailing steps taken by the requester and a \"History\" detailing the problem's lifecycle from creation, including comments, attachments, and changes. It allows users to track all activities and events related to a problem, analogous to the \"Interaction\" and \"History\" sections in the user guide. This includes details like attachments, problem source (email, web, phone), and options such as converting a problem to a Knowledge Base (KB) or initiating a change request if applicable. The endpoint is designed for getting the full historical context of a selected problem.", "semantic_keywords": ["Problem Management", "History", "Retrieval"], "ontology_classification": {"features": ["problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_source_tracking", "problem_to_kb_conversion", "change_request_linking", "problem_monitoring_and_tracking", "problem_lifecycle_states_and_statuses"], "primary_module": "problem_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/problem/problem/options/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_options_retrieve", "description": "This `/ux/sd/problem/problem/options/` API endpoint facilitates the viewing and detailed editing of existing problems within the system. It enables quick actions such as updating status, priority, urgency, severity, and assignee, as well as more comprehensive edits including deleting or copying problem details. The endpoint also supports actions like viewing associated change requests (if a change request has been created and the problem status is 'Open', 'In Progress', or 'On Hold') and potentially converting problems to Knowledge Base (KB) articles if the problem status is 'Resolved' or 'Closed'.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "Common quick edit actions supported include updating status, priority, urgency, severity, and the assigned service and assignee. For more detailed edits, users can utilize the 'Detailed Edit' option. The ability to add a change request for a problem is conditional on its status being 'Open', 'In Progress', or 'On Hold'. Converting a problem to a Knowledge Base article is only possible when the problem's status is 'Resolved' or 'Closed'. The API implicitly handles problem lifecycle states (Open, In Progress, On Hold, Resolved, Closed)."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "Administrators"], "primary_use_case": "To manage and update problem records, including quick edits, detailed modifications, deletion, copying, linking to change requests, and converting to knowledge base articles, thereby supporting the full problem lifecycle."}, "content_for_embedding": "This API endpoint allows for comprehensive management of existing problems within the system. Users can view problem details, perform quick edits such as updating status, priority, urgency, severity, and assignee, or conduct more detailed modifications including deleting or copying problem records. It supports the problem lifecycle by enabling the addition and viewing of associated change requests (conditional on problem status) and the conversion of resolved or closed problems into Knowledge Base articles. The API also provides access to problem history, search, and filtering capabilities.", "semantic_keywords": ["Problem Management", "Problem Editing", "Problem Lifecycle"], "ontology_classification": {"features": ["problem_quick_edit", "detailed_problem_editing", "problem_deletion", "problem_copying", "problem_lifecycle_states_and_statuses", "change_request_linking", "change_request_initiation", "knowledge_base_integration", "problem_to_kb_conversion", "multiple_problem_list_views", "in-line_status_and_priority_editing", "aging_metrics_display", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_filtering", "problem_search", "impact_service_selection", "problem_aging_reports", "problem_summary_card"], "primary_module": "problem_management", "confidence_score": 1}}}, {"path": "/ux/sd/problem/problem/problem-data/{id}/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_problem_data_retrieve", "description": "This API endpoint allows users to retrieve or modify detailed information for a specific Problem record. It supports viewing a problem's complete history, including interactions and comments, as well as its attachments and source (e.g., email, web, phone). Additionally, the endpoint facilitates editing various problem attributes. Capabilities include converting a problem to a Knowledge Base (KB) article if its status is 'Resolved' or 'Closed', and initiating or viewing a linked change request if applicable. Users can perform quick edits for fields like status, priority, urgency, severity, impact service, and assignee, or use a 'Detailed Edit' function for comprehensive modifications.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that uniquely identifies the Problem record to be viewed or edited. This endpoint is crucial for Problem Management workflows, enabling technicians to efficiently manage the lifecycle of a problem, from initial creation and tracking to resolution and closure. It provides access to key details like Problem ID, Requester, Team, and Status, supporting both summary (Panel View) and detailed views of problem information. The ability to add comments, view historical data, and manage related change requests or convert to KB articles makes this a central component for problem resolution and knowledge management within the system."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "ITSM User"], "primary_use_case": "This API endpoint is designed for comprehensive management of Problem records within an IT Service Management (ITSM) system. It allows users, primarily technicians, to retrieve, view, and modify detailed information about specific problems, track their lifecycle from creation to resolution, and manage related entities like history, attachments, comments, change requests, and knowledge base articles. It supports both quick and detailed editing of problem attributes."}, "content_for_embedding": "This API endpoint (GET /ux/sd/problem/problem/problem-data/{id}/) enables users to retrieve and modify detailed information for a specific Problem record identified by its unique ID. It provides functionalities to view a problem's complete history, including interactions and comments, as well as its attachments and source (e.g., email, web, phone). The endpoint also supports editing various problem attributes, allowing for quick edits of fields like status, priority, urgency, severity, impact service, and assignee, or comprehensive modifications via a \"Detailed Edit\" function. A key capability is the conversion of a resolved or closed problem into a Knowledge Base (KB) article and the initiation or viewing of linked change requests. This API is central to Problem Management workflows, facilitating efficient lifecycle management, problem resolution, and knowledge management by providing access to critical details such as Problem ID, Requester, Team, and Status, and supporting both summary (Panel View) and detailed views of problem information.", "ontology_classification": {"features": ["problem_source_tracking", "problem_classification_and_prioritization", "problem_resolution_management", "problem_review_and_closure", "change_request_linking", "change_request_initiation", "knowledge_base_integration", "problem_ownership_assignment", "problem_monitoring_and_tracking", "internal_communication_tools", "problem_lifecycle_states_and_statuses", "problem_to_kb_conversion", "multiple_problem_list_views", "problem_summary_card", "in-line_status_and_priority_editing", "detailed_problem_view", "auto-generated_problem_id", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_quick_edit", "detailed_problem_editing", "problem_filtering", "problem_search", "reporter_specification", "impact_service_selection", "symptom_description_field"], "primary_module": "problem_management", "confidence_score": 0.95}, "semantic_keywords": ["Problem Management", "Details retrieval", "Problem Editing"]}}, {"path": "/ux/sd/problem/problem/problem-task-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_problem_task_list_retrieve", "description": "This API endpoint allows users to retrieve and manage a specific Problem record identified by its ID. Users can view problem details, including Problem ID (auto-generated), Requester, Team, Status, Problem Source (e.g., email, web, phone), Priority, Subject, and Assignee. It also supports editing various problem attributes such as status, priority, urgency, severity, impact service, and assignee. The endpoint enables actions like adding work logs, resolving a problem, and initiating a change request if the problem's status is 'Open', 'In Progress', or 'On Hold'.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier for the Problem. Problem details can be viewed in a 'Panel View' which presents a summary card with essential information for working on the problem. Quick edit actions are available for common updates, while more detailed edits of the Problem are also supported. The API can also be used to view attached files, see problem history, and manage comments. The ability to convert a problem to a Knowledge Base (KB) is possible if the problem status is 'Resolved' or 'Closed', and solutions can be documented for permanent fixes."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "System Administrators", "Technicians"], "primary_use_case": "This API is designed for comprehensive management of Problem records, enabling users to retrieve, view, edit, resolve, and track the lifecycle of IT problems. It facilitates detailed problem analysis, communication, and integration with change management and knowledge base systems."}, "content_for_embedding": "This API endpoint allows users to retrieve, view, and manage specific Problem records by their unique ID. It provides access to problem details such as ID, Requester, Team, Status, Problem Source, Priority, Subject, and Assignee. Users can perform quick edits or detailed modifications to problem attributes like status, priority, urgency, severity, impact service, and assignee. The API supports actions including adding work logs, resolving problems, and initiating change requests for problems with \"Open\", \"In Progress\", or \"On Hold\" statuses. It also enables viewing attached files, accessing problem history, managing comments, and converting resolved or closed problems into Knowledge Base articles.", "ontology_classification": {"features": ["problem_monitoring_and_tracking", "detailed_problem_view", "problem_quick_edit", "detailed_problem_editing", "problem_resolution_management", "change_request_initiation", "auto-generated_problem_id", "problem_source_tracking", "problem_classification_and_prioritization", "problem_ownership_assignment", "multiple_problem_list_views", "problem_summary_card", "attachment_management", "problem_history_tracking", "internal_communication_tools", "problem_to_kb_conversion", "knowledge_base_integration", "change_request_linking"], "primary_module": "problem_management", "confidence_score": 1}, "semantic_keywords": ["Problem Management", "Retrieval", "Update"]}}, {"path": "/ux/sd/problem/problem/problem-task/{id}/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_problem_task_retrieve", "description": "This API endpoint allows for the detailed viewing and editing of a specific Problem record within the system. It enables users to access comprehensive problem details such as Problem ID, Requester, Team, Status, Priority, Subject, Assignee, Problem Source, and associated work logs, as indicated in the user guides. The endpoint supports actions like resolving a problem, performing quick edits (e.g., changing status, priority, urgency, severity, impact service, assignee), and detailed editing of the problem record.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the problem task to be viewed or edited. This endpoint provides access to key information displayed in the Summary Card within the Panel View. For detailed editing, users can modify various aspects including status, priority, urgency, severity, impact service, and assignee. The ability to add work logs and resolve a problem is also supported through related functionalities. Quick actions facilitate managing aspects like problem status, while a 'Detailed Edit' button, referenced in contexts, suggests more extensive modifications are available here."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "System Administrators", "Technicians"], "primary_use_case": "This API endpoint is designed for comprehensive management of individual Problem records within an IT service management system, enabling users to view, edit, resolve, and link problems to other IT processes like knowledge base articles or change requests."}, "content_for_embedding": "This API endpoint facilitates the detailed viewing and comprehensive editing of individual Problem records within an IT service management system. Users can retrieve full problem details including ID, requester, team, status, priority, subject, assignee, and problem source. It supports quick edits for key attributes like status and priority, as well as detailed modifications. The API also enables actions such as resolving a problem, adding work logs, managing attachments, and initiating related processes like converting a problem to a knowledge base article or linking it to a change request. It provides access to information displayed in summary cards and supports different views (Panel View, Grid View) and historical tracking of problem interactions and changes.", "ontology_classification": {"features": ["problem_source_tracking", "problem_classification_and_prioritization", "problem_resolution_management", "change_request_linking", "knowledge_base_integration", "problem_ownership_assignment", "problem_lifecycle_states_and_statuses", "problem_to_kb_conversion", "multiple_problem_list_views", "problem_summary_card", "in-line_status_and_priority_editing", "detailed_problem_view", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_quick_edit", "detailed_problem_editing", "problem_filtering", "problem_search", "impact_service_selection", "symptom_description_field"], "primary_module": "problem_management", "confidence_score": 0.95}, "semantic_keywords": ["Problem Management", "Problem Editing", "Details retrieval"]}}, {"path": "/ux/sd/problem/problem/process-rich-text/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_process_rich_text_retrieve", "description": "This endpoint is used to retrieve rich text data, specifically the message body or description, which is crucial for displaying details like service request summaries or problem descriptions within the system. It helps in processing and presenting content that originates from various sources, particularly emails, where the message body is used as the foundational rich text content for a request or problem.", "summary": "Get rich text data", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "additional_info": "The rich text data retrieved by this endpoint likely corresponds to the 'description' field of service requests or problems, as indicated in context from the user guide. For instance, when requests are created from email, the message body becomes the description, which is the rich text data this endpoint would provide. This is essential for understanding the full context of a problem or request. This endpoint does not require any parameters, suggesting it might fetch a pre-defined or globally accessible rich text data, or the context for the rich text data might be inferred from other system states."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Agent", "Administrator"], "primary_use_case": "Facilitating the display and processing of rich text content, such as email message bodies or descriptions, for service requests and problems to provide comprehensive context within the system."}, "content_for_embedding": "A rich text retrieval endpoint designed to fetch and process detailed descriptions or message bodies for service requests and problems. This data, often originating from emails, is vital for presenting a complete and contextual view of an issue or request within the system's UI, enabling users to understand the full scope of the communication and associated details.", "semantic_keywords": ["Rich Text", "Content Display", "Details retrieval"], "ontology_classification": {"features": ["detailed_record_view", "communication_tab", "ai-powered_communication_enhancement"], "primary_module": "workspace", "confidence_score": 0.9}}}, {"path": "/ux/sd/problem/problem/relation/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_relation_create", "description": "This API endpoint facilitates the viewing and detailed editing of 'Problem' records within the system. It enables users to manage various aspects of a problem, including quick edits for status, priority, urgency, severity, impact service, and assignee, as well as comprehensive editing of problem details. The endpoint also supports advanced actions such as initiating a change request for a problem, managing attachments, and linking problems to other entities like tickets. It is central to the Problem Management module, which handles issue resolution throughout a problem's lifecycle.", "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this POST operation is expected to conform to the serializer for Documents, supporting a wide range of primitive fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `ObjectIdField`. Compound fields like `ListField` and `DictField` are also supported, mapping to corresponding DRF fields. `ReferenceField` is handled like a `ForeignKey`, with nested serializers for depths greater than zero. `GenericReferenceField` and `GenericEmbeddedDocumentField` are supported, while `EmbeddedDocumentField` behavior with non-zero depth needs further verification (as per the specification's TODO). Developers should be aware that fields like `FileField`, `ImageField`, and `BinaryField` are not well-supported or tested, and other unmapped fields may behave unexpectedly. This endpoint is crucial for workflows involving problem tracking, resolution, and integration with change management processes, particularly when adding a change request for a problem, which is possible only if the problem's status is \"Open\", \"In Progress\", or \"On Hold\"."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "Administrators"], "primary_use_case": "This API endpoint is designed for comprehensive management of 'Problem' records, enabling users to view, perform quick edits on key attributes like status and priority, and conduct detailed edits of problem information. It also facilitates advanced actions such as initiating change requests, managing attachments, and linking problems to related entities like tickets, thereby supporting the full lifecycle of problem resolution within the Problem Management module."}, "content_for_embedding": "This API endpoint allows for the viewing and detailed editing of 'Problem' records. Users can perform quick edits for status, priority, urgency, severity, impact service, and assignee, as well as comprehensive editing of problem details. It supports initiating change requests for problems, managing attachments, and linking problems to other entities like tickets. This endpoint is crucial for problem tracking, resolution, and integration with change management processes, especially for adding change requests when a problem's status is \"Open\", \"In Progress\", or \"On Hold\". It is a central component of the Problem Management module.", "semantic_keywords": ["Problem Management", "Problem Editing", "Change Request"], "ontology_classification": {"features": ["detailed_problem_editing", "problem_quick_edit", "in-line_status_and_priority_editing", "change_request_initiation", "change_request_linking", "attachment_management", "ticket_association_&_creation", "problem_resolution_management", "problem_lifecycle_states_and_statuses", "problem_ownership_assignment", "problem_monitoring_and_tracking", "problem_history_tracking", "requester_interaction_history_display"], "primary_module": "problem_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/problem/problem/requester_search/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_requester_search_retrieve", "description": "This API endpoint provides functionalities for searching and managing requesters associated with problems within the system. It enables users to look up existing requesters or add new ones who can report problems, aligning with the process of problem creation where a requester must be identified. This search functionality is crucial for linking problems to their initiating parties, whether they are technicians or end-users with appropriate permissions. The endpoint facilitates the initial step in problem creation where requesters are identified or added.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on the 'requester' aspect of problem management. A requester is typically a technician or user empowered to submit problems. While the direct API specification does not list explicit parameters, the context indicates that adding a new requester or searching for an existing one is a primary action. The associated 'Requester' module can be consulted for further details on requester management. The problem interaction history can also be viewed from the perspective of the requester. This endpoint works in conjunction with other problem management functionalities, including the ability to edit or view problem details more broadly."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "End-users", "Administrators"], "primary_use_case": "To enable users to search for existing requesters or add new ones for problem reporting and management, facilitating the crucial step of linking problems to their initiating parties."}, "content_for_embedding": "This API endpoint is designed for searching and managing requesters within the problem management system. It allows users to look up existing requesters or add new ones who are responsible for reporting problems. This functionality is vital for associating problems with their originating parties, whether they are technicians or end-users with appropriate permissions. The endpoint supports the initial phase of problem creation by identifying or adding requesters and also provides context for viewing problem interaction history from the requester's perspective.", "semantic_keywords": ["Requester Search", "Add Requester", "Problem Management"], "ontology_classification": {"features": ["new_requester_creation", "requester_search_&_add", "requester_interaction_history_display"], "primary_module": "problem_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/problem/problem/root_cause_draft/{id}/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_root_cause_draft_retrieve", "description": "This API endpoint allows users to retrieve the draft root cause details of a specific Problem by its unique identifier (ID). The main purpose of this endpoint is to facilitate the viewing and potential editing of the problem's root cause, which is a critical part of problem management within the system. It enables technicians and users with appropriate permissions to access comprehensive details of a problem, including its root cause, and is an integral part of the Problem Management module.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The 'id' path parameter is a mandatory string that represents the unique identifier of the Problem for which the root cause draft is being accessed. This endpoint is typically used when a user or technician needs to review or modify the root cause of an ongoing problem. Accessing a Problem ID (such as via this endpoint) redirects to a page containing comprehensive details about that problem, including its creation time and date. This aligns with the system's functionality allowing users to 'view the details' of a Problem ID. While the description mentions editing, the method is GET, implying this endpoint is primarily for retrieval. Editing functionalities would likely be handled by a PUT or PATCH method at a similar path, or via a 'Detailed Edit' option that would use this GET endpoint for initial data retrieval."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "Users with appropriate permissions"], "primary_use_case": "To retrieve the draft root cause details of a specific problem for review and potential editing within the problem management workflow."}, "content_for_embedding": "This API endpoint allows users to retrieve the draft root cause details of a specific Problem by its unique identifier (ID). It is a GET request primarily for viewing comprehensive problem details, including the root cause, and is an integral part of the Problem Management module. This retrieval often precedes potential editing functionalities, enabling users to review and modify the root cause of ongoing problems.", "semantic_keywords": ["Root Cause Analysis", "Problem Management", "Details retrieval"], "ontology_classification": {"features": ["root_cause_analysis_(rca)_tools", "detailed_problem_view", "multiple_analysis_entries_with_drafts"], "primary_module": "problem_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/problem/problem/save-problem-task/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_save_problem_task_create", "description": "This API endpoint is designed to facilitate the saving of problem-related tasks, specifically enabling the detailed viewing and editing of an existing 'Problem' entry within the system. It supports comprehensive modifications, including quick edits for status, priority, urgency, severity, impact, and assignee, as well as more detailed structural edits. This endpoint is crucial for managing the lifecycle of a problem, from initial creation to resolution, including actions such as adding changes, viewing existing changes, and potentially converting the problem into a Knowledge Base (KB) entry once resolved or closed. It also handles the submission of various document types for attachments or other relevant data.", "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is highly flexible, supporting a wide range of primitive and compound data types for document serialization. Primitive fields such as StringField, URLField, EmailField, IntField, FloatField, BooleanField, DateTimeField, and ObjectIdField are recognized. Compound fields like ListField and DictField are mapped to corresponding DRF fields, supporting nested specifications. ReferenceField is handled like a ForeignKey, generating a nested serializer if depth is greater than 0, otherwise returning an ID string. Generic fields like GenericReferenceField and GenericEmbeddedDocumentField are also supported. It's important to note that fields such as FileField, ImageField, and BinaryField are not well supported or tested, and their use may lead to unexpected behavior. This API is used for both 'Quick Edit' and 'Detailed Edit' functionalities for problems, handling updates to core problem attributes and associated details like comments and history. The ability to add a Change Request for a problem is tied to its status, being possible only if the problem is 'Open', 'In Progress', or 'On Hold'."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "IT Support Staff", "Problem Manager"], "primary_use_case": "To manage the lifecycle of IT problems, enabling detailed viewing, comprehensive editing (quick and detailed), and facilitating actions like adding change requests and converting problems to knowledge base entries."}, "content_for_embedding": "This API endpoint allows for saving and managing problem-related tasks within a system. It supports both quick edits (status, priority, urgency, severity, impact, assignee) and detailed structural modifications of existing 'Problem' entries. The API is central to the problem lifecycle, from creation to resolution, enabling actions such as adding and viewing associated change requests, and converting resolved or closed problems into Knowledge Base articles. It also facilitates the submission of various document types as attachments and tracks problem history, comments, and interactions. Users with appropriate permissions, such as technicians, can utilize this API for comprehensive problem management.", "semantic_keywords": ["Problem Management", "Problem Editing", "Change Request"], "ontology_classification": {"features": ["problem_logging_access_control", "ticket_association_&_creation", "problem_classification_and_prioritization", "change_request_linking", "change_request_initiation", "knowledge_base_integration", "problem_ownership_assignment", "problem_monitoring_and_tracking", "problem_lifecycle_states_and_statuses", "problem_to_kb_conversion", "detailed_problem_view", "problem_history_tracking", "requester_interaction_history_display", "attachment_management", "problem_quick_edit", "detailed_problem_editing", "problem_tagging", "follower_management"], "primary_module": "problem_management", "confidence_score": 1}}}, {"path": "/ux/sd/problem/problem/save-rich-text/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_save_rich_text_create", "description": "This endpoint is designed to save rich text data within the system. It plays a crucial role in capturing and persisting various types of textual content, which could include problem descriptions, comments, notes, or even content intended for knowledge base articles. The 'save' action is fundamental to many workflows, ensuring that user-generated content or system-generated descriptions are stored for future reference, display, or processing. For instance, in problem management, it could be used to save the detailed description of a problem reported by a requester, similar to how email message bodies become descriptions when requests are created from email.", "summary": "Save rich text data", "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "additional_info": "This endpoint specifically handles rich text data. While the API specification details various primitive and compound fields recognized by the serializer (e.g., StringField, BooleanField, ListField), the primary use case appears to be for textual content, potentially incorporating formatting. The 'save' functionality is commonly linked to user interface actions like clicking a 'Submit' or 'Save' button after making changes. Although the 'request_body_description' provides a comprehensive list of supported data types, it's important to note the specific mention of 'DocumentField' for 'all other fields,' indicating that non-explicitly listed types might not be well-supported or tested. This implies that while the serializer is versatile, relying on the explicitly mentioned primitive and compound fields is recommended for robust implementation. The endpoint facilitates the persistence of information that might be part of an interaction history or problem details, ensuring that the history of changes and descriptions is maintained."}, "llm_generated": {"business_context": {"primary_use_case": "This API is used to save and persist rich text data within the system, primarily for problem descriptions, comments, notes, and content intended for knowledge base articles. It ensures that textual content generated by users or the system is stored for future reference, display, or processing."}, "content_for_embedding": "This API saves rich text content such as problem descriptions, comments, notes, and knowledge base articles, ensuring persistence of textual information within the system for future reference and processing. It is crucial for maintaining interaction history and detailed problem information.", "ontology_classification": {"features": ["symptom_description_field", "internal_communication_tools", "detailed_problem_editing", "knowledge_base_integration"], "primary_module": "problem_management", "confidence_score": 0.9}, "semantic_keywords": ["Save", "Rich Text", "Problem Management"]}}, {"path": "/ux/sd/problem/problem/save_problem_cause/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_save_problem_cause_create", "description": "This API endpoint facilitates the saving of a problem cause within the system, playing a crucial role in problem management. While the original description indicates it allows Problems to be viewed or edited, the path suggests a specific focus on saving the 'cause' of a problem. This aligns with the broader problem management workflow where problems are logged, details (including cause) are added, and eventually resolved or closed. This endpoint supports the detailed modification of problem-related information, similar to the 'Edit' functionality described in the user guide for managing problem details. Data input for this endpoint is robust, supporting a wide range of primitive and compound field types as described in the request body specification.", "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is highly flexible, designed to handle various data types common in document serialization. Developers should be aware of the supported primitive fields such as StringField, IntField, BooleanField, DateTimeField, and others like URLField and EmailField. Compound fields like ListField and DictField are also supported, mapping to corresponding DRF fields. Special attention is given to ReferenceField and EmbeddedDocumentField, which can autogenerate nested serializers depending on depth. Fields like FileField, ImageField, and BinaryField are noted as not well supported or untested, suggesting potential issues if used. This endpoint likely contributes to the comprehensive problem record, which can include comments, history, attachments, and information regarding solutions or workarounds, as detailed in the user guides. Changes to a problem's cause may also be linked to change requests as part of the resolution process."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "Problem Managers", "Administrators"], "primary_use_case": "To save or update the cause of a problem within the problem management system, enabling detailed modification of problem records and supporting the overall problem resolution workflow."}, "content_for_embedding": "This API endpoint is designed to save or update the specific cause of a problem within the system. It plays a critical role in the problem management workflow by allowing detailed modification of problem-related information, similar to an \"Edit\" function. The endpoint supports a wide range of data types for input, contributing to a comprehensive problem record that can include comments, history, attachments, and information related to solutions or workarounds. Changes made via this API can also be linked to change requests as part of the resolution process, and it integrates with the Known Error Database (KEDB) for related articles.", "ontology_classification": {"features": ["detailed_problem_editing", "root_cause_analysis_(rca)_tools", "known_error_record_management", "change_request_linking", "knowledge_base_integration", "attachment_management", "problem_history_tracking", "problem_classification_and_prioritization", "problem_ownership_assignment", "follower_management", "problem_due_date_setting", "symptom_description_field", "kedb_lookup_for_related_articles"], "primary_module": "problem_management", "confidence_score": 1}, "semantic_keywords": ["Problem Management", "Problem Editing", "Root Cause"]}}, {"path": "/ux/sd/problem/problem/top_filter/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_top_filter_retrieve", "description": "This API endpoint is designed to apply a 'top filter' to Problem records, enabling users to view or edit them based on various criteria. It plays a crucial role in problem management lifecycle, supporting actions such as viewing problem history, attachments, and source (e.g., email, web, phone). It also facilitates advanced operations like converting a problem to a Knowledge Base article (when resolved/closed) or initiating a change request for a problem (when open, in progress, or on hold). The endpoint is integral to filtering and managing problems efficiently within the system.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint likely supports filtering problems by attributes like Problem ID, assignee, and date range. It can be used to view comments, interaction history, and to determine the problem's source. While the direct filtering parameters are not explicitly listed in the API spec, the context suggests that filtering by 'Problem ID', 'assignee', 'day', 'date', or 'date range' are common functionalities. Users can also view details such as `Problem Source`, `Priority`, `Requester`, `Subject`, `Team`, and `Assignee`. The ability to 'Add Change' or 'View Change' is contingent on the problem's status. The term 'top_filter' implies a primary filtering mechanism for problem visibility and subsequent actions."}, "llm_generated": {"business_context": {"user_personas": ["Problem Managers", "IT Support Technicians", "Administrators"], "primary_use_case": "This API enables users to efficiently filter, view, and manage problem records within the system. It streamlines problem resolution by providing quick access to relevant problem details, history, attachments, and facilitating actions like converting problems to knowledge base articles or initiating change requests."}, "content_for_embedding": "This GET API endpoint, `/ux/sd/problem/problem/top_filter/`, is designed to apply a primary filter to Problem records, allowing users to view and manage them based on various criteria. It supports filtering by attributes such as Problem ID, assignee, and date range (day, date, or date range). Users can retrieve and view comprehensive details including problem history, attachments, problem source (e.g., email, web, phone), priority, requester, subject, team, and assignee. The endpoint is integral to the problem management lifecycle, enabling advanced operations like converting a resolved or closed problem into a Knowledge Base article, or initiating a change request for problems that are open, in progress, or on hold. It also allows viewing comments and interaction history, and supports quick edit, detailed edit, and deletion actions, as well as problem tagging and auto-reload pause functionality. This API is crucial for efficient problem visibility and subsequent actions within the system.", "ontology_classification": {"features": ["problem_filtering", "problem_search", "date-based_problem_filtering", "problem_history_tracking", "attachment_management", "problem_source_tracking", "knowledge_base_integration", "change_request_linking", "multiple_problem_list_views", "detailed_problem_view", "problem_monitoring_and_tracking", "problem_lifecycle_states_and_statuses", "problem_ownership_assignment", "problem_quick_edit", "detailed_problem_editing", "problem_deletion", "problem_tagging", "auto-reload_pause", "problem_summary_card", "requester_interaction_history_display", "internal_communication_tools"], "primary_module": "problem_management", "confidence_score": 0.95}, "semantic_keywords": ["Filter", "Problem Management", "Search"]}}, {"path": "/ux/sd/problem/problem/workflow_options_map/", "method": "POST", "details": {"operationId": "ux_sd_problem_problem_workflow_options_map_create", "description": "This API endpoint, `/ux/sd/problem/problem/workflow_options_map/`, utilizes a `POST` method to enable the viewing and advanced editing of 'Problem' records within the system. It is designed to facilitate operations such as quick editing of problem attributes (status, priority, urgency, severity, impact service, and assignee), and potentially more detailed modifications of problem details. The endpoint is particularly relevant for managing the lifecycle of problems, including actions like adding change requests (only if the problem status is 'Open', 'In Progress', or 'On Hold') and potentially resolving problems. The underlying request body supports a wide range of primitive and compound field types for comprehensive data manipulation, mapping various document fields to corresponding DRF fields.", "tags": ["Problem"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ProblemList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint handles a comprehensive set of document fields. Primitive types like `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `UUIDField` are recognized. Compound fields such as `ListField` and `DictField` are also supported with nested specifications. Special handling is noted for `ReferenceField` (like DRF's `ForeignKey`) which generates nested serializers for depths greater than 0, and `EmbeddedDocumentField` similarly. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are handled by their own serializer fields. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are 'not well supported or untested,' and other unlisted fields may not function as expected ('will work wrong'). When editing problems, note that creating change requests is conditional on the problem's status being 'Open', 'In Progress', or 'On Hold'."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Problem Managers", "Technicians", "Administrators"], "primary_use_case": "This API endpoint is designed for the comprehensive management of 'Problem' records within the system. It facilitates viewing, quick editing of key attributes (status, priority, urgency, severity, impact service, and assignee), and detailed modifications of problem details. It also supports actions related to the problem lifecycle, such as adding change requests and resolving problems, enabling full data manipulation for problem records."}, "content_for_embedding": "This API endpoint, accessible via a POST request to `/ux/sd/problem/problem/workflow_options_map/`, is central to Problem Management. It allows users to view and perform advanced editing on 'Problem' records, including quick updates to attributes like status, priority, urgency, severity, impact service, and assignee. More detailed modifications of problem information are also supported. A key function is the ability to manage the problem lifecycle, specifically by adding change requests (conditional on the problem's status being 'Open', 'In Progress', or 'On Hold') and facilitating problem resolution. The request body supports a wide array of primitive and compound field types for comprehensive data manipulation, including handling of comments, history, attachments, and conversion of problems to Knowledge Base articles. It also supports managing followers and tags for problems.", "semantic_keywords": ["Problem Management", "Problem Editing", "Change Request"], "ontology_classification": {"features": ["detailed_problem_editing", "problem_quick_edit", "in-line_status_and_priority_editing", "problem_lifecycle_states_and_statuses", "change_request_linking", "change_request_initiation", "problem_resolution_management", "attachment_management", "problem_history_tracking", "problem_to_kb_conversion", "knowledge_base_integration", "follower_management", "problem_tagging", "problem_logging_access_control", "problem_source_tracking", "ticket_association_&_creation", "multiple_problem_list_views", "detailed_problem_view", "internal_communication_tools"], "primary_module": "problem_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/problem/problem/workflow_status/", "method": "GET", "details": {"operationId": "ux_sd_problem_problem_workflow_status_retrieve", "description": "This API endpoint provides functionalities to view and manage the workflow status of a Problem within the system. It enables users to perform quick edit actions on problem details such as status, priority, urgency, severity, impact service, and assignee. The endpoint also supports viewing problem details in a summary card format, including Problem ID, Requester, Team, and current Status. It's crucial for managing the lifecycle of a problem, including initiating resolution through a change request, which is possible only if the problem status is 'Open', 'In Progress', or 'On Hold'.", "tags": ["Problem"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProblemList"}}}, "description": ""}}, "summary": "", "additional_info": "The default status for a newly created problem is 'Open'. Problem statuses can be customized via the 'Workflow' module. This endpoint integrates with Quick Actions, allowing for rapid modifications. For detailed problem editing beyond quick actions, a 'Detailed Edit' option is available elsewhere in the system. The endpoint also facilitates viewing associated change requests if one has been created for the problem. Work logs can also be viewed and added, and problems can be resolved from the relevant screen."}, "llm_generated": {"business_context": {"user_personas": ["IT Support", "Problem Managers", "Technicians"], "primary_use_case": "To view and manage the workflow status and details of IT problems, enabling quick updates and facilitating problem resolution through change requests."}, "content_for_embedding": "This API endpoint allows users to view and manage the workflow status of problems within the system. It supports quick editing of problem details such as status, priority, urgency, severity, impact service, and assignee. Users can also view problem details in a summary card format, including Problem ID, Requester, Team, and current Status. The API is crucial for managing the problem lifecycle, including initiating resolution through change requests and viewing associated change requests. It integrates with quick actions and allows for viewing and adding work logs, and resolving problems.", "semantic_keywords": ["Problem Management", "Workflow Status", "Quick Edit"], "ontology_classification": {"features": ["problem_lifecycle_states_and_statuses", "problem_quick_edit", "problem_summary_card", "change_request_linking", "problem_resolution_management", "problem_monitoring_and_tracking", "problem_history_tracking", "problem_search", "problem_filtering", "detailed_problem_editing", "multiple_problem_list_views", "in-line_status_and_priority_editing", "impact_service_selection"], "primary_module": "problem_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/conversation/", "method": "GET", "details": {"operationId": "ux_sd_release_conversation_retrieve", "description": "This API endpoint facilitates the viewing and editing of release conversations within the /ux/sd/release/conversation/ context. Through this endpoint, users can access and manage communications related to a specific release. This includes actions such as replying to, forwarding, and adding notes to written emails, which are typically visible under the 'Communication' tab. The endpoint also supports leveraging text enhancement features, including OpenAI integration, within the 'Communication' section of an Incident page to refine content styles.", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint specifically relates to the communication aspect of a release. While the provided API specification indicates a GET method, the description explicitly mentions 'viewed or edited,' suggesting potential underlying support for 'edit' actions (perhaps through other complementary endpoints or internal system updates triggered by a GET request that initiates an edit session). The communication tab is a central feature for interaction, allowing users to reply, forward, or add notes. Furthermore, text enhancement features via OpenAI are available for refining communication content, as highlighted in the context. There are no explicit parameters or request body defined in the API specification for this GET endpoint, so any editing functionality would likely be handled through subsequent interactions or in a separate PUT/PATCH endpoint not detailed here."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "Support Agents", "Administrators", "Users involved in release communication"], "primary_use_case": "To view and manage communication threads related to specific releases, including replying to, forwarding, adding notes to emails, and enhancing text content using AI."}, "content_for_embedding": "This API endpoint allows users to access, view, and manage communication within the context of a software release. It specifically enables interaction with release conversations, such as replying to and forwarding emails, adding notes, and leveraging AI-powered text enhancement features (like OpenAI integration) to refine communication content within the \"Communication\" tab of an Incident page. While primarily a GET endpoint for retrieval, its description implies capabilities for editing and managing communication threads.", "ontology_classification": {"features": ["comment/communication", "release_history", "quick_edit", "attachment_management", "ai-powered_communication_enhancement", "communication_tab", "in-app_email_sending"], "primary_module": "release_management", "confidence_score": 0.9}, "semantic_keywords": ["Communication", "Release", "GenAI"]}}, {"path": "/ux/sd/release/conversation/", "method": "POST", "details": {"operationId": "ux_sd_release_conversation_create", "description": "This API endpoint facilitates the viewing and editing of an Incident, specifically within the user experience (UX) and service desk (SD) release conversation flow. It allows users to interact with Communication elements, such as replying to emails, forwarding, adding notes, and leveraging AI to rephrase communication content. The endpoint supports detailed modifications to Incident information, including aspects related to requesters, reported by users, and various quick edit actions like status, priority, urgency, severity, impact, and assignee, as well as full detailed editing of the request.", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is central to managing Incident communication and details, aligning with the functionalities found under the 'Communication' tab for viewing, replying, forwarding, and note-taking. It also supports text enhancement via OpenAI within the Incident's Communication section. While the current specification shows no parameters or request body, typical interactions with Incident editing and communication features suggest underlying data structures for updating various fields such as requester, reported by, and communication content. Users can expect this endpoint to be involved in actions like 'Quick Edit' for status, priority, etc., and 'Detailed Edit' for comprehensive changes to an Incident's attributes, as highlighted in the provided contexts. It is part of the larger 'Release' module interactions."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "UX Support Staff", "IT Support Personnel", "Administrators"], "primary_use_case": "To manage and update incident-related communications and details, including replying to emails, forwarding, adding notes, leveraging AI for content rephrasing, and performing quick or detailed edits of incident attributes like status, priority, and assignee."}, "content_for_embedding": "This API endpoint allows for comprehensive management of Incident communications and details within a service desk environment. Users can view, reply to, forward, and add notes to communications. It also supports AI-powered rephrasing of content. The API enables both quick edits of key incident attributes like status, priority, and assignee, as well as full detailed editing of incident information, including requester and reported by fields. It is integral to the UX and service desk release conversation flow.", "ontology_classification": {"features": ["communication_tab_(centralized_history)", "communication_text_enhancement", "quick_edit_(key_attributes)", "detailed_ticket_editing", "requester_search_&_add", "reported_by_(on_behalf_of)", "internal_notes", "ticket_history_view", "file_attachments_(communication)", "ticket_state_&_status_management", "ticket_ownership_management"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Incident Update", "Communication", "Detailed Edit"]}}, {"path": "/ux/sd/release/conversation/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_conversation_retrieve_2", "description": "This API endpoint allows for the retrieval and potential editing of a specific Release conversation, identified by its unique ID. When a user double-taps on a Release ID (or Ticket ID, Request ID, Change ID, Problem ID) in the Infinity user interface, it redirects them to a detailed page. This endpoint is designed to provide comprehensive details about that specific Release conversation, including its creation time and date. It supports viewing key tabs such as 'Basic Details', 'Workspace', and 'Communication', where users can interact with the conversation content.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier for the Release conversation. While the API specification mentions 'viewed or edited', the provided contexts heavily emphasize the 'viewing' aspect and the details available on the related 'page'. The 'Communication' tab, accessible via this endpoint, allows users to reply, forward, add notes, and potentially leverage AI-powered text enhancement features for refining communication content using OpenAI. Currently, the response body is not specified. The endpoint is integral to tracking the progress and managing detailed view of specific Release tickets within the system."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "Support Staff", "Users involved in the release process who need to view and interact with release conversations."], "primary_use_case": "To retrieve and display comprehensive details of a specific Release conversation or ticket, including its basic information, communication history, and workspace content, with capabilities for viewing and potential editing of conversation content."}, "content_for_embedding": "This API endpoint retrieves and displays detailed information for a specific Release conversation, identified by its unique ID. It provides access to key tabs like Basic Details, Workspace, and Communication, allowing users to view creation time, date, and interact with conversation content. The endpoint supports potential editing and leverages AI-powered text enhancement for refining communication. It is crucial for tracking progress and managing detailed views of Release tickets.", "ontology_classification": {"features": ["comment/communication", "release_history", "release_interaction_log", "quick_edit", "advanced_release_editing", "attachment_management", "view_toggling", "ai-powered_communication_enhancement", "ticket_detail_view_(via_id)"], "primary_module": "release_management", "confidence_score": 0.95}, "semantic_keywords": ["Release", "Details retrieval", "Communication"]}}, {"path": "/ux/sd/release/conversation/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_release_conversation_update", "description": "This API endpoint allows for the viewing and editing of a specific 'Release' record within the system. It enables users to manage comprehensive details related to a Release, similar to how Tickets, Requests, Changes, or Problems are handled. Key functionalities include accessing information like creation time and date, and potentially modifying various aspects of the Release record.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and uniquely identifies the Release to be viewed or edited. The system typically displays a Release record with various tabs such as 'Basic Details', 'Workspace', and 'Communication', which might be affected by edits through this endpoint. For communication aspects within a Release, users can reply, forward emails, add notes, and potentially leverage AI-powered text enhancements for communication content (as detailed in the 'Communication' tab for Incidents, this functionality might extend to Releases). While the API specification states 'No response body', successful operations would typically reflect the updated state of the Release within the system's UI. This endpoint is crucial for managing the lifecycle of software or product releases within the platform, including their progress tracking and detailed attribute management."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "IT Operations", "Project Manager"], "primary_use_case": "To view and update comprehensive details of a specific Release record, managing its lifecycle, progress, attributes, and communication within the system."}, "content_for_embedding": "This API endpoint facilitates the viewing and editing (updating) of individual 'Release' records. It allows users to manage all aspects of a software or product release, including creation time, date, and various other attributes. The functionality is similar to how other records like Tickets, Requests, Changes, or Problems are handled. It supports managing communication within a Release, such as replying, forwarding emails, adding notes, and potentially leveraging AI-powered text enhancements for communication content. This endpoint is crucial for tracking release progress and managing detailed attributes throughout the release lifecycle.", "semantic_keywords": ["Release", "Update", "Detailed Edit"], "ontology_classification": {"features": ["advanced_release_editing", "comment/communication", "ai-powered_communication_enhancement", "release_history", "release_interaction_log", "attachment_management"], "primary_module": "release_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/conversation/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_release_conversation_destroy", "description": "This API endpoint allows for the deletion of a specific 'Release' conversation. Users can manage various forms of tickets, including Incidents, Requests, Changes, Problems, and Releases. The deletion action is irreversible, as highlighted in the general quick actions for similar entities. The endpoint is part of a broader system where a ticket's comprehensive details, including creation time and date, are displayed upon selection.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier of the Release conversation to be deleted. Similar to other entities in the system, deleting a Release is an irreversible action. While the endpoint's original description mentioned viewing or editing Incidents, the path specifically targets 'Release' entities for deletion, aligning with the context suggesting 'Delete' operations are often irreversible across different ticket types (Request, Change, Problem, Release)."}, "llm_generated": {"business_context": {"user_personas": ["IT Support", "Release Managers", "Administrators"], "primary_use_case": "To permanently remove a specific Release conversation from the system."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of a specific Release conversation using its unique identifier. It is part of a larger system that manages various ticket types, including Incidents, Requests, Changes, Problems, and Releases. The deletion action is permanent and cannot be undone.", "semantic_keywords": ["Delete", "Release", "Irreversible"], "ontology_classification": {"features": ["release_deletion"], "primary_module": "release_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/release/", "method": "GET", "details": {"operationId": "ux_sd_release_release_list", "description": "This endpoint comprehensively retrieves a paginated list of all releases within the current organization. It provides a foundational capability for release management, offering insights into release performance, tracking progress toward release goals, and supporting the overall efficiency of the release management process. The returned data enables users to view the complete timeline and details of releases, including descriptions, due dates, assigned managers, priorities, and types of releases, as well as associated attachments and interaction logs, contributing to a comprehensive view of release management.", "summary": "Gets a list of releases", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ReleaseList"}}}}, "description": ""}}, "additional_info": "This endpoint is crucial for populating release dashboards and providing a consolidated view of release management. The 'items_per_page' and 'page' query parameters are mandatory for pagination, ensuring efficient data retrieval. Optional 'sort' and 'reverse' parameters allow for flexible ordering of the retrieved release list, enhancing usability for different reporting needs. For example, releases can be sorted by release manager, priority, or due date. The list of releases displayed often includes details that can be found in the Release Details section, such as priority (Low, Medium, High, Critical) and release type."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "Administrator", "Project Manager", "Reporting User"], "primary_use_case": "To retrieve and manage a paginated list of all releases within an organization, enabling comprehensive release tracking, performance monitoring, and efficient release management processes."}, "content_for_embedding": "This API retrieves a paginated list of all releases within the current organization. It allows users to view the complete timeline and details of releases, including descriptions, due dates, assigned managers, priorities, and types of releases, along with associated attachments and interaction logs. The endpoint supports pagination via 'items_per_page' and 'page' parameters, and flexible ordering using 'sort' and 'reverse' parameters, enabling comprehensive release management and dashboard population.", "semantic_keywords": ["Release", "Pagination", "Retrieval"], "ontology_classification": {"features": ["view_toggling", "release_search", "release_filtering", "auto_reload", "comment/communication", "release_history", "release_interaction_log", "attachment_management", "quick_edit", "advanced_release_editing", "release_deletion", "related_item_linking", "release_completion"], "primary_module": "release_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/release/", "method": "POST", "details": {"operationId": "ux_sd_release_release_create", "description": "This endpoint provides functionality to create a new release within the current organization. Releases are crucial for tracking progress toward release goals and are a core component of the overall release management process, as highlighted by the release dashboard's comprehensive view and enhanced efficiency. The creation process involves specifying various details such as summary, description, service classifications, state, status, urgency, priority, and impact. It also allows for detailed configuration of the release source, type, requester information, and various other attributes related to the release lifecycle including attachments, custom fields, and approval settings.", "summary": "Creates a new release ", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateRequestSample": {"value": {"summary": "VPN Issue", "description": "", "catalogue": "", "impact_service": "", "impact_service_name": "service1", "service_classification": "", "service_classification_name": "", "state": "Open", "state_id": 1, "status": "New", "status_id": 1, "urgency_id": 3, "urgency": "Low", "priority_id": 5, "priority": "Very Low", "impact": "Department", "impact_id": 3, "release_source": {"id": 1, "name": "Web"}, "resolution_type": "", "release_type": {"id": 1, "name": "Release", "prefix": "REQ"}, "requester_id": "", "requester_name": "Test req", "requester_email": "testreq@gmail.com", "requester_phone": "7778889999", "reporter_name": "", "reporter_email": "", "reporter_phone": "", "watcher": "", "hold_config": {}, "support_group": "", "assignee": "", "escalation": {}, "tag": [], "assets": [], "config": {}, "reference": {}, "template_info": {}, "closure_info": {}, "approval_config": {}, "custom_field": [{}], "attachment": {}, "api_link": {}, "lock_config": {}, "field_service_config": {}, "closure_note": ""}, "summary": "Create request Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "The request body for creating a release is extensive, covering a wide array of details necessary for comprehensive release management. Key fields include `summary`, `description`, `release_type` (which can include a `prefix` like 'REQ'), `urgency`, `priority`, and `impact`. Requester details (`requester_name`, `requester_email`, `requester_phone`) are also essential. While many fields are present, specific validation rules for each field (e.g., impact service names, specific IDs for states, statuses, urgencies, priorities, and impacts) should be adhered to. The system allows for defining various types of releases and associating them with specific configurations. This endpoint is central to managing the entire release lifecycle within the platform, from initial creation to potential closure, and is integrated with other modules like assets, approvals, and custom fields. Once submitted, the release details become viewable and manageable within the system, contributing to the overall release dashboard.", "parameters": [{"name": "summary", "in": "body", "description": "Inferred parameter: summary", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "catalogue", "in": "body", "description": "Inferred parameter: catalogue", "required": true, "schema": {"type": "string"}}, {"name": "impact_service", "in": "body", "description": "Inferred parameter: impact_service", "required": true, "schema": {"type": "string"}}, {"name": "impact_service_name", "in": "body", "description": "Inferred parameter: impact_service_name", "required": true, "schema": {"type": "string"}}, {"name": "service_classification", "in": "body", "description": "Inferred parameter: service_classification", "required": true, "schema": {"type": "string"}}, {"name": "service_classification_name", "in": "body", "description": "Inferred parameter: service_classification_name", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}, {"name": "state_id", "in": "body", "description": "Inferred parameter: state_id", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "body", "description": "Inferred parameter: status", "required": true, "schema": {"type": "string"}}, {"name": "status_id", "in": "body", "description": "Inferred parameter: status_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency_id", "in": "body", "description": "Inferred parameter: urgency_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency", "in": "body", "description": "Inferred parameter: urgency", "required": true, "schema": {"type": "string"}}, {"name": "priority_id", "in": "body", "description": "Inferred parameter: priority_id", "required": true, "schema": {"type": "string"}}, {"name": "priority", "in": "body", "description": "Inferred parameter: priority", "required": true, "schema": {"type": "string"}}, {"name": "impact", "in": "body", "description": "Inferred parameter: impact", "required": true, "schema": {"type": "string"}}, {"name": "impact_id", "in": "body", "description": "Inferred parameter: impact_id", "required": true, "schema": {"type": "string"}}, {"name": "release_source", "in": "body", "description": "Inferred parameter: release_source", "required": true, "schema": {"type": "string"}}, {"name": "resolution_type", "in": "body", "description": "Inferred parameter: resolution_type", "required": true, "schema": {"type": "string"}}, {"name": "release_type", "in": "body", "description": "Inferred parameter: release_type", "required": true, "schema": {"type": "string"}}, {"name": "requester_id", "in": "body", "description": "Inferred parameter: requester_id", "required": true, "schema": {"type": "string"}}, {"name": "requester_name", "in": "body", "description": "Inferred parameter: requester_name", "required": true, "schema": {"type": "string"}}, {"name": "requester_email", "in": "body", "description": "Inferred parameter: requester_email", "required": true, "schema": {"type": "string"}}, {"name": "requester_phone", "in": "body", "description": "Inferred parameter: requester_phone", "required": true, "schema": {"type": "string"}}, {"name": "reporter_name", "in": "body", "description": "Inferred parameter: reporter_name", "required": true, "schema": {"type": "string"}}, {"name": "reporter_email", "in": "body", "description": "Inferred parameter: reporter_email", "required": true, "schema": {"type": "string"}}, {"name": "reporter_phone", "in": "body", "description": "Inferred parameter: reporter_phone", "required": true, "schema": {"type": "string"}}, {"name": "watcher", "in": "body", "description": "Inferred parameter: watcher", "required": true, "schema": {"type": "string"}}, {"name": "hold_config", "in": "body", "description": "Inferred parameter: hold_config", "required": true, "schema": {"type": "string"}}, {"name": "support_group", "in": "body", "description": "Inferred parameter: support_group", "required": true, "schema": {"type": "string"}}, {"name": "assignee", "in": "body", "description": "Inferred parameter: assignee", "required": true, "schema": {"type": "string"}}, {"name": "escalation", "in": "body", "description": "Inferred parameter: escalation", "required": true, "schema": {"type": "string"}}, {"name": "tag", "in": "body", "description": "Inferred parameter: tag", "required": true, "schema": {"type": "string"}}, {"name": "assets", "in": "body", "description": "Inferred parameter: assets", "required": true, "schema": {"type": "string"}}, {"name": "config", "in": "body", "description": "Inferred parameter: config", "required": true, "schema": {"type": "string"}}, {"name": "reference", "in": "body", "description": "Inferred parameter: reference", "required": true, "schema": {"type": "string"}}, {"name": "template_info", "in": "body", "description": "Inferred parameter: template_info", "required": true, "schema": {"type": "string"}}, {"name": "closure_info", "in": "body", "description": "Inferred parameter: closure_info", "required": true, "schema": {"type": "string"}}, {"name": "approval_config", "in": "body", "description": "Inferred parameter: approval_config", "required": true, "schema": {"type": "string"}}, {"name": "custom_field", "in": "body", "description": "Inferred parameter: custom_field", "required": true, "schema": {"type": "string"}}, {"name": "attachment", "in": "body", "description": "Inferred parameter: attachment", "required": true, "schema": {"type": "string"}}, {"name": "api_link", "in": "body", "description": "Inferred parameter: api_link", "required": true, "schema": {"type": "string"}}, {"name": "lock_config", "in": "body", "description": "Inferred parameter: lock_config", "required": true, "schema": {"type": "string"}}, {"name": "field_service_config", "in": "body", "description": "Inferred parameter: field_service_config", "required": true, "schema": {"type": "string"}}, {"name": "closure_note", "in": "body", "description": "Inferred parameter: closure_note", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "IT Operations", "Project Manager", "Administrator"], "primary_use_case": "To create and manage new software or product releases within an organization, facilitating tracking, progress monitoring, and comprehensive lifecycle management."}, "content_for_embedding": "This API endpoint allows for the creation of new releases, which are essential for tracking progress and managing the entire release lifecycle. It supports detailed configuration including summary, description, service classifications, state, status, urgency, priority, impact, release source, and type. Requester information, attachments, custom fields, and approval settings can also be specified. This endpoint is a core component of the release management process, integrating with other modules like assets and approvals, and contributing to the overall release dashboard.", "ontology_classification": {"features": ["new_release_creation", "attachment_management", "tag_management", "advanced_release_editing", "release_completion", "related_item_linking"], "primary_module": "release_management", "confidence_score": 0.9}, "semantic_keywords": ["Release", "Creation", "Release Management"]}}, {"path": "/ux/sd/release/release/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_retrieve", "description": "This endpoint is used to retrieve comprehensive details for a specific release within the current organization. The `id` path parameter corresponds to the Release ID, and double-tapping on this ID typically redirects to a dedicated page providing full details, including creation time and date. The retrieved information is organized into various tabs, such as 'Basic Details' and 'Workspace', offering a comprehensive view integral to managing release processes and tracking progress toward release goals.", "summary": "Gets a request with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "additional_info": "The `id` path parameter must be a valid Release ID. These details are crucial for understanding the overall status and progress of a release and are commonly accessed through a dashboard view. This information is vital for managing the release lifecycle, similar to how ticket, request, or change IDs provide comprehensive details upon selection."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "Administrator", "Developer"], "primary_use_case": "To retrieve comprehensive details for a specific release, enabling users to manage release processes and track progress towards release goals."}, "content_for_embedding": "This API retrieves comprehensive details for a specific release identified by its unique ID. The retrieved information includes creation time, date, and is organized into various tabs such as 'Basic Details' and 'Workspace'. This endpoint is crucial for managing release processes, tracking progress towards release goals, and provides a comprehensive view similar to how details are accessed for tickets, requests, or changes.", "semantic_keywords": ["Release", "Details retrieval", "ID"], "ontology_classification": {"features": ["release_history", "release_interaction_log", "attachment_management", "comment/communication"], "primary_module": "release_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/release/release/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_release_release_update", "description": "This endpoint allows users to edit an existing release within the current organization. It provides advanced and detailed editing capabilities, distinguishing it from 'Quick Edit' options. This functionality is crucial for release management, enabling updates to release details, due dates, assigned managers, priority levels (Low, Medium, High, or Critical), and release types. It is an essential component for tracking progress towards release goals and enhancing the efficiency of the release management process.", "summary": "Edits the release with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a mandatory string representing the unique identifier of the release to be edited. The request body for this PUT operation is defined by the 'Serializer for Documents', which recognizes a wide range of primitive fields including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields like `ListField` and `DictField` are also supported, mapping to corresponding DRF fields. `ReferenceField` is handled like a `ForeignKey`, with nested serializers for depth greater than 0, otherwise resulting in `str(id)`. `EmbeddedDocumentField` also supports nested serialization for non-zero depth, though the specification notes a potential issue with it being skipped otherwise. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are supported by their own serializer fields. Fields such as `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested. Common details that can be managed via this edit endpoint include giving a brief description about the release, setting the due date, assigning a release manager, selecting a priority, choosing a release type, and adding specific notes for the release. Once all details are filled out, they are submitted to apply the changes."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "Project Managers", "Administrators"], "primary_use_case": "This API allows for comprehensive editing and updating of existing releases, including details such as due dates, assigned managers, priority levels, release types, and notes, which is crucial for effective release management and tracking progress towards release goals."}, "content_for_embedding": "This API endpoint, `PUT /ux/sd/release/release/{id}/`, is designed for advanced and detailed editing of an existing release identified by its unique `id`. Unlike quick edit options, it provides extensive capabilities to update various release attributes. These include modifying release descriptions, setting or adjusting due dates, assigning or reassigning release managers, defining priority levels (Low, Medium, High, Critical), and specifying release types. It also supports adding specific notes and potentially managing attachments and linking related items like tickets, problems, or changes. This functionality is fundamental for robust release management, enabling organizations to track progress, enhance efficiency, and ensure releases align with strategic objectives.", "semantic_keywords": ["Release Management", "Detailed Edit", "Release Update"], "ontology_classification": {"features": ["advanced_release_editing", "release_completion", "comment/communication", "attachment_management", "related_item_linking"], "primary_module": "release_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/release/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_release_release_destroy", "description": "This endpoint provides the functionality to permanently delete an existing software release from the system for the current organization. As highlighted in the Infinity User Guide (Context Rank 1 & 2), this action is analogous to accessing the 'Delete' button in the user interface, which allows users to remove a selected release. This operation is crucial for managing the lifecycle of releases, especially when a release is no longer needed or was created in error. The deletion is performed based on the unique identifier of the release.", "summary": "Deletes the release with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` parameter is a required path parameter, which uniquely identifies the release to be deleted. Ensure the correct `id` is provided to target the intended release. There is no request body associated with this DELETE operation, and upon successful deletion, no response body is returned. This action cannot be undone, so caution is advised before proceeding with a release deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Release Manager"], "primary_use_case": "To permanently delete an existing software release from the system, managing the lifecycle of releases."}, "content_for_embedding": "This API deletes a software release from the system based on its unique ID. It provides the functionality to permanently remove a selected release, similar to accessing a \"Delete\" button in a user interface. This operation is crucial for managing the lifecycle of releases, especially when a release is no longer needed or was created in error. The action is irreversible.", "ontology_classification": {"features": ["release_deletion"], "primary_module": "release_management", "confidence_score": 1}, "semantic_keywords": ["Delete", "Release", "Release Management"]}}, {"path": "/ux/sd/release/release/add-attachment/", "method": "POST", "details": {"operationId": "ux_sd_release_release_add_attachment_create", "description": "This endpoint provides functionality to add new attachments specifically for a selected release. Users can upload various documents, such as screenshots or team documents, by either dragging and dropping files or selecting them manually. Each attachment can be categorized (e.g., 'default category', 'ticket screenshot', 'team docs', 'procurement', 'service', 'retirement documents') and include a descriptive brief. This functionality is crucial for maintaining comprehensive documentation related to release management, aiding in tracking progress toward release goals, and enhancing the overall efficiency of the release management process.", "summary": "Add attachments for the selected release.", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "additional_info": "To add an attachment, users typically click an 'add' tab, then either drag and drop the document or click to select files. A category must be chosen from a dropdown list, followed by a description of the attachment. Finally, an 'Upload files' action is performed. The request body is designed to handle various data types, supporting common fields like StringField, URLField, IntField, BooleanField, and DateTimeField. Compound fields such as ListField and DictField are mapped to corresponding DRF fields. Note that FileField, ImageField, and BinaryField are not well supported or untested based on the provided deserializer information. The serializer depth influences how ReferenceField and EmbeddedDocumentField are handled, with nested serializers autogenerated for non-zero depths."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "Project Managers", "Release Team Members"], "primary_use_case": "Managing documentation and supporting release processes by adding attachments."}, "content_for_embedding": "This API allows users to add new attachments, such as screenshots or team documents, to a selected release. Users can upload files via drag and drop or manual selection. Each attachment can be categorized (e.g., 'default category', 'ticket screenshot', 'team docs') and include a descriptive brief. This functionality is vital for maintaining comprehensive documentation, tracking progress, and enhancing the efficiency of the release management process. The request body supports various data types, though FileField, ImageField, and BinaryField are noted as not well supported or untested.", "ontology_classification": {"features": ["attachment_management"], "primary_module": "release_management", "confidence_score": 0.95}, "semantic_keywords": ["Attachments", "Release Management", "Add"]}}, {"path": "/ux/sd/release/release/attachment/", "method": "GET", "details": {"operationId": "ux_sd_release_release_attachment_retrieve", "description": "This endpoint comprehensively retrieves all attachments associated with a specific release. This functionality is crucial for release management, providing access to documents, screenshots, and other files linked to the release, similar to how attachments are managed for requests and tickets. It enhances transparency and provides a central repository for all release-related documentation, enabling users to view the complete timeline and details of releases.", "summary": "Gets attachments for the selected release.", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "additional_info": "This endpoint helps to provide a comprehensive view of release management by centralizing access to all attached documentation. While the current API specification does not list any parameters, in a typical implementation, a release identifier would usually be required to specify which release's attachments are being requested. For adding attachments, users typically have options to drag and drop documents, categorize them (e.g., default, ticket screenshot, team docs), and add descriptions. This functionality is analogous to attachment features found in other parts of the system, such as for requests where it shows \"all the attachments of the current request\"."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "Project Managers", "Quality Assurance Engineers", "Developers", "Anyone needing to access release-related documentation"], "primary_use_case": "This API retrieves all attachments associated with a specific software release, providing a centralized repository for release-related documentation such as documents, screenshots, and other files. It is crucial for comprehensive release management and transparency."}, "content_for_embedding": "This API endpoint is designed to retrieve all attachments linked to a particular software release. It serves as a central access point for release documentation, including various file types like documents and screenshots, thereby enhancing transparency and providing a complete historical view of release details. This functionality is analogous to attachment management in other system areas like requests and tickets, supporting efficient release management processes.", "semantic_keywords": ["Attachments", "Release Management", "Retrieval"], "ontology_classification": {"features": ["attachment_management"], "primary_module": "release_management", "confidence_score": 1}}}, {"path": "/ux/sd/release/release/delete-release-risk/{id}/", "method": "POST", "details": {"operationId": "ux_sd_release_release_delete_release_risk_create", "description": "This API endpoint facilitates the deletion of a specific release from the system. It enables users to remove a selected release, an action which is irreversible. The endpoint is part of the broader release management functionality, allowing administrators or authorized users to manage the lifecycle of software releases. The deletion is performed based on the unique identifier (`id`) of the release.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and uniquely identifies the release to be deleted. As highlighted in the user guide, accessing the 'Delete' button allows users to delete the selected release. While the original description mentions viewing or editing 'Requests', the endpoint path `/ux/sd/release/release/delete-release-risk/{id}/` and the most relevant contexts strongly indicate its primary function is deleting *releases*, not general requests. \n\nThe `request_body_description` details various primitive and compound fields that might be used for serializers in other endpoints, but for this specific delete operation, a request body is generally not required for a simple deletion identified by a path parameter. However, the comprehensive list of recognized primitive and compound fields might be relevant for other API operations within the `/ux/sd/release/release/` scope, particularly for creation or update operations on 'Documents'."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Authorized User"], "primary_use_case": "To permanently remove a specific software release from the system."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of a specific software release from the system. It is a critical part of the release management process, enabling administrators and authorized users to manage the lifecycle of software releases by removing them using their unique identifier (ID).", "semantic_keywords": ["Delete", "Release", "Release Management"], "ontology_classification": {"features": ["release_deletion"], "primary_module": "release_management", "confidence_score": 1}}}, {"path": "/ux/sd/release/release/delete_release/", "method": "POST", "details": {"operationId": "ux_sd_release_release_delete_release_create", "description": "This API endpoint facilitates the deletion of a selected release within the system. It enables users to remove a specific Release record, an action that is generally irreversible. The endpoint is part of the `ux/sd/release/` module, indicating its role in managing user experience and service desk releases. For detailed editing or viewing of a Release, other endpoints would apply, but this one specifically handles the irreversible deletion.", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that this endpoint supports various field types for document serialization, though the exact expected Request Body for this specific DELETE operation is not explicitly detailed in the provided JSON spec or contexts. Based on common API patterns for deletion, it's likely that the release to be deleted is identified either via a path parameter (which is currently not listed in `parameters`) or specified within the request body. However, without specific examples, it's assumed to be a basic identifier. The user guide highlights that deletion of a release is irreversible. The serializer details provided are generic and describe the capabilities of the underlying serialization framework, not necessarily the specific input for this delete operation. It is crucial to ensure the correct Release ID is provided to avoid unintended data loss."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Service Desk Agent"], "primary_use_case": "To permanently remove a specific release record from the system."}, "content_for_embedding": "This API endpoint is designed for the irreversible deletion of a selected release record within the system. It is part of the user experience and service desk release management module. While other endpoints handle editing or viewing, this API specifically performs the permanent removal of a release. It is crucial to provide the correct Release ID to prevent unintended data loss, as the deletion is irreversible.", "semantic_keywords": ["Delete", "Release", "Irreversible"], "ontology_classification": {"features": ["release_deletion"], "primary_module": "release_management", "confidence_score": 1}}}, {"path": "/ux/sd/release/release/history/", "method": "GET", "details": {"operationId": "ux_sd_release_release_history_retrieve", "description": "This GET endpoint retrieves the complete historical timeline and details for a selected release. It provides a comprehensive view of activities, changes, and events related to the release throughout its lifecycle, including creation, modification, and status updates, aligning with the concept of a 'complete timeline and details of the releases' from the user guide.", "summary": "Gets history for the selected release.", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "additional_info": "This endpoint is particularly useful for auditing and tracking the progress of releases, providing users with full visibility into each release's lifecycle. It parallels the functionality described as 'view the complete timeline and details of the releases' and 'history of the activities logged' in the accompanying documentation. While the current API specification does not list any parameters, in a real-world scenario, a 'release ID' or similar identifier would be expected to specify which release's history is being requested. This information would be crucial for a developer to understand how to target a specific release's history."}, "llm_generated": {"business_context": {"user_personas": ["Developer", "Release Manager", "Auditor", "Project Manager"], "primary_use_case": "To provide a comprehensive historical timeline and details for a selected software release, enabling auditing, tracking of lifecycle events, and progress monitoring."}, "content_for_embedding": "This API retrieves the complete historical timeline and all associated details for a specific software release. It offers a comprehensive view of activities, changes, and events throughout the release lifecycle, including creation, modifications, and status updates. This functionality is crucial for auditing, tracking release progress, and providing full visibility into each release's history, paralleling documentation references to 'view the complete timeline and details of the releases' and 'history of the activities logged'.", "semantic_keywords": ["Release History", "Release Management", "Details retrieval"], "ontology_classification": {"features": ["release_history"], "primary_module": "release_management", "confidence_score": 1}}}, {"path": "/ux/sd/release/release/impact-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_impact_list_retrieve", "description": "This endpoint retrieves the impact list associated with a specific Release ID. When a Release ID is provided, the system displays relevant impact details, similar to how ticket details are displayed for a given Ticket ID or how a requester's past interactions are listed. This function is essential for understanding the potential impact of a release, which can include details such as 'Impact Asset', 'Impact Service', and 'Impact' categories like Business, Location, or Department, as typically defined within the Infraon Infinity portal for release management.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter refers to the unique identifier of a Release. Users should navigate to the 'Release' section in the Infraon Infinity portal to understand how releases are managed and the significance of their associated impact lists. The impact list typically details various aspects of the release, such as the Impact Service, which is a service category that the change could impact. This aligns with the comprehensive details provided when viewing specific IDs (Ticket ID, Change ID, Problem ID, Release ID) within the system."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "IT Operations", "Release Planner"], "primary_use_case": "This API retrieves the detailed impact list for a specific Release ID, enabling users to understand the potential effects of a release across various categories such as business, location, and department. It is crucial for release management and impact assessment within the Infraon Infinity portal."}, "content_for_embedding": "This API retrieves the comprehensive impact list associated with a unique Release ID. It provides critical details such as Impact Asset, Impact Service, and Impact categories (Business, Location, Department), which are essential for assessing the potential consequences of a release. The functionality is similar to viewing detailed information for tickets or requester interactions within the Infraon Infinity portal, supporting effective release management and planning.", "semantic_keywords": ["Details retrieval", "Release", "Impact List"], "ontology_classification": {"features": ["release_search", "release_categories_view"], "primary_module": "release_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/release/options/", "method": "GET", "details": {"operationId": "ux_sd_release_release_options_retrieve", "description": "This GET API endpoint provides options related to viewing and editing 'Release' requests. It allows users to retrieve details for quick actions such as 'Quick Edit' (for status, priority, urgency, severity, impact service, and assignee), 'Detailed Edit' for comprehensive changes, 'Delete' (an irreversible action), and 'Copy' to duplicate release requests. It also enables checking the status of releases and managing related changes.", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint contributes to the detailed management of Release requests within the system. While the API specification does not list specific parameters, the context suggests that functionalities like 'Quick Edit' and 'Detailed Edit' would typically involve specific parameters to modify release attributes. Users can expect options relevant to release lifecycle management, potentially including links to related tickets, problems, or changes. The details retrieved would be crucial for understanding comprehensive release information, similar to how ticket/request IDs redirect to pages with creation times and dates. The options provided are focused on direct actions a user can take on a Release."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "IT Operations Personnel", "Administrators"], "primary_use_case": "To retrieve available options and actions for managing Release requests, including quick and detailed editing, deletion, and copying, enabling users to efficiently manage the release lifecycle."}, "content_for_embedding": "This GET API endpoint provides a comprehensive set of options for interacting with and managing Release requests. It allows users to retrieve details necessary for performing quick actions such as updating status, priority, urgency, severity, impact service, and assignee, as well as more comprehensive detailed edits. The API also supports irreversible actions like deleting release requests and the ability to copy existing ones. Furthermore, it facilitates checking the status of releases and managing any related changes or linked entities like tickets, problems, or changes. This endpoint is crucial for the detailed management and lifecycle control of Release requests within the system, offering functionalities akin to a user interface for direct actions on a Release.", "ontology_classification": {"features": ["view_toggling", "release_search", "release_filtering", "auto_reload", "new_release_creation", "comment/communication", "release_history", "release_interaction_log", "attachment_management", "quick_edit", "advanced_release_editing", "release_deletion", "related_item_linking", "release_completion"], "primary_module": "release_management", "confidence_score": 1}, "semantic_keywords": ["Release Management", "Quick Edit", "Detailed Edit"]}}, {"path": "/ux/sd/release/release/process-rich-text/", "method": "GET", "details": {"operationId": "ux_sd_release_release_process_rich_text_retrieve", "description": "This endpoint is designed to retrieve rich text data, specifically the content of a message body, which is then used as the description for service requests. This is particularly relevant when requests are initiated via email, where the email's subject line becomes the service request summary and the message body provides the rich text description. This processing enables the accurate capture and display of detailed information within various system views, such as the 'Request' page, which lists service requests in Panel and Grid Views.", "summary": "Get rich text data", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "additional_info": "This endpoint's functionality appears to be intrinsically linked to how service requests are generated, especially from email sources. The 'rich text data' fetched by this endpoint corresponds directly to what users input into the 'Description' field of a service request. While the API specification does not list any parameters, the context heavily implies its use in scenarios where email content needs to be parsed and integrated into the system for accurate request logging and display. This feature supports comprehensive communication and detailed record-keeping for service requests.\n\nFurther clarification on whether this endpoint processes rich text (e.g., HTML, Markdown) or plain text, and any specific encoding requirements, would be beneficial for developers."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "IT Support Staff", "System Administrators"], "primary_use_case": "To accurately capture and display detailed rich text descriptions for service requests, especially when these requests originate from email communications. This ensures comprehensive record-keeping and clear communication within the system's service request views."}, "content_for_embedding": "This API retrieves and processes rich text data, specifically the message body from incoming emails, to serve as the detailed description for new service requests. This functionality is crucial for accurately populating the 'Description' field of service requests, ensuring that all relevant information from email communications is captured and properly displayed within various system views, such as the 'Request' page in both Panel and Grid Views. It facilitates the seamless integration of email-based service request submissions into the overall service management workflow, enhancing communication and record-keeping.", "semantic_keywords": ["Rich Text", "Service Request", "Email"], "ontology_classification": {"features": ["request_creation_&_channels", "internal_&_external_communication", "request_display_views_(panel_&_grid)", "email-to-ticket_conversion"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/release/release/release-data/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_release_data_retrieve", "description": "This API endpoint allows users to view comprehensive details of a specific Release. It can be used to retrieve all information associated with a Release, including its basic details, communication history, and historical timeline. This endpoint supports further actions such as quick edits and detailed editing of the Release data, aligning with the functionality described in user guides for managing Releases within the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter uniquely identifies the Release to be viewed or edited. This ID corresponds to the 'Release ID' mentioned in the documentation, which, upon being double-tapped or selected, redirects to a page presenting comprehensive details such as creation time and date. The retrieved Release data includes various tabs like 'Basic Details' and 'Communication'. While this GET endpoint specifically retrieves the data, other related actions for 'Quick Edit' and 'Detailed Edit' are available through other API calls, which allow modifying status, priority, urgency, severity, impact service, and assignee details, or more advanced configurations for the Release. This endpoint is crucial for displaying Release information in dashboards and for facilitating detailed management of Release records."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "Administrators", "Developers", "Users viewing release information"], "primary_use_case": "To retrieve comprehensive details of a specific Release, including its basic information, communication history, and historical timeline, for viewing, display in dashboards, and facilitating further management actions like quick and detailed edits."}, "content_for_embedding": "This API endpoint retrieves comprehensive details for a specific Release identified by its unique ID. It provides all associated information, such as basic details, communication history, and historical timeline. The data retrieved by this GET endpoint is crucial for displaying Release information in dashboards and serves as the foundation for subsequent actions like quick edits and detailed editing of Release records, as described in user guides for managing Releases within the system.", "ontology_classification": {"features": ["release_search", "comment/communication", "release_history", "quick_edit", "advanced_release_editing", "attachment_management", "release_categories_view", "release_interaction_log"], "primary_module": "release_management", "confidence_score": 0.95}, "semantic_keywords": ["Release", "Details retrieval", "History"]}}, {"path": "/ux/sd/release/release/release-impact/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_release_impact_retrieve", "description": "This API endpoint allows users to retrieve comprehensive details for a specific Release. By providing a unique 'release-impact ID', users can view all associated information, including creation time and date, basic details, communication logs, and historical timelines, much like viewing a detailed ticket or request. While the endpoint's original description mentioned 'view or edit', given the GET method, it is primarily for viewing the detailed information of a Release. The `id` in the path corresponds to the 'Release ID' mentioned in the documentation.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is essential and refers to the unique identifier for the Release. Double-tapping or clicking on a 'Release ID' typically redirects to a page displaying these comprehensive details, which this API supports. Although the endpoint is GET, the referenced contexts highlight various actions that can be performed on a Release record, such as 'Quick Edit', 'Detailed Edit', 'Delete', 'Copy', and adding relations (Ticket, Problem, Change, or Request). These actions imply other API endpoints would exist for modification, but this specific `GET` endpoint focuses solely on retrieving the detailed view of the Release. Key information accessible via the detailed view includes 'Basic Details', 'Workspace', 'Communication', 'History' (timeline of releases), 'Interaction' (log of user engagement and feedback), and 'Attachment' (for docs/screenshots). The endpoint reveals information such as impact, urgency, severity, risk, version numbers, service category, tags, due date, release manager, priority, and release type, as indicated by various contexts related to release details and management."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "IT Operations", "Support Staff", "Auditors"], "primary_use_case": "To retrieve comprehensive details for a specific Release, allowing users to view all associated information like creation time, basic details, communication logs, and historical timelines."}, "content_for_embedding": "This API endpoint facilitates the retrieval of all detailed information pertaining to a specific Release, identified by its unique ID. It provides a comprehensive view including basic details, communication logs, historical timelines, and associated attachments, enabling users to gain a complete understanding of a Release record. While it is a GET endpoint, the retrieved data supports various related actions such as quick editing, detailed editing, deletion, copying, and linking to other records like tickets, problems, changes, or requests.", "ontology_classification": {"features": ["release_history", "release_interaction_log", "attachment_management", "comment/communication", "quick_edit", "advanced_release_editing", "release_deletion", "related_item_linking", "release_completion", "release_search", "release_filtering", "view_toggling", "release_categories_view", "auto_reload", "tag_management", "detailed_record_view", "record_lifecycle_&_status_management"], "primary_module": "release_management", "confidence_score": 0.95}, "semantic_keywords": ["Details retrieval", "Release Management", "History"]}}, {"path": "/ux/sd/release/release/release-risk/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_release_risk_retrieve", "description": "This API endpoint allows for viewing comprehensive details of a specific Release Request. It serves as the gateway to a dedicated page that displays extensive information about the Release, including its creation time and date, similar to how Change Requests and Problem Requests are handled. Users can access various details through tabs such as 'Basic Details', 'Workspace', and 'Communication'. The endpoint supports actions like 'Quick Edit' for basic configurations (status, priority, urgency, severity, impact service, and assignee) and 'Detailed Edit' for more advanced modifications to the Release details. This functionality is crucial for managing the lifecycle of Release tickets within the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier for the Release Request (e.g., 'Release ID'). Double-tapping or clicking this ID in the UI redirects users to this detailed view. While this endpoint primarily supports viewing, the retrieved contexts highlight that it is associated with quick and detailed editing capabilities (e.g., 'Quick Edit' for status/priority, 'Edit' for full details) within the application's UI. This endpoint is central for accessing the 'History' of Release changes and 'Interaction' logs, providing a comprehensive timeline and data-driven perspective on user engagement and feedback related to the Release."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "IT Support Staff", "Administrators"], "primary_use_case": "To view comprehensive details of a specific Release Request, facilitating its management and enabling associated quick and detailed editing capabilities within the system."}, "content_for_embedding": "This API endpoint retrieves comprehensive details of a specific Release Request using its unique identifier. It provides access to a dedicated page displaying extensive information, including creation time and date, organized into tabs like 'Basic Details', 'Workspace', and 'Communication'. While primarily for viewing, this endpoint is crucial as it supports and provides context for actions such as 'Quick Edit' for basic configurations (status, priority, urgency, severity, impact service, assignee) and 'Detailed Edit' for advanced modifications. It also serves as a central point for accessing 'History' of Release changes and 'Interaction' logs, offering a complete timeline and data-driven insights into user engagement and feedback related to the Release ticket lifecycle.", "semantic_keywords": ["Release Management", "Details retrieval", "Edit"], "ontology_classification": {"features": ["release_history", "release_interaction_log", "quick_edit", "advanced_release_editing", "comment/communication", "attachment_management"], "primary_module": "release_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/release/release-task/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_release_task_retrieve", "description": "This API endpoint allows users to retrieve comprehensive details of a specific Release task identified by its unique `id`. It provides a detailed view of the release, including its creation time and date. This endpoint is crucial for viewing and potentially initiating quick or detailed edits on the Release task.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier for the Release task. Double-tapping or accessing this ID typically redirects to a page displaying comprehensive details about the Release. While this endpoint primarily facilitates viewing, the retrieved details are often used as a precursor for quick actions like status, priority, urgency, severity, impact, and assignee modifications, or for detailed editing of the Release task. Users can typically find tabs such as 'Basic Details', 'Workspace', and 'Communication' associated with a Release task. The 'id' parameter is akin to a 'Release ID' mentioned in user guides."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "Administrator", "User involved in Release Management"], "primary_use_case": "To retrieve comprehensive details of a specific Release task for viewing and enabling quick or detailed edits."}, "content_for_embedding": "This API endpoint retrieves comprehensive details of a specific Release task using its unique ID. It provides a detailed view of the release, including its creation time and date. The retrieved information is crucial for viewing the Release task and serves as a precursor for initiating quick actions like status, priority, urgency, severity, impact, and assignee modifications, or for detailed editing of the Release task. Users can access tabs such as Basic Details, Workspace, and Communication associated with the Release task via this ID.", "ontology_classification": {"features": ["release_history", "quick_edit", "advanced_release_editing"], "primary_module": "release_management", "confidence_score": 0.9}, "semantic_keywords": ["Details retrieval", "Release", "ID"]}}, {"path": "/ux/sd/release/release/requester_search/", "method": "GET", "details": {"operationId": "ux_sd_release_release_requester_search_retrieve", "description": "This GET API endpoint facilitates searching for and managing 'Requester' entities within the system. It allows users to view details for existing requesters and supports operations related to request management where a requester's information is central. This includes functionality to search for existing requesters, which is fundamental to creating, editing, and managing requests. The endpoint implicitly handles the search functionality mentioned in contexts for adding or selecting requesters for various tasks, primarily within the context of change requests and general request management.", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for workflows involving request creation and modification, as it provides the means to identify and associate a requester with a specific request. While the endpoint's core function is 'search', the broader context suggests it underpins 'viewing' and 'editing' capabilities for requests by allowing selection or identification of the associated requester. The 'Requester' module details, referenced in context (Rank 4, 5, 9), provide further guidance on managing requester entities. The endpoint should be utilized before actions that require associating a request with a specific requester, such as initiating a new change request. It supports the identification of requesters for tasks like 'Quick Edit' and 'Detailed Edit' on requests, which are tied to the requester. The system might also display the request history associated with a found requester (Rank 8)."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Agent", "Service Desk Personnel", "Administrator", "Request Manager", "Change Manager"], "primary_use_case": "To enable the search and retrieval of requester information, which is crucial for initiating, editing, and managing requests, including change requests, by associating them with the correct requester."}, "content_for_embedding": "This API endpoint facilitates the search and retrieval of \"Requester\" entity details, serving as a critical component for various request management workflows. It enables users to identify and associate requesters with new or existing requests, including change requests, and supports functionalities like quick and detailed editing of requests by providing relevant requester information. Additionally, it allows for the display of historical request data linked to a specific requester.", "semantic_keywords": ["Requester Search", "Request Management", "Change Request"], "ontology_classification": {"features": ["request_search_&_filtering", "request_editing_&_quick_actions", "requester_interaction_history_display", "change_management_integration", "request_creation_&_channels"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/release/release/risk-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_risk_list_retrieve", "description": "This API endpoint allows users to retrieve comprehensive details or perform detailed edits of a specific Release identified by its unique ID. It provides access to all information related to the Release, similar to double-tapping a Release ID in the UI to view comprehensive details, including creation time and date, basic details, and workspace information. This endpoint is crucial for managing and updating Release records within the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is mandatory and represents the unique identifier for the Release. This endpoint supports detailed editing of Release information, as indicated by the 'Detailed Edit' functionality described in the user guide. While the method is GET for viewing, the initial description implies editing capabilities, suggesting this endpoint might be part of a broader resource that supports other HTTP methods for modification or that the GET response structure itself might facilitate subsequent edit operations. Common use cases include viewing the status, priority, urgency, severity, impact service, and assignee for a specific Release, as well as accessing its basic details and workspace information."}, "llm_generated": {"business_context": {"user_personas": ["Users", "Administrators", "Release Managers"], "primary_use_case": "To retrieve comprehensive details and facilitate detailed editing of specific Release records within the system."}, "content_for_embedding": "This API retrieves comprehensive details for a specific Release using its unique ID. It provides all information necessary for managing and updating Release records, including status, priority, and historical data, and is designed to support detailed editing workflows.", "semantic_keywords": ["Release", "Details retrieval", "Detailed Edit"], "ontology_classification": {"features": ["release_history", "advanced_release_editing"], "primary_module": "release_management", "confidence_score": 1}}}, {"path": "/ux/sd/release/release/save-release-impact/", "method": "POST", "details": {"operationId": "ux_sd_release_release_save_release_impact_create", "description": "This API endpoint `POST /ux/sd/release/release/save-release-impact/` is designed to allow for the viewing and editing of 'Release' impact details. This is part of the broader functionality for managing various ticket types including Requests, Changes, Problems, and Releases within the system. The endpoint facilitates the saving of specific impact-related information for a Release, which can be crucial for tracking progress towards release goals and enhancing the efficiency of release management. It likely supports detailed editing functionalities beyond quick edits, allowing users to make comprehensive changes to the Release's impact data, similar to how detailed edits are performed for other record types.", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is critical as it defines the data structure for 'Documents', which presumably includes the Release impact details being saved. It supports a comprehensive set of primitive field types such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and others. Compound fields like `ListField` and `DictField` are also supported, allowing for complex nested data structures. `ReferenceField` and `EmbeddedDocumentField` are handled with autogenerated nested serializers for non-zero depth, enabling relationships between documents. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are either not well supported or untested, and other unspecified fields may not work as expected. This endpoint is primarily used for advanced/detailed release editing, contrasting with 'Quick Edit' options which are typically for minor configuration changes. The 'Impact' itself is a selectable field, as indicated in context, suggesting the API allows updating or setting this specific attribute for a Release."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "IT Operations Staff", "Administrator"], "primary_use_case": "This API allows users to save and update detailed impact information for a Release, enabling comprehensive management of release-related impact data and contributing to efficient release tracking and goal achievement."}, "content_for_embedding": "This API endpoint facilitates the detailed editing and saving of 'Impact' specific information for a Release. It is a core component within the broader system for managing various ticket types, including Requests, Changes, Problems, and Releases. Unlike quick edit functionalities, this endpoint supports comprehensive and advanced changes to a Release's impact data, which is a critical and selectable field (e.g., Business, Location, Department, Group). The request body is designed to handle complex nested data structures with diverse field types. This functionality is essential for accurately tracking release goals and significantly enhancing overall release management efficiency.", "ontology_classification": {"features": ["advanced_release_editing"], "primary_module": "release_management", "confidence_score": 0.95}, "semantic_keywords": ["Release Update", "Release Management", "Detailed Edit", "Impact List"]}}, {"path": "/ux/sd/release/release/save-release-risk/", "method": "POST", "details": {"operationId": "ux_sd_release_release_save_release_risk_create", "description": "This API endpoint facilitates the saving of release risk details within the system. It is part of the 'Release' module, allowing comprehensive management of release-related information. Users can view and edit various aspects of a Release, including its associated risks, as part of a detailed editing process. This functionality integrates with the broader system where 'Release IDs' allow access to comprehensive details, highlighting the importance of managing release risks for overall project tracking and status. The endpoint supports detailed input via a robust serializer, capable of handling various data types including strings, numbers, dates, and complex structures, facilitating thorough updates of release risk properties.", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates that the endpoint is designed to accept a wide range of data types for the Release risk details. It supports primitive fields such as `StringField`, `IntField`, `BooleanField`, and `DateTimeField`, as well as compound fields like `ListField` and `DictField`. Special attention is given to `ReferenceField` and `EmbeddedDocumentField`, which are handled with nested serializers depending on serializer depth, similar to foreign key relationships. Developers should note that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested for this endpoint. When updating release risks, it is important to consider fields like 'Impact', 'Urgency', 'Severity', and 'Risk' which are frequently associated with release management and selections from drop-downs in the UI. This endpoint likely contributes to the 'Detailed Edit' functionality for releases, allowing for granular control over release attributes, including their risks."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "Project Manager", "Administrator"], "primary_use_case": "To save and update detailed risk information associated with a specific release within the system."}, "content_for_embedding": "This API endpoint allows for the saving and detailed editing of release risk details, including fields such as Impact, Urgency, Severity, and Risk. It is crucial for comprehensive management and tracking of release-related information and their associated risks.", "ontology_classification": {"features": ["advanced_release_editing"], "primary_module": "release_management", "confidence_score": 0.9}, "semantic_keywords": ["Release Risk", "Release Update", "Detailed Edit"]}}, {"path": "/ux/sd/release/release/save-release-task/", "method": "POST", "details": {"operationId": "ux_sd_release_release_save_release_task_create", "description": "This API endpoint facilitates the viewing and detailed editing of 'Request' and 'Release' entities within the system. It enables users to perform actions such as quick edits (e.g., status, priority, urgency, severity, impact service, assignee), or comprehensive detailed edits for a 'Request'. For 'Release' entities, this endpoint specifically focuses on saving release tasks. Double-tapping on a 'Release ID' or 'Request ID' redirects users to a page showing comprehensive details for these entities. This endpoint is crucial for managing the lifecycle of requests and releases, including updating their various attributes.", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various data types, supporting primitive fields like StringField, IntField, DateTimeField, and compound fields such as ListField and DictField. Nested serializers are autogenerated for `ReferenceField` and `EmbeddedDocumentField` when the serializer depth is greater than 0. Generic fields like `GenericReferenceField` and `GenericEmbeddedDocumentField` are also supported. It's important to note that `FileField`, `ImageField`, and `BinaryField` are not well supported or are untested. All other fields might map to `DocumentField` and could potentially lead to unexpected behavior. This endpoint is commonly used in scenarios requiring detailed management and updates of service requests and release tasks, mirroring functionalities described for 'Quick Edit' and 'Detailed Edit' actions in the user guides."}, "llm_generated": {"business_context": {"user_personas": ["IT Service Managers", "Release Managers", "IT Support Staff", "Administrators"], "primary_use_case": "This API endpoint is crucial for managing the lifecycle of requests and releases, enabling users to save release tasks and perform quick or detailed edits on both Request and Release entities within the system."}, "content_for_embedding": "This API endpoint is designed for comprehensive management of IT service requests and software releases. It allows users to save specific tasks related to releases and perform both quick and detailed edits on existing request and release entities. This includes updating attributes such as status, priority, urgency, severity, impact service, and assignee for requests, and managing various aspects of release tasks. It supports the full lifecycle management of these critical ITIL processes.", "semantic_keywords": ["Release", "Request", "Edit"], "ontology_classification": {"features": ["quick_edit", "advanced_release_editing", "release_completion", "related_item_linking", "release_history", "attachment_management", "comment/communication", "release_interaction_log", "release_deletion", "view_toggling", "release_search", "release_filtering", "auto_reload", "new_release_creation", "release_lifecycle_management", "request_editing_&_quick_actions", "request_lifecycle_management", "detailed_request_information_display", "request_search_&_filtering", "request_tagging", "requester_interaction_history_display", "change/release_planning_&_task_management", "ticket_detail_view_(via_id)", "ticket_state_&_status_management", "calendar_filter"], "primary_module": "release_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/release/release/save-rich-text/", "method": "POST", "details": {"operationId": "ux_sd_release_release_save_rich_text_create", "description": "This endpoint, `/ux/sd/release/release/save-rich-text/`, facilitates the saving of rich text data within the application. Based on the provided contexts, this functionality is particularly relevant for handling text content in various scenarios, such as saving message bodies and descriptions that originated from emails for service requests. It ensures that formatted text content, potentially including complex structures and various data types specified in the request body (like strings, URLs, integers, booleans, and datetime fields), can be properly stored and managed within the system. The endpoint supports diverse data types recognized by the system's serializer for documents, including primitives and compound fields like ListField and DictField.", "summary": "Save rich text data", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "additional_info": "The `request_body_description` indicates that this endpoint relies on a robust serialization mechanism for document data. It supports a wide array of primitive fields such as `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `URLField`, among others. Compound fields like `ListField` and `DictField` are also supported, allowing for complex nested data structures. Notably, `ReferenceField` and `EmbeddedDocumentField` are handled with autogenerated nested serializers for non-zero depths, providing flexibility for related and embedded document data. Developers should be aware that `FileField`, `ImageField`, and `BinaryField` are not well-supported or untested, and their usage may lead to unexpected behavior. This API is likely used for backend processing of user-generated content, system-generated descriptions, or any text-heavy data that requires rich text formatting and persistent storage, similar to how email message bodies are processed into service request descriptions."}, "llm_generated": {"business_context": {"user_personas": ["Users who create or edit service requests", "Agents who process service requests", "System administrators"], "primary_use_case": "To enable the storage and management of formatted rich text content within the application, particularly for communications like email message bodies and descriptions related to service requests."}, "content_for_embedding": "This API endpoint facilitates the saving of rich text data, including formatted text and various data types, within the application. It is particularly relevant for storing message bodies and descriptions that originate from emails for service requests. The API supports complex data structures but specifically excludes file, image, and binary fields. It is designed for backend processing of user-generated and system-generated text-heavy content requiring rich text formatting and persistent storage.", "ontology_classification": {"features": ["communication_text_enhancement", "email-to-ticket_conversion"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Save", "Rich Text", "Communication"]}}, {"path": "/ux/sd/release/release/task-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_release_release_task_list_retrieve", "description": "This API endpoint allows users to retrieve and manage details related to a specific Request. It supports both viewing a comprehensive summary of the Request and initiating detailed edits for various aspects like its status, priority, urgency, severity, impact service, and assignee. The endpoint leverages the `id` path parameter to identify the target Request, enabling actions such as 'Quick Edit' for immediate changes or 'Detailed Edit' for more extensive modifications. The data returned provides important information needed to work on the request, including Request ID, Requester, Team, Status, and Priority, similar to how Request Summary Cards are displayed in the Panel view.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string identifying the Request to be viewed or edited. Viewing a Request provides a summary card containing key details. Editing a Request can be quick (e.g., changing status or assignee) or detailed, allowing for comprehensive modifications. Actions like deleting a Request or copying its details to create a new one are also associated with Request management. This endpoint is crucial for technicians to manage and resolve Requests effectively within the system."}, "llm_generated": {"business_context": {"user_personas": ["technician", "user"], "primary_use_case": "To retrieve, manage, and resolve specific service requests or tasks within the system."}, "content_for_embedding": "This API retrieves, manages, and allows detailed and quick editing of specific service requests or tasks. It enables viewing comprehensive summaries, updating status, priority, urgency, severity, impact service, and assignee. It also supports actions like deleting or copying requests, providing essential details like Request ID, Requester, Team, Status, and Priority for technicians to effectively manage and resolve requests.", "ontology_classification": {"features": ["request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "request_resolution_&_closure", "request_search_&_filtering", "internal_&_external_communication", "attachment_management", "knowledge_base_integration_(conversion_&_suggestion)", "change_management_integration", "request_monitoring_&_tracking", "requester_interaction_history_display"], "primary_module": "request_management", "confidence_score": 1}, "semantic_keywords": ["Request Management", "Retrieval", "Edit"]}}, {"path": "/ux/sd/release/release/workflow_options_map/", "method": "POST", "details": {"operationId": "ux_sd_release_release_workflow_options_map_create", "description": "This API endpoint facilitates the viewing and detailed editing of 'Request' instances within the system, integrating core functionalities related to Request Management. It allows for comprehensive modifications to a Request's details, supplementing quick edit options available elsewhere in the application. The endpoint supports various data types for input, including strings, URLs, emails, integers, floats, booleans, and date/time fields, as outlined in the request body specification. It plays a crucial role in the lifecycle of Requests, enabling technicians and users to manage request details effectively, including their status, priority, and assignment.", "tags": ["Release"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "The `request_body_description` indicates support for a wide range of primitive and compound fields for document serialization. Notably, `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth, similar to foreign key relationships in DRF. However, specific fields like `FileField`, `ImageField`, and `BinaryField` are noted as 'not well supported or untested,' and their use might lead to incorrect behavior, as all other unlisted fields default to `DocumentField`. Developers should refer to the application's user interface for 'Quick Edit' options for actions like status, priority, urgency, severity, impact service, and assignee changes. The full 'Edit' functionality exposed by this API offers more granular control over Request attributes. This endpoint is central to the 'Working on a Request' process within the Request Management module, as highlighted in the user guide."}, "llm_generated": {"business_context": {"user_personas": ["technicians", "users"], "primary_use_case": "This API allows for comprehensive viewing and detailed editing of Request instances, including their status, priority, and assignment, playing a crucial role in the Request lifecycle within the system."}, "content_for_embedding": "This API endpoint provides comprehensive functionality for viewing and performing detailed edits on existing Request instances. It enables users and technicians to modify various attributes of a Request, such as status, priority, and assignment, thereby supporting the full lifecycle management of requests. This goes beyond quick edit options by offering granular control over request details.", "semantic_keywords": ["Request Update", "Detailed Edit", "Request Management"], "ontology_classification": {"features": ["request_editing_&_quick_actions", "detailed_request_information_display", "request_lifecycle_management", "request_ownership_&_assignment"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/release/release/workflow_status/", "method": "GET", "details": {"operationId": "ux_sd_release_release_workflow_status_retrieve", "description": "This API endpoint provides access to view and manage the workflow status of a Release. It allows users to perform various actions related to a Release, including 'Quick Edit' for modifying attributes like status, priority, urgency, severity, impact, service, and assignee, or a more 'Detailed Edit' to comprehensively update Release details. The endpoint also supports viewing the current status of the Release, which is a key component displayed in the Release Summary Card and is central to the Release's lifecycle. It is integral to the Release Management module, allowing technicians to track and resolve releases effectively.", "tags": ["Release"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ReleaseList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint specifically focuses on the 'release' entity, enabling interaction with its workflow status. While the original description mentioned 'Request', contexts strongly indicate its application to 'Release' in this path (`/ux/sd/release/release/workflow_status/`). The workflow status is dynamic, with 'Open' as the default initial status and 'Resolved' or 'Closed' as typical final states. The 'Quick Edit' functionality suggests that specific fields for status, priority, urgency, severity, impact, service, and assignee can be updated through this endpoint. For more extensive modifications, a 'Detailed Edit' option is available. This endpoint aligns with the broader functionality of managing entities like tickets, requests, changes, problems, and releases, wherein their workflow status and details are crucial for their lifecycle management. The endpoint relates to the 'state' and 'status' concepts that govern how a Release progresses through its lifecycle."}, "llm_generated": {"business_context": {"user_personas": ["technician", "release manager", "administrator"], "primary_use_case": "To view and manage the workflow status and attributes of a Release, including quick and detailed editing capabilities."}, "content_for_embedding": "This API endpoint allows users to view, manage, and update the workflow status of a Release. It supports 'Quick Edit' for modifying key attributes like status, priority, urgency, severity, impact, service, and assignee, as well as 'Detailed Edit' for comprehensive updates. The endpoint is crucial for tracking and resolving releases within the Release Management module, enabling technicians to monitor and control the lifecycle of a Release through its various states and statuses, from 'Open' to 'Resolved' or 'Closed'.", "semantic_keywords": ["Workflow Status", "Release Management", "Release Update"], "ontology_classification": {"features": ["quick_edit", "advanced_release_editing", "release_completion", "ticket_state_&_status_management"], "primary_module": "release_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/req/conversation/", "method": "GET", "details": {"operationId": "ux_sd_req_conversation_retrieve", "description": "This API endpoint facilitates the viewing and editing of Incident details within the system. It specifically relates to the 'Communication' section of an Incident page, allowing users to interact with conversation content. Key functionalities enabled by this endpoint likely involve viewing communication history, status updates, and potentially supporting actions such as replying, forwarding emails, and adding notes related to the incident, as well as leveraging text enhancement features for communication content using OpenAI.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "While the current API specification indicates 'No response body' and an empty 'parameters' list, correlation with the context suggests this endpoint's capabilities are focused on managing 'conversation' elements within an Incident. This includes handling email communications ('written email will be visible under the 'Communication' tab', 'reply, forward, add notes') and potentially supporting integrations like OpenAI for refining communication content. Given its conversation-centric nature, future enhancements might include parameters for filtering by communication type or participant. The context also hints at the importance of the 'Ticket URL' for tracking progress and updates, and 'Reported by' details. This endpoint aligns with the broader capabilities of managing Incident communications, including quick edit actions like status and priority, as well as detailed editing of Incident requests discussed in other related contexts."}, "llm_generated": {"business_context": {"user_personas": ["Support Agents", "Technicians", "Incident Managers"], "primary_use_case": "This API endpoint allows users to view and manage communication content within an Incident, including communication history, status updates, replying to emails, forwarding emails, adding notes, and leveraging AI-powered text enhancement features for communication content."}, "content_for_embedding": "This API endpoint is designed for interacting with the \"Communication\" section of an Incident page. It enables users to view communication history, including emails and SMS messages, add notes, reply to and forward emails, and utilize text enhancement features powered by OpenAI to refine communication content. It acts as a central hub for all ticket interactions related to communication.", "ontology_classification": {"features": ["communication_tab_(centralized_history)", "communication_text_enhancement", "ticket_history_view", "direct_email/sms_sending"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Communication", "Incident", "GenAI"]}}, {"path": "/ux/sd/req/conversation/", "method": "POST", "details": {"operationId": "ux_sd_req_conversation_create", "description": "This `/ux/sd/req/conversation/` API endpoint (POST method) is designed to manage interactions and view details related to an Incident. It facilitates actions typical within the 'Communication' tab of an Incident page, allowing users to view communication history, reply to and forward emails, add notes, and perform other related communication content actions. Specifically, it enables text enhancement features for communication content, leveraging OpenAI, and supports general viewing and editing of Incident data, aligning with the functionalities for managing tickets and requests within the system.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "summary": "", "additional_info": "This endpoint is primarily concerned with 'conversation' elements within an Incident, implying it handles the communication aspect rather than core incident creation or main attributes. It may support actions like replying to, forwarding, and adding notes to communications, which are typically found under a 'Communication' tab. While the provided specification does not detail parameters or request body, the context suggests this endpoint might involve sending communication content, possibly with options for OpenAI-driven text enhancement. Use cases include enriching communication history within an Incident, managing email threads associated with an Incident, or adding internal notes for collaboration. The API integrates with the existing system's communication functionalities, making incident communication manageable directly through this interface."}, "llm_generated": {"business_context": {"user_personas": ["Incident Managers", "Service Desk Agents", "Technicians", "End-users involved in communication"], "primary_use_case": "To manage and enhance communication related to incidents and tickets, including viewing history, replying to emails, adding notes, and leveraging AI for text enhancement."}, "content_for_embedding": "This API endpoint facilitates the management of interactions and communication within incidents and tickets. It enables users to view communication history, reply to and forward emails, add internal notes, and utilize AI-powered text enhancement features, specifically through OpenAI, for refining communication content. The endpoint supports general viewing and editing of incident-related communication data.", "semantic_keywords": ["Communication", "Incident", "Ticket"], "ontology_classification": {"features": ["ticket_management.communication_tab_(centralized_history)", "ticket_management.direct_email/sms_sending", "ticket_management.communication_text_enhancement", "ticket_management.internal_notes", "ticket_management.ticket_history_view", "ticket_management.file_attachments_(communication)", "workspace.ai-powered_communication_enhancement"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/req/conversation/{id}/", "method": "GET", "details": {"operationId": "ux_sd_req_conversation_retrieve_2", "description": "This API endpoint allows users to view or edit details of a specific Incident, which is often referred to as a 'ticket' or 'request' in the system. Incidents can include communication details (such as emails with options to reply, forward, or add notes), ticket status, priority, urgency, severity, impact, and assignee information. It also supports viewing related changes and performing quick actions like editing these attributes or updating the ticket thread with notes.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter refers to the unique identifier of the Incident (or conversation/ticket). This API is crucial for tracking the progress of requests and managing their lifecycle. Communication content within an Incident can be enhanced using OpenAI, offering various styles to refine text. Users can access the ticket URL to view its status and updates. Deleting an Incident is an irreversible action. This endpoint is part of the `/ux/sd/req/conversation` path, indicating its relevance to user experience, service desk, and request management conversations broadly."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "Support Technicians", "IT Administrators"], "primary_use_case": "Manage and track the lifecycle of service desk incidents, tickets, and requests, including viewing and editing their details, communication, status, and related changes."}, "content_for_embedding": "This API retrieves and allows editing of detailed information for a specific Incident, also known as a ticket or request, identified by its unique ID. It provides access to communication history (emails, notes), status, priority, urgency, severity, impact, and assignee details. Users can view related changes, perform quick edits on attributes, update the ticket thread, and track the overall lifecycle and progress of the request. Communication content can be enhanced using AI. The API is central to user experience, service desk, and request management.", "semantic_keywords": ["Ticket", "Details retrieval", "Update"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "detailed_ticket_editing", "quick_edit_(key_attributes)", "ticket_state_&_status_management", "ticket_ownership_management", "ticket_tracking", "lifecycle_communication_management", "communication_tab_(centralized_history)", "communication_text_enhancement", "ticket_deletion", "ticket_history_view", "ticket_url_for_tracking", "view_linked_change_request", "ticket_attachments", "ai-powered_communication_enhancement"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/req/conversation/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_req_conversation_update", "description": "This API endpoint allows for the viewing and detailed editing of an Incident, specifically focusing on conversation-related aspects. It enables users to update an existing conversation within an Incident, similar to how communication content is managed in the 'Communication' tab on the Incident page. This includes actions like replying, forwarding, adding notes, and potentially refining communication content using AI features, as outlined in the user guide's 'Communication' section for Incidents.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` path parameter represents the unique identifier for the specific conversation within an Incident that is being viewed or edited. While the API specification did not include a request body description, based on the context related to editing and refining communication, it is implied that a request body would be used to supply the updated conversation content or properties. This endpoint supports actions beyond simple viewing, allowing for modifications to the communication thread, much like the 'Quick Edit' or 'Detailed Edit' functionalities described for Requests in general, although this endpoint is specific to 'conversation' within an 'Incident'."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Incident Manager", "Administrator", "Developer"], "primary_use_case": "This API allows users to update and manage conversation-related aspects within an Incident, including replying, forwarding, adding notes, and refining content using AI features, thereby streamlining communication within incident resolution workflows."}, "content_for_embedding": "This API updates specific conversations within an Incident. It enables users to perform actions like replying, forwarding, and adding notes to an existing communication thread. It also supports refining communication content using AI features, mirroring the functionality of the 'Communication' tab on an Incident page. The API uses a unique conversation ID for targeting updates.", "semantic_keywords": ["Communication", "Update", "Incident"], "ontology_classification": {"features": ["detailed_ticket_editing", "communication_tab_(centralized_history)", "communication_text_enhancement", "internal_notes", "lifecycle_communication_management", "ticket_detail_view_(via_id)"], "primary_module": "ticket_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/req/conversation/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_req_conversation_destroy", "description": "This API endpoint allows for the deletion of a specific conversation, identified by its unique ID. This action is irreversible and permanently removes the conversation data, which is part of the 'Incident' view or 'Request' interactions. Conversations typically involve communication content, notes, and various actions such as replies, forwarding, or text enhancements via OpenAI, as seen in the 'Communication' tab of an Incident page.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "summary": "", "additional_info": "The `id` parameter is a mandatory path parameter, representing the unique identifier of the conversation to be deleted. As highlighted in the Infinity user guide (Context Rank 3), 'Delete' actions for Requests are irreversible. This endpoint specifically targets conversations, which are an integral part of tracking progress, and communication within tickets or requests. There is no request body for this DELETE operation, and the API returns no response body upon successful deletion, only an appropriate HTTP status code. This action is crucial for managing conversation logs and maintaining data hygiene within the system."}, "llm_generated": {"business_context": {"user_personas": ["Support Agent", "Administrator", "IT Service Manager"], "primary_use_case": "This API allows for the permanent deletion of specific conversations associated with incidents or service requests, ensuring data hygiene and management of communication logs within the system."}, "content_for_embedding": "This API endpoint facilitates the irreversible deletion of a specific conversation identified by its unique ID. These conversations are integral to incident and request interactions, encompassing communication content, notes, replies, forwarding actions, and text enhancements via AI (like OpenAI), typically found in the Communication tab of an Incident page. The operation permanently removes the conversation data, and upon successful deletion, returns an HTTP 204 status code with no response body. This action is crucial for maintaining clean conversation logs and managing data within the system.", "semantic_keywords": ["Delete", "Communication", "Request"], "ontology_classification": {"features": ["request_management_actions_(delete,_copy,_merge)", "internal_&_external_communication", "requester_interaction_history_display", "communication_tab", "ai-powered_communication_enhancement"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/req/request_process/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_list", "description": "This endpoint retrieves a paginated list of service requests within the current organization. These requests are formal inquiries raised by users (requesters) for information, support, access to IT, or new services, and are managed through Infraon's 'Request' module. The endpoint allows for fetching all requests, enabling monitoring, tracking, and understanding their lifecycle, which includes various states (e.g., Open) and statuses (e.g., New, Assign-Categorize).", "summary": "Gets a list of requests", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/RequestList"}}}}, "description": ""}}, "additional_info": "Requests can be created by end-users via the web portal, mobile app, or email, or by service desk agents. The `items_per_page` and `page` query parameters are mandatory for pagination. Optional `sort` and `reverse` parameters allow for ordering the results based on specific keys (e.g., Request ID, status, subject, requester name) and in ascending or descending order. The `Request ID` is auto-generated upon creation and is crucial for viewing communication history, adding notes, and performing actions like resolving a request. Understanding the request lifecycle, as detailed in Infraon's documentation, is essential for effective use of this endpoint."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "Administrators", "End-users monitoring their requests"], "primary_use_case": "To retrieve and monitor a paginated list of service requests, enabling tracking of their lifecycle, states, and statuses."}, "content_for_embedding": "This API endpoint allows for fetching a paginated list of service requests within an organization. It provides details necessary for monitoring, tracking, and understanding the lifecycle of these requests, including their current states and statuses. Users can sort and paginate the results to efficiently manage and view service inquiries.", "semantic_keywords": ["Request Management", "Service Request", "Pagination"], "ontology_classification": {"features": ["request_monitoring_&_tracking", "request_lifecycle_management", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_search_&_filtering", "customizable_statuses_&_views"], "primary_module": "request_management", "confidence_score": 1}}}, {"path": "/ux/sd/req/request_process/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_create", "description": "This endpoint facilitates the creation of a new service request within the Infraon platform for the current organization. A Service Request, in Infraon, is a formal request raised by a user\u2014which can include end-users/requesters or service desk agents\u2014for information, support, access to IT resources, or for new services to be provided. This API enables the initial \"Request Recording\" step of the Request Management process, where a user identifies a need and formally requests it. The created request will automatically manage its lifecycle, including ownership, monitoring, tracking, and communication, and will follow defined states and statuses, typically starting with 'State: Open' and 'Status: New'.", "summary": "Creates a new request ", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateRequestSample": {"value": {"summary": "VPN Issue", "description": "", "catalogue": "", "impact_service": "", "impact_service_name": "service1", "service_classification": "", "service_classification_name": "", "state": "Open", "state_id": 1, "status": "New", "status_id": 1, "urgency_id": 3, "urgency": "Low", "priority_id": 5, "priority": "Very Low", "impact": "Department", "impact_id": 3, "request_source": {"id": 1, "name": "Web"}, "resolution_type": "", "request_type": {"id": 1, "name": "Request", "prefix": "REQ"}, "requester_id": "", "requester_name": "Test req", "requester_email": "testreq@gmail.com", "requester_phone": "7778889999", "reporter_name": "", "reporter_email": "", "reporter_phone": "", "watcher": "", "hold_config": {}, "support_group": "", "assignee": "", "escalation": {}, "tag": [], "assets": [], "config": {}, "reference": {}, "template_info": {}, "closure_info": {}, "approval_config": {}, "custom_field": [{}], "attachment": {}, "api_link": {}, "lock_config": {}, "field_service_config": {}, "closure_note": ""}, "summary": "Create request Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "Requests can be analogously raised through various channels in Infraon, such as the web portal, mobile app, email, by technicians, WhatsApp, or chatbots; this API provides a programmatic method for creating new requests. The request body includes fields for comprehensive request details like `summary`, `description`, `request_type`, `requester_name`, and `requester_email`. It also allows for specifying `urgency`, `impact`, `priority`, and associating the request with a `catalogue` and specific `assets`. The `request_source` field, which shows how the request was submitted, can be set programmatically via this endpoint (e.g., 'Web' via `id: 1, name: 'Web'`). The `Request ID` is auto-generated upon successful creation, serving as a unique identifier for the request's life cycle management.", "parameters": [{"name": "summary", "in": "body", "description": "Inferred parameter: summary", "required": true, "schema": {"type": "string"}}, {"name": "description", "in": "body", "description": "Inferred parameter: description", "required": true, "schema": {"type": "string"}}, {"name": "catalogue", "in": "body", "description": "Inferred parameter: catalogue", "required": true, "schema": {"type": "string"}}, {"name": "impact_service", "in": "body", "description": "Inferred parameter: impact_service", "required": true, "schema": {"type": "string"}}, {"name": "impact_service_name", "in": "body", "description": "Inferred parameter: impact_service_name", "required": true, "schema": {"type": "string"}}, {"name": "service_classification", "in": "body", "description": "Inferred parameter: service_classification", "required": true, "schema": {"type": "string"}}, {"name": "service_classification_name", "in": "body", "description": "Inferred parameter: service_classification_name", "required": true, "schema": {"type": "string"}}, {"name": "state", "in": "body", "description": "Inferred parameter: state", "required": true, "schema": {"type": "string"}}, {"name": "state_id", "in": "body", "description": "Inferred parameter: state_id", "required": true, "schema": {"type": "string"}}, {"name": "status", "in": "body", "description": "Inferred parameter: status", "required": true, "schema": {"type": "string"}}, {"name": "status_id", "in": "body", "description": "Inferred parameter: status_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency_id", "in": "body", "description": "Inferred parameter: urgency_id", "required": true, "schema": {"type": "string"}}, {"name": "urgency", "in": "body", "description": "Inferred parameter: urgency", "required": true, "schema": {"type": "string"}}, {"name": "priority_id", "in": "body", "description": "Inferred parameter: priority_id", "required": true, "schema": {"type": "string"}}, {"name": "priority", "in": "body", "description": "Inferred parameter: priority", "required": true, "schema": {"type": "string"}}, {"name": "impact", "in": "body", "description": "Inferred parameter: impact", "required": true, "schema": {"type": "string"}}, {"name": "impact_id", "in": "body", "description": "Inferred parameter: impact_id", "required": true, "schema": {"type": "string"}}, {"name": "request_source", "in": "body", "description": "Inferred parameter: request_source", "required": true, "schema": {"type": "string"}}, {"name": "resolution_type", "in": "body", "description": "Inferred parameter: resolution_type", "required": true, "schema": {"type": "string"}}, {"name": "request_type", "in": "body", "description": "Inferred parameter: request_type", "required": true, "schema": {"type": "string"}}, {"name": "requester_id", "in": "body", "description": "Inferred parameter: requester_id", "required": true, "schema": {"type": "string"}}, {"name": "requester_name", "in": "body", "description": "Inferred parameter: requester_name", "required": true, "schema": {"type": "string"}}, {"name": "requester_email", "in": "body", "description": "Inferred parameter: requester_email", "required": true, "schema": {"type": "string"}}, {"name": "requester_phone", "in": "body", "description": "Inferred parameter: requester_phone", "required": true, "schema": {"type": "string"}}, {"name": "reporter_name", "in": "body", "description": "Inferred parameter: reporter_name", "required": true, "schema": {"type": "string"}}, {"name": "reporter_email", "in": "body", "description": "Inferred parameter: reporter_email", "required": true, "schema": {"type": "string"}}, {"name": "reporter_phone", "in": "body", "description": "Inferred parameter: reporter_phone", "required": true, "schema": {"type": "string"}}, {"name": "watcher", "in": "body", "description": "Inferred parameter: watcher", "required": true, "schema": {"type": "string"}}, {"name": "hold_config", "in": "body", "description": "Inferred parameter: hold_config", "required": true, "schema": {"type": "string"}}, {"name": "support_group", "in": "body", "description": "Inferred parameter: support_group", "required": true, "schema": {"type": "string"}}, {"name": "assignee", "in": "body", "description": "Inferred parameter: assignee", "required": true, "schema": {"type": "string"}}, {"name": "escalation", "in": "body", "description": "Inferred parameter: escalation", "required": true, "schema": {"type": "string"}}, {"name": "tag", "in": "body", "description": "Inferred parameter: tag", "required": true, "schema": {"type": "string"}}, {"name": "assets", "in": "body", "description": "Inferred parameter: assets", "required": true, "schema": {"type": "string"}}, {"name": "config", "in": "body", "description": "Inferred parameter: config", "required": true, "schema": {"type": "string"}}, {"name": "reference", "in": "body", "description": "Inferred parameter: reference", "required": true, "schema": {"type": "string"}}, {"name": "template_info", "in": "body", "description": "Inferred parameter: template_info", "required": true, "schema": {"type": "string"}}, {"name": "closure_info", "in": "body", "description": "Inferred parameter: closure_info", "required": true, "schema": {"type": "string"}}, {"name": "approval_config", "in": "body", "description": "Inferred parameter: approval_config", "required": true, "schema": {"type": "string"}}, {"name": "custom_field", "in": "body", "description": "Inferred parameter: custom_field", "required": true, "schema": {"type": "string"}}, {"name": "attachment", "in": "body", "description": "Inferred parameter: attachment", "required": true, "schema": {"type": "string"}}, {"name": "api_link", "in": "body", "description": "Inferred parameter: api_link", "required": true, "schema": {"type": "string"}}, {"name": "lock_config", "in": "body", "description": "Inferred parameter: lock_config", "required": true, "schema": {"type": "string"}}, {"name": "field_service_config", "in": "body", "description": "Inferred parameter: field_service_config", "required": true, "schema": {"type": "string"}}, {"name": "closure_note", "in": "body", "description": "Inferred parameter: closure_note", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["end-users/requesters", "service desk agents"], "primary_use_case": "Facilitate the creation of new service requests within the Infraon platform."}, "content_for_embedding": "This API creates a new service request in the Infraon platform. It allows users, including end-users/requesters and service desk agents, to formally log requests for information, support, IT resources, or new services. The API supports programmatic creation of requests, mirroring various submission channels like web portals, mobile apps, and email. Key details such as summary, description, request type, requester information (name, email, phone), urgency, impact, priority, and request source can be specified. Upon successful creation, a unique Request ID is auto-generated for lifecycle management.", "semantic_keywords": ["Service Request", "Request Creation", "Ticket Submission"], "ontology_classification": {"features": ["request_creation_&_channels", "request_lifecycle_management", "request_classification_&_categorization", "request_ownership_&_assignment", "request_monitoring_&_tracking", "internal_&_external_communication", "attachment_management", "customizable_statuses_&_views", "request_tagging"], "primary_module": "request_management", "confidence_score": 1}}}, {"path": "/ux/sd/req/request_process/{id}/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_retrieve", "description": "This endpoint retrieves comprehensive details for a specific service request within the current organization. Each request is managed through the \"Request\" module in Infraon, following multiple states and statuses throughout its lifecycle (e.g., 'Open' with 'New' status during logging, 'Assign' for categorization). Request details can include a summary card, current status, subject, team assignment, and the requester's name. This API is essential for monitoring, tracking, and understanding the communication history of individual requests, which are formal requests raised by users for information, support, IT access, or new services.", "summary": "Gets a request with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is required and must be a valid string representing the unique identifier of the request. This `id` is auto-generated when a request is created. Users can view request details either in a tabular 'Grid View' by clicking on the Request ID or as a 'Request Summary Card' in 'Panel View', which provides a brief overview including the Request ID, Requester, Team, Status, and Priority. This API facilitates resolution of requests and offers insights into communication history, notes, and work logs. Requests can be raised by service desk agents or end-users (requesters) via web portal, mobile app, or email."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "End-users (Requesters)", "Administrators"], "primary_use_case": "To retrieve comprehensive details of a specific service request for monitoring, tracking, and understanding its lifecycle and communication history within an organization."}, "content_for_embedding": "This API retrieves comprehensive details for a specific service request using its unique ID. It provides information essential for monitoring, tracking, and understanding the request's lifecycle, current status, subject, team assignment, requester details, and communication history, including notes and work logs. Users can view these details in various formats like a summary card, grid view, or panel view. Requests can originate from service desk agents or end-users via web portals, mobile apps, or email.", "ontology_classification": {"features": ["request_monitoring_&_tracking", "detailed_request_information_display", "request_display_views_(panel_&_grid)", "internal_&_external_communication", "requester_interaction_history_display", "attachment_management", "request_search_&_filtering", "request_lifecycle_management", "request_resolution_&_closure", "change_management_integration", "requester_self-service_portal"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Request", "Details retrieval", "Request Management"]}}, {"path": "/ux/sd/req/request_process/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_req_request_process_update", "description": "This endpoint allows for a comprehensive and detailed update of an existing Request within the current organization's Request Management system. Unlike 'Quick Edit' actions which handle specific fields like status or priority, this 'Detailed Edit' functionality enables the modification of extensive Request details, aligning with the core purpose of Request Management to handle user-initiated requests effectively throughout their lifecycle. Requests are formal requests for information, support, or services, managed via the 'Request' module, and can be raised by end-users or service desk agents.", "summary": "Edits the request with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "additional_info": "The `id` path parameter uniquely identifies the Request to be edited. The request body for this PUT operation is a serializer, supporting a wide range of primitive field types including `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `URLField`. Compound fields like `ListField` and `DictField` are also supported, mapping to Django REST Framework (DRF) equivalents. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth. Developers should note that `FileField`, `ImageField`, and `BinaryField` are not well supported or tested, and their use may lead to unexpected behavior. This API is crucial for managing the full lifecycle of Requests within the system, from initial recording to resolution."}, "llm_generated": {"business_context": {"user_personas": ["end-users", "service desk agents"], "primary_use_case": "To enable comprehensive and detailed updates of existing requests within a Request Management system, supporting the full lifecycle of user-initiated requests."}, "content_for_embedding": "This API endpoint provides a \"Detailed Edit\" functionality for updating existing Requests in a Request Management system. It allows for the comprehensive modification of extensive Request details, unlike quick edit actions. This is crucial for managing the full lifecycle of user-initiated requests, from initial recording to resolution, and can be utilized by both end-users and service desk agents.", "ontology_classification": {"features": ["request_editing_&_quick_actions", "request_lifecycle_management"], "primary_module": "request_management", "confidence_score": 1}, "semantic_keywords": ["Request Update", "Detailed Edit", "Request Management"]}}, {"path": "/ux/sd/req/request_process/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_req_request_process_destroy", "description": "This endpoint allows for the permanent deletion of a specific service request identified by its unique ID. This action is irreversible and is part of the Request Management module, which handles the lifecycle of user-initiated requests for information, support, or IT services. Deleting a request removes it from the system and affects its tracking and reporting within Infraon's Request Management processes. This operation is typically performed when a request is no longer needed or was created in error.", "summary": "Deletes the request with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The `id` path parameter is mandatory and represents the unique identifier of the request to be deleted. As highlighted in the Infinity User Guide, deleting a request is an irreversible action. This endpoint aligns with the 'Delete' functionality often found in Request Management systems to remove requests. While the context mentions 'Bulk Requester Delete', this specific endpoint is for deleting a single request. No response body is provided upon successful deletion."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Request Manager"], "primary_use_case": "To permanently delete a specific service request from the system, typically when it is no longer needed or was created in error. This action is irreversible and affects tracking and reporting within Request Management processes."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a single service request identified by its unique ID. It is a core function within the Request Management module, allowing users to remove requests that are no longer required or were erroneously created, impacting the request's lifecycle, tracking, and reporting within the system. No response body is returned upon successful deletion.", "ontology_classification": {"features": ["request_management_actions_(delete,_copy,_merge)", "request_lifecycle_management", "request_monitoring_&_tracking"], "primary_module": "request_management", "confidence_score": 0.95}, "semantic_keywords": ["Delete", "Request", "Irreversible"]}}, {"path": "/ux/sd/req/request_process/attachment/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_attachment_retrieve", "description": "This endpoint retrieves all attachments associated with a selected or current request within the system. It enables users to view documents, images, or other files linked to a specific service request, akin to how attachments are displayed for user requests, problems, or change requests in the user interface. This functionality is crucial for understanding the full context and supporting documentation of a particular request.", "summary": "Gets attachments for the selected request.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "additional_info": "This endpoint specifically focuses on fetching existing attachments and does not provide functionality for adding, modifying, or deleting them. While the API specification does not list any parameters, in a typical usage scenario, the API would likely require a request identifier (e.g., a request ID) to specify which request's attachments should be retrieved. For adding new attachments, the system typically supports drag-and-drop or file upload mechanisms, often with options to categorize and describe the attachment. This aligns with the 'Attachment' section described in the Infinity User Guide, which consistently refers to showing 'all the attachments of the current request', 'current problem', or 'current change request'. For more details on attachment management within the UI, refer to the 'Attachment' and 'Add Attachments' sections in the Infinity User Guide."}, "llm_generated": {"business_context": {"user_personas": ["Service Agents", "IT Support Staff", "End Users (for their own requests)"], "primary_use_case": "This API allows users to retrieve all attachments associated with a specific request, problem, or change request within the system. It provides access to supporting documentation, images, and other files linked to a particular record, enabling a comprehensive understanding of its context."}, "content_for_embedding": "This GET endpoint retrieves all attachments for a selected or current request, problem, or change request. It is crucial for viewing associated documents, images, and files to understand the full context and supporting documentation of a service request. This API focuses solely on fetching existing attachments and does not support adding, modifying, or deleting them. It functions similarly to how attachments are displayed in the user interface for various request types.", "semantic_keywords": ["Attachments", "Retrieval", "Request Management"], "ontology_classification": {"features": ["attachment_management"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/req/request_process/bulk_retry_api/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_bulk_retry_api_create", "description": "This API endpoint facilitates the management and operation of 'Requests' within the system. It enables users to trigger bulk retry operations for failed downloads or tasks, leveraging configurable retry settings such as retry times and intervals. Beyond retries, the API supports viewing and detailed editing of Request properties, including status, priority, urgency, severity, impact service, and assignee. It also provides functionalities like quick edits for common attributes, detailed Request editing, and the ability to copy Request details to create new entries. The API handles Request data based on a defined serializer, which supports various primitive and compound field types (e.g., StringField, IntField, ListField, DictField), including nested serializers for complex document structures like 'ReferenceField' and 'EmbeddedDocumentField'.", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "The Request details can be edited using either 'Quick Edit' for common attributes (status, priority, urgency, severity, impact service, assignee) or 'Detailed Edit' for comprehensive modifications. The `request_body_description` details the serializer's capabilities, emphasizing support for numerous field types. Developers should note how `ReferenceField` and `EmbeddedDocumentField` are handled, which involves nested serializer auto-generation for non-zero depth. Be aware that `FileField`, `ImageField`, and `BinaryField` are either not well-supported or untested. The concept of 'Retry Times' and 'Retry Interval in Hrs' (or Minutes) as described in the context documents likely applies to the task retry mechanism enabled by this bulk retry API. This endpoint is crucial for maintaining service reliability and managing recurring or failed requests."}, "llm_generated": {"business_context": {"primary_use_case": "This API facilitates the management and operation of \"Requests\" within the system, specifically enabling bulk retry operations for failed downloads or tasks and supporting detailed editing and viewing of Request properties. It is crucial for maintaining service reliability and managing recurring or failed requests."}, "content_for_embedding": "This API endpoint manages 'Requests' within the system, enabling bulk retry operations for failed downloads or tasks with configurable settings. It also supports comprehensive viewing, quick editing, detailed editing, and copying of Request properties like status, priority, and assignee. It's essential for service reliability and managing recurring or failed requests.", "ontology_classification": {"features": ["request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "request_monitoring_&_tracking", "request_lifecycle_management", "detailed_request_information_display"], "primary_module": "request_management", "confidence_score": 0.95}, "semantic_keywords": ["Request Management", "Retry", "Bulk Operations"]}}, {"path": "/ux/sd/req/request_process/check_list/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_check_list_retrieve", "description": "This API endpoint provides functionalities to view and manage 'Request' details within the system. It enables detailed editing of Requests, including fields like status, priority, urgency, severity, impact service, and assignee. Users can also perform quick edit actions, or use the 'Detailed Edit' option for more comprehensive modifications. This endpoint facilitates the broader Request Management process, allowing users to view current requests and also potentially review older ones.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is central to Request Management activities. While the current specification indicates a GET method, the context suggests this endpoint could facilitate both viewing and editing, implying potential future expansion to other HTTP methods (e.g., PUT or PATCH) for performing detailed edits. The context also highlights actions like 'Quick Edit' and 'Detailed Edit', which impact a Request's attributes such as status, priority, and assignee. Users can also add attachments to service requests via related processes. The endpoint is integral for tracking Request resolution time and is part of the core Request Management module."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Request Manager"], "primary_use_case": "This API is used for viewing, managing, and editing details of \"Requests\" within the system, facilitating the broader Request Management process. It allows users to view current and older requests, perform quick edits, and detailed modifications of request attributes like status, priority, urgency, severity, impact service, and assignee."}, "content_for_embedding": "This API endpoint, ux_sd_req_request_process_check_list_retrieve, is designed for comprehensive Request Management. Although currently a GET method, its functionality extends to viewing and managing request details, including status, priority, urgency, severity, impact service, and assignee. Users can perform both quick and detailed edits. It supports viewing requests in various formats (Panel View, Grid View), filtering by date, tagging, and accessing request history. The endpoint is integral for tracking request resolution and integrates with Change Management, Ticket Management (for converting requests to tickets), and Knowledge Base (for converting requests to KB articles). It also handles attachments related to service requests.", "ontology_classification": {"features": ["request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_lifecycle_management", "request_monitoring_&_tracking", "attachment_management", "request_search_&_filtering", "request_tagging", "requester_interaction_history_display", "escalation_to_ticket_conversion", "knowledge_base_integration_(conversion_&_suggestion)", "change_management_integration"], "primary_module": "request_management", "confidence_score": 0.95}, "semantic_keywords": ["Request Management", "Detailed Edit", "Quick Edit"]}}, {"path": "/ux/sd/req/request_process/create-request-process-csv/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_create_request_process_csv_create", "description": "API endpoint that allows Request to be viewed or edited.", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Request Manager", "Data Importer"], "primary_use_case": "Facilitating the creation of new requests, potentially in bulk, by processing data from a CSV file."}, "content_for_embedding": "This API endpoint is designed for the creation of new requests within the system, specifically supporting the import of request data via CSV files. While its primary function is creation, it operates within a broader Request Process management context that allows for requests to be viewed and edited. It enables users to efficiently add or update multiple request entries.", "ontology_classification": {"features": ["request_creation_&_channels", "request_editing_&_quick_actions", "attachment_management", "request_monitoring_&_tracking", "request_display_views_(panel_&_grid)", "request_search_&_filtering", "request_tagging", "requester_interaction_history_display", "change_management_integration"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Request Creation", "CSV Import", "Request Management"]}}, {"path": "/ux/sd/req/request_process/history/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_history_retrieve", "description": "This endpoint, `/ux/sd/req/request_process/history/`, is used to fetch the complete history of a selected request. It provides a comprehensive timeline of the request from its creation, showing all significant events and changes. This history can include details such as requester comments, attachments, the source of the request (e.g., email, web), and actions performed on the request, such as conversions to a ticket or Knowledge Base (KB) article. It is crucial for understanding the lifecycle and progression of a request.", "summary": "Gets history for the selected request.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "additional_info": "This endpoint specifically focuses on the history of the _current_ request. While the request summary card (Panel View) provides a brief overview with details like Request ID, Requester, Team, Status, and Priority, this history endpoint offers a granular view of all activities. The ability to convert a request to a ticket or KB is context-dependent, with specific status requirements ('Open' or 'In Progress' for tickets; 'Resolved' for KB conversion). This endpoint is primarily for viewing the detailed historical log of a request, not for modifying it or initiating conversions."}, "llm_generated": {"business_context": {"user_personas": ["Support Agents", "Administrators", "ITSM Professionals"], "primary_use_case": "To provide a comprehensive historical timeline and detailed activity log for a specific service request, enabling users to understand its complete lifecycle and progression from creation to resolution or conversion."}, "content_for_embedding": "This API retrieves the complete history of a specific service request, providing a comprehensive timeline of all significant events and changes from its creation. This includes details like requester comments, attachments, the source of the request (e.g., email, web), and actions such as conversions to tickets or Knowledge Base articles. It offers a granular view of all activities, crucial for understanding the request's lifecycle and progression, and is primarily for viewing the detailed historical log rather than modification or conversion initiation.", "semantic_keywords": ["Request History", "Lifecycle Management", "Details retrieval"], "ontology_classification": {"features": ["request_lifecycle_management", "request_monitoring_&_tracking", "detailed_request_information_display", "attachment_management", "requester_interaction_history_display"], "primary_module": "request_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/req/request_process/options/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_options_retrieve", "description": "This API endpoint provides options for viewing or editing `Request` objects within the system. It supports various `Quick Edit` actions such as modifying status, priority, urgency, severity, impact service, and the Request assignee. Additionally, it allows for `Detailed Edit` of Request information and related quick actions like deleting, copying, or viewing associated change requests. The endpoint facilitates the management of formal user requests for information, support, or IT services, which are central to the Request Management module.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is typically used to manage the lifecycle of 'Requests', also known as 'Service Requests', within the Request Management module. Users can perform 'Quick Edit' for common field updates or 'Detailed Edit' for comprehensive modifications. It integrates with functionalities seen in user interfaces like 'Quick Actions' for manipulating Request properties. The action of deleting a Request is irreversible. No specific parameters or request body details are provided in the API specification for this GET endpoint, suggesting it might be used to retrieve available options or metadata for subsequent edit/view operations, potentially with parameters passed in the URL (though none are listed in the specification provided)."}, "llm_generated": {"business_context": {"user_personas": ["IT support staff", "Service desk agents", "Administrators"], "primary_use_case": "This API endpoint provides options for managing the lifecycle and properties of service requests, including quick and detailed editing capabilities, and actions such as deleting, copying, and viewing associated change requests."}, "content_for_embedding": "This GET API endpoint retrieves available options and metadata for viewing and editing Request objects within the system. It supports various quick edit actions for fields like status, priority, urgency, severity, impact service, and assignee. Additionally, it provides options for detailed editing of Request information and related quick actions such as deleting, copying, and viewing associated change requests. This endpoint is crucial for managing the lifecycle of service requests within the Request Management module.", "semantic_keywords": ["Request Management", "Quick Edit", "Detailed Edit"], "ontology_classification": {"features": ["request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "change_management_integration", "request_lifecycle_management", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_ownership_&_assignment", "request_search_&_filtering"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/req/request_process/process-rich-text/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_process_rich_text_retrieve", "description": "This endpoint, `/ux/sd/req/request_process/process-rich-text/`, is designed to retrieve rich text data, specifically the message body of service requests. This rich text body typically contains the detailed description of a service request when it originates from an email. The system processes this rich text to populate the description field of the service request.", "summary": "Get rich text data", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "additional_info": "This endpoint is particularly relevant for understanding how the system parses and stores the detailed content of service requests submitted via email. When a request is created from an email, the message body is used as the rich text description. While the API specification does not list any parameters, the context indicates that the rich text data is part of the request creation flow, where the email message body becomes the request's description.\n\nUse cases include: \n- Displaying the full description of an email-initiated service request in a user interface.\n- Auditing the content of service requests.\n- Integrating with external systems that need to process the full rich text details of a request."}, "llm_generated": {"business_context": {"user_personas": ["Service desk agents", "IT support staff", "Auditors", "System integrators"], "primary_use_case": "Retrieve and process rich text content from email message bodies to populate and display the detailed description of service requests."}, "content_for_embedding": "This API retrieves the rich text body of service requests, typically originating from emails, to populate the request's description field. It enables displaying the full request details, auditing content, and integrating with external systems.", "semantic_keywords": ["Rich Text", "Service Request", "Email"], "ontology_classification": {"features": ["request_creation_&_channels", "detailed_request_information_display", "attachment_management", "internal_&_external_communication"], "primary_module": "request_management", "confidence_score": 1}}}, {"path": "/ux/sd/req/request_process/requ_check_list/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_requ_check_list_retrieve", "description": "This API endpoint provides a comprehensive interface for managing 'Request' objects. It allows users to view existing Requests in detail, perform various quick edit actions such as updating status, priority, urgency, severity, impact service, and assigning the Request. Additionally, it supports detailed editing of Request specifics. The endpoint also facilitates other essential operations like deleting Requests (an irreversible action) and copying Request details to create new ones. It integrates with the Request Management module, allowing for tracking, monitoring, and communication throughout the Request's lifecycle.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is central to the Request Management process, enabling both quick and detailed modifications. For quick edits, specific attributes like 'status', 'priority', 'urgency', 'severity', 'impact service', and 'Request assignee' can be modified. For more extensive changes, a 'Detailed Edit' option is available. The ability to copy a Request streamlines the creation of new, similar requests. Request deletion is permanent. The API also supports viewing related change requests if they have been created. It is used to manage Requests raised by service desk agents or end-users (requesters) throughout their various states and statuses, such as 'Open', 'In Progress', 'On Hold', 'Resolved', and 'Closed'."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "End-Users (Requesters)"], "primary_use_case": "To manage 'Request' objects, enabling users to view, quick edit, detailed edit, delete, and copy requests, and to track their lifecycle within the Request Management module."}, "content_for_embedding": "This API manages 'Request' objects, allowing users to view, quick edit (status, priority, urgency, severity, impact service, assignee), detailed edit, delete, and copy requests. It supports tracking, monitoring, and communication throughout the Request's lifecycle within the Request Management module, handling various states like Open, In Progress, On Hold, Resolved, and Closed. It also facilitates filtering by date and tagging, and viewing related change requests.", "semantic_keywords": ["Request", "Edit", "Delete"], "ontology_classification": {"features": ["request_creation_&_channels", "request_lifecycle_management", "request_ownership_&_assignment", "request_monitoring_&_tracking", "internal_&_external_communication", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_search_&_filtering", "request_management_actions_(delete,_copy,_merge)", "customizable_statuses_&_views", "request_tagging", "change_management_integration"], "primary_module": "request_management", "confidence_score": 1}}}, {"path": "/ux/sd/req/request_process/request-data/{id}/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_request_data_retrieve", "description": "This API endpoint allows users to retrieve and manage a specific Request within the system. It enables viewing comprehensive details of a Request and supports various editing actions. This includes 'Quick Edit' for common attributes like status, priority, urgency, severity, impact service, and assignee, as well as 'Detailed Edit' for more extensive modifications. The endpoint plays a central role in Request Management, providing access to essential information and facilitating the life cycle of Requests.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that represents the unique identifier of the Request to be viewed or edited. Common use cases for this endpoint include accessing a Request's full details, performing quick updates (e.g., changing status to 'Resolved' or 'Closed'), and initiating more detailed edits. While the primary action is viewing, the description highlights its capability for editing, indicating a broader management role. It's important to differentiate between 'Quick Edit' for specific fields and 'Detailed Edit' for comprehensive changes, as mentioned in the user guide contexts."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Support Agent", "Technician"], "primary_use_case": "This API is designed for comprehensive Request Management, enabling users to retrieve, view, and perform various editing actions (quick and detailed) on specific requests within the system."}, "content_for_embedding": "This API endpoint facilitates the retrieval and management of individual requests. Users can access comprehensive details of a specific request using its unique ID, perform quick edits on key attributes like status, priority, and assignee, or initiate detailed modifications. It plays a crucial role in the request lifecycle, supporting viewing, updating, and tracking of requests, including conversion to tickets or knowledge base articles, and integration with change management.", "semantic_keywords": ["Request Management", "Details retrieval", "Edit"], "ontology_classification": {"features": ["request_lifecycle_management", "detailed_request_information_display", "request_editing_&_quick_actions", "request_search_&_filtering", "request_monitoring_&_tracking", "internal_&_external_communication", "attachment_management", "escalation_to_ticket_conversion", "knowledge_base_integration_(conversion_&_suggestion)", "change_management_integration", "requester_interaction_history_display"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/req/request_process/requester_search/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_requester_search_retrieve", "description": "This API endpoint facilitates the search and retrieval of existing requester details within the Request Management system. It is integral for actions such as selecting a requester when creating a new change request, adding a new request, or associating a request with an existing individual. This search functionality supports the ability to view and potentially initiate edits for requester-related information.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is primarily used in scenarios where a requester needs to be identified and associated with a request or change. Common use cases include: \n- **Adding a new Change:** When creating a new change request, this search allows selection of an existing requester. \n- **Adding a new Request:** It helps in associating a new service request with an existing requester. \n- **Detailed Requester Management:** While the primary function is search, the integration within the 'Requester' module implies that it supports access to detailed requester information for viewing or initiating edits. \nFor adding a new requester if one does not exist, a separate 'Add a New Requester' button or module should be utilized, as mentioned in the user guides. This API is crucial for streamlining the process of associating requests with specific individuals."}, "llm_generated": {"business_context": {"user_personas": ["IT Support Staff", "Service Desk Agents", "Administrators"], "primary_use_case": "To search for and retrieve existing requester details for various request management processes, including creating new change requests or service requests, and associating requests with individuals."}, "content_for_embedding": "This API endpoint facilitates the search and retrieval of existing requester details within the Request Management system. It is integral for actions such as selecting a requester when creating a new change request, adding a new request, or associating a request with an existing individual. This search functionality supports the ability to view and potentially initiate edits for requester-related information. It is crucial for streamlining the process of associating requests with specific individuals.", "ontology_classification": {"features": ["requester_search_&_add"], "primary_module": "ticket_management", "confidence_score": 1}, "semantic_keywords": ["Requester Search", "Retrieval", "Requester Management"]}}, {"path": "/ux/sd/req/request_process/save-rich-text/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_save_rich_text_create", "description": "This endpoint handles the saving of rich text data, specifically designed to process content that will be used as descriptions for service requests within the system. For instance, when a service request is generated from an email, the message body is captured and stored as the request's description using this mechanism. This ensures that detailed information provided by users via various input methods (web portal, mobile app, email, etc.) can be accurately saved and associated with the corresponding service request.", "summary": "Save rich text data", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "additional_info": "The request body for this endpoint expects rich text data. It supports a wide range of primitive fields, including StringField, URLField, EmailField, IntField, FloatField, BooleanField, DateTimeField, and ObjectIdField. Compound fields like ListField and DictField are also supported, mapping to standard DRF fields. ReferenceField and EmbeddedDocumentField are handled with nested serializers when the serializer depth is greater than 0. Fields like FileField, ImageField, and BinaryField are noted as not well supported or untested. This endpoint is crucial for populating the 'description' field of service requests, which often originate from diverse sources such as email messages, where the message body directly translates to the request's rich text description."}, "llm_generated": {"business_context": {"user_personas": ["Developers", "System Integrators", "Administrators"], "primary_use_case": "To capture and store rich text content, such as email bodies, as descriptions for service requests, ensuring detailed information is associated with the corresponding request regardless of its origin."}, "content_for_embedding": "This API endpoint is designed to save rich text data, primarily for populating the 'description' field of service requests. It supports various input methods, including email messages, web portals, and mobile apps, allowing for the accurate capture and association of detailed user-provided information with service requests. The endpoint handles diverse data types, including primitive and compound fields, and is crucial for maintaining comprehensive service request records.", "semantic_keywords": ["Save", "Rich Text", "Service Request"], "ontology_classification": {"features": ["request_creation_&_channels", "detailed_request_information_display", "internal_&_external_communication", "email-to-ticket_conversion", "record_creation_&_management", "ai-powered_communication_enhancement"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/req/request_process/update_requ_checklist/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_update_requ_checklist_create", "description": "This POST API endpoint facilitates the comprehensive management of Request checklists, allowing for both viewing and detailed editing of Request attributes. It supports various granular updates, including status, priority, urgency, severity, impact service, and assignee. The endpoint also enables more extensive modifications to the Request's details, functioning as a 'Detailed Edit' mechanism. It can accommodate changes to Request status, such as setting it to 'Resolved' or 'Closed', and potentially linking Requests to Change Requests, mirroring actions like 'Quick Edit' and 'Edit' actions described in the user guides.", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to be highly flexible, supporting a wide array of primitive and compound field types for updating Request properties. Primitive types include `StringField`, `IntField`, `BooleanField`, `DateTimeField`, and `UUIDField`, among others. Compound fields like `ListField` and `DictField` are also supported, enabling complex data structures. Additionally, `ReferenceField` and `EmbeddedDocumentField` are handled for referencing or embedding other document types, with nested serializers autogenerated based on depth. This comprehensive schema support allows for detailed and varied updates to Request records. For quick, high-level edits of specific attributes (e.g., status, priority), the 'Quick Edit' functionality is implied. For more exhaustive modifications, the 'Detailed Edit' capability is provided. This endpoint is crucial for maintaining the lifecycle and accuracy of Requests within the system."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agents", "IT Support Staff", "Administrators"], "primary_use_case": "To manage and update the details and lifecycle of requests, including granular and detailed edits, and linking to change requests."}, "content_for_embedding": "This POST API endpoint is designed for the comprehensive management of Request checklists, enabling both viewing and detailed editing of various Request attributes such as status, priority, urgency, severity, impact service, and assignee. It functions as a \"Detailed Edit\" mechanism, allowing extensive modifications to Request details, including setting status to \"Resolved\" or \"Closed\", and facilitating the linking of Requests to Change Requests. The API supports flexible request body structures for updating diverse Request properties, accommodating both \"Quick Edit\" for high-level attributes and \"Detailed Edit\" for more exhaustive changes, crucial for maintaining the Request lifecycle and accuracy within the system.", "ontology_classification": {"features": ["request_editing_&_quick_actions", "request_lifecycle_management", "change_management_integration", "detailed_request_information_display", "request_display_views_(panel_&_grid)", "request_monitoring_&_tracking"], "primary_module": "request_management", "confidence_score": 0.9}, "semantic_keywords": ["Request Update", "Detailed Edit", "Change Request"]}}, {"path": "/ux/sd/req/request_process/upload-csv/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_upload_csv_create", "description": "This API endpoint facilitates the upload of CSV files to either create new requests or perform bulk updates on existing requests. It functions as a key component for managing `Request` entities, enabling actions such as detailed editing. While the core functionality revolves around processing CSV data for request management, similar mechanisms are also used for actions like bulk requester import/delete and resource tagging/untagging, suggesting a broader capability for CSV-driven bulk operations within the system.", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "The primary mechanism for this endpoint is the upload of a CSV file. While the API specification's `request_body_description` details a broad range of supported primitive and compound data types for serialization of 'Documents', the specific fields and structure expected within the uploaded CSV for `Request` processing are not explicitly defined here. However, based on similar 'import from CSV' functionalities (e.g., 'Import Bulk Resource tag/ Untag list from a CSV' or 'Import from CSV for adding multiple requesters'), it is implied that the CSV file must contain the necessary data fields for 'Request' entities (e.g., status, priority, urgency, severity, impact service, assignee, and other request details).\n\nUsers should ensure the CSV file adheres to a predefined format, likely available as a downloadable template, as indicated by the 'Download the CSV file (Excel sheet)' step for requester imports. The endpoint is expected to perform validation on the uploaded CSV data, categorizing records as 'valid' or 'invalid' and potentially providing detailed validation reports. Users typically proceed to 'Import' after successful validation."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Power User"], "primary_use_case": "This API facilitates the bulk creation and updating of Request entities through CSV file uploads, streamlining request management processes."}, "content_for_embedding": "This API endpoint enables users to upload CSV files for the purpose of creating new service requests or performing bulk updates on existing requests. It supports various content types for the CSV data, including JSON, URL-encoded, and multipart form data. The process involves uploading a CSV file that contains the necessary data fields for Request entities, such as status, priority, and assignee. The system is expected to validate the uploaded CSV data, categorize records as valid or invalid, and potentially provide detailed validation reports, similar to other CSV import functionalities for requesters or resource tagging. Users typically proceed with the import after successful validation, ensuring data integrity and efficient bulk operations for request management.", "semantic_keywords": ["CSV Import", "Request Update", "Request Creation"], "ontology_classification": {"features": ["request_creation_&_channels", "request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "attachment_management", "request_monitoring_&_tracking", "request_lifecycle_management", "request_classification_&_categorization", "request_ownership_&_assignment", "request_tagging"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/req/request_process/upload-request-process-csv/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_upload_request_process_csv_create", "description": "API endpoint that allows Request to be viewed or edited.", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}}, "llm_generated": {"business_context": {"user_personas": ["IT support staff", "Service desk agents", "Administrators"], "primary_use_case": "To facilitate the bulk creation or update of requests by uploading request data via a CSV file, thereby streamlining the request management process."}, "content_for_embedding": "This API endpoint, accessible via a POST request to '/ux/sd/req/request_process/upload-request-process-csv/', enables users to upload request data, typically in CSV format, for the purpose of creating new requests or updating existing ones. It is a core component of the Request Process, allowing for efficient management and modification of request records. The API supports various content types for the request body, including JSON, URL-encoded forms, and multipart form data, and returns a RequestList upon successful operation. This functionality is crucial for managing the lifecycle of requests, from initial creation to detailed editing and viewing, as described in the associated documentation which highlights features like quick edit, detailed edit, deletion, and viewing of request details, history, and attachments.", "ontology_classification": {"features": ["request_creation_&_channels", "request_editing_&_quick_actions", "request_lifecycle_management"], "primary_module": "request_management", "confidence_score": 1}, "semantic_keywords": ["Request Management", "CSV Import", "Upload"]}}, {"path": "/ux/sd/req/request_process/workflow_options_map/", "method": "POST", "details": {"operationId": "ux_sd_req_request_process_workflow_options_map_create", "description": "This API endpoint provides comprehensive functionality to view, edit, and manage 'Request' details within the system. It facilitates quick edit actions such as updating status, priority, urgency, severity, impact service, and assigning the Request, as well as detailed editing of all Request attributes. The endpoint is integral to the Request Management module, allowing technicians to resolve requests efficiently. It also interacts with workflows, suggesting it can be used in the context of configuring or managing request workflows. The API allows for various operations including viewing related change requests and managing the Request's lifecycle.", "tags": ["Request Process"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/RequestList"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "required": true}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to handle various data types ('StringField', 'URLField', 'IntField', 'DateTimeField', 'BooleanField', etc.) and complex structures like 'ListField', 'DictField', 'ReferenceField', and 'EmbeddedDocumentField'. This flexibility enables the modification of diverse Request properties. \n\nBased on contextual information, this API supports 'Quick Edit' for immediate changes (status, priority, etc.) and 'Detailed Edit' for comprehensive updates. It operates within the 'Request Management' module, which is central to handling user-initiated service requests.\n\nWhile robust for many field types, certain fields like 'FileField', 'ImageField', and 'BinaryField' are noted as 'not well supported or untested' within the API specification. Developers should exercise caution when working with these types. All other fields are mapped to 'DocumentField', which might lead to unexpected behavior if not handled correctly."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "Administrator", "User"], "primary_use_case": "This API endpoint provides comprehensive functionality for managing and updating 'Request' details within the system. It enables quick and detailed editing of request attributes, facilitates efficient resolution of requests by technicians, and integrates with request workflows, change management, and knowledge base modules."}, "content_for_embedding": "This API endpoint is central to the Request Management module, enabling comprehensive management of 'Request' details. It supports both quick edit actions (e.g., updating status, priority, urgency, severity, impact service, and assignee) and detailed editing of all Request attributes. Technicians can efficiently resolve requests, and the API integrates with workflows, allowing for configuration and management of request workflows. It also facilitates viewing and adding related change requests, managing the Request's lifecycle, and supports various operations like adding comments, viewing history, managing attachments, converting requests to tickets or knowledge base articles, and filtering requests by calendar or tags. The API handles diverse data types and complex structures for modifying Request properties and supports different display views like Panel View and Grid View.", "semantic_keywords": ["Request Management", "Request Update", "Workflow Automation"], "ontology_classification": {"features": ["request_lifecycle_management", "request_ownership_&_assignment", "request_editing_&_quick_actions", "detailed_request_information_display", "request_search_&_filtering", "request_management_actions_(delete,_copy,_merge)", "attachment_management", "customizable_statuses_&_views", "request_tagging", "requester_interaction_history_display", "escalation_to_ticket_conversion", "knowledge_base_integration_(conversion_&_suggestion)", "change_management_integration", "request_classification_&_categorization", "internal_&_external_communication"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/req/request_process/workflow_status/", "method": "GET", "details": {"operationId": "ux_sd_req_request_process_workflow_status_retrieve", "description": "This GET API endpoint allows users to retrieve the workflow status of a Request. It provides visibility into the current state of a Request, enabling users to view its details or prepare for subsequent actions like editing. The API supports viewing comprehensive Request details, which often include attributes such as status, priority, urgency, severity, impact service, and assignee. It aligns with the various Request management capabilities, including the ability to perform quick edits (status, priority, etc.) or detailed edits of a Request, as described in the 'Quick Edit' and 'Edit' functionalities.", "tags": ["Request Process"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RequestList"}}}, "description": ""}}, "summary": "", "additional_info": "The Request workflow status is a critical component of the Request lifecycle in Infraon. Technicians can use this endpoint to understand and manage the current status of a Request, which can change throughout its lifecycle (e.g., 'Open', 'In Progress', 'On Hold', 'Resolved', 'Closed'). This API helps in determining if further actions like 'Quick Edit' or 'Detailed Edit' are suitable, or if a change request can be added. While this endpoint is for viewing status, the associated 'Quick Edit' functionality allows for updating key attributes like status, priority, urgency, severity, impact service, and assignee without needing to access full Request details."}, "llm_generated": {"business_context": {"user_personas": ["Technician", "User"], "primary_use_case": "Retrieving the workflow status and comprehensive details of a Request to enable informed management and subsequent actions like editing or adding change requests."}, "content_for_embedding": "This API retrieves the comprehensive workflow status and details of a Request, including attributes such as status, priority, urgency, severity, impact service, and assignee. It provides visibility into the Request's current state, enabling technicians and users to understand its lifecycle and determine appropriate subsequent actions like quick edits, detailed edits, or adding change requests.", "semantic_keywords": ["Request", "Workflow Status", "Details retrieval"], "ontology_classification": {"features": ["request_monitoring_&_tracking", "detailed_request_information_display", "request_lifecycle_management", "request_editing_&_quick_actions", "change_management_integration"], "primary_module": "request_management", "confidence_score": 1}}}, {"path": "/ux/sd/task/task/", "method": "GET", "details": {"operationId": "ux_sd_task_task_list", "description": "This endpoint retrieves a paginated list of tasks within the current organization. Tasks are small, executable units often associated with Jobs, defining command execution on devices. They can run asynchronously or synchronously and are identified by a Task Name, with details like Worker Name, Description, and Queue Name available. This API is essential for viewing the overall task management within the system.", "summary": "Gets a list of tasks", "parameters": [{"in": "query", "name": "items_per_page", "schema": {"type": "integer"}, "description": "Items Per Page", "required": true}, {"in": "query", "name": "page", "schema": {"type": "integer"}, "description": "Page Number", "required": true}, {"in": "query", "name": "reverse", "schema": {"type": "boolean"}, "description": "Sorting Order"}, {"in": "query", "name": "sort", "schema": {"type": "string"}, "description": "Sorting Key"}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TaskDetails"}}}}, "description": ""}}, "additional_info": "This endpoint supports pagination and sorting. The `items_per_page` and `page` query parameters are mandatory to control the pagination. Optional parameters include `reverse` for sorting order (true for descending, false for ascending) and `sort` to specify the key by which tasks should be sorted. Tasks typically have a configuration template, support multiple command executions, and require inputs such as Task Name and Task Description. The system utilizes a Celery Task Manager for background or synchronous execution of these tasks."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Operations Team", "Developer"], "primary_use_case": "To retrieve and view a paginated and sortable list of tasks within the organization, enabling monitoring of task execution and details."}, "content_for_embedding": "This API endpoint allows users to retrieve a paginated list of tasks. Tasks are defined as small, executable units often linked to Jobs, specifying command execution on devices. The API supports asynchronous or synchronous task execution and provides details such as Task Name, Worker Name, Description, and Queue Name. It is crucial for comprehensive task management, offering parameters for pagination (items_per_page, page) and sorting (reverse, sort) to efficiently browse task data.", "ontology_classification": {"features": ["change/release_planning_&_task_management", "filtering_and_search", "record_creation_&_management"], "primary_module": "workspace", "confidence_score": 0.9}, "semantic_keywords": ["Task Management", "Pagination", "Search"]}}, {"path": "/ux/sd/task/task/", "method": "POST", "details": {"operationId": "ux_sd_task_task_create", "description": "This endpoint facilitates the creation and saving of a new task within the current organization's task management system. Tasks can run asynchronously in the background or synchronously, depending on specific requirements. Each task is a fundamental unit, especially within a Job, where command execution on Devices is defined. It supports multiple command executions and parameter substitutions simultaneously for individual location devices, and each task obtains devices' credentials upon creation. Essential inputs for each task include a Task Name and Task Description. This endpoint integrates with the system's Asynchronous Task Manager.", "summary": "Creates a new task ", "tags": ["Task"], "requestBody": {"content": {"application/json": {"schema": {"type": "object", "additionalProperties": {}}, "examples": {"CreateTaskSample": {"value": {"task": "task1", "type": "User"}, "summary": "Create Task Sample"}}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"201": {"description": "No response body"}}, "additional_info": "Each task newly created via this endpoint is typically assigned a Celery worker process and associated with a Celery message queue. The system dynamically assigns these, allowing for efficient background processing where applicable. The task's status will also be managed by the system, often starting in a 'To-Do (Open)' state. This API is crucial for populating the task management system and ensuring that new operational units can be defined and processed.", "parameters": [{"name": "task", "in": "body", "description": "Inferred parameter: task", "required": true, "schema": {"type": "string"}}, {"name": "type", "in": "body", "description": "Inferred parameter: type", "required": true, "schema": {"type": "string"}}]}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "System Integrator", "Developer"], "primary_use_case": "To enable the creation and management of new tasks within an organization's task management system, supporting both asynchronous and synchronous execution, and facilitating command execution on devices."}, "content_for_embedding": "This API creates and saves new tasks within an organization's task management system. These tasks can run asynchronously or synchronously, and are fundamental units for defining command execution on devices, especially within Jobs. It supports multiple command executions and parameter substitutions for individual location devices, and obtains device credentials upon creation. The API integrates with the system's Asynchronous Task Manager, assigning tasks to Celery worker processes and message queues for efficient background processing. Task status is managed by the system, typically starting in a 'To-Do (Open)' state, making this API crucial for populating and processing operational units.", "semantic_keywords": ["Task Management", "Asynchronous Tasks", "Workflow Automation"], "ontology_classification": {"features": ["asynchronous_task_manager", "workflow_automation", "process_creation", "process_status_&_priority_management"], "primary_module": "infraon_configuration", "confidence_score": 0.9}}}, {"path": "/ux/sd/task/task/{id}/", "method": "GET", "details": {"operationId": "ux_sd_task_task_retrieve", "description": "This endpoint is used to retrieve comprehensive details for a specific task within the current organization. Tasks are fundamental units of execution, often associated with Jobs, and can run either synchronously or asynchronously via a Task Manager. The retrieved details include information such as the task's name, description, assigned worker, queue name, and current status. Each task is defined by specific inputs including its name, description, vendor, and configuration template, which can be viewed or edited when modifying a job.", "summary": "Gets a task with the given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "additional_info": "The 'id' path parameter is mandatory and identifies the specific task to be fetched. Task details displayed are generally for viewing purposes only, such as the Task Name, Worker Name, and Description. The status of a task can vary, with 'To-Do (Open)' being one of the possible states. Tasks can also be configured with dependencies, where the execution of a subsequent task might depend on the success or failure of a preceding task. For instance, in a series of tasks (e.g., Task1, Task2, Task3), Task2 might execute only if Task1 succeeds, while Task3 might execute if Task1 fails. This endpoint is crucial for monitoring and understanding the operational state and configuration of individual tasks."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Operations Team", "Developer"], "primary_use_case": "To retrieve comprehensive details and operational status for a specific task, enabling monitoring and understanding of its configuration and execution state."}, "content_for_embedding": "This API endpoint retrieves comprehensive details for a specific task identified by its ID. Tasks are fundamental units of execution, often associated with Jobs, and can run synchronously or asynchronously via a Task Manager. The retrieved information includes the task's name, description, assigned worker, queue name, and current status. This endpoint is crucial for monitoring and understanding the operational state and configuration of individual tasks, including their dependencies. Details such as Worker Name, Description, Queue Name, and Status are provided for viewing purposes, and the information can be used for feature diagnosis.", "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "ticket_monitoring", "ticket_state_&_status_management", "asynchronous_task_manager", "workflow_automation", "diagnosis_tools"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Task Management", "Details retrieval", "Task Monitoring"]}}, {"path": "/ux/sd/task/task/{id}/", "method": "PUT", "details": {"operationId": "ux_sd_task_task_update", "description": "This endpoint is used to update the details of an existing task for the current organization, identified by its unique `id`. It allows for modification of task attributes such as Task Name, Task Description, Vendor, Configuration Template, View Template, Task Command(s), and selected Template, which are all essential inputs required from the user during task creation and editing. This PUT operation facilitates editing functionalities that are crucial for managing tasks within the system.", "summary": "Edits the task with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "additional_info": "The `id` path parameter is a required string that uniquely identifies the task to be edited. The request body for this endpoint is a serialized document that supports various primitive and compound field types as specified in the `request_body_description`. This includes `StringField` (for Task Name, Description, Vendor), `ReferenceField` (potentially for Vendor, Configuration Template, or selected Template), and `DictField` and `ListField` for complex data structures like `Task Command(s)`. Importantly, `View` and `Edit template` functionalities are specifically noted to be available when editing the job, implying these attributes are updated via this endpoint. While the general primitive fields are well-supported, fields like `FileField`, `ImageField`, and `BinaryField` are noted as not well supported or untested."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support"], "primary_use_case": "Managing and updating existing tasks within the system."}, "content_for_embedding": "This API endpoint allows for the modification of an existing task's details, identified by its unique ID. It supports updating various task attributes such as Task Name, Task Description, Vendor, Configuration Template, View Template, Task Command(s), and selected Template. This PUT operation is crucial for managing and editing tasks within the system, providing functionalities for both task creation and ongoing task management. The request body accommodates diverse field types, including string, reference, dictionary, and list fields, enabling comprehensive task attribute updates. Specifically, it facilitates the editing of view and edit template functionalities.", "ontology_classification": {"features": ["asynchronous_task_manager", "record_creation_&_management", "detailed_record_view"], "primary_module": "infraon_configuration", "confidence_score": 0.9}, "semantic_keywords": ["Update", "Edit", "Task Management"]}}, {"path": "/ux/sd/task/task/{id}/", "method": "DELETE", "details": {"operationId": "ux_sd_task_task_destroy", "description": "This endpoint provides functionality to delete an existing task. It targets a specific task identified by its unique ID for the current organization. Deleting a task is a permanent and irreversible action.", "summary": "Deletes the task with given id", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"204": {"description": "No response body"}}, "additional_info": "The 'id' path parameter is mandatory and uniquely identifies the task to be deleted. As highlighted in the Infinity User Guide (Context Rank 9), actions like 'Delete' are irreversible. While specific task details like 'Task Name' or 'Description' are typically for viewing purposes (Context Rank 6, 8), the deletion process only requires the task's unique ID."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Developer", "Task Manager"], "primary_use_case": "To permanently remove or clean up specific tasks from the system, ensuring data integrity and system hygiene by eliminating obsolete or erroneous task entries."}, "content_for_embedding": "This API endpoint facilitates the permanent and irreversible deletion of a specific task within the current organization, identified solely by its unique ID. It is essential for maintaining data integrity and system hygiene by removing obsolete, completed, or erroneously created tasks. This operation is a destructive action, requiring careful consideration due to its irreversible nature.", "semantic_keywords": ["Delete", "Task Management", "Irreversible"], "ontology_classification": {"features": ["process_deletion", "process_identification_&_tracking"], "primary_module": "imacd_(beta)", "confidence_score": 0.9}}}, {"path": "/ux/sd/task/task/change-task-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_task_task_change_task_list_retrieve", "description": "This API endpoint allows users to retrieve or modify details of a specific task within a change request, identified by its unique ID. It facilitates actions such as viewing the task details, performing quick edits on task attributes like status, priority, urgency, severity, and assignee, or conducting detailed edits. This endpoint is crucial for managing tasks associated with change requests, providing flexibility for both summary-level and in-depth modifications.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the task list associated with a change request. This API supports both quick actions (like changing status or assignee) and detailed editing of task properties. The 'Quick Edit' functionality, as described in the user guide, typically enables updates to status, priority, urgency, severity, impact service, and the assignee. Detailed edits allow for comprehensive modifications to the task. This endpoint is analogous to the 'Edit' and 'Quick Edit' options available for 'Change' entities, but applied specifically to tasks within a change request."}, "llm_generated": {"business_context": {"user_personas": ["Change Managers", "Service Desk Agents", "IT Administrators", "Users involved in Change Management"], "primary_use_case": "To enable users to retrieve and modify the details of specific tasks associated with change requests, facilitating both quick updates and comprehensive edits."}, "content_for_embedding": "This API endpoint is designed for comprehensive management of individual tasks linked to a change request. Users can retrieve detailed information about a specific task using its unique ID. Furthermore, it supports both 'Quick Edit' functionalities, allowing for rapid updates to key task attributes such as status, priority, urgency, severity, and assignee, as well as 'Detailed Edit' for more extensive modifications. This flexibility makes it a critical tool for efficiently handling and updating tasks throughout the lifecycle of a change request.", "ontology_classification": {"features": ["task_management_within_change", "quick_edit_functionality", "change_monitoring_and_tracking", "change_implementation_coordination", "change_lifecycle_management", "detailed_change_information_display", "customizable_statuses"], "primary_module": "change_management", "confidence_score": 0.95}, "semantic_keywords": ["Change Task", "Quick Edit", "Detailed Edit"]}}, {"path": "/ux/sd/task/task/change-task/{id}/", "method": "GET", "details": {"operationId": "ux_sd_task_task_change_task_retrieve", "description": "This API endpoint provides functionalities to view and manage individual tasks associated with change requests within the system. It allows for detailed viewing, quick editing of task attributes like status, priority, urgency, severity, and assignee, and performing detailed edits. The endpoint is integral for task management within the change management process, enabling users to update task details such as title, description, and status (e.g., To-Do (Open)).", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter refers to the unique identifier of the task to be viewed or edited. This endpoint supports actions beyond just viewing, including 'Quick Edit' for common task attributes and 'Edit' for a detailed modification of the task. The 'Task' concept is directly linked to 'Change' requests, as users can enter details of tasks involved in a change. This endpoint is crucial for technicians managing tasks related to change requests."}, "llm_generated": {"business_context": {"user_personas": ["Technicians", "Change Managers", "IT personnel involved in task and change management"], "primary_use_case": "To efficiently manage and update individual tasks that are part of a larger change request process."}, "content_for_embedding": "This API endpoint is designed for viewing and managing specific tasks that are integral to the change management process. It enables technicians and other authorized users to retrieve detailed information about a task, perform quick edits on key attributes like status, priority, urgency, severity, and assignee, and execute more detailed modifications to task title, description, and status. The endpoint plays a crucial role in facilitating efficient task management within the broader context of change requests.", "ontology_classification": {"features": ["task_management_within_change", "quick_edit_functionality", "lifecycle_states_and_statuses", "detailed_planning_tab"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Task Management", "Change Management", "Quick Edit"]}}, {"path": "/ux/sd/task/task/delete-change-task/{id}/", "method": "POST", "details": {"operationId": "ux_sd_task_task_delete_change_task_create", "description": "This API endpoint facilitates the deletion of a specific Change Task. This action, once performed, is irreversible. It allows users to actively manage and remove outdated or completed tasks associated with changes within the system. The endpoint specifically targets a task by its unique identifier.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a required string that uniquely identifies the change task to be deleted. As highlighted in the user guide, deleting a Change (and by extension, a Change Task) is an irreversible action. While the request body description details the recognized primitive and compound fields for serializers, for this specific DELETE operation, a complex request body is typically not required beyond the path parameter. However, if any system-level logging or audit trails are expected, they would be managed internally by the API. The API is part of the `/ux/sd/task/task/` path, suggesting its context within user experience service desk task management."}, "llm_generated": {"business_context": {"user_personas": ["Service Desk Agent", "IT Administrator", "Change Manager"], "primary_use_case": "Facilitate the irreversible deletion of specific change tasks within the system to manage and remove outdated or completed tasks."}, "content_for_embedding": "This API endpoint enables the irreversible deletion of a specific Change Task by its unique identifier. It is used by users to manage and remove outdated or completed tasks associated with changes within the system, specifically within the user experience service desk task management context. A complex request body is typically not required beyond the path parameter.", "ontology_classification": {"features": ["task_management_within_change"], "primary_module": "change_management", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Change Task", "Task Management"]}}, {"path": "/ux/sd/task/task/delete-release-task/{id}/", "method": "POST", "details": {"operationId": "ux_sd_task_task_delete_release_task_create", "description": "This API endpoint facilitates the deletion of a specific release task. This action is irreversible, as indicated by similar delete functionalities for Changes, Requests, and Releases found in various user guides. The endpoint plays a role in managing tasks associated with releases within the system.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is a mandatory string that identifies the specific release task to be deleted. While the request body description details a wide range of primitive and compound field types supported for serialization (e.g., StringField, IntField, ListField, DictField, ReferenceField), for a DELETE operation, the request body is typically not used for input data but rather for potential confirmation or status replies. The primary function of this endpoint is to remove a task permanently. Be aware of the irreversible nature of this action, as highlighted in contexts related to deleting Changes, Requests, and Releases."}, "llm_generated": {"business_context": {"user_personas": ["Release Manager", "Administrator", "System Integrator", "Developer"], "primary_use_case": "To permanently remove a specific task associated with a release, ensuring proper management and cleanup of release-related activities."}, "content_for_embedding": "This API endpoint is designed to delete a specific release task identified by its unique ID. The action is irreversible, similar to other delete functionalities for changes, requests, and releases within the system. It is crucial for managing and cleaning up tasks linked to releases, ensuring that only relevant and active tasks remain. The API requires a mandatory 'id' path parameter to specify the release task to be removed permanently.", "ontology_classification": {"features": ["change/release_planning_&_task_management"], "primary_module": "workspace", "confidence_score": 0.9}, "semantic_keywords": ["Delete", "Release", "Task Management", "Irreversible"]}}, {"path": "/ux/sd/task/task/filter/", "method": "GET", "details": {"operationId": "ux_sd_task_task_filter_retrieve", "description": "This API endpoint, `/ux/sd/task/task/filter/`, is designed to allow users to view and filter various types of requests or tasks, including older requests, access requests, and catalog items. While the original description mentioned 'users to be viewed or edited,' the richer context emphasizes the viewing and filtering of 'requests' or 'tasks'. It provides capabilities similar to those found in task management systems where users can search for specific change requests by ID or assignee, and filter them by date range. It also supports 'view' and 'edit' operations on these tasks, with a focus on filtering tasks, rather than directly viewing/editing users themselves, as implied by the path.", "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The primary function of this endpoint appears to be for filtering and viewing specific types of requests or tasks within a system, such as those related to service desks or IT Service Management (ITSM). The 'filter' in the path suggests its role as a query mechanism. Related actions like 'Quick Edit' for status or priority, and 'Detailed Edit' for full request details, are mentioned in the contexts, implying that while this endpoint might facilitate a filtered view to then initiate edits, direct editing might happen via other, more specific 'edit' endpoints. The contexts highlight viewing privileges and the ability to search for requests by criteria like ID or assignee, and to filter by date (e.g., using a calendar filter), which are typical functionalities of a filter endpoint."}, "llm_generated": {"business_context": {"user_personas": ["End-user", "Technician", "Administrator"], "primary_use_case": "To enable users to efficiently search, filter, and view various types of requests or tasks within a service desk or IT Service Management (ITSM) system, providing a comprehensive overview before potential further actions like editing or status updates."}, "content_for_embedding": "This API endpoint, `/ux/sd/task/task/filter/`, is a GET request designed for retrieving and filtering requests or tasks. It allows users to search for specific requests by criteria such as ID or assignee, and to filter them by date range. The endpoint facilitates viewing various types of requests, including older requests, access requests, and catalog items, and supports different display views like Panel View and Grid View. While primarily for viewing and filtering, it serves as a precursor to actions like quick edits for status/priority or detailed edits, which would likely be handled by other dedicated endpoints. It is crucial for task management systems where users need to query and review request details.", "ontology_classification": {"features": ["request_search_&_filtering", "request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_tagging", "escalation_to_ticket_conversion", "change_management_integration", "request_management_actions_(delete,_copy,_merge)"], "primary_module": "request_management", "confidence_score": 0.95}, "semantic_keywords": ["Request", "Filter", "View"]}}, {"path": "/ux/sd/task/task/options/", "method": "GET", "details": {"operationId": "ux_sd_task_task_options_retrieve", "description": "This API endpoint provides options for viewing and performing various actions on 'Task' or 'Request' entities within the system. It supports quick edit actions for attributes like status, priority, urgency, and assignee, as well as detailed editing of the Request. Users can also delete or copy existing requests to create new ones with predefined details. The functionality aligns with user privileges, allowing users to view and edit based on their assigned permissions.", "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "This endpoint is crucial for managing tasks and requests. It facilitates both quick, high-level modifications and comprehensive detailed edits. The system's privilege model governs a user's ability to view or edit, ensuring that only authorized actions are performed. For example, a user with 'Edit' privilege on a module can view and modify existing services or requests within that module. Conversely, a user with 'View' privilege can only see the information without modification capabilities. This API might be particularly useful for helpdesk or ITSM scenarios. (Prioritized from Context Ranks 1, 4, and 5)."}, "llm_generated": {"business_context": {"user_personas": ["Helpdesk Agent", "ITSM Professional", "Administrator", "End-user with specific privileges"], "primary_use_case": "To provide options for viewing, quick editing, detailed editing, deleting, and copying Task and Request entities within a system, primarily for helpdesk and ITSM scenarios."}, "content_for_embedding": "This API endpoint allows users to view and perform various actions on 'Task' or 'Request' entities. It supports quick edit actions for attributes such as status, priority, urgency, and assignee, as well as comprehensive detailed editing of requests. Users can also delete or copy existing requests to create new ones with predefined details. The functionality is governed by user privileges, ensuring actions align with assigned permissions. This endpoint is crucial for managing tasks and requests, facilitating both high-level modifications and detailed edits, making it particularly useful for helpdesk or ITSM scenarios. The Request page offers Panel and Grid views, listing details like summary card, status, subject, and actions. It also supports filtering requests by date using a calendar, searching by request number or assignee, and viewing the history of requests.", "semantic_keywords": ["Request Management", "Quick Edit", "Detailed Edit"], "ontology_classification": {"features": ["request_display_views_(panel_&_grid)", "detailed_request_information_display", "request_editing_&_quick_actions", "request_management_actions_(delete,_copy,_merge)", "request_search_&_filtering", "request_tagging", "requester_interaction_history_display"], "primary_module": "request_management", "confidence_score": 0.95}}}, {"path": "/ux/sd/task/task/rel-task-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_task_task_rel_task_list_retrieve", "description": "This API endpoint allows users to retrieve details for a specific related task within the system. It enables viewing of task information, including potentially quick edit actions like status, priority, urgency, severity, impact service, and assignee. Users can also perform detailed edits or view related change requests associated with the task, as highlighted from the user guide's quick actions and detailed edit functionalities.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` parameter in the path is required and represents the unique identifier of the related task. This endpoint is crucial for task management, allowing users to efficiently access and manage individual task details and their associations, such as related change requests. It supports a streamlined experience for reviewing and potentially modifying task attributes directly or via detailed edit actions, crucial for applications leveraging the Task Common Module for enhanced task management."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "IT Support Staff", "Task Manager"], "primary_use_case": "To efficiently retrieve and manage details of a specific related task, including quick edit options and associated change requests, facilitating comprehensive task oversight and modification."}, "content_for_embedding": "This API retrieves comprehensive details for a specific related task using its unique identifier. It supports efficient task management by providing task information, enabling quick edits for attributes like status, priority, urgency, severity, impact service, and assignee. Additionally, it allows users to view related change requests and perform detailed edits on the task, streamlining the process of reviewing and modifying task attributes and their associations within the system.", "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "quick_edit_(key_attributes)", "detailed_ticket_editing", "view_linked_change_request", "ticket_state_&_status_management", "ticket_assignment_(individual/team/expertise)"], "primary_module": "ticket_management", "confidence_score": 0.9}, "semantic_keywords": ["Task Management", "Details retrieval", "Change Request"]}}, {"path": "/ux/sd/task/task/release-task/{id}/", "method": "GET", "details": {"operationId": "ux_sd_task_task_release_task_retrieve", "description": "This API endpoint is designed to retrieve and manage the details of a specific 'Release' task within the system. It allows users to view comprehensive information about a Release task, including its creation time and date, and potentially facilitates detailed editing actions. The 'id' path parameter is crucial for identifying the specific Release task to retrieve or edit.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter must correspond to a valid 'Release ID' to access its comprehensive details. This endpoint aligns with the system's functionality for displaying and managing various types of tickets/requests/changes/problems/releases. While the summary mentions viewing and editing, detailed editing actions typically require a dedicated 'Detailed Edit' process, as described in context for other similar entities. This API is commonly used when a user clicks on a 'Release ID' to delve into its full information, mirroring the UI behavior described in the user guide."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "IT Operations", "Administrators", "Users tracking releases"], "primary_use_case": "To retrieve comprehensive details of a specific release task, enabling users to view its full information and initiate related management actions."}, "content_for_embedding": "This API endpoint retrieves detailed information for a specific release task, identified by its unique ID. It provides a comprehensive view of the release, including its creation time, status, priority, and associated elements such as comments, historical data, attachments, and linked tickets, problems, changes, or requests. This is essential for users to understand the release's current state and to perform subsequent management actions like quick edits, advanced edits, deletion, or marking as complete.", "ontology_classification": {"features": ["release_history", "release_interaction_log", "attachment_management", "comment/communication", "quick_edit", "advanced_release_editing", "release_deletion", "related_item_linking", "release_completion"], "primary_module": "release_management", "confidence_score": 0.95}, "semantic_keywords": ["Release", "Details retrieval", "ID"]}}, {"path": "/ux/sd/task/task/req-task-list/{id}/", "method": "GET", "details": {"operationId": "ux_sd_task_task_req_task_list_retrieve", "description": "This GET API endpoint retrieves details of a specific task within the system. It allows users to view comprehensive information about an individual task. The endpoint is part of the task management functionality, enabling operations like viewing task status (e.g., To-Do (Open)), title, and description. While the initial description mentioned 'users to be viewed or edited,' the context strongly indicates this endpoint is for viewing or editing specific 'requests' or 'tasks' rather than user profiles themselves, focusing on the details of a requested item or change task.", "parameters": [{"in": "path", "name": "id", "schema": {"type": "string"}, "required": true}], "tags": ["Task"], "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The `id` path parameter is required and uniquely identifies the task to be retrieved. This `id` likely corresponds to an auto-generated Request ID or a task ID within the system. The operation is primarily for viewing task details, although related contexts mention 'Quick Edit' and 'Detailed Edit' functionalities for requests/changes that might apply to tasks via other endpoints. For general task editing, a separate PUT or PATCH endpoint would typically be used. This endpoint is crucial for displaying task-specific information, similar to how request summary cards provide brief overviews of requests. This endpoint facilitates detailed review of individual tasks involved in changes or requests."}, "llm_generated": {"business_context": {"user_personas": ["Administrator", "Agent", "End-user"], "primary_use_case": "To retrieve comprehensive details of a specific task or request within the system."}, "content_for_embedding": "This API endpoint retrieves comprehensive details of a specific task or request using its unique ID. It provides information such as task status (e.g., To-Do (Open)), title, and description, facilitating a detailed review of individual tasks involved in changes or requests. While this endpoint is primarily for viewing, the retrieved details are crucial for task management functionality, including contexts where tasks might be edited via other related endpoints. The `id` parameter is essential for uniquely identifying the task.", "semantic_keywords": ["Details retrieval", "Task Management", "View"], "ontology_classification": {"features": ["ticket_detail_view_(via_id)", "ticket_summary_card", "auto-generated_ticket_id", "ticket_history_view", "ticket_state_&_status_management"], "primary_module": "ticket_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/task/task/save-change-task/", "method": "POST", "details": {"operationId": "ux_sd_task_task_save_change_task_create", "description": "This API endpoint, `/ux/sd/task/task/save-change-task/`, enables users to save changes made to a task, particularly in the context of an IT Service Management (ITSM) or helpdesk system. It supports detailed editing of task attributes, differentiating from 'Quick Edit' options available for more granular changes. The endpoint is integral to managing the lifecycle of tasks associated with change requests, allowing for modifications to task details such as title, description, and status. It reflects the capabilities outlined in relevant user guides for editing and saving changes within a task or change management module.", "tags": ["Task"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this POST endpoint is a serializer for Documents, supporting a wide range of primitive and compound field types. Developers should refer to the provided list of recognized primitive fields (e.g., `StringField`, `IntField`, `BooleanField`, `DateTimeField`, `ObjectIdField`, `UUIDField`) and understand how compound fields like `ListField` and `DictField` are mapped. `ReferenceField` and `EmbeddedDocumentField` are handled with nested serializers depending on depth, and `GenericReferenceField` and `GenericEmbeddedDocumentField` are also supported. Developers should be aware of limitations with `FileField`, `ImageField`, and `BinaryField` which are noted as 'not well supported or untested'. This endpoint is crucial for functionalities such as 'Detailed Edit' for tasks, contrasting with 'Quick Edit' options typically used for status or priority changes."}, "llm_generated": {"business_context": {"user_personas": ["ITSM Administrator", "Helpdesk Agent", "Change Manager"], "primary_use_case": "This API allows users to save detailed changes to tasks within an IT Service Management (ITSM) or helpdesk system, specifically those associated with change requests."}, "content_for_embedding": "This API endpoint, `/ux/sd/task/task/save-change-task/`, is designed for saving comprehensive modifications to task attributes within an ITSM or helpdesk environment. It supports detailed editing of various task properties, such as title, description, and status, distinguishing itself from more limited \"Quick Edit\" functionalities. The endpoint is crucial for managing the lifecycle of tasks that are part of larger change requests. It accepts request bodies in JSON, x-www-form-urlencoded, and multipart/form-data formats, based on a `TaskDetails` schema. The API handles a wide array of primitive and compound field types, including nested serializers for complex data structures, though certain file-related fields have known limitations. This functionality is vital for \"Detailed Edit\" operations on tasks, contrasting with simpler status or priority changes.", "semantic_keywords": ["Task Management", "Change Management", "Detailed Edit"], "ontology_classification": {"features": ["task_management_within_change", "change_lifecycle_management", "quick_edit_functionality", "attachment_management"], "primary_module": "change_management", "confidence_score": 0.9}}}, {"path": "/ux/sd/task/task/save-release-task/", "method": "POST", "details": {"operationId": "ux_sd_task_task_save_release_task_create", "description": "This API endpoint, `/ux/sd/task/task/save-release-task/`, is a POST method designed to facilitate the saving of release task details. While the initial description suggests viewing or editing users, the context reveals its specific relevance to 'Release' tasks and operations within a broader system that involves managing requests, changes, problems, and releases. Based on the context, this endpoint likely supports actions related to 'editing' or 'saving' aspects of a release task, potentially aligning with 'Quick Edit' or 'Detailed Edit' functionalities as described for other request types. It handles various primitive and compound fields, including references and embedded documents, for the detailed specification of the release task data.", "tags": ["Task"], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}}, "security": [{"ApiKeyAuth": []}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TaskDetails"}}}, "description": ""}}, "summary": "", "additional_info": "The request body for this endpoint is designed to accept detailed document serialization. It recognizes a wide range of primitive field types, including String, URL, Email, numeric types (Int, Long, Float, Decimal), Boolean, various Date/Time types (DateTime, ComplexDateTimeField, DateField), ObjectId, Sequence, UUID, and GeoPoint/GeoJsonBase fields. Compound fields like `ListField` and `DictField` are supported, with nested serializer handling based on depth. `ReferenceField` and `EmbeddedDocumentField` are processed with nested serializers for non-zero depth, behaving similarly to `ForeignKey` and embedded documents. Generic fields such as `GenericReferenceField` and `GenericEmbeddedDocumentField` are also supported. Users should be aware that `FileField`, `ImageField`, and `BinaryField` are either not well-supported or untested, and other unspecified fields may not work as expected. This endpoint is crucial for persistence operations related to release tasks, implying it could be used after a user has performed edits or detail updates, similar to how 'Edit' actions are described for Requests and other entities in the user guide."}, "llm_generated": {"business_context": {"user_personas": ["Release Managers", "IT Operations", "System Administrators"], "primary_use_case": "To enable the saving and updating of detailed information for release tasks, supporting the lifecycle management of releases within the system."}, "content_for_embedding": "This API endpoint facilitates the saving and updating of detailed information for release tasks. It supports both quick and advanced editing functionalities, handling a wide range of data types including primitive fields, compound fields, references, and embedded documents. This is essential for persisting changes made to release tasks, ensuring comprehensive management and tracking of release details within the system.", "ontology_classification": {"features": ["quick_edit", "advanced_release_editing"], "primary_module": "release_management", "confidence_score": 0.95}, "semantic_keywords": ["Save", "Edit", "Release"]}}]